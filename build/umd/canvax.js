(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.Canvax = factory());
}(this, (function () { 'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};











var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var _$1 = {};
var breaker = {};
var ArrayProto = Array.prototype;
var ObjProto = Object.prototype;
var toString = ObjProto.toString;
var hasOwnProperty = ObjProto.hasOwnProperty;

var nativeForEach = ArrayProto.forEach;
var nativeFilter = ArrayProto.filter;
var nativeIndexOf = ArrayProto.indexOf;
var nativeIsArray = Array.isArray;
var nativeKeys = Object.keys;

_$1.values = function (obj) {
  var keys = _$1.keys(obj);
  var length = keys.length;
  var values = new Array(length);
  for (var i = 0; i < length; i++) {
    values[i] = obj[keys[i]];
  }
  return values;
};

_$1.keys = nativeKeys || function (obj) {
  if (obj !== Object(obj)) throw new TypeError('Invalid object');
  var keys = [];
  for (var key in obj) {
    if (_$1.has(obj, key)) keys.push(key);
  }return keys;
};

_$1.has = function (obj, key) {
  return hasOwnProperty.call(obj, key);
};

var each = _$1.each = _$1.forEach = function (obj, iterator, context) {
  if (obj == null) return;
  if (nativeForEach && obj.forEach === nativeForEach) {
    obj.forEach(iterator, context);
  } else if (obj.length === +obj.length) {
    for (var i = 0, length = obj.length; i < length; i++) {
      if (iterator.call(context, obj[i], i, obj) === breaker) return;
    }
  } else {
    var keys = _$1.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
    }
  }
};

_$1.compact = function (array) {
  return _$1.filter(array, _$1.identity);
};

_$1.filter = _$1.select = function (obj, iterator, context) {
  var results = [];
  if (obj == null) return results;
  if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
  each(obj, function (value, index, list) {
    if (iterator.call(context, value, index, list)) results.push(value);
  });
  return results;
};

each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function (name) {
  _$1['is' + name] = function (obj) {
    return toString.call(obj) == '[object ' + name + ']';
  };
});

{
  _$1.isFunction = function (obj) {
    return typeof obj === 'function';
  };
}

_$1.isFinite = function (obj) {
  return isFinite(obj) && !isNaN(parseFloat(obj));
};

_$1.isNaN = function (obj) {
  return _$1.isNumber(obj) && obj != +obj;
};

_$1.isBoolean = function (obj) {
  return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
};

_$1.isNull = function (obj) {
  return obj === null;
};

_$1.isEmpty = function (obj) {
  if (obj == null) return true;
  if (_$1.isArray(obj) || _$1.isString(obj)) return obj.length === 0;
  for (var key in obj) {
    if (_$1.has(obj, key)) return false;
  }return true;
};

_$1.isElement = function (obj) {
  return !!(obj && obj.nodeType === 1);
};

_$1.isArray = nativeIsArray || function (obj) {
  return toString.call(obj) == '[object Array]';
};

_$1.isObject = function (obj) {
  return obj === Object(obj);
};

_$1.identity = function (value) {
  return value;
};

_$1.indexOf = function (array, item, isSorted) {
  if (array == null) return -1;
  var i = 0,
      length = array.length;
  if (isSorted) {
    if (typeof isSorted == 'number') {
      i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
    } else {
      i = _$1.sortedIndex(array, item);
      return array[i] === item ? i : -1;
    }
  }
  if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
  for (; i < length; i++) {
    if (array[i] === item) return i;
  }return -1;
};

_$1.isWindow = function (obj) {
  return obj != null && obj == obj.window;
};
_$1.isPlainObject = function (obj) {
  // Because of IE, we also have to check the presence of the constructor property.
  // Make sure that DOM nodes and window objects don't pass through, as well
  if (!obj || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== "object" || obj.nodeType || _$1.isWindow(obj)) {
    return false;
  }
  try {
    // Not own constructor property must be Object
    if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
      return false;
    }
  } catch (e) {
    // IE8,9 Will throw exceptions on certain host objects #9897
    return false;
  }
  // Own properties are enumerated firstly, so to speed up,
  // if last one is own, then all properties are own.
  var key;
  for (key in obj) {}

  return key === undefined || hasOwn.call(obj, key);
};

/**
*
*如果是深度extend，第一个参数就设置为true
*/
_$1.extend = function () {
  var options,
      name,
      src,
      copy,
      copyIsArray,
      clone,
      target = arguments[0] || {},
      i = 1,
      length = arguments.length,
      deep = false;
  if (typeof target === "boolean") {
    deep = target;
    target = arguments[1] || {};
    i = 2;
  }
  if ((typeof target === 'undefined' ? 'undefined' : _typeof(target)) !== "object" && !_$1.isFunction(target)) {
    target = {};
  }
  if (length === i) {
    target = this;
    --i;
  }
  for (; i < length; i++) {
    if ((options = arguments[i]) != null) {
      for (name in options) {
        src = target[name];
        copy = options[name];
        if (target === copy) {
          continue;
        }
        if (deep && copy && (_$1.isPlainObject(copy) || (copyIsArray = _$1.isArray(copy)))) {
          if (copyIsArray) {
            copyIsArray = false;
            clone = src && _$1.isArray(src) ? src : [];
          } else {
            clone = src && _$1.isPlainObject(src) ? src : {};
          }
          target[name] = _$1.extend(deep, clone, copy);
        } else if (copy !== undefined) {
          target[name] = copy;
        }
      }
    }
  }
  return target;
};
_$1.clone = function (obj) {
  if (!_$1.isObject(obj)) return obj;
  return _$1.isArray(obj) ? obj.slice() : _$1.extend(true, {}, obj);
};

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com 
*/
var Utils = {
    mainFrameRate: 60, //默认主帧率
    now: 0,
    /*像素检测专用*/
    _pixelCtx: null,
    __emptyFunc: function __emptyFunc() {},
    //retina 屏幕优化
    _devicePixelRatio: window.devicePixelRatio || 1,
    _UID: 0, //该值为向上的自增长整数值
    getUID: function getUID() {
        return this._UID++;
    },
    createId: function createId(name) {
        if (!name) {
            debugger;
        }
        //if end with a digit, then append an undersBase before appending
        var charCode = name.charCodeAt(name.length - 1);
        if (charCode >= 48 && charCode <= 57) name += "_";
        return name + Utils.getUID();
    },
    canvasSupport: function canvasSupport() {
        return !!document.createElement('canvas').getContext;
    },
    createObject: function createObject(proto, constructor) {
        var newProto;
        var ObjectCreate = Object.create;
        if (ObjectCreate) {
            newProto = ObjectCreate(proto);
        } else {
            Utils.__emptyFunc.prototype = proto;
            newProto = new Utils.__emptyFunc();
        }
        newProto.constructor = constructor;
        return newProto;
    },
    creatClass: function creatClass(r, s, px) {
        if (!s || !r) {
            return r;
        }
        var sp = s.prototype,
            rp;
        // add prototype chain
        rp = Utils.createObject(sp, r);
        r.prototype = _$1.extend(rp, r.prototype);
        r.superclass = Utils.createObject(sp, s);
        // add prototype overrides
        if (px) {
            _$1.extend(rp, px);
        }
        return r;
    },
    initElement: function initElement(canvas) {
        if (window.FlashCanvas && FlashCanvas.initElement) {
            FlashCanvas.initElement(canvas);
        }
    },
    //做一次简单的opt参数校验，保证在用户不传opt的时候 或者传了opt但是里面没有context的时候报错
    checkOpt: function checkOpt(opt) {
        if (!opt) {
            return {
                context: {}
            };
        } else if (opt && !opt.context) {
            opt.context = {};
            return opt;
        } else {
            return opt;
        }
    },

    /**
     * 按照css的顺序，返回一个[上,右,下,左]
     */
    getCssOrderArr: function getCssOrderArr(r) {
        var r1;
        var r2;
        var r3;
        var r4;

        if (typeof r === 'number') {
            r1 = r2 = r3 = r4 = r;
        } else if (r instanceof Array) {
            if (r.length === 1) {
                r1 = r2 = r3 = r4 = r[0];
            } else if (r.length === 2) {
                r1 = r3 = r[0];
                r2 = r4 = r[1];
            } else if (r.length === 3) {
                r1 = r[0];
                r2 = r4 = r[1];
                r3 = r[2];
            } else {
                r1 = r[0];
                r2 = r[1];
                r3 = r[2];
                r4 = r[3];
            }
        } else {
            r1 = r2 = r3 = r4 = 0;
        }
        return [r1, r2, r3, r4];
    },

    isWebGLSupported: function isWebGLSupported() {
        var contextOptions = { stencil: true };
        try {
            if (!window.WebGLRenderingContext) //不存在直接return
                {
                    return false;
                }
            var canvas = document.createElement('canvas'),
                gl = canvas.getContext('webgl', contextOptions) || canvas.getContext('experimental-webgl', contextOptions);
            return !!(gl && gl.getContextAttributes().stencil); //还要确实检测是否支持webGL模式
        } catch (e) {
            return false;
        }
    }
};

/**
 * Point
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 */
var Point = function () {
    function Point() {
        var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        classCallCheck(this, Point);

        if (arguments.length == 1 && _typeof(arguments[0]) == 'object') {
            var arg = arguments[0];
            if ("x" in arg && "y" in arg) {
                this.x = arg.x * 1;
                this.y = arg.y * 1;
            } else {
                var i = 0;
                for (var p in arg) {
                    if (i == 0) {
                        this.x = arg[p] * 1;
                    } else {
                        this.y = arg[p] * 1;
                        break;
                    }
                    i++;
                }
            }
        } else {
            this.x = x * 1;
            this.y = y * 1;
        }
    }

    createClass(Point, [{
        key: "toArray",
        value: function toArray$$1() {
            return [this.x, this.y];
        }
    }]);
    return Point;
}();

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * canvas 上委托的事件管理
 */
var CanvaxEvent = function CanvaxEvent(evt, params) {

    var eventType = "CanvaxEvent";
    if (_$1.isString(evt)) {
        eventType = evt;
    }
    if (_$1.isObject(evt) && evt.type) {
        eventType = evt.type;
    }

    this.target = null;
    this.currentTarget = null;
    this.type = eventType;
    this.point = null;

    this._stopPropagation = false; //默认不阻止事件冒泡
};
CanvaxEvent.prototype = {
    stopPropagation: function stopPropagation() {
        this._stopPropagation = true;
    }
};

var settings = {
  //设备分辨率
  RESOLUTION: window.devicePixelRatio || 1,

  /**
   * Target frames per millisecond.
   *
   * @static
   * @memberof PIXI.settings
   * @type {number}
   * @default 0.06
   */
  TARGET_FPMS: 0.06,

  /**
   * If set to true WebGL will attempt make textures mimpaped by default.
   * Mipmapping will only succeed if the base texture uploaded has power of two dimensions.
   *
   * @static
   * @memberof PIXI.settings
   * @type {boolean}
   * @default true
   */
  MIPMAP_TEXTURES: true,

  /**
   * Default filter resolution.
   *
   * @static
   * @memberof PIXI.settings
   * @type {number}
   * @default 1
   */
  FILTER_RESOLUTION: 1,

  // TODO: maybe change to SPRITE.BATCH_SIZE: 2000
  // TODO: maybe add PARTICLE.BATCH_SIZE: 15000

  /**
   * The default sprite batch size.
   *
   * The default aims to balance desktop and mobile devices.
   *
   * @static
   * @memberof PIXI.settings
   * @type {number}
   * @default 4096
   */
  SPRITE_BATCH_SIZE: 4096,

  /**
   * The prefix that denotes a URL is for a retina asset.
   *
   * @static
   * @memberof PIXI.settings
   * @type {RegExp|string}
   * @example `@2x`
   * @default /@(.+)x/
   */
  RETINA_PREFIX: /@(.+)x/,

  /**
   * The default render options if none are supplied to {@link PIXI.WebGLRenderer}
   * or {@link PIXI.CanvasRenderer}.
   *
   * @static
   * @constant
   * @memberof PIXI.settings
   * @type {object}
   * @property {HTMLCanvasElement} view=null
   * @property {number} resolution=1
   * @property {boolean} antialias=false
   * @property {boolean} forceFXAA=false
   * @property {boolean} autoResize=false
   * @property {boolean} transparent=false
   * @property {number} backgroundColor=0x000000
   * @property {boolean} clearBeforeRender=true
   * @property {boolean} preserveDrawingBuffer=false
   * @property {boolean} roundPixels=false
   */
  RENDER_OPTIONS: {
    view: null,
    antialias: true,
    forceFXAA: false,
    autoResize: false,
    transparent: true,
    backgroundColor: 0x000000,
    clearBeforeRender: true,
    preserveDrawingBuffer: false,
    roundPixels: false
  },

  /**
   * Default transform type.
   *
   * @static
   * @memberof PIXI.settings
   * @type {PIXI.TRANSFORM_MODE}
   * @default PIXI.TRANSFORM_MODE.STATIC
   */
  TRANSFORM_MODE: 0,

  /**
   * Default Garbage Collection mode.
   *
   * @static
   * @memberof PIXI.settings
   * @type {PIXI.GC_MODES}
   * @default PIXI.GC_MODES.AUTO
   */
  GC_MODE: 0,

  /**
   * Default Garbage Collection max idle.
   *
   * @static
   * @memberof PIXI.settings
   * @type {number}
   * @default 3600
   */
  GC_MAX_IDLE: 60 * 60,

  /**
   * Default Garbage Collection maximum check count.
   *
   * @static
   * @memberof PIXI.settings
   * @type {number}
   * @default 600
   */
  GC_MAX_CHECK_COUNT: 60 * 10,

  /**
   * Default wrap modes that are supported by pixi.
   *
   * @static
   * @memberof PIXI.settings
   * @type {PIXI.WRAP_MODES}
   * @default PIXI.WRAP_MODES.CLAMP
   */
  WRAP_MODE: 0,

  /**
   * The scale modes that are supported by pixi.
   *
   * @static
   * @memberof PIXI.settings
   * @type {PIXI.SCALE_MODES}
   * @default PIXI.SCALE_MODES.LINEAR
   */
  SCALE_MODE: 0,

  /**
   * Default specify float precision in shaders.
   *
   * @static
   * @memberof PIXI.settings
   * @type {PIXI.PRECISION}
   * @default PIXI.PRECISION.MEDIUM
   */
  PRECISION: 'mediump'

};

var addOrRmoveEventHand = function addOrRmoveEventHand(domHand, ieHand) {
    if (document[domHand]) {
        var _ret = function () {
            var eventDomFn = function eventDomFn(el, type, fn) {
                if (el.length) {
                    for (var i = 0; i < el.length; i++) {
                        eventDomFn(el[i], type, fn);
                    }
                } else {
                    el[domHand](type, fn, false);
                }
            };

            
            return {
                v: eventDomFn
            };
        }();

        if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object") return _ret.v;
    } else {
        var _ret2 = function () {
            var eventFn = function eventFn(el, type, fn) {
                if (el.length) {
                    for (var i = 0; i < el.length; i++) {
                        eventFn(el[i], type, fn);
                    }
                } else {
                    el[ieHand]("on" + type, function () {
                        return fn.call(el, window.event);
                    });
                }
            };

            
            return {
                v: eventFn
            };
        }();

        if ((typeof _ret2 === "undefined" ? "undefined" : _typeof(_ret2)) === "object") return _ret2.v;
    }
};

var $ = {
    // dom操作相关代码
    query: function query(el) {
        if (_$1.isString(el)) {
            return document.getElementById(el);
        }
        if (el.nodeType == 1) {
            //则为一个element本身
            return el;
        }
        if (el.length) {
            return el[0];
        }
        return null;
    },
    offset: function offset(el) {
        var box = el.getBoundingClientRect(),
            doc = el.ownerDocument,
            body = doc.body,
            docElem = doc.documentElement,


        // for ie  
        clientTop = docElem.clientTop || body.clientTop || 0,
            clientLeft = docElem.clientLeft || body.clientLeft || 0,


        // In Internet Explorer 7 getBoundingClientRect property is treated as physical, 
        // while others are logical. Make all logical, like in IE8. 
        zoom = 1;
        if (body.getBoundingClientRect) {
            var bound = body.getBoundingClientRect();
            zoom = (bound.right - bound.left) / body.clientWidth;
        }
        if (zoom > 1) {
            clientTop = 0;
            clientLeft = 0;
        }
        var top = box.top / zoom + (window.pageYOffset || docElem && docElem.scrollTop / zoom || body.scrollTop / zoom) - clientTop,
            left = box.left / zoom + (window.pageXOffset || docElem && docElem.scrollLeft / zoom || body.scrollLeft / zoom) - clientLeft;

        return {
            top: top,
            left: left
        };
    },
    addEvent: addOrRmoveEventHand("addEventListener", "attachEvent"),
    removeEvent: addOrRmoveEventHand("removeEventListener", "detachEvent"),
    pageX: function pageX(e) {
        if (e.pageX) return e.pageX;else if (e.clientX) return e.clientX + (document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft);else return null;
    },
    pageY: function pageY(e) {
        if (e.pageY) return e.pageY;else if (e.clientY) return e.clientY + (document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop);else return null;
    },
    /**
     * 创建dom
     * @param {string} id dom id 待用
     * @param {string} type : dom type， such as canvas, div etc.
     */
    createCanvas: function createCanvas(_width, _height, id) {
        var canvas = document.createElement("canvas");
        canvas.style.position = 'absolute';
        canvas.style.width = _width + 'px';
        canvas.style.height = _height + 'px';
        canvas.style.left = 0;
        canvas.style.top = 0;
        canvas.setAttribute('width', _width * settings.RESOLUTION);
        canvas.setAttribute('height', _height * settings.RESOLUTION);
        canvas.setAttribute('id', id);
        return canvas;
    },
    createView: function createView(_width, _height, id) {
        var view = document.createElement("div");
        view.className = "canvax-view";
        view.style.cssText += "position:relative;width:" + _width + "px;height:" + _height + "px;";

        var stage_c = document.createElement("div");
        view.style.cssText += "position:absolute;width:" + _width + "px;height:" + _height + "px;";

        //用来存放一些dom元素
        var dom_c = document.createElement("div");
        view.style.cssText += "position:absolute;width:" + _width + "px;height:" + _height + "px;";

        view.appendChild(stage_c);
        view.appendChild(dom_c);

        return {
            view: view,
            stage_c: stage_c,
            dom_c: dom_c
        };
    }
    //dom相关代码结束
};

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 */
var _mouseEventTypes = ["click", "dblclick", "mousedown", "mousemove", "mouseup", "mouseout"];
var _hammerEventTypes = ["pan", "panstart", "panmove", "panend", "pancancel", "panleft", "panright", "panup", "pandown", "press", "pressup", "swipe", "swipeleft", "swiperight", "swipeup", "swipedown", "tap"];

var EventHandler = function EventHandler(canvax, opt) {
    this.canvax = canvax;

    this.curPoints = [new Point(0, 0)]; //X,Y 的 point 集合, 在touch下面则为 touch的集合，只是这个touch被添加了对应的x，y
    //当前激活的点对应的obj，在touch下可以是个数组,和上面的 curPoints 对应
    this.curPointsTarget = [];

    this._touching = false;
    //正在拖动，前提是_touching=true
    this._draging = false;

    //当前的鼠标状态
    this._cursor = "default";

    this.target = this.canvax.view;
    this.types = [];

    //mouse体统中不需要配置drag,touch中会用到第三方的touch库，每个库的事件名称可能不一样，
    //就要这里配置，默认实现的是hammerjs的,所以默认可以在项目里引入hammerjs http://hammerjs.github.io/
    this.drag = {
        start: "panstart",
        move: "panmove",
        end: "panend"
    };

    _$1.extend(true, this, opt);
};

//这样的好处是document.compareDocumentPosition只会在定义的时候执行一次。
var contains = document.compareDocumentPosition ? function (parent, child) {
    if (!child) {
        return false;
    }
    return !!(parent.compareDocumentPosition(child) & 16);
} : function (parent, child) {
    if (!child) {
        return false;
    }
    return child !== child && (parent.contains ? parent.contains(child) : true);
};

EventHandler.prototype = {
    init: function init() {

        //依次添加上浏览器的自带事件侦听
        var me = this;
        if (me.target.nodeType == undefined) {
            //如果target.nodeType没有的话， 说明该target为一个jQuery对象 or kissy 对象or hammer对象
            //即为第三方库，那么就要对接第三方库的事件系统。默认实现hammer的大部分事件系统
            if (!me.types || me.types.length == 0) {
                me.types = _hammerEventTypes;
            }
        } else if (me.target.nodeType == 1) {
            me.types = _mouseEventTypes;
        }

        _$1.each(me.types, function (type) {
            //不再关心浏览器环境是否 'ontouchstart' in window 
            //而是直接只管传给事件模块的是一个原生dom还是 jq对象 or hammer对象等
            if (me.target.nodeType == 1) {
                $.addEvent(me.target, type, function (e) {
                    me.__mouseHandler(e);
                });
            } else {
                me.target.on(type, function (e) {
                    me.__libHandler(e);
                });
            }
        });
    },
    /*
    * 原生事件系统------------------------------------------------begin
    * 鼠标事件处理函数
    **/
    __mouseHandler: function __mouseHandler(e) {
        var me = this;
        var root = me.canvax;

        root.updateViewOffset();

        me.curPoints = [new Point($.pageX(e) - root.viewOffset.left, $.pageY(e) - root.viewOffset.top)];

        //理论上来说，这里拿到point了后，就要计算这个point对应的target来push到curPointsTarget里，
        //但是因为在drag的时候其实是可以不用计算对应target的。
        //所以放在了下面的me.__getcurPointsTarget( e , curMousePoint );常规mousemove中执行

        var curMousePoint = me.curPoints[0];
        var curMouseTarget = me.curPointsTarget[0];

        //模拟drag,mouseover,mouseout 部分代码 begin-------------------------------------------------

        //mousedown的时候 如果 curMouseTarget.dragEnabled 为true。就要开始准备drag了
        if (e.type == "mousedown") {
            //如果curTarget 的数组为空或者第一个为false ，，，
            if (!curMouseTarget) {
                var obj = root.getObjectsUnderPoint(curMousePoint, 1)[0];
                if (obj) {
                    me.curPointsTarget = [obj];
                }
            }
            curMouseTarget = me.curPointsTarget[0];
            if (curMouseTarget && curMouseTarget.dragEnabled) {
                //鼠标事件已经摸到了一个
                me._touching = true;
            }
        }

        if (e.type == "mouseup" || e.type == "mouseout" && !contains(root.view, e.toElement || e.relatedTarget)) {
            if (me._draging == true) {
                //说明刚刚在拖动
                me._dragEnd(e, curMouseTarget, 0);
                curMouseTarget.fire("dragend");
            }
            me._draging = false;
            me._touching = false;
        }

        if (e.type == "mouseout") {
            if (!contains(root.view, e.toElement || e.relatedTarget)) {
                me.__getcurPointsTarget(e, curMousePoint);
            }
        } else if (e.type == "mousemove") {
            //|| e.type == "mousedown" ){
            //拖动过程中就不在做其他的mouseover检测，drag优先
            if (me._touching && e.type == "mousemove" && curMouseTarget) {
                //说明正在拖动啊
                if (!me._draging) {
                    //begin drag
                    curMouseTarget.fire("dragstart");
                    //先把本尊给隐藏了
                    curMouseTarget.context.globalAlpha = 0;
                    //然后克隆一个副本到activeStage

                    var cloneObject = me._clone2hoverStage(curMouseTarget, 0);
                    cloneObject.context.globalAlpha = curMouseTarget._globalAlpha;
                } else {
                    //drag move ing
                    me._dragMoveHander(e, curMouseTarget, 0);
                }
                me._draging = true;
            } else {
                //常规mousemove检测
                //move事件中，需要不停的搜索target，这个开销挺大，
                //后续可以优化，加上和帧率相当的延迟处理
                me.__getcurPointsTarget(e, curMousePoint);
            }
        } else {
            //其他的事件就直接在target上面派发事件
            var child = curMouseTarget;
            if (!child) {
                child = root;
            }
            me.__dispatchEventInChilds(e, [child]);
            me._cursorHander(child);
        }

        if (root.preventDefault) {
            //阻止默认浏览器动作(W3C) 
            if (e && e.preventDefault) {
                e.preventDefault();
            } else {
                window.event.returnValue = false;
            }
        }
    },
    __getcurPointsTarget: function __getcurPointsTarget(e, point) {
        var me = this;
        var root = me.canvax;
        var oldObj = me.curPointsTarget[0];

        if (oldObj && !oldObj.context) {
            oldObj = null;
        }

        var e = new CanvaxEvent(e);

        if (e.type == "mousemove" && oldObj && oldObj._hoverClass && oldObj.pointChkPriority && oldObj.getChildInPoint(point)) {
            //小优化,鼠标move的时候。计算频率太大，所以。做此优化
            //如果有target存在，而且当前元素正在hoverStage中，而且当前鼠标还在target内,就没必要取检测整个displayList了
            //开发派发常规mousemove事件
            e.target = e.currentTarget = oldObj;
            e.point = oldObj.globalToLocal(point);
            oldObj.dispatchEvent(e);
            return;
        }
        var obj = root.getObjectsUnderPoint(point, 1)[0];

        if (oldObj && oldObj != obj || e.type == "mouseout") {
            if (oldObj && oldObj.context) {
                me.curPointsTarget[0] = null;
                e.type = "mouseout";
                e.toTarget = obj;
                e.target = e.currentTarget = oldObj;
                e.point = oldObj.globalToLocal(point);
                oldObj.dispatchEvent(e);
            }
        }

        if (obj && oldObj != obj) {
            //&& obj._hoverable 已经 干掉了
            me.curPointsTarget[0] = obj;
            e.type = "mouseover";
            e.fromTarget = oldObj;
            e.target = e.currentTarget = obj;
            e.point = obj.globalToLocal(point);
            obj.dispatchEvent(e);
        }

        if (e.type == "mousemove" && obj) {
            e.target = e.currentTarget = oldObj;
            e.point = oldObj.globalToLocal(point);
            oldObj.dispatchEvent(e);
        }
        me._cursorHander(obj, oldObj);
    },
    _cursorHander: function _cursorHander(obj, oldObj) {
        if (!obj && !oldObj) {
            this._setCursor("default");
        }
        if (obj && oldObj != obj && obj.context) {
            this._setCursor(obj.context.cursor);
        }
    },
    _setCursor: function _setCursor(cursor) {
        if (this._cursor == cursor) {
            //如果两次要设置的鼠标状态是一样的
            return;
        }
        this.canvax.view.style.cursor = cursor;
        this._cursor = cursor;
    },
    /*
    * 原生事件系统------------------------------------------------end
    */

    /*
     *第三方库的事件系统------------------------------------------------begin
     *触屏事件处理函数
     * */
    __libHandler: function __libHandler(e) {
        var me = this;
        var root = me.canvax;
        root.updateViewOffset();
        // touch 下的 curPointsTarget 从touches中来
        //获取canvax坐标系统里面的坐标
        me.curPoints = me.__getCanvaxPointInTouchs(e);
        if (!me._draging) {
            //如果在draging的话，target已经是选中了的，可以不用 检测了
            me.curPointsTarget = me.__getChildInTouchs(me.curPoints);
        }
        if (me.curPointsTarget.length > 0) {
            //drag开始
            if (e.type == me.drag.start) {
                //dragstart的时候touch已经准备好了target， curPointsTarget 里面只要有一个是有效的
                //就认为drags开始
                _$1.each(me.curPointsTarget, function (child, i) {
                    if (child && child.dragEnabled) {
                        //只要有一个元素就认为正在准备drag了
                        me._draging = true;
                        //然后克隆一个副本到activeStage
                        me._clone2hoverStage(child, i);
                        //先把本尊给隐藏了
                        child.context.globalAlpha = 0;

                        child.fire("dragstart");

                        return false;
                    }
                });
            }

            //dragIng
            if (e.type == me.drag.move) {
                if (me._draging) {
                    _$1.each(me.curPointsTarget, function (child, i) {
                        if (child && child.dragEnabled) {
                            me._dragMoveHander(e, child, i);
                        }
                    });
                }
            }

            //drag结束
            if (e.type == me.drag.end) {
                if (me._draging) {
                    _$1.each(me.curPointsTarget, function (child, i) {
                        if (child && child.dragEnabled) {
                            me._dragEnd(e, child, 0);
                            child.fire("dragend");
                        }
                    });
                    me._draging = false;
                }
            }
            me.__dispatchEventInChilds(e, me.curPointsTarget);
        } else {
            //如果当前没有一个target，就把事件派发到canvax上面
            me.__dispatchEventInChilds(e, [root]);
        }
    },
    //从touchs中获取到对应touch , 在上面添加上canvax坐标系统的x，y
    __getCanvaxPointInTouchs: function __getCanvaxPointInTouchs(e) {
        var me = this;
        var root = me.canvax;
        var curTouchs = [];
        _$1.each(e.point, function (touch) {
            curTouchs.push({
                x: CanvaxEvent.pageX(touch) - root.viewOffset.left,
                y: CanvaxEvent.pageY(touch) - root.viewOffset.top
            });
        });
        return curTouchs;
    },
    __getChildInTouchs: function __getChildInTouchs(touchs) {
        var me = this;
        var root = me.canvax;
        var touchesTarget = [];
        _$1.each(touchs, function (touch) {
            touchesTarget.push(root.getObjectsUnderPoint(touch, 1)[0]);
        });
        return touchesTarget;
    },
    /*
    *第三方库的事件系统------------------------------------------------begin
    */

    /*
     *@param {array} childs 
     * */
    __dispatchEventInChilds: function __dispatchEventInChilds(e, childs) {
        if (!childs && !("length" in childs)) {
            return false;
        }
        var me = this;
        var hasChild = false;
        _$1.each(childs, function (child, i) {
            if (child) {
                hasChild = true;
                var ce = new CanvaxEvent(e);
                ce.target = ce.currentTarget = child || this;
                ce.stagePoint = me.curPoints[i];
                ce.point = ce.target.globalToLocal(ce.stagePoint);
                child.dispatchEvent(ce);
            }
        });
        return hasChild;
    },
    //克隆一个元素到hover stage中去
    _clone2hoverStage: function _clone2hoverStage(target, i) {
        var me = this;
        var root = me.canvax;
        var _dragDuplicate = root._bufferStage.getChildById(target.id);
        if (!_dragDuplicate) {
            _dragDuplicate = target.clone(true);
            _dragDuplicate._transform = target.getConcatenatedMatrix();

            /**
             *TODO: 因为后续可能会有手动添加的 元素到_bufferStage 里面来
             *比如tips
             *这类手动添加进来的肯定是因为需要显示在最外层的。在hover元素之上。
             *所有自动添加的hover元素都默认添加在_bufferStage的最底层
             **/
            root._bufferStage.addChildAt(_dragDuplicate, 0);
        }
        _dragDuplicate.context.globalAlpha = target._globalAlpha;
        target._dragPoint = target.globalToLocal(me.curPoints[i]);
        return _dragDuplicate;
    },
    //drag 中 的处理函数
    _dragMoveHander: function _dragMoveHander(e, target, i) {
        var me = this;
        var root = me.canvax;
        var _point = target.globalToLocal(me.curPoints[i]);

        //要对应的修改本尊的位置，但是要告诉引擎不要watch这个时候的变化
        target._notWatch = true;
        var _moveStage = target.moveing;
        target.moveing = true;
        target.context.x += _point.x - target._dragPoint.x;
        target.context.y += _point.y - target._dragPoint.y;
        target.fire("dragmove");
        target.moveing = _moveStage;
        target._notWatch = false;
        //同步完毕本尊的位置

        //这里只能直接修改_transform 。 不能用下面的修改x，y的方式。
        var _dragDuplicate = root._bufferStage.getChildById(target.id);
        _dragDuplicate._transform = target.getConcatenatedMatrix();
        //以为直接修改的_transform不会出发心跳上报， 渲染引擎不制动这个stage需要绘制。
        //所以要手动出发心跳包
        _dragDuplicate.heartBeat();
    },
    //drag结束的处理函数
    _dragEnd: function _dragEnd(e, target, i) {
        var me = this;
        var root = me.canvax;

        //_dragDuplicate 复制在_bufferStage 中的副本
        var _dragDuplicate = root._bufferStage.getChildById(target.id);
        _dragDuplicate.destroy();

        target.context.globalAlpha = target._globalAlpha;
    }
};

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 事件管理类
 */
/**
 * 构造函数.
 * @name EventDispatcher
 * @class EventDispatcher类是可调度事件的类的基类，它允许显示列表上的任何对象都是一个事件目标。
 */
var EventManager = function EventManager() {
    //事件映射表，格式为：{type1:[listener1, listener2], type2:[listener3, listener4]}
    this._eventMap = {};
};

EventManager.prototype = {
    /*
     * 注册事件侦听器对象，以使侦听器能够接收事件通知。
     */
    _addEventListener: function _addEventListener(type, listener) {

        if (typeof listener != "function") {
            //listener必须是个function呐亲
            return false;
        }
        var addResult = true;
        var self = this;
        _$1.each(type.split(" "), function (type) {
            var map = self._eventMap[type];
            if (!map) {
                map = self._eventMap[type] = [];
                map.push(listener);
                self._eventEnabled = true;
                return true;
            }

            if (_$1.indexOf(map, listener) == -1) {
                map.push(listener);
                self._eventEnabled = true;
                return true;
            }

            addResult = false;
        });
        return addResult;
    },
    /**
     * 删除事件侦听器。
     */
    _removeEventListener: function _removeEventListener(type, listener) {
        if (arguments.length == 1) return this.removeEventListenerByType(type);

        var map = this._eventMap[type];
        if (!map) {
            return false;
        }

        for (var i = 0; i < map.length; i++) {
            var li = map[i];
            if (li === listener) {
                map.splice(i, 1);
                if (map.length == 0) {
                    delete this._eventMap[type];
                    //如果这个如果这个时候child没有任何事件侦听
                    if (_$1.isEmpty(this._eventMap)) {
                        //那么该元素不再接受事件的检测
                        this._eventEnabled = false;
                    }
                }
                return true;
            }
        }

        return false;
    },
    /**
     * 删除指定类型的所有事件侦听器。
     */
    _removeEventListenerByType: function _removeEventListenerByType(type) {
        var map = this._eventMap[type];
        if (!map) {
            delete this._eventMap[type];

            //如果这个如果这个时候child没有任何事件侦听
            if (_$1.isEmpty(this._eventMap)) {
                //那么该元素不再接受事件的检测
                this._eventEnabled = false;
            }

            return true;
        }
        return false;
    },
    /**
     * 删除所有事件侦听器。
     */
    _removeAllEventListeners: function _removeAllEventListeners() {
        this._eventMap = {};
        this._eventEnabled = false;
    },
    /**
    * 派发事件，调用事件侦听器。
    */
    _dispatchEvent: function _dispatchEvent(e) {
        var map = this._eventMap[e.type];

        if (map) {
            if (!e.target) e.target = this;
            map = map.slice();

            for (var i = 0; i < map.length; i++) {
                var listener = map[i];
                if (typeof listener == "function") {
                    listener.call(this, e);
                }
            }
        }

        if (!e._stopPropagation) {
            //向上冒泡
            if (this.parent) {
                e.currentTarget = this.parent;
                this.parent._dispatchEvent(e);
            }
        }
        return true;
    },
    /**
       * 检查是否为指定事件类型注册了任何侦听器。
       */
    _hasEventListener: function _hasEventListener(type) {
        var map = this._eventMap[type];
        return map != null && map.length > 0;
    }
};

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 事件派发类
 */
var EventDispatcher = function EventDispatcher() {
    EventDispatcher.superclass.constructor.call(this, name);
};

Utils.creatClass(EventDispatcher, EventManager, {
    on: function on(type, listener) {
        this._addEventListener(type, listener);
        return this;
    },
    addEventListener: function addEventListener(type, listener) {
        this._addEventListener(type, listener);
        return this;
    },
    un: function un(type, listener) {
        this._removeEventListener(type, listener);
        return this;
    },
    removeEventListener: function removeEventListener(type, listener) {
        this._removeEventListener(type, listener);
        return this;
    },
    removeEventListenerByType: function removeEventListenerByType(type) {
        this._removeEventListenerByType(type);
        return this;
    },
    removeAllEventListeners: function removeAllEventListeners() {
        this._removeAllEventListeners();
        return this;
    },

    //params 要传给evt的eventhandler处理函数的参数，会被merge到Canvax event中
    fire: function fire(eventType, params) {
        var e = new CanvaxEvent(eventType);

        if (params) {
            for (var p in params) {
                if (p in e) {
                    //params中的数据不能覆盖event属性
                    console.log(p + "属性不能覆盖CanvaxEvent属性");
                } else {
                    e[p] = params[p];
                }
            }
        }

        var me = this;
        _$1.each(eventType.split(" "), function (eType) {
            e.currentTarget = me;
            me.dispatchEvent(e);
        });
        return this;
    },
    dispatchEvent: function dispatchEvent(event) {
        //this instanceof DisplayObjectContainer ==> this.children
        //TODO: 这里import DisplayObjectContainer 的话，在displayObject里面的import EventDispatcher from "../event/EventDispatcher";
        //会得到一个undefined，感觉是成了一个循环依赖的问题，所以这里换用简单的判断来判断自己是一个容易，拥有children
        if (this.children && event.point) {
            var target = this.getObjectsUnderPoint(event.point, 1)[0];
            if (target) {
                target.dispatchEvent(event);
            }
            return;
        }

        if (this.context && event.type == "mouseover") {
            //记录dispatchEvent之前的心跳
            var preHeartBeat = this._heartBeatNum;
            var pregAlpha = this.context.globalAlpha;
            this._dispatchEvent(event);
            if (preHeartBeat != this._heartBeatNum) {
                this._hoverClass = true;
                if (this.hoverClone) {
                    var canvax = this.getStage().parent;
                    //然后clone一份obj，添加到_bufferStage 中
                    var activShape = this.clone(true);
                    activShape._transform = this.getConcatenatedMatrix();
                    canvax._bufferStage.addChildAt(activShape, 0);
                    //然后把自己隐藏了
                    this._globalAlpha = pregAlpha;
                    this.context.globalAlpha = 0;
                }
            }
            return;
        }

        this._dispatchEvent(event);

        if (this.context && event.type == "mouseout") {
            if (this._hoverClass) {
                //说明刚刚over的时候有添加样式
                var canvax = this.getStage().parent;
                this._hoverClass = false;

                canvax._bufferStage.removeChildById(this.id);

                if (this._globalAlpha) {
                    this.context.globalAlpha = this._globalAlpha;
                    delete this._globalAlpha;
                }
            }
        }

        return this;
    },
    hasEvent: function hasEvent(type) {
        return this._hasEventListener(type);
    },
    hasEventListener: function hasEventListener(type) {
        return this._hasEventListener(type);
    },
    hover: function hover(overFun, outFun) {
        this.on("mouseover", overFun);
        this.on("mouseout", outFun);
        return this;
    },
    once: function once(type, listener) {
        var me = this;
        var onceHandle = function onceHandle() {
            listener.apply(me, arguments);
            this.un(type, onceHandle);
        };
        this.on(type, onceHandle);
        return this;
    }
});

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * Matrix 矩阵库 用于整个系统的几何变换计算
 * code from http://evanw.github.io/lightgl.js/docs/matrix.html
 */

var Matrix = function Matrix(a, b, c, d, tx, ty) {
    this.a = a != undefined ? a : 1;
    this.b = b != undefined ? b : 0;
    this.c = c != undefined ? c : 0;
    this.d = d != undefined ? d : 1;
    this.tx = tx != undefined ? tx : 0;
    this.ty = ty != undefined ? ty : 0;
};

Matrix.prototype = {
    concat: function concat(mtx) {
        var a = this.a;
        var c = this.c;
        var tx = this.tx;

        this.a = a * mtx.a + this.b * mtx.c;
        this.b = a * mtx.b + this.b * mtx.d;
        this.c = c * mtx.a + this.d * mtx.c;
        this.d = c * mtx.b + this.d * mtx.d;
        this.tx = tx * mtx.a + this.ty * mtx.c + mtx.tx;
        this.ty = tx * mtx.b + this.ty * mtx.d + mtx.ty;
        return this;
    },
    concatTransform: function concatTransform(x, y, scaleX, scaleY, rotation) {
        var cos = 1;
        var sin = 0;
        if (rotation % 360) {
            var r = rotation * Math.PI / 180;
            cos = Math.cos(r);
            sin = Math.sin(r);
        }

        this.concat(new Matrix(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y));
        return this;
    },
    rotate: function rotate(angle) {
        //目前已经提供对顺时针逆时针两个方向旋转的支持
        var cos = Math.cos(angle);
        var sin = Math.sin(angle);

        var a = this.a;
        var c = this.c;
        var tx = this.tx;

        if (angle > 0) {
            this.a = a * cos - this.b * sin;
            this.b = a * sin + this.b * cos;
            this.c = c * cos - this.d * sin;
            this.d = c * sin + this.d * cos;
            this.tx = tx * cos - this.ty * sin;
            this.ty = tx * sin + this.ty * cos;
        } else {
            var st = Math.sin(Math.abs(angle));
            var ct = Math.cos(Math.abs(angle));

            this.a = a * ct + this.b * st;
            this.b = -a * st + this.b * ct;
            this.c = c * ct + this.d * st;
            this.d = -c * st + ct * this.d;
            this.tx = ct * tx + st * this.ty;
            this.ty = ct * this.ty - st * tx;
        }
        return this;
    },
    scale: function scale(sx, sy) {
        this.a *= sx;
        this.d *= sy;
        this.tx *= sx;
        this.ty *= sy;
        return this;
    },
    translate: function translate(dx, dy) {
        this.tx += dx;
        this.ty += dy;
        return this;
    },
    identity: function identity() {
        //初始化
        this.a = this.d = 1;
        this.b = this.c = this.tx = this.ty = 0;
        return this;
    },
    invert: function invert() {
        //逆向矩阵
        var a = this.a;
        var b = this.b;
        var c = this.c;
        var d = this.d;
        var tx = this.tx;
        var i = a * d - b * c;

        this.a = d / i;
        this.b = -b / i;
        this.c = -c / i;
        this.d = a / i;
        this.tx = (c * this.ty - d * tx) / i;
        this.ty = -(a * this.ty - b * tx) / i;
        return this;
    },
    clone: function clone() {
        return new Matrix(this.a, this.b, this.c, this.d, this.tx, this.ty);
    },
    toArray: function toArray(transpose, out) {
        if (arguments.length == 0) {
            //canvas2d 中不会有任何的参数传入
            return [this.a, this.b, this.c, this.d, this.tx, this.ty];
        }

        //webgl的glsl需要用的时候，需要传入transpose 来转换为一个3*3完整矩阵
        if (!this.array) {
            this.array = new Float32Array(9);
        }

        var array = out || this.array;

        if (transpose) {
            array[0] = this.a;
            array[1] = this.b;
            array[2] = 0;
            array[3] = this.c;
            array[4] = this.d;
            array[5] = 0;
            array[6] = this.tx;
            array[7] = this.ty;
            array[8] = 1;
        } else {
            array[0] = this.a;
            array[1] = this.c;
            array[2] = this.tx;
            array[3] = this.b;
            array[4] = this.d;
            array[5] = this.ty;
            array[6] = 0;
            array[7] = 0;
            array[8] = 1;
        }

        return array;
    },
    /**
     * 矩阵左乘向量
     */
    mulVector: function mulVector(v) {
        var aa = this.a,
            ac = this.c,
            atx = this.tx;
        var ab = this.b,
            ad = this.d,
            aty = this.ty;

        var out = [0, 0];
        out[0] = v[0] * aa + v[1] * ac + atx;
        out[1] = v[0] * ab + v[1] * ad + aty;

        return out;
    }
};

/**
 * Tween.js - Licensed under the MIT license
 * https://github.com/tweenjs/tween.js
 * ----------------------------------------------
 *
 * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.
 * Thank you all, you're awesome!
 */

var TWEEN = TWEEN || function () {

	var _tweens = [];

	return {

		getAll: function getAll() {

			return _tweens;
		},

		removeAll: function removeAll() {

			_tweens = [];
		},

		add: function add(tween) {

			_tweens.push(tween);
		},

		remove: function remove(tween) {

			var i = _$1.indexOf(_tweens, tween); //_tweens.indexOf(tween);

			if (i !== -1) {
				_tweens.splice(i, 1);
			}
		},

		update: function update(time, preserve) {

			if (_tweens.length === 0) {
				return false;
			}

			var i = 0;

			time = time !== undefined ? time : TWEEN.now();

			while (i < _tweens.length) {

				/* old 
    if (_tweens[i].update(time) || preserve) {
    i++;
    } else {
    _tweens.splice(i, 1);
    }
    */

				//new code
				//in real world, tween.update has chance to remove itself, so we have to handle this situation.
				//in certain cases, onUpdateCallback will remove instances in _tweens, which make _tweens.splice(i, 1) fail
				//@litao.lt@alibaba-inc.com
				var _t = _tweens[i];
				var _updateRes = _t.update(time);

				if (!_tweens[i]) {
					break;
				}
				if (_t === _tweens[i]) {
					if (_updateRes || preserve) {
						i++;
					} else {
						_tweens.splice(i, 1);
					}
				}
			}

			return true;
		}
	};
}();

// Include a performance.now polyfill.
// In node.js, use process.hrtime.
if (typeof window === 'undefined' && typeof process !== 'undefined') {
	TWEEN.now = function () {
		var time = process.hrtime();

		// Convert [seconds, nanoseconds] to milliseconds.
		return time[0] * 1000 + time[1] / 1000000;
	};
}
// In a browser, use window.performance.now if it is available.
else if (typeof window !== 'undefined' && window.performance !== undefined && window.performance.now !== undefined) {
		// This must be bound, because directly assigning this function
		// leads to an invocation exception in Chrome.
		TWEEN.now = window.performance.now.bind(window.performance);
	}
	// Use Date.now if it is available.
	else if (Date.now !== undefined) {
			TWEEN.now = Date.now;
		}
		// Otherwise, use 'new Date().getTime()'.
		else {
				TWEEN.now = function () {
					return new Date().getTime();
				};
			}

TWEEN.Tween = function (object) {

	var _object = object;
	var _valuesStart = {};
	var _valuesEnd = {};
	var _valuesStartRepeat = {};
	var _duration = 1000;
	var _repeat = 0;
	var _repeatDelayTime;
	var _yoyo = false;
	var _isPlaying = false;
	var _reversed = false;
	var _delayTime = 0;
	var _startTime = null;
	var _easingFunction = TWEEN.Easing.Linear.None;
	var _interpolationFunction = TWEEN.Interpolation.Linear;
	var _chainedTweens = [];
	var _onStartCallback = null;
	var _onStartCallbackFired = false;
	var _onUpdateCallback = null;
	var _onCompleteCallback = null;
	var _onStopCallback = null;

	this.to = function (properties, duration) {

		_valuesEnd = properties;

		if (duration !== undefined) {
			_duration = duration;
		}

		return this;
	};

	this.start = function (time) {

		TWEEN.add(this);

		_isPlaying = true;

		_onStartCallbackFired = false;

		_startTime = time !== undefined ? time : TWEEN.now();
		_startTime += _delayTime;

		for (var property in _valuesEnd) {

			// Check if an Array was provided as property value
			if (_valuesEnd[property] instanceof Array) {

				if (_valuesEnd[property].length === 0) {
					continue;
				}

				// Create a local copy of the Array with the start value at the front
				_valuesEnd[property] = [_object[property]].concat(_valuesEnd[property]);
			}

			// If `to()` specifies a property that doesn't exist in the source object,
			// we should not set that property in the object
			if (_object[property] === undefined) {
				continue;
			}

			// Save the starting value.
			_valuesStart[property] = _object[property];

			if (_valuesStart[property] instanceof Array === false) {
				_valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings
			}

			_valuesStartRepeat[property] = _valuesStart[property] || 0;
		}

		return this;
	};

	this.stop = function () {

		if (!_isPlaying) {
			return this;
		}

		TWEEN.remove(this);
		_isPlaying = false;

		if (_onStopCallback !== null) {
			_onStopCallback.call(_object, _object);
		}

		this.stopChainedTweens();
		return this;
	};

	this.end = function () {

		this.update(_startTime + _duration);
		return this;
	};

	this.stopChainedTweens = function () {

		for (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {
			_chainedTweens[i].stop();
		}
	};

	this.delay = function (amount) {

		_delayTime = amount;
		return this;
	};

	this.repeat = function (times) {

		_repeat = times;
		return this;
	};

	this.repeatDelay = function (amount) {

		_repeatDelayTime = amount;
		return this;
	};

	this.yoyo = function (yoyo) {

		_yoyo = yoyo;
		return this;
	};

	this.easing = function (easing) {

		_easingFunction = easing;
		return this;
	};

	this.interpolation = function (interpolation) {

		_interpolationFunction = interpolation;
		return this;
	};

	this.chain = function () {

		_chainedTweens = arguments;
		return this;
	};

	this.onStart = function (callback) {

		_onStartCallback = callback;
		return this;
	};

	this.onUpdate = function (callback) {

		_onUpdateCallback = callback;
		return this;
	};

	this.onComplete = function (callback) {

		_onCompleteCallback = callback;
		return this;
	};

	this.onStop = function (callback) {

		_onStopCallback = callback;
		return this;
	};

	this.update = function (time) {

		var property;
		var elapsed;
		var value;

		if (time < _startTime) {
			return true;
		}

		if (_onStartCallbackFired === false) {

			if (_onStartCallback !== null) {
				_onStartCallback.call(_object, _object);
			}

			_onStartCallbackFired = true;
		}

		elapsed = (time - _startTime) / _duration;
		elapsed = elapsed > 1 ? 1 : elapsed;

		value = _easingFunction(elapsed);

		for (property in _valuesEnd) {

			// Don't update properties that do not exist in the source object
			if (_valuesStart[property] === undefined) {
				continue;
			}

			var start = _valuesStart[property] || 0;
			var end = _valuesEnd[property];

			if (end instanceof Array) {

				_object[property] = _interpolationFunction(end, value);
			} else {

				// Parses relative end values with start as base (e.g.: +10, -3)
				if (typeof end === 'string') {

					if (end.charAt(0) === '+' || end.charAt(0) === '-') {
						end = start + parseFloat(end);
					} else {
						end = parseFloat(end);
					}
				}

				// Protect against non numeric properties.
				if (typeof end === 'number') {
					_object[property] = start + (end - start) * value;
				}
			}
		}

		if (_onUpdateCallback !== null) {
			_onUpdateCallback.call(_object, value);
		}

		if (elapsed === 1) {

			if (_repeat > 0) {

				if (isFinite(_repeat)) {
					_repeat--;
				}

				// Reassign starting values, restart by making startTime = now
				for (property in _valuesStartRepeat) {

					if (typeof _valuesEnd[property] === 'string') {
						_valuesStartRepeat[property] = _valuesStartRepeat[property] + parseFloat(_valuesEnd[property]);
					}

					if (_yoyo) {
						var tmp = _valuesStartRepeat[property];

						_valuesStartRepeat[property] = _valuesEnd[property];
						_valuesEnd[property] = tmp;
					}

					_valuesStart[property] = _valuesStartRepeat[property];
				}

				if (_yoyo) {
					_reversed = !_reversed;
				}

				if (_repeatDelayTime !== undefined) {
					_startTime = time + _repeatDelayTime;
				} else {
					_startTime = time + _delayTime;
				}

				return true;
			} else {

				if (_onCompleteCallback !== null) {

					_onCompleteCallback.call(_object, _object);
				}

				for (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {
					// Make the chained tweens start exactly at the time they should,
					// even if the `update()` method was called way past the duration of the tween
					_chainedTweens[i].start(_startTime + _duration);
				}

				return false;
			}
		}

		return true;
	};
};

TWEEN.Easing = {

	Linear: {

		None: function None(k) {

			return k;
		}

	},

	Quadratic: {

		In: function In(k) {

			return k * k;
		},

		Out: function Out(k) {

			return k * (2 - k);
		},

		InOut: function InOut(k) {

			if ((k *= 2) < 1) {
				return 0.5 * k * k;
			}

			return -0.5 * (--k * (k - 2) - 1);
		}

	},

	Cubic: {

		In: function In(k) {

			return k * k * k;
		},

		Out: function Out(k) {

			return --k * k * k + 1;
		},

		InOut: function InOut(k) {

			if ((k *= 2) < 1) {
				return 0.5 * k * k * k;
			}

			return 0.5 * ((k -= 2) * k * k + 2);
		}

	},

	Quartic: {

		In: function In(k) {

			return k * k * k * k;
		},

		Out: function Out(k) {

			return 1 - --k * k * k * k;
		},

		InOut: function InOut(k) {

			if ((k *= 2) < 1) {
				return 0.5 * k * k * k * k;
			}

			return -0.5 * ((k -= 2) * k * k * k - 2);
		}

	},

	Quintic: {

		In: function In(k) {

			return k * k * k * k * k;
		},

		Out: function Out(k) {

			return --k * k * k * k * k + 1;
		},

		InOut: function InOut(k) {

			if ((k *= 2) < 1) {
				return 0.5 * k * k * k * k * k;
			}

			return 0.5 * ((k -= 2) * k * k * k * k + 2);
		}

	},

	Sinusoidal: {

		In: function In(k) {

			return 1 - Math.cos(k * Math.PI / 2);
		},

		Out: function Out(k) {

			return Math.sin(k * Math.PI / 2);
		},

		InOut: function InOut(k) {

			return 0.5 * (1 - Math.cos(Math.PI * k));
		}

	},

	Exponential: {

		In: function In(k) {

			return k === 0 ? 0 : Math.pow(1024, k - 1);
		},

		Out: function Out(k) {

			return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
		},

		InOut: function InOut(k) {

			if (k === 0) {
				return 0;
			}

			if (k === 1) {
				return 1;
			}

			if ((k *= 2) < 1) {
				return 0.5 * Math.pow(1024, k - 1);
			}

			return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
		}

	},

	Circular: {

		In: function In(k) {

			return 1 - Math.sqrt(1 - k * k);
		},

		Out: function Out(k) {

			return Math.sqrt(1 - --k * k);
		},

		InOut: function InOut(k) {

			if ((k *= 2) < 1) {
				return -0.5 * (Math.sqrt(1 - k * k) - 1);
			}

			return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
		}

	},

	Elastic: {

		In: function In(k) {

			if (k === 0) {
				return 0;
			}

			if (k === 1) {
				return 1;
			}

			return -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);
		},

		Out: function Out(k) {

			if (k === 0) {
				return 0;
			}

			if (k === 1) {
				return 1;
			}

			return Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;
		},

		InOut: function InOut(k) {

			if (k === 0) {
				return 0;
			}

			if (k === 1) {
				return 1;
			}

			k *= 2;

			if (k < 1) {
				return -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);
			}

			return 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;
		}

	},

	Back: {

		In: function In(k) {

			var s = 1.70158;

			return k * k * ((s + 1) * k - s);
		},

		Out: function Out(k) {

			var s = 1.70158;

			return --k * k * ((s + 1) * k + s) + 1;
		},

		InOut: function InOut(k) {

			var s = 1.70158 * 1.525;

			if ((k *= 2) < 1) {
				return 0.5 * (k * k * ((s + 1) * k - s));
			}

			return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
		}

	},

	Bounce: {

		In: function In(k) {

			return 1 - TWEEN.Easing.Bounce.Out(1 - k);
		},

		Out: function Out(k) {

			if (k < 1 / 2.75) {
				return 7.5625 * k * k;
			} else if (k < 2 / 2.75) {
				return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
			} else if (k < 2.5 / 2.75) {
				return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
			} else {
				return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
			}
		},

		InOut: function InOut(k) {

			if (k < 0.5) {
				return TWEEN.Easing.Bounce.In(k * 2) * 0.5;
			}

			return TWEEN.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;
		}

	}

};

TWEEN.Interpolation = {

	Linear: function Linear(v, k) {

		var m = v.length - 1;
		var f = m * k;
		var i = Math.floor(f);
		var fn = TWEEN.Interpolation.Utils.Linear;

		if (k < 0) {
			return fn(v[0], v[1], f);
		}

		if (k > 1) {
			return fn(v[m], v[m - 1], m - f);
		}

		return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);
	},

	Bezier: function Bezier(v, k) {

		var b = 0;
		var n = v.length - 1;
		var pw = Math.pow;
		var bn = TWEEN.Interpolation.Utils.Bernstein;

		for (var i = 0; i <= n; i++) {
			b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);
		}

		return b;
	},

	CatmullRom: function CatmullRom(v, k) {

		var m = v.length - 1;
		var f = m * k;
		var i = Math.floor(f);
		var fn = TWEEN.Interpolation.Utils.CatmullRom;

		if (v[0] === v[m]) {

			if (k < 0) {
				i = Math.floor(f = m * (1 + k));
			}

			return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);
		} else {

			if (k < 0) {
				return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);
			}

			if (k > 1) {
				return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);
			}

			return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);
		}
	},

	Utils: {

		Linear: function Linear(p0, p1, t) {

			return (p1 - p0) * t + p0;
		},

		Bernstein: function Bernstein(n, i) {

			var fc = TWEEN.Interpolation.Utils.Factorial;

			return fc(n) / fc(i) / fc(n - i);
		},

		Factorial: function () {

			var a = [1];

			return function (n) {

				var s = 1;

				if (a[n]) {
					return a[n];
				}

				for (var i = n; i > 1; i--) {
					s *= i;
				}

				a[n] = s;
				return s;
			};
		}(),

		CatmullRom: function CatmullRom(p0, p1, p2, p3, t) {

			var v0 = (p2 - p0) * 0.5;
			var v1 = (p3 - p1) * 0.5;
			var t2 = t * t;
			var t3 = t * t2;

			return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
		}

	}

};

/**
 * 设置 AnimationFrame begin
 */
var lastTime = 0;
var vendors = ['ms', 'moz', 'webkit', 'o'];
for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
}
if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = function (callback, element) {
        var currTime = new Date().getTime();
        var timeToCall = Math.max(0, 16 - (currTime - lastTime));
        var id = window.setTimeout(function () {
            callback(currTime + timeToCall);
        }, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
    };
}
if (!window.cancelAnimationFrame) {
    window.cancelAnimationFrame = function (id) {
        clearTimeout(id);
    };
}

//管理所有图表的渲染任务
var _taskList = []; //[{ id : task: }...]
var _requestAid = null;

function enabledAnimationFrame() {
    if (!_requestAid) {
        _requestAid = requestAnimationFrame(function () {
            //console.log("frame__" + _taskList.length);
            //if ( Tween.getAll().length ) {
            TWEEN.update(); //tween自己会做length判断
            //};
            var currTaskList = _taskList;
            _taskList = [];
            _requestAid = null;
            while (currTaskList.length > 0) {
                currTaskList.shift().task();
            }
        });
    }
    return _requestAid;
}

/*
 * @param task 要加入到渲染帧队列中的任务
 * @result frameid
 */
function registFrame($frame) {
    if (!$frame) {
        return;
    }
    _taskList.push($frame);
    return enabledAnimationFrame();
}

/*
 *  @param task 要从渲染帧队列中删除的任务
 */
function destroyFrame($frame) {
    var d_result = false;
    for (var i = 0, l = _taskList.length; i < l; i++) {
        if (_taskList[i].id === $frame.id) {
            d_result = true;
            _taskList.splice(i, 1);
            i--;
            l--;
        }
    }
    if (_taskList.length == 0) {
        cancelAnimationFrame(_requestAid);
        _requestAid = null;
    }
    return d_result;
}

/* 
 * @param opt {from , to , onUpdate , onComplete , ......}
 * @result tween
 */
function registTween(options) {
    var opt = _$1.extend({
        from: null,
        to: null,
        duration: 500,
        onStart: function onStart() {},
        onUpdate: function onUpdate() {},
        onComplete: function onComplete() {},
        onStop: function onStop() {},
        repeat: 0,
        delay: 0,
        easing: 'Linear.None',
        desc: '' //动画描述，方便查找bug
    }, options);

    var tween = {};
    var tid = "tween_" + Utils.getUID();
    opt.id && (tid = tid + "_" + opt.id);

    if (opt.from && opt.to) {
        (function () {
            var animate = function animate() {

                if (tween._isCompleteed || tween._isStoped) {
                    tween = null;
                    return;
                }
                registFrame({
                    id: tid,
                    task: animate,
                    desc: opt.desc,
                    tween: tween
                });
            };

            tween = new TWEEN.Tween(opt.from).to(opt.to, opt.duration).onStart(function () {
                opt.onStart.apply(this);
            }).onUpdate(function () {
                opt.onUpdate.apply(this);
            }).onComplete(function () {
                destroyFrame({
                    id: tid
                });
                tween._isCompleteed = true;
                opt.onComplete.apply(this, [this]); //执行用户的conComplete
            }).onStop(function () {
                destroyFrame({
                    id: tid
                });
                tween._isStoped = true;
                opt.onStop.apply(this, [this]);
            }).repeat(opt.repeat).delay(opt.delay).easing(TWEEN.Easing[opt.easing.split(".")[0]][opt.easing.split(".")[1]]);

            tween.id = tid;
            tween.start();

            
            animate();
        })();
    }
    return tween;
}
/*
 * @param tween
 * @result void(0)
 */
function destroyTween(tween, msg) {
    tween.stop();
}

var AnimationFrame = {
    registFrame: registFrame,
    destroyFrame: destroyFrame,
    registTween: registTween,
    destroyTween: destroyTween
};

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 属性工厂，ie下面用VBS提供支持
 * 来给整个引擎提供心跳包的触发机制
 */
//定义封装好的兼容大部分浏览器的defineProperties 的 属性工厂
var unwatchOne = {
    "$skipArray": 0,
    "$watch": 1,
    "$fire": 2, //主要是get set 显性设置的 触发
    "$model": 3,
    "$accessor": 4,
    "$owner": 5,
    //"path"       : 6, //这个应该是唯一一个不用watch的不带$的成员了吧，因为地图等的path是在太大
    "$parent": 7 //用于建立数据的关系链
};

function Observe(scope, model, watchMore) {

    var stopRepeatAssign = true;

    var skipArray = scope.$skipArray,
        //要忽略监控的属性名列表
    pmodel = {},
        //要返回的对象
    accessores = {},
        //内部用于转换的对象
    VBPublics = _$1.keys(unwatchOne); //用于IE6-8

    model = model || {}; //这是pmodel上的$model属性
    watchMore = watchMore || {}; //以$开头但要强制监听的属性
    skipArray = _$1.isArray(skipArray) ? skipArray.concat(VBPublics) : VBPublics;

    function loop(name, val) {
        if (!unwatchOne[name] || unwatchOne[name] && name.charAt(0) !== "$") {
            model[name] = val;
        }
        var valueType = typeof val === "undefined" ? "undefined" : _typeof(val);
        if (valueType === "function") {
            if (!unwatchOne[name]) {
                VBPublics.push(name); //函数无需要转换
            }
        } else {
            if (_$1.indexOf(skipArray, name) !== -1 || name.charAt(0) === "$" && !watchMore[name]) {
                return VBPublics.push(name);
            }
            var accessor = function accessor(neo) {
                //创建监控属性或数组，自变量，由用户触发其改变
                var value = accessor.value,
                    preValue = value,
                    complexValue;

                if (arguments.length) {
                    //写操作
                    //set 的 值的 类型
                    var neoType = typeof neo === "undefined" ? "undefined" : _typeof(neo);

                    if (stopRepeatAssign) {
                        return; //阻止重复赋值
                    }
                    if (value !== neo) {
                        if (neo && neoType === "object" && !(neo instanceof Array) && !neo.addColorStop // neo instanceof CanvasGradient
                        ) {
                                value = neo.$model ? neo : Observe(neo, neo);
                                complexValue = value.$model;
                            } else {
                            //如果是其他数据类型
                            //if( neoType === "array" ){
                            //    value = _.clone(neo);
                            //} else {
                            value = neo;
                            //}
                        }
                        accessor.value = value;
                        model[name] = complexValue ? complexValue : value; //更新$model中的值
                        if (!complexValue) {
                            pmodel.$fire && pmodel.$fire(name, value, preValue);
                        }
                        if (valueType != neoType) {
                            //如果set的值类型已经改变，
                            //那么也要把对应的valueType修改为对应的neoType
                            valueType = neoType;
                        }
                        var hasWatchModel = pmodel;
                        //所有的赋值都要触发watch的监听事件
                        if (!pmodel.$watch) {
                            while (hasWatchModel.$parent) {
                                hasWatchModel = hasWatchModel.$parent;
                            }
                        }
                        if (hasWatchModel.$watch) {
                            hasWatchModel.$watch.call(hasWatchModel, name, value, preValue);
                        }
                    }
                } else {
                    //读操作
                    //读的时候，发现value是个obj，而且还没有defineProperty
                    //那么就临时defineProperty一次
                    if (value && valueType === "object" && !(value instanceof Array) && !value.$model && !value.addColorStop) {
                        //建立和父数据节点的关系
                        value.$parent = pmodel;
                        value = Observe(value, value);

                        //accessor.value 重新复制为defineProperty过后的对象
                        accessor.value = value;
                    }
                    return value;
                }
            };
            accessor.value = val;

            accessores[name] = {
                set: accessor,
                get: accessor,
                enumerable: true
            };
        }
    }

    for (var i in scope) {
        loop(i, scope[i]);
    }

    pmodel = defineProperties(pmodel, accessores, VBPublics); //生成一个空的ViewModel

    _$1.forEach(VBPublics, function (name) {
        if (scope[name]) {
            //先为函数等不被监控的属性赋值
            if (typeof scope[name] == "function") {
                pmodel[name] = function () {
                    scope[name].apply(this, arguments);
                };
            } else {
                pmodel[name] = scope[name];
            }
        }
    });

    pmodel.$model = model;
    pmodel.$accessor = accessores;

    pmodel.hasOwnProperty = function (name) {
        return name in pmodel.$model;
    };

    stopRepeatAssign = false;

    return pmodel;
}
var defineProperty$1 = Object.defineProperty;
//如果浏览器不支持ecma262v5的Object.defineProperties或者存在BUG，比如IE8
//标准浏览器使用__defineGetter__, __defineSetter__实现
try {
    defineProperty$1({}, "_", {
        value: "x"
    });
    var defineProperties = Object.defineProperties;
} catch (e) {
    if ("__defineGetter__" in Object) {
        defineProperty$1 = function defineProperty$$1(obj, prop, desc) {
            if ('value' in desc) {
                obj[prop] = desc.value;
            }
            if ('get' in desc) {
                obj.__defineGetter__(prop, desc.get);
            }
            if ('set' in desc) {
                obj.__defineSetter__(prop, desc.set);
            }
            return obj;
        };
        defineProperties = function defineProperties(obj, descs) {
            for (var prop in descs) {
                if (descs.hasOwnProperty(prop)) {
                    defineProperty$1(obj, prop, descs[prop]);
                }
            }
            return obj;
        };
    }
}
//IE6-8使用VBScript类的set get语句实现
if (!defineProperties && window.VBArray) {
    (function () {
        var VBMediator = function VBMediator(description, name, value) {
            var fn = description[name] && description[name].set;
            if (arguments.length === 3) {
                fn(value);
            } else {
                return fn();
            }
        };

        window.execScript(["Function parseVB(code)", "\tExecuteGlobal(code)", "End Function"].join("\n"), "VBScript");

        
        defineProperties = function defineProperties(publics, description, array) {
            publics = array.slice(0);
            publics.push("hasOwnProperty");
            var className = "VBClass" + setTimeout("1"),
                owner = {},
                buffer = [];
            buffer.push("Class " + className, "\tPrivate [__data__], [__proxy__]", "\tPublic Default Function [__const__](d, p)", "\t\tSet [__data__] = d: set [__proxy__] = p", "\t\tSet [__const__] = Me", //链式调用
            "\tEnd Function");
            _$1.forEach(publics, function (name) {
                //添加公共属性,如果此时不加以后就没机会了
                if (owner[name] !== true) {
                    owner[name] = true; //因为VBScript对象不能像JS那样随意增删属性
                    buffer.push("\tPublic [" + name + "]"); //你可以预先放到skipArray中
                }
            });
            for (var name in description) {
                owner[name] = true;
                buffer.push(
                //由于不知对方会传入什么,因此set, let都用上
                "\tPublic Property Let [" + name + "](val)", //setter
                "\t\tCall [__proxy__]([__data__], \"" + name + "\", val)", "\tEnd Property", "\tPublic Property Set [" + name + "](val)", //setter
                "\t\tCall [__proxy__]([__data__], \"" + name + "\", val)", "\tEnd Property", "\tPublic Property Get [" + name + "]", //getter
                "\tOn Error Resume Next", //必须优先使用set语句,否则它会误将数组当字符串返回
                "\t\tSet[" + name + "] = [__proxy__]([__data__],\"" + name + "\")", "\tIf Err.Number <> 0 Then", "\t\t[" + name + "] = [__proxy__]([__data__],\"" + name + "\")", "\tEnd If", "\tOn Error Goto 0", "\tEnd Property");
            }
            buffer.push("End Class"); //类定义完毕
            buffer.push("Function " + className + "Factory(a, b)", //创建实例并传入两个关键的参数
            "\tDim o", "\tSet o = (New " + className + ")(a, b)", "\tSet " + className + "Factory = o", "End Function");
            window.parseVB(buffer.join("\r\n")); //先创建一个VB类工厂
            return window[className + "Factory"](description, VBMediator); //得到其产品
        };
    })();
}

var RENDERER_TYPE = {
    UNKNOWN: 0,
    WEBGL: 1,
    CANVAS: 2
};

var DRAW_MODES = {
    POINTS: 0,
    LINES: 1,
    LINE_LOOP: 2,
    LINE_STRIP: 3,
    TRIANGLES: 4,
    TRIANGLE_STRIP: 5,
    TRIANGLE_FAN: 6
};

var SHAPES = {
    POLY: 0,
    RECT: 1,
    CIRC: 2,
    ELIP: 3,
    RREC: 4
};

var SCALE_MODES = {
    LINEAR: 0,
    NEAREST: 1
};

var CONTEXT_DEFAULT = {
    width: 0,
    height: 0,
    x: 0,
    y: 0,
    scaleX: 1,
    scaleY: 1,
    scaleOrigin: {
        x: 0,
        y: 0
    },
    rotation: 0,
    rotateOrigin: {
        x: 0,
        y: 0
    },
    visible: true,
    globalAlpha: 1

};
var SHAPE_CONTEXT_DEFAULT = {
    cursor: "default",

    fillAlpha: 1, //context2d里没有，自定义
    fillStyle: null, //"#000000",

    lineCap: null, //默认都是直角
    lineJoin: null, //这两个目前webgl里面没实现
    miterLimit: null, //miterLimit 属性设置或返回最大斜接长度,只有当 lineJoin 属性为 "miter" 时，miterLimit 才有效。

    lineAlpha: 1, //context2d里没有，自定义
    strokeStyle: null,
    lineType: "solid", //context2d里没有，自定义线条的type，默认为实线
    lineWidth: null
};

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 模拟as3 DisplayList 的 现实对象基类
 */
var DisplayObject = function DisplayObject(opt) {
    DisplayObject.superclass.constructor.apply(this, arguments);

    //如果用户没有传入context设置，就默认为空的对象
    opt = Utils.checkOpt(opt);

    //相对父级元素的矩阵
    this._transform = null;

    //心跳次数
    this._heartBeatNum = 0;

    //元素对应的stage元素
    this.stage = null;

    //元素的父元素
    this.parent = null;

    this._eventEnabled = false; //是否响应事件交互,在添加了事件侦听后会自动设置为true

    this.dragEnabled = true; //"dragEnabled" in opt ? opt.dragEnabled : false;   //是否启用元素的拖拽

    this.xyToInt = "xyToInt" in opt ? opt.xyToInt : true; //是否对xy坐标统一int处理，默认为true，但是有的时候可以由外界用户手动指定是否需要计算为int，因为有的时候不计算比较好，比如，进度图表中，再sector的两端添加两个圆来做圆角的进度条的时候，圆circle不做int计算，才能和sector更好的衔接

    this.moveing = false; //如果元素在最轨道运动中的时候，最好把这个设置为true，这样能保证轨迹的丝搬顺滑，否则因为xyToInt的原因，会有跳跃

    //创建好context
    this._createContext(opt);

    this.id = Utils.createId(this.type || "displayObject");

    this.init.apply(this, arguments);

    //所有属性准备好了后，先要计算一次this._updateTransform()得到_tansform
    this._updateTransform();
};

Utils.creatClass(DisplayObject, EventDispatcher, {
    init: function init() {},
    _createContext: function _createContext(opt) {
        var self = this;
        //所有显示对象，都有一个类似canvas.context类似的 context属性
        //用来存取改显示对象所有和显示有关的属性，坐标，样式等。
        //该对象为Coer.Observe()工厂函数生成
        self.context = null;

        //提供给Coer.Observe() 来 给 self.context 设置 propertys
        //这里不能用_.extend， 因为要保证_contextATTRS的纯粹，只覆盖下面已有的属性
        var _contextATTRS = _$1.extend(_$1.clone(CONTEXT_DEFAULT), opt.context, true);

        //有些引擎内部设置context属性的时候是不用上报心跳的，比如做热点检测的时候
        self._notWatch = false;

        _contextATTRS.$owner = self;
        _contextATTRS.$watch = function (name, value, preValue) {

            //下面的这些属性变化，都会需要重新组织矩阵属性 _transform 
            var transFormProps = ["x", "y", "scaleX", "scaleY", "rotation", "scaleOrigin", "rotateOrigin, lineWidth"];

            if (_$1.indexOf(transFormProps, name) >= 0) {
                this.$owner._updateTransform();
            }

            if (this.$owner._notWatch) {
                return;
            }

            if (this.$owner.$watch) {
                this.$owner.$watch(name, value, preValue);
            }

            this.$owner.heartBeat({
                convertType: "context",
                shape: this.$owner,
                name: name,
                value: value,
                preValue: preValue
            });
        };

        //执行init之前，应该就根据参数，把context组织好线
        self.context = Observe(_contextATTRS);
    },
    /* @myself 是否生成自己的镜像 
     * 克隆又两种，一种是镜像，另外一种是绝对意义上面的新个体
     * 默认为绝对意义上面的新个体，新对象id不能相同
     * 镜像基本上是框架内部在实现  镜像的id相同 主要用来把自己画到另外的stage里面，比如
     * mouseover和mouseout的时候调用*/
    clone: function clone(myself) {
        var conf = {
            id: this.id,
            context: _$1.clone(this.context.$model)
        };

        var newObj;
        if (this.type == 'text') {
            newObj = new this.constructor(this.text, conf);
        } else {
            newObj = new this.constructor(conf);
        }

        newObj.id = conf.id;

        if (this.children) {
            newObj.children = this.children;
        }

        if (!myself) {
            newObj.id = Utils.createId(newObj.type);
        }
        return newObj;
    },
    heartBeat: function heartBeat(opt) {
        //stage存在，才说self代表的display已经被添加到了displayList中，绘图引擎需要知道其改变后
        //的属性，所以，通知到stage.displayAttrHasChange
        var stage = this.getStage();
        if (stage) {
            this._heartBeatNum++;
            stage.heartBeat && stage.heartBeat(opt);
        }
    },
    getCurrentWidth: function getCurrentWidth() {
        return Math.abs(this.context.width * this.context.scaleX);
    },
    getCurrentHeight: function getCurrentHeight() {
        return Math.abs(this.context.height * this.context.scaleY);
    },
    getStage: function getStage() {
        if (this.stage) {
            return this.stage;
        }
        var p = this;
        if (p.type != "stage") {
            while (p.parent) {
                p = p.parent;
                if (p.type == "stage") {
                    break;
                }
            }
            if (p.type !== "stage") {
                //如果得到的顶点display 的type不是Stage,也就是说不是stage元素
                //那么只能说明这个p所代表的顶端display 还没有添加到displayList中，也就是没有没添加到
                //stage舞台的childen队列中，不在引擎渲染范围内
                return false;
            }
        }
        //一直回溯到顶层object， 即是stage， stage的parent为null
        this.stage = p;
        return p;
    },
    localToGlobal: function localToGlobal(point, container) {
        !point && (point = new Point(0, 0));
        var cm = this.getConcatenatedMatrix(container);

        if (cm == null) return Point(0, 0);
        var m = new Matrix(1, 0, 0, 1, point.x, point.y);
        m.concat(cm);
        return new Point(m.tx, m.ty); //{x:m.tx, y:m.ty};
    },
    globalToLocal: function globalToLocal(point, container) {
        !point && (point = new Point(0, 0));

        if (this.type == "stage") {
            return point;
        }
        var cm = this.getConcatenatedMatrix(container);

        if (cm == null) return new Point(0, 0); //{x:0, y:0};
        cm.invert();
        var m = new Matrix(1, 0, 0, 1, point.x, point.y);
        m.concat(cm);
        return new Point(m.tx, m.ty); //{x:m.tx, y:m.ty};
    },
    localToTarget: function localToTarget(point, target) {
        var p = localToGlobal(point);
        return target.globalToLocal(p);
    },
    getConcatenatedMatrix: function getConcatenatedMatrix(container) {
        var cm = new Matrix();
        for (var o = this; o != null; o = o.parent) {
            cm.concat(o._transform);
            if (!o.parent || container && o.parent && o.parent == container || o.parent && o.parent.type == "stage") {
                //if( o.type == "stage" || (o.parent && container && o.parent.type == container.type ) ) {
                return cm; //break;
            }
        }
        return cm;
    },
    /*
     *设置元素的是否响应事件检测
     *@bool  Boolean 类型
     */
    setEventEnable: function setEventEnable(bool) {
        if (_$1.isBoolean(bool)) {
            this._eventEnabled = bool;
            return true;
        }
        return false;
    },
    /*
     *查询自己在parent的队列中的位置
     */
    getIndex: function getIndex() {
        if (!this.parent) {
            return;
        }
        return _$1.indexOf(this.parent.children, this);
    },
    /*
     *元素在z轴方向向下移动
     *@num 移动的层级
     */
    toBack: function toBack(num) {
        if (!this.parent) {
            return;
        }
        var fromIndex = this.getIndex();
        var toIndex = 0;

        if (_$1.isNumber(num)) {
            if (num == 0) {
                //原地不动
                return;
            }
            toIndex = fromIndex - num;
        }
        var me = this.parent.children.splice(fromIndex, 1)[0];
        if (toIndex < 0) {
            toIndex = 0;
        }
        this.parent.addChildAt(me, toIndex);
    },
    /*
     *元素在z轴方向向上移动
     *@num 移动的层数量 默认到顶端
     */
    toFront: function toFront(num) {
        if (!this.parent) {
            return;
        }
        var fromIndex = this.getIndex();
        var pcl = this.parent.children.length;
        var toIndex = pcl;

        if (_$1.isNumber(num)) {
            if (num == 0) {
                //原地不动
                return;
            }
            toIndex = fromIndex + num + 1;
        }
        var me = this.parent.children.splice(fromIndex, 1)[0];
        if (toIndex > pcl) {
            toIndex = pcl;
        }
        this.parent.addChildAt(me, toIndex - 1);
    },
    _updateTransform: function _updateTransform() {
        var _transform = new Matrix();
        _transform.identity();
        var context = this.context;
        //是否需要Transform
        if (context.scaleX !== 1 || context.scaleY !== 1) {
            //如果有缩放
            //缩放的原点坐标
            var origin = new Point(context.scaleOrigin);
            if (origin.x || origin.y) {
                _transform.translate(-origin.x, -origin.y);
            }
            _transform.scale(context.scaleX, context.scaleY);
            if (origin.x || origin.y) {
                _transform.translate(origin.x, origin.y);
            }
        }

        var rotation = context.rotation;
        if (rotation) {
            //如果有旋转
            //旋转的原点坐标
            var origin = new Point(context.rotateOrigin);
            if (origin.x || origin.y) {
                _transform.translate(-origin.x, -origin.y);
            }
            _transform.rotate(rotation % 360 * Math.PI / 180);
            if (origin.x || origin.y) {
                _transform.translate(origin.x, origin.y);
            }
        }

        //如果有位移
        var x, y;
        if (this.xyToInt && !this.moveing) {
            //当这个元素在做轨迹运动的时候，比如drag，animation如果实时的调整这个x ， y
            //那么该元素的轨迹会有跳跃的情况发生。所以加个条件过滤，
            var x = parseInt(context.x);
            var y = parseInt(context.y);

            if (parseInt(context.lineWidth, 10) % 2 == 1 && context.strokeStyle) {
                x += 0.5;
                y += 0.5;
            }
        } else {
            x = context.x;
            y = context.y;
        }

        if (x != 0 || y != 0) {
            _transform.translate(x, y);
        }
        this._transform = _transform;
        return _transform;
    },
    //显示对象的选取检测处理函数
    getChildInPoint: function getChildInPoint(point) {

        var result = false; //检测的结果

        //第一步，吧glob的point转换到对应的obj的层级内的坐标系统
        if (this.type != "stage" && this.parent && this.parent.type != "stage") {
            point = this.parent.globalToLocal(point);
        }

        var x = point.x;
        var y = point.y;

        //对鼠标的坐标也做相同的变换
        if (this._transform) {
            var inverseMatrix = this._transform.clone().invert();
            var originPos = [x, y];
            originPos = inverseMatrix.mulVector(originPos);

            x = originPos[0];
            y = originPos[1];
        }

        if (this.graphics) {
            result = this.graphics.containsPoint({ x: x, y: y });
        }

        return result;
    },
    /*
    * animate
    * @param toContent 要动画变形到的属性集合
    * @param options tween 动画参数
    */
    animate: function animate(toContent, options) {
        var to = toContent;
        var from = {};
        for (var p in to) {
            from[p] = this.context[p];
        }
        !options && (options = {});
        options.from = from;
        options.to = to;

        var self = this;
        var upFun = function upFun() {};
        if (options.onUpdate) {
            upFun = options.onUpdate;
        }
        var tween;
        options.onUpdate = function () {
            //如果context不存在说明该obj已经被destroy了，那么要把他的tween给destroy
            if (!self.context && tween) {
                AnimationFrame.destroyTween(tween);
                tween = null;
                return;
            }
            for (var p in this) {
                self.context[p] = this[p];
            }
            upFun.apply(self, [this]);
        };
        var compFun = function compFun() {};
        if (options.onComplete) {
            compFun = options.onComplete;
        }
        options.onComplete = function (opt) {
            compFun.apply(self, arguments);
        };
        tween = AnimationFrame.registTween(options);
        return tween;
    },

    //渲染相关部分，迁移到renderers中去
    _render: function _render(ctx) {
        if (!this.context.visible || this.context.globalAlpha <= 0) {
            return;
        }
        ctx.save();

        var transForm = this._transform;
        if (!transForm) {
            transForm = this._updateTransform();
        }
        //运用矩阵开始变形
        ctx.transform.apply(ctx, transForm.toArray());

        //设置样式，文本有自己的设置样式方式
        if (this.type != "text") {
            var style = this.context.$model;
            for (var p in style) {
                if (p != "textBaseline" && p in ctx) {
                    if (style[p] || _$1.isNumber(style[p])) {
                        if (p == "globalAlpha") {
                            //透明度要从父节点继承
                            ctx[p] *= style[p];
                        } else {
                            ctx[p] = style[p];
                        }
                    }
                }
            }
        }

        this.render(ctx);
        ctx.restore();
    },
    render: function render(ctx) {
        //基类不提供render的具体实现，由后续具体的派生类各自实现
    },
    //从树中删除
    remove: function remove() {
        if (this.parent) {
            this.parent.removeChild(this);
            this.parent = null;
        }
    },
    //元素的自我销毁
    destroy: function destroy() {
        this.remove();
        this.fire("destroy");
        //把自己从父节点中删除了后做自我清除，释放内存
        this.context = null;
        delete this.context;
    }
});

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 模拟as3的DisplayList 中的容器类
 */
var DisplayObjectContainer = function DisplayObjectContainer(opt) {
    var self = this;
    self.children = [];
    self.mouseChildren = [];
    DisplayObjectContainer.superclass.constructor.apply(this, arguments);

    //所有的容器默认支持event 检测，因为 可能有里面的shape是eventEnable是true的
    //如果用户有强制的需求让容器下的所有元素都 不可检测，可以调用
    //DisplayObjectContainer的 setEventEnable() 方法
    self._eventEnabled = true;
};

Utils.creatClass(DisplayObjectContainer, DisplayObject, {
    addChild: function addChild(child) {
        if (!child) {
            return;
        }
        if (this.getChildIndex(child) != -1) {
            child.parent = this;
            return child;
        }
        //如果他在别的子元素中，那么就从别人那里删除了
        if (child.parent) {
            child.parent.removeChild(child);
        }
        this.children.push(child);
        child.parent = this;
        if (this.heartBeat) {
            this.heartBeat({
                convertType: "children",
                target: child,
                src: this
            });
        }

        if (this._afterAddChild) {
            this._afterAddChild(child);
        }

        return child;
    },
    addChildAt: function addChildAt(child, index) {
        if (this.getChildIndex(child) != -1) {
            child.parent = this;
            return child;
        }
        if (child.parent) {
            child.parent.removeChild(child);
        }
        this.children.splice(index, 0, child);
        child.parent = this;

        //上报children心跳
        if (this.heartBeat) {
            this.heartBeat({
                convertType: "children",
                target: child,
                src: this
            });
        }

        if (this._afterAddChild) {
            this._afterAddChild(child, index);
        }

        return child;
    },
    removeChild: function removeChild(child) {
        return this.removeChildAt(_$1.indexOf(this.children, child));
    },
    removeChildAt: function removeChildAt(index) {
        if (index < 0 || index > this.children.length - 1) {
            return false;
        }
        var child = this.children[index];
        if (child != null) {
            child.parent = null;
        }
        this.children.splice(index, 1);

        if (this.heartBeat) {
            this.heartBeat({
                convertType: "children",
                target: child,
                src: this
            });
        }

        if (this._afterDelChild) {
            this._afterDelChild(child, index);
        }

        return child;
    },
    removeChildById: function removeChildById(id) {
        for (var i = 0, len = this.children.length; i < len; i++) {
            if (this.children[i].id == id) {
                return this.removeChildAt(i);
            }
        }
        return false;
    },
    removeAllChildren: function removeAllChildren() {
        while (this.children.length > 0) {
            this.removeChildAt(0);
        }
    },
    //集合类的自我销毁
    destroy: function destroy() {
        if (this.parent) {
            this.parent.removeChild(this);
            this.parent = null;
        }
        this.fire("destroy");
        //依次销毁所有子元素
        for (var i = 0, l = this.children.length; i < l; i++) {
            this.getChildAt(i).destroy();
            i--;
            l--;
        }
    },
    /*
     *@id 元素的id
     *@boolen 是否深度查询，默认就在第一层子元素中查询
     **/
    getChildById: function getChildById(id, boolen) {
        if (!boolen) {
            for (var i = 0, len = this.children.length; i < len; i++) {
                if (this.children[i].id == id) {
                    return this.children[i];
                }
            }
        } else {
            //深度查询
            //TODO:暂时未实现
            return null;
        }
        return null;
    },
    getChildAt: function getChildAt(index) {
        if (index < 0 || index > this.children.length - 1) return null;
        return this.children[index];
    },
    getChildIndex: function getChildIndex(child) {
        return _$1.indexOf(this.children, child);
    },
    setChildIndex: function setChildIndex(child, index) {
        if (child.parent != this) return;
        var oldIndex = _$1.indexOf(this.children, child);
        if (index == oldIndex) return;
        this.children.splice(oldIndex, 1);
        this.children.splice(index, 0, child);
    },
    getNumChildren: function getNumChildren() {
        return this.children.length;
    },
    //获取x,y点上的所有object  num 需要返回的obj数量
    getObjectsUnderPoint: function getObjectsUnderPoint(point, num) {
        var result = [];

        for (var i = this.children.length - 1; i >= 0; i--) {
            var child = this.children[i];

            if (child == null || !child._eventEnabled && !child.dragEnabled || !child.context.visible) {
                continue;
            }
            if (child instanceof DisplayObjectContainer) {
                //是集合
                if (child.mouseChildren && child.getNumChildren() > 0) {
                    var objs = child.getObjectsUnderPoint(point);
                    if (objs.length > 0) {
                        result = result.concat(objs);
                    }
                }
            } else {
                //非集合，可以开始做getChildInPoint了
                if (child.getChildInPoint(point)) {
                    result.push(child);
                    if (num != undefined && !isNaN(num)) {
                        if (result.length == num) {
                            return result;
                        }
                    }
                }
            }
        }
        return result;
    }
});

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * stage 类， 再as3中，stage则代表整个舞台。是唯一的根节点
 * 但是再canvax中，因为分层设计的需要。stage 舞台 同样代表一个canvas元素，但是不是再整个引擎设计
 * 里面， 不是唯一的根节点。而是会交由canvax类来统一管理其层级
 */
var Stage = function Stage() {
    var self = this;
    self.type = "stage";
    self.canvas = null;
    self.ctx = null; //渲染的时候由renderer决定,这里不做初始值
    //stage正在渲染中
    self.stageRending = false;
    self._isReady = false;
    Stage.superclass.constructor.apply(this, arguments);
};
Utils.creatClass(Stage, DisplayObjectContainer, {
    init: function init() {},
    //由canvax的afterAddChild 回调
    initStage: function initStage(canvas, width, height) {
        var self = this;
        self.canvas = canvas;
        self.context.width = width;
        self.context.height = height;
        self.context.scaleX = Utils._devicePixelRatio;
        self.context.scaleY = Utils._devicePixelRatio;
        self._isReady = true;
    },
    heartBeat: function heartBeat(opt) {
        //shape , name , value , preValue 
        //displayList中某个属性改变了
        if (!this._isReady) {
            //在stage还没初始化完毕的情况下，无需做任何处理
            return;
        }
        opt || (opt = {}); //如果opt为空，说明就是无条件刷新
        opt.stage = this;

        //TODO临时先这么处理
        this.parent && this.parent.heartBeat(opt);
    }
});

var SystemRenderer = function () {
    function SystemRenderer() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : RENDERER_TYPE.UNKNOWN;
        var app = arguments[1];
        var options = arguments[2];
        classCallCheck(this, SystemRenderer);

        this.type = type; //2canvas,1webgl
        this.app = app;

        // prepare options
        if (options) {
            for (var i in settings.RENDER_OPTIONS) {
                if (typeof options[i] === 'undefined') {
                    options[i] = settings.RENDER_OPTIONS[i];
                }
            }
        } else {
            options = settings.RENDER_OPTIONS;
        }

        this.options = options;

        this.requestAid = null;

        this._heartBeat = false; //心跳，默认为false，即false的时候引擎处于静默状态 true则启动渲染

        this._preRenderTime = 0;
    }

    //如果引擎处于静默状态的话，就会启动


    createClass(SystemRenderer, [{
        key: 'startEnter',
        value: function startEnter() {
            var self = this;
            if (!self.requestAid) {
                self.requestAid = AnimationFrame.registFrame({
                    id: "enterFrame", //同时肯定只有一个enterFrame的task
                    task: function task() {
                        self.enterFrame.apply(self);
                    }
                });
            }
        }
    }, {
        key: 'enterFrame',
        value: function enterFrame() {
            var self = this;
            //不管怎么样，enterFrame执行了就要把
            //requestAid null 掉
            self.requestAid = null;
            Utils.now = new Date().getTime();
            if (self._heartBeat) {

                self.render(this.app);

                self._heartBeat = false;
                //渲染完了，打上最新时间挫
                self._preRenderTime = new Date().getTime();
            }
        }
    }, {
        key: '_convertCanvax',
        value: function _convertCanvax(opt) {
            var me = this;
            _$1.each(me.app.children, function (stage) {
                stage.context[opt.name] = opt.value;
            });
        }
    }, {
        key: 'heartBeat',
        value: function heartBeat(opt) {
            //displayList中某个属性改变了
            var self = this;
            if (opt) {
                //心跳包有两种，一种是某元素的可视属性改变了。一种是children有变动
                //分别对应convertType  为 context  and children
                if (opt.convertType == "context") {
                    var stage = opt.stage;
                    var shape = opt.shape;
                    var name = opt.name;
                    var value = opt.value;
                    var preValue = opt.preValue;

                    if (shape.type == "canvax") {
                        self._convertCanvax(opt);
                    } else {
                        if (!self.app.convertStages[stage.id]) {
                            self.app.convertStages[stage.id] = {
                                stage: stage,
                                convertShapes: {}
                            };
                        }
                        if (shape) {
                            if (!self.app.convertStages[stage.id].convertShapes[shape.id]) {
                                self.app.convertStages[stage.id].convertShapes[shape.id] = {
                                    shape: shape,
                                    convertType: opt.convertType
                                };
                            } else {
                                //如果已经上报了该 shape 的心跳。
                                return;
                            }
                        }
                    }
                }

                if (opt.convertType == "children") {
                    //元素结构变化，比如addchild removeChild等
                    var target = opt.target;
                    var stage = opt.src.getStage();
                    if (stage || target.type == "stage") {
                        //如果操作的目标元素是Stage
                        stage = stage || target;
                        if (!self.app.convertStages[stage.id]) {
                            self.app.convertStages[stage.id] = {
                                stage: stage,
                                convertShapes: {}
                            };
                        }
                    }
                }

                if (!opt.convertType) {
                    //无条件要求刷新
                    var stage = opt.stage;
                    if (!self.app.convertStages[stage.id]) {
                        self.app.convertStages[stage.id] = {
                            stage: stage,
                            convertShapes: {}
                        };
                    }
                }
            } else {
                //无条件要求全部刷新，一般用在resize等。
                _$1.each(self.app.children, function (stage, i) {
                    self.app.convertStages[stage.id] = {
                        stage: stage,
                        convertShapes: {}
                    };
                });
            }
            if (!self._heartBeat) {
                //如果发现引擎在静默状态，那么就唤醒引擎
                self._heartBeat = true;
                self.startEnter();
            } else {
                //否则智慧继续确认心跳
                self._heartBeat = true;
            }
        }
    }]);
    return SystemRenderer;
}();

var CanvasGraphicsRenderer = function () {
    function CanvasGraphicsRenderer(renderer) {
        classCallCheck(this, CanvasGraphicsRenderer);

        this.renderer = renderer;
    }

    /**
    * @param displayObject
    * @stage 也可以displayObject.getStage()获取。
    */


    createClass(CanvasGraphicsRenderer, [{
        key: 'render',
        value: function render(displayObject, stage) {

            var graphics = displayObject.graphics;
            var renderer = this.renderer;
            var ctx = stage.ctx;
            var context = displayObject.context;

            if (displayObject.parent) {
                context.globalAlpha *= displayObject.parent.context.globalAlpha;
            }

            for (var i = 0; i < graphics.graphicsData.length; i++) {
                var data = graphics.graphicsData[i];
                var shape = data.shape;

                var fillStyle = data.fillStyle;
                var strokeStyle = data.strokeStyle;

                ctx.lineWidth = data.lineWidth;

                if (data.type === SHAPES.POLY) {
                    ctx.beginPath();

                    this.renderPolygon(shape.points, shape.closed, ctx);

                    if (data.hasFill()) {
                        ctx.globalAlpha = data.fillAlpha;
                        ctx.fillStyle = fillStyle;
                        ctx.fill();
                    }
                    if (data.hasLine()) {
                        ctx.globalAlpha = data.lineAlpha;
                        ctx.strokeStyle = strokeStyle;
                        ctx.stroke();
                    }
                } else if (data.type === SHAPES.RECT) {
                    if (data.hasFill()) {
                        ctx.globalAlpha = data.fillAlpha;
                        ctx.fillStyle = fillStyle;
                        ctx.fillRect(shape.x, shape.y, shape.width, shape.height);
                    }
                    if (data.hasLine()) {
                        ctx.globalAlpha = data.lineAlpha;
                        ctx.strokeStyle = strokeStyle;
                        ctx.strokeRect(shape.x, shape.y, shape.width, shape.height);
                    }
                } else if (data.type === SHAPES.CIRC) {

                    // TODO - need to be Undefined!
                    ctx.beginPath();
                    ctx.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);
                    ctx.closePath();

                    if (data.hasFill()) {
                        ctx.globalAlpha = data.fillAlpha;
                        ctx.fillStyle = fillStyle;
                        ctx.fill();
                    }
                    if (data.hasLine()) {
                        ctx.globalAlpha = data.lineAlpha;
                        ctx.strokeStyle = strokeStyle;
                        ctx.stroke();
                    }
                } else if (data.type === SHAPES.ELIP) {
                    var w = shape.width * 2;
                    var h = shape.height * 2;

                    var x = shape.x - w / 2;
                    var y = shape.y - h / 2;

                    ctx.beginPath();

                    var kappa = 0.5522848;
                    var ox = w / 2 * kappa; // control point offset horizontal
                    var oy = h / 2 * kappa; // control point offset vertical
                    var xe = x + w; // x-end
                    var ye = y + h; // y-end
                    var xm = x + w / 2; // x-middle
                    var ym = y + h / 2; // y-middle

                    ctx.moveTo(x, ym);
                    ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
                    ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
                    ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
                    ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);

                    ctx.closePath();

                    if (data.hasFill()) {
                        ctx.globalAlpha = data.fillAlpha;
                        ctx.fillStyle = fillStyle;
                        ctx.fill();
                    }
                    if (data.hasLine()) {
                        ctx.globalAlpha = data.lineAlpha;
                        ctx.strokeStyle = strokeStyle;
                        ctx.stroke();
                    }
                }
            }
        }
    }, {
        key: 'renderPolygon',
        value: function renderPolygon(points, close, ctx) {
            ctx.moveTo(points[0], points[1]);

            for (var j = 1; j < points.length / 2; ++j) {
                ctx.lineTo(points[j * 2], points[j * 2 + 1]);
            }

            if (close) {
                ctx.closePath();
            }
        }
    }]);
    return CanvasGraphicsRenderer;
}();

var CanvasRenderer = function (_SystemRenderer) {
    inherits(CanvasRenderer, _SystemRenderer);

    function CanvasRenderer(app) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, CanvasRenderer);

        var _this = possibleConstructorReturn(this, (CanvasRenderer.__proto__ || Object.getPrototypeOf(CanvasRenderer)).call(this, RENDERER_TYPE.CANVAS, app, options));

        _this.CGR = new CanvasGraphicsRenderer(_this);
        return _this;
    }

    createClass(CanvasRenderer, [{
        key: 'render',
        value: function render(app) {
            var me = this;
            me.app = app;
            _$1.each(_$1.values(app.convertStages), function (convertStage) {
                me.renderStage(convertStage.stage);
            });
            app.convertStages = {};
        }
    }, {
        key: 'renderStage',
        value: function renderStage(stage) {
            if (!stage.ctx) {
                stage.ctx = stage.canvas.getContext("2d");
            }
            stage.stageRending = true;
            this._clear(stage);
            this._render(stage);
            stage.stageRending = false;
        }
    }, {
        key: '_render',
        value: function _render(stage, displayObject) {
            if (!displayObject) {
                displayObject = stage;
            }

            if (!displayObject.context.visible || displayObject.context.globalAlpha <= 0) {
                return;
            }

            var ctx = stage.ctx;

            ctx.save();

            var transForm = displayObject._transform;
            if (!transForm) {
                transForm = displayObject._updateTransform();
            }
            //运用矩阵开始变形
            ctx.transform.apply(ctx, transForm.toArray());

            if (displayObject.graphics) {
                this.CGR.render(displayObject, stage);
            }

            if (displayObject.children) {
                for (var i = 0, len = displayObject.children.length; i < len; i++) {
                    this._render(stage, displayObject.children[i]);
                }
            }

            ctx.restore();
        }
    }, {
        key: '_clear',
        value: function _clear(stage) {
            //TODO:这里有点 奇怪， 之前的版本clearRect的时候，不需要 *RESOLUTION（分辨率）
            stage.ctx.clearRect(0, 0, this.app.width * settings.RESOLUTION, this.app.height * settings.RESOLUTION);
        }
    }]);
    return CanvasRenderer;
}(SystemRenderer);

/**
 * The Point object represents a location in a two-dimensional coordinate system, where x represents
 * the horizontal axis and y represents the vertical axis.
 *
 * @class
 * @memberof PIXI
 */
var Point$2 = function () {
  /**
   * @param {number} [x=0] - position of the point on the x axis
   * @param {number} [y=0] - position of the point on the y axis
   */
  function Point() {
    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    classCallCheck(this, Point);

    /**
     * @member {number}
     * @default 0
     */
    this.x = x;

    /**
     * @member {number}
     * @default 0
     */
    this.y = y;
  }

  /**
   * Creates a clone of this point
   *
   * @return {PIXI.Point} a copy of the point
   */


  createClass(Point, [{
    key: "clone",
    value: function clone() {
      return new Point(this.x, this.y);
    }

    /**
     * Copies x and y from the given point
     *
     * @param {PIXI.Point} p - The point to copy.
     */

  }, {
    key: "copy",
    value: function copy(p) {
      this.set(p.x, p.y);
    }

    /**
     * Returns true if the given point is equal to this point
     *
     * @param {PIXI.Point} p - The point to check
     * @returns {boolean} Whether the given point equal to this point
     */

  }, {
    key: "equals",
    value: function equals(p) {
      return p.x === this.x && p.y === this.y;
    }

    /**
     * Sets the point to a new x and y position.
     * If y is omitted, both x and y will be set to x.
     *
     * @param {number} [x=0] - position of the point on the x axis
     * @param {number} [y=0] - position of the point on the y axis
     */

  }, {
    key: "set",
    value: function set$$1(x, y) {
      this.x = x || 0;
      this.y = y || (y !== 0 ? this.x : 0);
    }
  }]);
  return Point;
}();

/**
 * The pixi Matrix class as an object, which makes it a lot faster,
 * here is a representation of it :
 * | a | b | tx|
 * | c | d | ty|
 * | 0 | 0 | 1 |
 *
 * @class
 * @memberof PIXI
 */

var Matrix$2 = function () {
    /**
     *
     */
    function Matrix() {
        classCallCheck(this, Matrix);

        /**
         * @member {number}
         * @default 1
         */
        this.a = 1;

        /**
         * @member {number}
         * @default 0
         */
        this.b = 0;

        /**
         * @member {number}
         * @default 0
         */
        this.c = 0;

        /**
         * @member {number}
         * @default 1
         */
        this.d = 1;

        /**
         * @member {number}
         * @default 0
         */
        this.tx = 0;

        /**
         * @member {number}
         * @default 0
         */
        this.ty = 0;

        this.array = null;
    }

    /**
     * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:
     *
     * a = array[0]
     * b = array[1]
     * c = array[3]
     * d = array[4]
     * tx = array[2]
     * ty = array[5]
     *
     * @param {number[]} array - The array that the matrix will be populated from.
     */


    createClass(Matrix, [{
        key: 'fromArray',
        value: function fromArray(array) {
            this.a = array[0];
            this.b = array[1];
            this.c = array[3];
            this.d = array[4];
            this.tx = array[2];
            this.ty = array[5];
        }

        /**
         * sets the matrix properties
         *
         * @param {number} a - Matrix component
         * @param {number} b - Matrix component
         * @param {number} c - Matrix component
         * @param {number} d - Matrix component
         * @param {number} tx - Matrix component
         * @param {number} ty - Matrix component
         *
         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
         */

    }, {
        key: 'set',
        value: function set$$1(a, b, c, d, tx, ty) {
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
            this.tx = tx;
            this.ty = ty;

            return this;
        }

        /**
         * Creates an array from the current Matrix object.
         *
         * @param {boolean} transpose - Whether we need to transpose the matrix or not
         * @param {Float32Array} [out=new Float32Array(9)] - If provided the array will be assigned to out
         * @return {number[]} the newly created array which contains the matrix
         */

    }, {
        key: 'toArray',
        value: function toArray$$1(transpose, out) {
            if (!this.array) {
                this.array = new Float32Array(9);
            }

            var array = out || this.array;

            if (transpose) {
                array[0] = this.a;
                array[1] = this.b;
                array[2] = 0;
                array[3] = this.c;
                array[4] = this.d;
                array[5] = 0;
                array[6] = this.tx;
                array[7] = this.ty;
                array[8] = 1;
            } else {
                array[0] = this.a;
                array[1] = this.c;
                array[2] = this.tx;
                array[3] = this.b;
                array[4] = this.d;
                array[5] = this.ty;
                array[6] = 0;
                array[7] = 0;
                array[8] = 1;
            }

            return array;
        }

        /**
         * Get a new position with the current transformation applied.
         * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)
         *
         * @param {PIXI.Point} pos - The origin
         * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)
         * @return {PIXI.Point} The new point, transformed through this matrix
         */

    }, {
        key: 'apply',
        value: function apply(pos, newPos) {
            newPos = newPos || new Point$2();

            var x = pos.x;
            var y = pos.y;

            newPos.x = this.a * x + this.c * y + this.tx;
            newPos.y = this.b * x + this.d * y + this.ty;

            return newPos;
        }

        /**
         * Get a new position with the inverse of the current transformation applied.
         * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)
         *
         * @param {PIXI.Point} pos - The origin
         * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)
         * @return {PIXI.Point} The new point, inverse-transformed through this matrix
         */

    }, {
        key: 'applyInverse',
        value: function applyInverse(pos, newPos) {
            newPos = newPos || new Point$2();

            var id = 1 / (this.a * this.d + this.c * -this.b);

            var x = pos.x;
            var y = pos.y;

            newPos.x = this.d * id * x + -this.c * id * y + (this.ty * this.c - this.tx * this.d) * id;
            newPos.y = this.a * id * y + -this.b * id * x + (-this.ty * this.a + this.tx * this.b) * id;

            return newPos;
        }

        /**
         * Translates the matrix on the x and y.
         *
         * @param {number} x How much to translate x by
         * @param {number} y How much to translate y by
         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
         */

    }, {
        key: 'translate',
        value: function translate(x, y) {
            this.tx += x;
            this.ty += y;

            return this;
        }

        /**
         * Applies a scale transformation to the matrix.
         *
         * @param {number} x The amount to scale horizontally
         * @param {number} y The amount to scale vertically
         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
         */

    }, {
        key: 'scale',
        value: function scale(x, y) {
            this.a *= x;
            this.d *= y;
            this.c *= x;
            this.b *= y;
            this.tx *= x;
            this.ty *= y;

            return this;
        }

        /**
         * Applies a rotation transformation to the matrix.
         *
         * @param {number} angle - The angle in radians.
         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
         */

    }, {
        key: 'rotate',
        value: function rotate(angle) {
            var cos = Math.cos(angle);
            var sin = Math.sin(angle);

            var a1 = this.a;
            var c1 = this.c;
            var tx1 = this.tx;

            this.a = a1 * cos - this.b * sin;
            this.b = a1 * sin + this.b * cos;
            this.c = c1 * cos - this.d * sin;
            this.d = c1 * sin + this.d * cos;
            this.tx = tx1 * cos - this.ty * sin;
            this.ty = tx1 * sin + this.ty * cos;

            return this;
        }

        /**
         * Appends the given Matrix to this Matrix.
         *
         * @param {PIXI.Matrix} matrix - The matrix to append.
         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
         */

    }, {
        key: 'append',
        value: function append(matrix) {
            var a1 = this.a;
            var b1 = this.b;
            var c1 = this.c;
            var d1 = this.d;

            this.a = matrix.a * a1 + matrix.b * c1;
            this.b = matrix.a * b1 + matrix.b * d1;
            this.c = matrix.c * a1 + matrix.d * c1;
            this.d = matrix.c * b1 + matrix.d * d1;

            this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;
            this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;

            return this;
        }

        /**
         * Sets the matrix based on all the available properties
         *
         * @param {number} x - Position on the x axis
         * @param {number} y - Position on the y axis
         * @param {number} pivotX - Pivot on the x axis
         * @param {number} pivotY - Pivot on the y axis
         * @param {number} scaleX - Scale on the x axis
         * @param {number} scaleY - Scale on the y axis
         * @param {number} rotation - Rotation in radians
         * @param {number} skewX - Skew on the x axis
         * @param {number} skewY - Skew on the y axis
         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
         */

    }, {
        key: 'setTransform',
        value: function setTransform(x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {
            var sr = Math.sin(rotation);
            var cr = Math.cos(rotation);
            var cy = Math.cos(skewY);
            var sy = Math.sin(skewY);
            var nsx = -Math.sin(skewX);
            var cx = Math.cos(skewX);

            var a = cr * scaleX;
            var b = sr * scaleX;
            var c = -sr * scaleY;
            var d = cr * scaleY;

            this.a = cy * a + sy * c;
            this.b = cy * b + sy * d;
            this.c = nsx * a + cx * c;
            this.d = nsx * b + cx * d;

            this.tx = x + (pivotX * a + pivotY * c);
            this.ty = y + (pivotX * b + pivotY * d);

            return this;
        }

        /**
         * Prepends the given Matrix to this Matrix.
         *
         * @param {PIXI.Matrix} matrix - The matrix to prepend
         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
         */

    }, {
        key: 'prepend',
        value: function prepend(matrix) {
            var tx1 = this.tx;

            if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {
                var a1 = this.a;
                var c1 = this.c;

                this.a = a1 * matrix.a + this.b * matrix.c;
                this.b = a1 * matrix.b + this.b * matrix.d;
                this.c = c1 * matrix.a + this.d * matrix.c;
                this.d = c1 * matrix.b + this.d * matrix.d;
            }

            this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx;
            this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty;

            return this;
        }

        /**
         * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.
         *
         * @param {PIXI.Transform|PIXI.TransformStatic} transform - The transform to apply the properties to.
         * @return {PIXI.Transform|PIXI.TransformStatic} The transform with the newly applied properties
         */

    }, {
        key: 'decompose',
        value: function decompose(transform) {
            // sort out rotation / skew..
            var a = this.a;
            var b = this.b;
            var c = this.c;
            var d = this.d;

            var skewX = -Math.atan2(-c, d);
            var skewY = Math.atan2(b, a);

            var delta = Math.abs(skewX + skewY);

            if (delta < 0.00001) {
                transform.rotation = skewY;

                if (a < 0 && d >= 0) {
                    transform.rotation += transform.rotation <= 0 ? Math.PI : -Math.PI;
                }

                transform.skew.x = transform.skew.y = 0;
            } else {
                transform.skew.x = skewX;
                transform.skew.y = skewY;
            }

            // next set scale
            transform.scale.x = Math.sqrt(a * a + b * b);
            transform.scale.y = Math.sqrt(c * c + d * d);

            // next set position
            transform.position.x = this.tx;
            transform.position.y = this.ty;

            return transform;
        }

        /**
         * Inverts this matrix
         *
         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
         */

    }, {
        key: 'invert',
        value: function invert() {
            var a1 = this.a;
            var b1 = this.b;
            var c1 = this.c;
            var d1 = this.d;
            var tx1 = this.tx;
            var n = a1 * d1 - b1 * c1;

            this.a = d1 / n;
            this.b = -b1 / n;
            this.c = -c1 / n;
            this.d = a1 / n;
            this.tx = (c1 * this.ty - d1 * tx1) / n;
            this.ty = -(a1 * this.ty - b1 * tx1) / n;

            return this;
        }

        /**
         * Resets this Matix to an identity (default) matrix.
         *
         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
         */

    }, {
        key: 'identity',
        value: function identity() {
            this.a = 1;
            this.b = 0;
            this.c = 0;
            this.d = 1;
            this.tx = 0;
            this.ty = 0;

            return this;
        }

        /**
         * Creates a new Matrix object with the same values as this one.
         *
         * @return {PIXI.Matrix} A copy of this matrix. Good for chaining method calls.
         */

    }, {
        key: 'clone',
        value: function clone() {
            var matrix = new Matrix();

            matrix.a = this.a;
            matrix.b = this.b;
            matrix.c = this.c;
            matrix.d = this.d;
            matrix.tx = this.tx;
            matrix.ty = this.ty;

            return matrix;
        }

        /**
         * Changes the values of the given matrix to be the same as the ones in this matrix
         *
         * @param {PIXI.Matrix} matrix - The matrix to copy from.
         * @return {PIXI.Matrix} The matrix given in parameter with its values updated.
         */

    }, {
        key: 'copy',
        value: function copy(matrix) {
            matrix.a = this.a;
            matrix.b = this.b;
            matrix.c = this.c;
            matrix.d = this.d;
            matrix.tx = this.tx;
            matrix.ty = this.ty;

            return matrix;
        }

        /**
         * A default (identity) matrix
         *
         * @static
         * @const
         */

    }], [{
        key: 'IDENTITY',
        get: function get$$1() {
            return new Matrix();
        }

        /**
         * A temp matrix
         *
         * @static
         * @const
         */

    }, {
        key: 'TEMP_MATRIX',
        get: function get$$1() {
            return new Matrix();
        }
    }]);
    return Matrix;
}();

// Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group of order 16
var ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];
var uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];
var vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];
var vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];
var tempMatrices = [];

var mul = [];

function signum(x) {
    if (x < 0) {
        return -1;
    }
    if (x > 0) {
        return 1;
    }

    return 0;
}

function init() {
    for (var i = 0; i < 16; i++) {
        var row = [];

        mul.push(row);

        for (var j = 0; j < 16; j++) {
            var _ux = signum(ux[i] * ux[j] + vx[i] * uy[j]);
            var _uy = signum(uy[i] * ux[j] + vy[i] * uy[j]);
            var _vx = signum(ux[i] * vx[j] + vx[i] * vy[j]);
            var _vy = signum(uy[i] * vx[j] + vy[i] * vy[j]);

            for (var k = 0; k < 16; k++) {
                if (ux[k] === _ux && uy[k] === _uy && vx[k] === _vx && vy[k] === _vy) {
                    row.push(k);
                    break;
                }
            }
        }
    }

    for (var _i = 0; _i < 16; _i++) {
        var mat = new Matrix$2();

        mat.set(ux[_i], uy[_i], vx[_i], vy[_i], 0, 0);
        tempMatrices.push(mat);
    }
}

init();

var arcToSegmentsCache = {};
var segmentToBezierCache = {};
var boundsOfCurveCache = {};
var _join = Array.prototype.join;

/* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp
 * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here
 * http://mozilla.org/MPL/2.0/
 */
function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {
  var argsString = _join.call(arguments);
  if (arcToSegmentsCache[argsString]) {
    return arcToSegmentsCache[argsString];
  }

  var PI = Math.PI,
      th = rotateX * PI / 180,
      sinTh = Math.sin(th),
      cosTh = Math.cos(th),
      fromX = 0,
      fromY = 0;

  rx = Math.abs(rx);
  ry = Math.abs(ry);

  var px = -cosTh * toX * 0.5 - sinTh * toY * 0.5,
      py = -cosTh * toY * 0.5 + sinTh * toX * 0.5,
      rx2 = rx * rx,
      ry2 = ry * ry,
      py2 = py * py,
      px2 = px * px,
      pl = rx2 * ry2 - rx2 * py2 - ry2 * px2,
      root = 0;

  if (pl < 0) {
    var s = Math.sqrt(1 - pl / (rx2 * ry2));
    rx *= s;
    ry *= s;
  } else {
    root = (large === sweep ? -1.0 : 1.0) * Math.sqrt(pl / (rx2 * py2 + ry2 * px2));
  }

  var cx = root * rx * py / ry,
      cy = -root * ry * px / rx,
      cx1 = cosTh * cx - sinTh * cy + toX * 0.5,
      cy1 = sinTh * cx + cosTh * cy + toY * 0.5,
      mTheta = calcVectorAngle(1, 0, (px - cx) / rx, (py - cy) / ry),
      dtheta = calcVectorAngle((px - cx) / rx, (py - cy) / ry, (-px - cx) / rx, (-py - cy) / ry);

  if (sweep === 0 && dtheta > 0) {
    dtheta -= 2 * PI;
  } else if (sweep === 1 && dtheta < 0) {
    dtheta += 2 * PI;
  }

  // Convert into cubic bezier segments <= 90deg
  var segments = Math.ceil(Math.abs(dtheta / PI * 2)),
      result = [],
      mDelta = dtheta / segments,
      mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2),
      th3 = mTheta + mDelta;

  for (var i = 0; i < segments; i++) {
    result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);
    fromX = result[i][4];
    fromY = result[i][5];
    mTheta = th3;
    th3 += mDelta;
  }
  arcToSegmentsCache[argsString] = result;
  return result;
}

function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {
  var argsString2 = _join.call(arguments);
  if (segmentToBezierCache[argsString2]) {
    return segmentToBezierCache[argsString2];
  }

  var costh2 = Math.cos(th2),
      sinth2 = Math.sin(th2),
      costh3 = Math.cos(th3),
      sinth3 = Math.sin(th3),
      toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1,
      toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1,
      cp1X = fromX + mT * (-cosTh * rx * sinth2 - sinTh * ry * costh2),
      cp1Y = fromY + mT * (-sinTh * rx * sinth2 + cosTh * ry * costh2),
      cp2X = toX + mT * (cosTh * rx * sinth3 + sinTh * ry * costh3),
      cp2Y = toY + mT * (sinTh * rx * sinth3 - cosTh * ry * costh3);

  segmentToBezierCache[argsString2] = [cp1X, cp1Y, cp2X, cp2Y, toX, toY];
  return segmentToBezierCache[argsString2];
}

/*
 * Private
 */
function calcVectorAngle(ux, uy, vx, vy) {
  var ta = Math.atan2(uy, ux),
      tb = Math.atan2(vy, vx);
  if (tb >= ta) {
    return tb - ta;
  } else {
    return 2 * Math.PI - (ta - tb);
  }
}

/**
 * Draws arc
 * @param {graphics} graphics
 * @param {Number} fx
 * @param {Number} fy
 * @param {Array} coords
 */
var drawArc = function drawArc(graphics, fx, fy, coords) {
  var rx = coords[0],
      ry = coords[1],
      rot = coords[2],
      large = coords[3],
      sweep = coords[4],
      tx = coords[5],
      ty = coords[6],
      segs = [[], [], [], []],
      segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);

  for (var i = 0, len = segsNorm.length; i < len; i++) {
    segs[i][0] = segsNorm[i][0] + fx;
    segs[i][1] = segsNorm[i][1] + fy;
    segs[i][2] = segsNorm[i][2] + fx;
    segs[i][3] = segsNorm[i][3] + fy;
    segs[i][4] = segsNorm[i][4] + fx;
    segs[i][5] = segsNorm[i][5] + fy;
    graphics.bezierCurveTo.apply(graphics, segs[i]);
  }
};

/**
 * Calculate bounding box of a elliptic-arc
 * @param {Number} fx start point of arc
 * @param {Number} fy
 * @param {Number} rx horizontal radius
 * @param {Number} ry vertical radius
 * @param {Number} rot angle of horizontal axe
 * @param {Number} large 1 or 0, whatever the arc is the big or the small on the 2 points
 * @param {Number} sweep 1 or 0, 1 clockwise or counterclockwise direction
 * @param {Number} tx end point of arc
 * @param {Number} ty
 */
var getBoundsOfArc = function getBoundsOfArc(fx, fy, rx, ry, rot, large, sweep, tx, ty) {

  var fromX = 0,
      fromY = 0,
      bound,
      bounds = [],
      segs = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);

  for (var i = 0, len = segs.length; i < len; i++) {
    bound = getBoundsOfCurve(fromX, fromY, segs[i][0], segs[i][1], segs[i][2], segs[i][3], segs[i][4], segs[i][5]);
    bounds.push({ x: bound[0].x + fx, y: bound[0].y + fy });
    bounds.push({ x: bound[1].x + fx, y: bound[1].y + fy });
    fromX = segs[i][4];
    fromY = segs[i][5];
  }
  return bounds;
};

/**
 * Calculate bounding box of a beziercurve
 * @param {Number} x0 starting point
 * @param {Number} y0
 * @param {Number} x1 first control point
 * @param {Number} y1
 * @param {Number} x2 secondo control point
 * @param {Number} y2
 * @param {Number} x3 end of beizer
 * @param {Number} y3
 */
// taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.
function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {
  var argsString = _join.call(arguments);
  if (boundsOfCurveCache[argsString]) {
    return boundsOfCurveCache[argsString];
  }

  var sqrt = Math.sqrt,
      min = Math.min,
      max = Math.max,
      abs = Math.abs,
      tvalues = [],
      bounds = [[], []],
      a,
      b,
      c,
      t,
      t1,
      t2,
      b2ac,
      sqrtb2ac;

  b = 6 * x0 - 12 * x1 + 6 * x2;
  a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
  c = 3 * x1 - 3 * x0;

  for (var i = 0; i < 2; ++i) {
    if (i > 0) {
      b = 6 * y0 - 12 * y1 + 6 * y2;
      a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
      c = 3 * y1 - 3 * y0;
    }

    if (abs(a) < 1e-12) {
      if (abs(b) < 1e-12) {
        continue;
      }
      t = -c / b;
      if (0 < t && t < 1) {
        tvalues.push(t);
      }
      continue;
    }
    b2ac = b * b - 4 * c * a;
    if (b2ac < 0) {
      continue;
    }
    sqrtb2ac = sqrt(b2ac);
    t1 = (-b + sqrtb2ac) / (2 * a);
    if (0 < t1 && t1 < 1) {
      tvalues.push(t1);
    }
    t2 = (-b - sqrtb2ac) / (2 * a);
    if (0 < t2 && t2 < 1) {
      tvalues.push(t2);
    }
  }

  var x,
      y,
      j = tvalues.length,
      jlen = j,
      mt;
  while (j--) {
    t = tvalues[j];
    mt = 1 - t;
    x = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;
    bounds[0][j] = x;

    y = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;
    bounds[1][j] = y;
  }

  bounds[0][jlen] = x0;
  bounds[1][jlen] = y0;
  bounds[0][jlen + 1] = x3;
  bounds[1][jlen + 1] = y3;
  var result = [{
    x: min.apply(null, bounds[0]),
    y: min.apply(null, bounds[1])
  }, {
    x: max.apply(null, bounds[0]),
    y: max.apply(null, bounds[1])
  }];
  boundsOfCurveCache[argsString] = result;
  return result;
}

var Arc = {
  drawArc: drawArc,
  getBoundsOfCurve: getBoundsOfCurve,
  getBoundsOfArc: getBoundsOfArc
};

/**
 * Rectangle object is an area defined by its position, as indicated by its top-left corner
 * point (x, y) and by its width and its height.
 *
 * @class
 * @memberof PIXI
 */

var Rectangle = function () {
    /**
     * @param {number} [x=0] - The X coordinate of the upper-left corner of the rectangle
     * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rectangle
     * @param {number} [width=0] - The overall width of this rectangle
     * @param {number} [height=0] - The overall height of this rectangle
     */
    function Rectangle() {
        var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        classCallCheck(this, Rectangle);

        /**
         * @member {number}
         * @default 0
         */
        this.x = x;

        /**
         * @member {number}
         * @default 0
         */
        this.y = y;

        /**
         * @member {number}
         * @default 0
         */
        this.width = width;

        /**
         * @member {number}
         * @default 0
         */
        this.height = height;

        /**
         * The type of the object, mainly used to avoid `instanceof` checks
         *
         * @member {number}
         * @readOnly
         * @default PIXI.SHAPES.RECT
         * @see PIXI.SHAPES
         */
        this.type = SHAPES.RECT;
    }

    /**
     * returns the left edge of the rectangle
     *
     * @member {number}
     */


    createClass(Rectangle, [{
        key: 'clone',


        /**
         * Creates a clone of this Rectangle
         *
         * @return {PIXI.Rectangle} a copy of the rectangle
         */
        value: function clone() {
            return new Rectangle(this.x, this.y, this.width, this.height);
        }

        /**
         * Copies another rectangle to this one.
         *
         * @param {PIXI.Rectangle} rectangle - The rectangle to copy.
         * @return {PIXI.Rectangle} Returns itself.
         */

    }, {
        key: 'copy',
        value: function copy(rectangle) {
            this.x = rectangle.x;
            this.y = rectangle.y;
            this.width = rectangle.width;
            this.height = rectangle.height;

            return this;
        }

        /**
         * Checks whether the x and y coordinates given are contained within this Rectangle
         *
         * @param {number} x - The X coordinate of the point to test
         * @param {number} y - The Y coordinate of the point to test
         * @return {boolean} Whether the x/y coordinates are within this Rectangle
         */

    }, {
        key: 'contains',
        value: function contains(x, y) {
            if (this.width <= 0 || this.height <= 0) {
                return false;
            }

            if (x >= this.x && x < this.x + this.width) {
                if (y >= this.y && y < this.y + this.height) {
                    return true;
                }
            }

            return false;
        }

        /**
         * Pads the rectangle making it grow in all directions.
         *
         * @param {number} paddingX - The horizontal padding amount.
         * @param {number} paddingY - The vertical padding amount.
         */

    }, {
        key: 'pad',
        value: function pad(paddingX, paddingY) {
            paddingX = paddingX || 0;
            paddingY = paddingY || (paddingY !== 0 ? paddingX : 0);

            this.x -= paddingX;
            this.y -= paddingY;

            this.width += paddingX * 2;
            this.height += paddingY * 2;
        }

        /**
         * Fits this rectangle around the passed one.
         *
         * @param {PIXI.Rectangle} rectangle - The rectangle to fit.
         */

    }, {
        key: 'fit',
        value: function fit(rectangle) {
            if (this.x < rectangle.x) {
                this.width += this.x;
                if (this.width < 0) {
                    this.width = 0;
                }

                this.x = rectangle.x;
            }

            if (this.y < rectangle.y) {
                this.height += this.y;
                if (this.height < 0) {
                    this.height = 0;
                }
                this.y = rectangle.y;
            }

            if (this.x + this.width > rectangle.x + rectangle.width) {
                this.width = rectangle.width - this.x;
                if (this.width < 0) {
                    this.width = 0;
                }
            }

            if (this.y + this.height > rectangle.y + rectangle.height) {
                this.height = rectangle.height - this.y;
                if (this.height < 0) {
                    this.height = 0;
                }
            }
        }

        /**
         * Enlarges this rectangle to include the passed rectangle.
         *
         * @param {PIXI.Rectangle} rectangle - The rectangle to include.
         */

    }, {
        key: 'enlarge',
        value: function enlarge(rectangle) {
            var x1 = Math.min(this.x, rectangle.x);
            var x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);
            var y1 = Math.min(this.y, rectangle.y);
            var y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);

            this.x = x1;
            this.width = x2 - x1;
            this.y = y1;
            this.height = y2 - y1;
        }
    }, {
        key: 'left',
        get: function get$$1() {
            return this.x;
        }

        /**
         * returns the right edge of the rectangle
         *
         * @member {number}
         */

    }, {
        key: 'right',
        get: function get$$1() {
            return this.x + this.width;
        }

        /**
         * returns the top edge of the rectangle
         *
         * @member {number}
         */

    }, {
        key: 'top',
        get: function get$$1() {
            return this.y;
        }

        /**
         * returns the bottom edge of the rectangle
         *
         * @member {number}
         */

    }, {
        key: 'bottom',
        get: function get$$1() {
            return this.y + this.height;
        }

        /**
         * A constant empty rectangle.
         *
         * @static
         * @constant
         */

    }], [{
        key: 'EMPTY',
        get: function get$$1() {
            return new Rectangle(0, 0, 0, 0);
        }
    }]);
    return Rectangle;
}();

/**
 * The Circle object can be used to specify a hit area for displayObjects
 *
 * @class
 * @memberof PIXI
 */

var Circle = function () {
  /**
   * @param {number} [x=0] - The X coordinate of the center of this circle
   * @param {number} [y=0] - The Y coordinate of the center of this circle
   * @param {number} [radius=0] - The radius of the circle
   */
  function Circle() {
    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    classCallCheck(this, Circle);

    /**
     * @member {number}
     * @default 0
     */
    this.x = x;

    /**
     * @member {number}
     * @default 0
     */
    this.y = y;

    /**
     * @member {number}
     * @default 0
     */
    this.radius = radius;

    /**
     * The type of the object, mainly used to avoid `instanceof` checks
     *
     * @member {number}
     * @readOnly
     * @default PIXI.SHAPES.CIRC
     * @see PIXI.SHAPES
     */
    this.type = SHAPES.CIRC;

    this.closed = true;
  }

  /**
   * Creates a clone of this Circle instance
   *
   * @return {PIXI.Circle} a copy of the Circle
   */


  createClass(Circle, [{
    key: 'clone',
    value: function clone() {
      return new Circle(this.x, this.y, this.radius);
    }

    /**
     * Checks whether the x and y coordinates given are contained within this circle
     *
     * @param {number} x - The X coordinate of the point to test
     * @param {number} y - The Y coordinate of the point to test
     * @return {boolean} Whether the x/y coordinates are within this Circle
     */

  }, {
    key: 'contains',
    value: function contains(x, y) {
      if (this.radius <= 0) {
        return false;
      }

      var r2 = this.radius * this.radius;
      var dx = this.x - x;
      var dy = this.y - y;

      dx *= dx;
      dy *= dy;

      return dx + dy <= r2;
    }

    /**
    * Returns the framing rectangle of the circle as a Rectangle object
    *
    * @return {PIXI.Rectangle} the framing rectangle
    */

  }, {
    key: 'getBounds',
    value: function getBounds() {
      return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);
    }
  }]);
  return Circle;
}();

/**
 * The Ellipse object can be used to specify a hit area for displayObjects
 *
 * @class
 * @memberof PIXI
 */

var Ellipse = function () {
  /**
   * @param {number} [x=0] - The X coordinate of the center of this circle
   * @param {number} [y=0] - The Y coordinate of the center of this circle
   * @param {number} [width=0] - The half width of this ellipse
   * @param {number} [height=0] - The half height of this ellipse
   */
  function Ellipse() {
    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    classCallCheck(this, Ellipse);

    /**
     * @member {number}
     * @default 0
     */
    this.x = x;

    /**
     * @member {number}
     * @default 0
     */
    this.y = y;

    /**
     * @member {number}
     * @default 0
     */
    this.width = width;

    /**
     * @member {number}
     * @default 0
     */
    this.height = height;

    /**
     * The type of the object, mainly used to avoid `instanceof` checks
     *
     * @member {number}
     * @readOnly
     * @default PIXI.SHAPES.ELIP
     * @see PIXI.SHAPES
     */
    this.type = SHAPES.ELIP;

    this.closed = true;
  }

  /**
   * Creates a clone of this Ellipse instance
   *
   * @return {PIXI.Ellipse} a copy of the ellipse
   */


  createClass(Ellipse, [{
    key: 'clone',
    value: function clone() {
      return new Ellipse(this.x, this.y, this.width, this.height);
    }

    /**
     * Checks whether the x and y coordinates given are contained within this ellipse
     *
     * @param {number} x - The X coordinate of the point to test
     * @param {number} y - The Y coordinate of the point to test
     * @return {boolean} Whether the x/y coords are within this ellipse
     */

  }, {
    key: 'contains',
    value: function contains(x, y) {
      if (this.width <= 0 || this.height <= 0) {
        return false;
      }

      // normalize the coords to an ellipse with center 0,0
      var normx = (x - this.x) / this.width;
      var normy = (y - this.y) / this.height;

      normx *= normx;
      normy *= normy;

      return normx + normy <= 1;
    }

    /**
     * Returns the framing rectangle of the ellipse as a Rectangle object
     *
     * @return {PIXI.Rectangle} the framing rectangle
     */

  }, {
    key: 'getBounds',
    value: function getBounds() {
      return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);
    }
  }]);
  return Ellipse;
}();

/**
 * @class
 * @memberof PIXI
 */

var Polygon = function () {
    /**
     * @param {PIXI.Point[]|number[]} points - This can be an array of Points
     *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or
     *  the arguments passed can be all the points of the polygon e.g.
     *  `new PIXI.Polygon(new PIXI.Point(), new PIXI.Point(), ...)`, or the arguments passed can be flat
     *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.
     */
    function Polygon() {
        for (var _len = arguments.length, points = Array(_len), _key = 0; _key < _len; _key++) {
            points[_key] = arguments[_key];
        }

        classCallCheck(this, Polygon);

        if (Array.isArray(points[0])) {
            points = points[0];
        }

        // if this is an array of points, convert it to a flat array of numbers
        if (points[0] instanceof Point$2) {
            var p = [];

            for (var i = 0, il = points.length; i < il; i++) {
                p.push(points[i].x, points[i].y);
            }

            points = p;
        }

        this.closed = true;

        /**
         * An array of the points of this polygon
         *
         * @member {number[]}
         */
        this.points = points;

        /**
         * The type of the object, mainly used to avoid `instanceof` checks
         *
         * @member {number}
         * @readOnly
         * @default PIXI.SHAPES.POLY
         * @see PIXI.SHAPES
         */
        this.type = SHAPES.POLY;
    }

    /**
     * Creates a clone of this polygon
     *
     * @return {PIXI.Polygon} a copy of the polygon
     */


    createClass(Polygon, [{
        key: 'clone',
        value: function clone() {
            return new Polygon(this.points.slice());
        }

        /**
         * Closes the polygon, adding points if necessary.
         *
         */

    }, {
        key: 'close',
        value: function close() {
            var points = this.points;
            if (points[0] !== points[points.length - 2] || points[1] !== points[points.length - 1]) {
                points.push(points[0], points[1]);
            }
            this.closed = true;
        }
    }, {
        key: 'contains',
        value: function contains(x, y) {
            return this._isInsidePolygon_WindingNumber(x, y);
        }

        /**
         * 多边形包含判断 Nonzero Winding Number Rule
         */

    }, {
        key: '_isInsidePolygon_WindingNumber',
        value: function _isInsidePolygon_WindingNumber(x, y) {
            var points = this.points;
            var wn = 0;
            for (var shiftP, shift = points[1] > y, i = 3; i < points.length; i += 2) {
                shiftP = shift;
                shift = points[i] > y;
                if (shiftP != shift) {
                    var n = (shiftP ? 1 : 0) - (shift ? 1 : 0);
                    if (n * ((points[i - 3] - x) * (points[i - 0] - y) - (points[i - 2] - y) * (points[i - 1] - x)) > 0) {
                        wn += n;
                    }
                }
            }
            return wn;
        }
    }]);
    return Polygon;
}();

/**
 * Math classes and utilities mixed into PIXI namespace.
 *
 * @lends PIXI
 */

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

/**
 * Helper class to create a webGL Context
 *
 * @class
 * @memberof PIXI.glCore
 * @param canvas {HTMLCanvasElement} the canvas element that we will get the context from
 * @param options {Object} An options object that gets passed in to the canvas element containing the context attributes,
 *                         see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext for the options available
 * @return {WebGLRenderingContext} the WebGL context
 */
var createContext = function(canvas, options)
{
    var gl = canvas.getContext('webgl', options) || 
         canvas.getContext('experimental-webgl', options);

    if (!gl)
    {
        // fail, not able to get a context
        throw new Error('This browser does not support webGL. Try using the canvas renderer');
    }

    return gl;
};

var createContext_1 = createContext;

// var GL_MAP = {};

/**
 * @param gl {WebGLRenderingContext} The current WebGL context
 * @param attribs {*}
 * @param state {*}
 */
var setVertexAttribArrays = function (gl, attribs, state)
{
    var i;
    if(state)
    {
        var tempAttribState = state.tempAttribState,
            attribState = state.attribState;

        for (i = 0; i < tempAttribState.length; i++)
        {
            tempAttribState[i] = false;
        }

        // set the new attribs
        for (i = 0; i < attribs.length; i++)
        {
            tempAttribState[attribs[i].attribute.location] = true;
        }

        for (i = 0; i < attribState.length; i++)
        {
            if (attribState[i] !== tempAttribState[i])
            {
                attribState[i] = tempAttribState[i];

                if (state.attribState[i])
                {
                    gl.enableVertexAttribArray(i);
                }
                else
                {
                    gl.disableVertexAttribArray(i);
                }
            }
        }

    }
    else
    {
        for (i = 0; i < attribs.length; i++)
        {
            var attrib = attribs[i];
            gl.enableVertexAttribArray(attrib.attribute.location);
        }
    }
};

var setVertexAttribArrays_1 = setVertexAttribArrays;

var EMPTY_ARRAY_BUFFER = new ArrayBuffer(0);

/**
 * Helper class to create a webGL buffer
 *
 * @class
 * @memberof PIXI.glCore
 * @param gl {WebGLRenderingContext} The current WebGL rendering context
 * @param type {gl.ARRAY_BUFFER | gl.ELEMENT_ARRAY_BUFFER} @mat
 * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data
 * @param drawType {gl.STATIC_DRAW|gl.DYNAMIC_DRAW|gl.STREAM_DRAW}
 */
var Buffer = function(gl, type, data, drawType)
{

	/**
     * The current WebGL rendering context
     *
     * @member {WebGLRenderingContext}
     */
	this.gl = gl;

	/**
     * The WebGL buffer, created upon instantiation
     *
     * @member {WebGLBuffer}
     */
	this.buffer = gl.createBuffer();

	/**
     * The type of the buffer
     *
     * @member {gl.ARRAY_BUFFER|gl.ELEMENT_ARRAY_BUFFER}
     */
	this.type = type || gl.ARRAY_BUFFER;

	/**
     * The draw type of the buffer
     *
     * @member {gl.STATIC_DRAW|gl.DYNAMIC_DRAW|gl.STREAM_DRAW}
     */
	this.drawType = drawType || gl.STATIC_DRAW;

	/**
     * The data in the buffer, as a typed array
     *
     * @member {ArrayBuffer| SharedArrayBuffer|ArrayBufferView}
     */
	this.data = EMPTY_ARRAY_BUFFER;

	if(data)
	{
		this.upload(data);
	}

	this._updateID = 0;
};

/**
 * Uploads the buffer to the GPU
 * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data to upload
 * @param offset {Number} if only a subset of the data should be uploaded, this is the amount of data to subtract
 * @param dontBind {Boolean} whether to bind the buffer before uploading it
 */
Buffer.prototype.upload = function(data, offset, dontBind)
{
	// todo - needed?
	if(!dontBind) this.bind();

	var gl = this.gl;

	data = data || this.data;
	offset = offset || 0;

	if(this.data.byteLength >= data.byteLength)
	{
		gl.bufferSubData(this.type, offset, data);
	}
	else
	{
		gl.bufferData(this.type, data, this.drawType);
	}

	this.data = data;
};
/**
 * Binds the buffer
 *
 */
Buffer.prototype.bind = function()
{
	var gl = this.gl;
	gl.bindBuffer(this.type, this.buffer);
};

Buffer.createVertexBuffer = function(gl, data, drawType)
{
	return new Buffer(gl, gl.ARRAY_BUFFER, data, drawType);
};

Buffer.createIndexBuffer = function(gl, data, drawType)
{
	return new Buffer(gl, gl.ELEMENT_ARRAY_BUFFER, data, drawType);
};

Buffer.create = function(gl, type, data, drawType)
{
	return new Buffer(gl, type, data, drawType);
};

/**
 * Destroys the buffer
 *
 */
Buffer.prototype.destroy = function(){
	this.gl.deleteBuffer(this.buffer);
};

var GLBuffer = Buffer;

/**
 * Helper class to create a WebGL Texture
 *
 * @class
 * @memberof PIXI.glCore
 * @param gl {WebGLRenderingContext} The current WebGL context
 * @param width {number} the width of the texture
 * @param height {number} the height of the texture
 * @param format {number} the pixel format of the texture. defaults to gl.RGBA
 * @param type {number} the gl type of the texture. defaults to gl.UNSIGNED_BYTE
 */
var Texture = function(gl, width, height, format, type)
{
	/**
	 * The current WebGL rendering context
	 *
	 * @member {WebGLRenderingContext}
	 */
	this.gl = gl;


	/**
	 * The WebGL texture
	 *
	 * @member {WebGLTexture}
	 */
	this.texture = gl.createTexture();

	/**
	 * If mipmapping was used for this texture, enable and disable with enableMipmap()
	 *
	 * @member {Boolean}
	 */
	// some settings..
	this.mipmap = false;


	/**
	 * Set to true to enable pre-multiplied alpha
	 *
	 * @member {Boolean}
	 */
	this.premultiplyAlpha = false;

	/**
	 * The width of texture
	 *
	 * @member {Number}
	 */
	this.width = width || -1;
	/**
	 * The height of texture
	 *
	 * @member {Number}
	 */
	this.height = height || -1;

	/**
	 * The pixel format of the texture. defaults to gl.RGBA
	 *
	 * @member {Number}
	 */
	this.format = format || gl.RGBA;

	/**
	 * The gl type of the texture. defaults to gl.UNSIGNED_BYTE
	 *
	 * @member {Number}
	 */
	this.type = type || gl.UNSIGNED_BYTE;


};

/**
 * Uploads this texture to the GPU
 * @param source {HTMLImageElement|ImageData|HTMLVideoElement} the source image of the texture
 */
Texture.prototype.upload = function(source)
{
	this.bind();

	var gl = this.gl;


	gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);

	var newWidth = source.videoWidth || source.width;
	var newHeight = source.videoHeight || source.height;

	if(newHeight !== this.height || newWidth !== this.width)
	{
		gl.texImage2D(gl.TEXTURE_2D, 0, this.format, this.format, this.type, source);
	}
	else
	{
    	gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, this.format, this.type, source);
	}

	// if the source is a video, we need to use the videoWidth / videoHeight properties as width / height will be incorrect.
	this.width = newWidth;
	this.height = newHeight;

};

var FLOATING_POINT_AVAILABLE = false;

/**
 * Use a data source and uploads this texture to the GPU
 * @param data {TypedArray} the data to upload to the texture
 * @param width {number} the new width of the texture
 * @param height {number} the new height of the texture
 */
Texture.prototype.uploadData = function(data, width, height)
{
	this.bind();

	var gl = this.gl;


	if(data instanceof Float32Array)
	{
		if(!FLOATING_POINT_AVAILABLE)
		{
			var ext = gl.getExtension("OES_texture_float");

			if(ext)
			{
				FLOATING_POINT_AVAILABLE = true;
			}
			else
			{
				throw new Error('floating point textures not available');
			}
		}

		this.type = gl.FLOAT;
	}
	else
	{
		// TODO support for other types
		this.type = this.type || gl.UNSIGNED_BYTE;
	}

	// what type of data?
	gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);


	if(width !== this.width || height !== this.height)
	{
		gl.texImage2D(gl.TEXTURE_2D, 0, this.format,  width, height, 0, this.format, this.type, data || null);
	}
	else
	{
		gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, this.format, this.type, data || null);
	}

	this.width = width;
	this.height = height;


//	texSubImage2D
};

/**
 * Binds the texture
 * @param  location
 */
Texture.prototype.bind = function(location)
{
	var gl = this.gl;

	if(location !== undefined)
	{
		gl.activeTexture(gl.TEXTURE0 + location);
	}

	gl.bindTexture(gl.TEXTURE_2D, this.texture);
};

/**
 * Unbinds the texture
 */
Texture.prototype.unbind = function()
{
	var gl = this.gl;
	gl.bindTexture(gl.TEXTURE_2D, null);
};

/**
 * @param linear {Boolean} if we want to use linear filtering or nearest neighbour interpolation
 */
Texture.prototype.minFilter = function( linear )
{
	var gl = this.gl;

	this.bind();

	if(this.mipmap)
	{
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, linear ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);
	}
	else
	{
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, linear ? gl.LINEAR : gl.NEAREST);
	}
};

/**
 * @param linear {Boolean} if we want to use linear filtering or nearest neighbour interpolation
 */
Texture.prototype.magFilter = function( linear )
{
	var gl = this.gl;

	this.bind();

	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, linear ? gl.LINEAR : gl.NEAREST);
};

/**
 * Enables mipmapping
 */
Texture.prototype.enableMipmap = function()
{
	var gl = this.gl;

	this.bind();

	this.mipmap = true;

	gl.generateMipmap(gl.TEXTURE_2D);
};

/**
 * Enables linear filtering
 */
Texture.prototype.enableLinearScaling = function()
{
	this.minFilter(true);
	this.magFilter(true);
};

/**
 * Enables nearest neighbour interpolation
 */
Texture.prototype.enableNearestScaling = function()
{
	this.minFilter(false);
	this.magFilter(false);
};

/**
 * Enables clamping on the texture so WebGL will not repeat it
 */
Texture.prototype.enableWrapClamp = function()
{
	var gl = this.gl;

	this.bind();

	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
};

/**
 * Enable tiling on the texture
 */
Texture.prototype.enableWrapRepeat = function()
{
	var gl = this.gl;

	this.bind();

	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
};

Texture.prototype.enableWrapMirrorRepeat = function()
{
	var gl = this.gl;

	this.bind();

	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.MIRRORED_REPEAT);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.MIRRORED_REPEAT);
};


/**
 * Destroys this texture
 */
Texture.prototype.destroy = function()
{
	var gl = this.gl;
	//TODO
	gl.deleteTexture(this.texture);
};

/**
 * @static
 * @param gl {WebGLRenderingContext} The current WebGL context
 * @param source {HTMLImageElement|ImageData} the source image of the texture
 * @param premultiplyAlpha {Boolean} If we want to use pre-multiplied alpha
 */
Texture.fromSource = function(gl, source, premultiplyAlpha)
{
	var texture = new Texture(gl);
	texture.premultiplyAlpha = premultiplyAlpha || false;
	texture.upload(source);

	return texture;
};

/**
 * @static
 * @param gl {WebGLRenderingContext} The current WebGL context
 * @param data {TypedArray} the data to upload to the texture
 * @param width {number} the new width of the texture
 * @param height {number} the new height of the texture
 */
Texture.fromData = function(gl, data, width, height)
{
	//console.log(data, width, height);
	var texture = new Texture(gl);
	texture.uploadData(data, width, height);

	return texture;
};


var GLTexture = Texture;

/**
 * Helper class to create a webGL Framebuffer
 *
 * @class
 * @memberof PIXI.glCore
 * @param gl {WebGLRenderingContext} The current WebGL rendering context
 * @param width {Number} the width of the drawing area of the frame buffer
 * @param height {Number} the height of the drawing area of the frame buffer
 */
var Framebuffer = function(gl, width, height)
{
    /**
     * The current WebGL rendering context
     *
     * @member {WebGLRenderingContext}
     */
    this.gl = gl;

    /**
     * The frame buffer
     *
     * @member {WebGLFramebuffer}
     */
    this.framebuffer = gl.createFramebuffer();

    /**
     * The stencil buffer
     *
     * @member {WebGLRenderbuffer}
     */
    this.stencil = null;

    /**
     * The stencil buffer
     *
     * @member {PIXI.glCore.GLTexture}
     */
    this.texture = null;

    /**
     * The width of the drawing area of the buffer
     *
     * @member {Number}
     */
    this.width = width || 100;
    /**
     * The height of the drawing area of the buffer
     *
     * @member {Number}
     */
    this.height = height || 100;
};

/**
 * Adds a texture to the frame buffer
 * @param texture {PIXI.glCore.GLTexture}
 */
Framebuffer.prototype.enableTexture = function(texture)
{
    var gl = this.gl;

    this.texture = texture || new GLTexture(gl);

    this.texture.bind();

    //gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA,  this.width, this.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);

    this.bind();

    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);
};

/**
 * Initialises the stencil buffer
 */
Framebuffer.prototype.enableStencil = function()
{
    if(this.stencil)return;

    var gl = this.gl;

    this.stencil = gl.createRenderbuffer();

    gl.bindRenderbuffer(gl.RENDERBUFFER, this.stencil);

    // TODO.. this is depth AND stencil?
    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, this.stencil);
    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL,  this.width  , this.height );


};

/**
 * Erases the drawing area and fills it with a colour
 * @param  r {Number} the red value of the clearing colour
 * @param  g {Number} the green value of the clearing colour
 * @param  b {Number} the blue value of the clearing colour
 * @param  a {Number} the alpha value of the clearing colour
 */
Framebuffer.prototype.clear = function( r, g, b, a )
{
    this.bind();

    var gl = this.gl;

    gl.clearColor(r, g, b, a);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
};

/**
 * Binds the frame buffer to the WebGL context
 */
Framebuffer.prototype.bind = function()
{
    var gl = this.gl;
    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer );
};

/**
 * Unbinds the frame buffer to the WebGL context
 */
Framebuffer.prototype.unbind = function()
{
    var gl = this.gl;
    gl.bindFramebuffer(gl.FRAMEBUFFER, null );
};
/**
 * Resizes the drawing area of the buffer to the given width and height
 * @param  width  {Number} the new width
 * @param  height {Number} the new height
 */
Framebuffer.prototype.resize = function(width, height)
{
    var gl = this.gl;

    this.width = width;
    this.height = height;

    if ( this.texture )
    {
        this.texture.uploadData(null, width, height);
    }

    if ( this.stencil )
    {
        // update the stencil buffer width and height
        gl.bindRenderbuffer(gl.RENDERBUFFER, this.stencil);
        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height);
    }
};

/**
 * Destroys this buffer
 */
Framebuffer.prototype.destroy = function()
{
    var gl = this.gl;

    //TODO
    if(this.texture)
    {
        this.texture.destroy();
    }

    gl.deleteFramebuffer(this.framebuffer);

    this.gl = null;

    this.stencil = null;
    this.texture = null;
};

/**
 * Creates a frame buffer with a texture containing the given data
 * @static
 * @param gl {WebGLRenderingContext} The current WebGL rendering context
 * @param width {Number} the width of the drawing area of the frame buffer
 * @param height {Number} the height of the drawing area of the frame buffer
 * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data
 */
Framebuffer.createRGBA = function(gl, width, height, data)
{
    var texture = GLTexture.fromData(gl, null, width, height);
    texture.enableNearestScaling();
    texture.enableWrapClamp();

    //now create the framebuffer object and attach the texture to it.
    var fbo = new Framebuffer(gl, width, height);
    fbo.enableTexture(texture);

    //fbo.enableStencil(); // get this back on soon!

    fbo.unbind();

    return fbo;
};

/**
 * Creates a frame buffer with a texture containing the given data
 * @static
 * @param gl {WebGLRenderingContext} The current WebGL rendering context
 * @param width {Number} the width of the drawing area of the frame buffer
 * @param height {Number} the height of the drawing area of the frame buffer
 * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data
 */
Framebuffer.createFloat32 = function(gl, width, height, data)
{
    // create a new texture..
    var texture = new GLTexture.fromData(gl, data, width, height);
    texture.enableNearestScaling();
    texture.enableWrapClamp();

    //now create the framebuffer object and attach the texture to it.
    var fbo = new Framebuffer(gl, width, height);
    fbo.enableTexture(texture);

    fbo.unbind();

    return fbo;
};

var GLFramebuffer$1 = Framebuffer;

/**
 * @class
 * @memberof PIXI.glCore.shader
 * @param gl {WebGLRenderingContext} The current WebGL context {WebGLProgram}
 * @param vertexSrc {string|string[]} The vertex shader source as an array of strings.
 * @param fragmentSrc {string|string[]} The fragment shader source as an array of strings.
 * @param attributeLocations {Object} An attribute location map that lets you manually set the attribute locations
 * @return {WebGLProgram} the shader program
 */
var compileProgram = function(gl, vertexSrc, fragmentSrc, attributeLocations)
{
    var glVertShader = compileShader(gl, gl.VERTEX_SHADER, vertexSrc);
    var glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentSrc);

    var program = gl.createProgram();

    gl.attachShader(program, glVertShader);
    gl.attachShader(program, glFragShader);

    // optionally, set the attributes manually for the program rather than letting WebGL decide..
    if(attributeLocations)
    {
        for(var i in attributeLocations)
        {
            gl.bindAttribLocation(program, attributeLocations[i], i);
        }
    }


    gl.linkProgram(program);

    // if linking fails, then log and cleanup
    if (!gl.getProgramParameter(program, gl.LINK_STATUS))
    {
        console.error('Pixi.js Error: Could not initialize shader.');
        console.error('gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS));
        console.error('gl.getError()', gl.getError());

        // if there is a program info log, log it
        if (gl.getProgramInfoLog(program) !== '')
        {
            console.warn('Pixi.js Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));
        }

        gl.deleteProgram(program);
        program = null;
    }

    // clean up some shaders
    gl.deleteShader(glVertShader);
    gl.deleteShader(glFragShader);

    return program;
};

/**
 * @private
 * @param gl {WebGLRenderingContext} The current WebGL context {WebGLProgram}
 * @param type {Number} the type, can be either VERTEX_SHADER or FRAGMENT_SHADER
 * @param vertexSrc {string|string[]} The vertex shader source as an array of strings.
 * @return {WebGLShader} the shader
 */
var compileShader = function (gl, type, src)
{
    var shader = gl.createShader(type);

    gl.shaderSource(shader, src);
    gl.compileShader(shader);

    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))
    {
        console.log(gl.getShaderInfoLog(shader));
        return null;
    }

    return shader;
};

var compileProgram_1 = compileProgram;

var mapSize = function(gl, type) 
{
    if(!GL_TABLE) 
    {
        var typeNames = Object.keys(GL_TO_GLSL_TYPES);

        GL_TABLE = {};

        for(var i = 0; i < typeNames.length; ++i) 
        {
            var tn = typeNames[i];
            GL_TABLE[ gl[tn] ] = GL_TO_GLSL_TYPES[tn];
        }
    }

  return GL_TABLE[type];
};

var GL_TABLE = null;

var GL_TO_GLSL_TYPES = {
  'FLOAT':       'float',
  'FLOAT_VEC2':  'vec2',
  'FLOAT_VEC3':  'vec3',
  'FLOAT_VEC4':  'vec4',

  'INT':         'int',
  'INT_VEC2':    'ivec2',
  'INT_VEC3':    'ivec3',
  'INT_VEC4':    'ivec4',
  
  'BOOL':        'bool',
  'BOOL_VEC2':   'bvec2',
  'BOOL_VEC3':   'bvec3',
  'BOOL_VEC4':   'bvec4',
  
  'FLOAT_MAT2':  'mat2',
  'FLOAT_MAT3':  'mat3',
  'FLOAT_MAT4':  'mat4',
  
  'SAMPLER_2D':  'sampler2D'  
};

var mapType = mapSize;

/**
 * @class
 * @memberof PIXI.glCore.shader
 * @param type {String}
 * @return {Number}
 */
var mapSize$1 = function(type) 
{ 
    return GLSL_TO_SIZE[type];
};


var GLSL_TO_SIZE = {
    'float':    1,
    'vec2':     2,
    'vec3':     3,
    'vec4':     4,

    'int':      1,
    'ivec2':    2,
    'ivec3':    3,
    'ivec4':    4,

    'bool':     1,
    'bvec2':    2,
    'bvec3':    3,
    'bvec4':    4,

    'mat2':     4,
    'mat3':     9,
    'mat4':     16,

    'sampler2D':  1
};

var mapSize_1 = mapSize$1;

/**
 * Extracts the attributes
 * @class
 * @memberof PIXI.glCore.shader
 * @param gl {WebGLRenderingContext} The current WebGL rendering context
 * @param program {WebGLProgram} The shader program to get the attributes from
 * @return attributes {Object}
 */
var extractAttributes = function(gl, program)
{
    var attributes = {};

    var totalAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);

    for (var i = 0; i < totalAttributes; i++)
    {
        var attribData = gl.getActiveAttrib(program, i);
        var type = mapType(gl, attribData.type);

        attributes[attribData.name] = {
            type:type,
            size:mapSize_1(type),
            location:gl.getAttribLocation(program, attribData.name),
            //TODO - make an attribute object
            pointer: pointer
        };
    }

    return attributes;
};

var pointer = function(type, normalized, stride, start){
    // console.log(this.location)
    gl.vertexAttribPointer(this.location,this.size, type || gl.FLOAT, normalized || false, stride || 0, start || 0);
};

var extractAttributes_1 = extractAttributes;

/**
 * @class
 * @memberof PIXI.glCore.shader
 * @param type {String} Type of value
 * @param size {Number}
 */
var defaultValue = function(type, size) 
{
    switch (type)
    {
        case 'float':
            return 0;

        case 'vec2': 
            return new Float32Array(2 * size);

        case 'vec3':
            return new Float32Array(3 * size);

        case 'vec4':     
            return new Float32Array(4 * size);
            
        case 'int':
        case 'sampler2D':
            return 0;

        case 'ivec2':   
            return new Int32Array(2 * size);

        case 'ivec3':
            return new Int32Array(3 * size);

        case 'ivec4': 
            return new Int32Array(4 * size);

        case 'bool':     
            return false;

        case 'bvec2':

            return booleanArray( 2 * size);

        case 'bvec3':
            return booleanArray(3 * size);

        case 'bvec4':
            return booleanArray(4 * size);

        case 'mat2':
            return new Float32Array([1, 0,
                                     0, 1]);

        case 'mat3': 
            return new Float32Array([1, 0, 0,
                                     0, 1, 0,
                                     0, 0, 1]);

        case 'mat4':
            return new Float32Array([1, 0, 0, 0,
                                     0, 1, 0, 0,
                                     0, 0, 1, 0,
                                     0, 0, 0, 1]);
    }
};

var booleanArray = function(size)
{
    var array = new Array(size);

    for (var i = 0; i < array.length; i++) 
    {
        array[i] = false;
    }

    return array;
};

var defaultValue_1 = defaultValue;

/**
 * Extracts the uniforms
 * @class
 * @memberof PIXI.glCore.shader
 * @param gl {WebGLRenderingContext} The current WebGL rendering context
 * @param program {WebGLProgram} The shader program to get the uniforms from
 * @return uniforms {Object}
 */
var extractUniforms = function(gl, program)
{
	var uniforms = {};

    var totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);

    for (var i = 0; i < totalUniforms; i++)
    {
    	var uniformData = gl.getActiveUniform(program, i);
    	var name = uniformData.name.replace(/\[.*?\]/, "");
        var type = mapType(gl, uniformData.type );

    	uniforms[name] = {
    		type:type,
    		size:uniformData.size,
    		location:gl.getUniformLocation(program, name),
    		value:defaultValue_1(type, uniformData.size)
    	};
    }

	return uniforms;
};

var extractUniforms_1 = extractUniforms;

/**
 * Sets the float precision on the shader. If the precision is already present this function will do nothing
 * @param {string} src       the shader source
 * @param {string} precision The float precision of the shader. Options are 'lowp', 'mediump' or 'highp'.
 *
 * @return {string} modified shader source
 */
var setPrecision = function(src, precision)
{
    if(src.substring(0, 9) !== 'precision')
    {
        return 'precision ' + precision + ' float;\n' + src;
    }

    return src;
};

var setPrecision_1 = setPrecision;

/**
 * Extracts the attributes
 * @class
 * @memberof PIXI.glCore.shader
 * @param gl {WebGLRenderingContext} The current WebGL rendering context
 * @param uniforms {Array} @mat ?
 * @return attributes {Object}
 */
var generateUniformAccessObject = function(gl, uniformData)
{
    // this is the object we will be sending back.
    // an object hierachy will be created for structs
    var uniforms = {data:{}};

    uniforms.gl = gl;

    var uniformKeys= Object.keys(uniformData);

    for (var i = 0; i < uniformKeys.length; i++)
    {
        var fullName = uniformKeys[i];

        var nameTokens = fullName.split('.');
        var name = nameTokens[nameTokens.length - 1];


        var uniformGroup = getUniformGroup(nameTokens, uniforms);

        var uniform =  uniformData[fullName];
        uniformGroup.data[name] = uniform;

        uniformGroup.gl = gl;

        Object.defineProperty(uniformGroup, name, {
            get: generateGetter(name),
            set: generateSetter(name, uniform)
        });
    }

    return uniforms;
};

var generateGetter = function(name)
{
	var template = getterTemplate.replace('%%', name);
	return new Function(template); // jshint ignore:line
};

var generateSetter = function(name, uniform)
{
    var template = setterTemplate.replace(/%%/g, name);
    var setTemplate;

    if(uniform.size === 1)
    {
        setTemplate = GLSL_TO_SINGLE_SETTERS[uniform.type];
    }
    else
    {
        setTemplate = GLSL_TO_ARRAY_SETTERS[uniform.type];
    }

    if(setTemplate)
    {
        template += "\nthis.gl." + setTemplate + ";";
    }

  	return new Function('value', template); // jshint ignore:line
};

var getUniformGroup = function(nameTokens, uniform)
{
    var cur = uniform;

    for (var i = 0; i < nameTokens.length - 1; i++)
    {
        var o = cur[nameTokens[i]] || {data:{}};
        cur[nameTokens[i]] = o;
        cur = o;
    }

    return cur;
};

var getterTemplate = [
    'return this.data.%%.value;',
].join('\n');

var setterTemplate = [
    'this.data.%%.value = value;',
    'var location = this.data.%%.location;'
].join('\n');


var GLSL_TO_SINGLE_SETTERS = {

    'float':    'uniform1f(location, value)',

    'vec2':     'uniform2f(location, value[0], value[1])',
    'vec3':     'uniform3f(location, value[0], value[1], value[2])',
    'vec4':     'uniform4f(location, value[0], value[1], value[2], value[3])',

    'int':      'uniform1i(location, value)',
    'ivec2':    'uniform2i(location, value[0], value[1])',
    'ivec3':    'uniform3i(location, value[0], value[1], value[2])',
    'ivec4':    'uniform4i(location, value[0], value[1], value[2], value[3])',

    'bool':     'uniform1i(location, value)',
    'bvec2':    'uniform2i(location, value[0], value[1])',
    'bvec3':    'uniform3i(location, value[0], value[1], value[2])',
    'bvec4':    'uniform4i(location, value[0], value[1], value[2], value[3])',

    'mat2':     'uniformMatrix2fv(location, false, value)',
    'mat3':     'uniformMatrix3fv(location, false, value)',
    'mat4':     'uniformMatrix4fv(location, false, value)',

    'sampler2D':'uniform1i(location, value)'
};

var GLSL_TO_ARRAY_SETTERS = {

    'float':    'uniform1fv(location, value)',

    'vec2':     'uniform2fv(location, value)',
    'vec3':     'uniform3fv(location, value)',
    'vec4':     'uniform4fv(location, value)',

    'int':      'uniform1iv(location, value)',
    'ivec2':    'uniform2iv(location, value)',
    'ivec3':    'uniform3iv(location, value)',
    'ivec4':    'uniform4iv(location, value)',

    'bool':     'uniform1iv(location, value)',
    'bvec2':    'uniform2iv(location, value)',
    'bvec3':    'uniform3iv(location, value)',
    'bvec4':    'uniform4iv(location, value)',

    'sampler2D':'uniform1iv(location, value)'
};

var generateUniformAccessObject_1 = generateUniformAccessObject;

/**
 * Helper class to create a webGL Shader
 *
 * @class
 * @memberof PIXI.glCore
 * @param gl {WebGLRenderingContext}
 * @param vertexSrc {string|string[]} The vertex shader source as an array of strings.
 * @param fragmentSrc {string|string[]} The fragment shader source as an array of strings.
 * @param precision {precision]} The float precision of the shader. Options are 'lowp', 'mediump' or 'highp'.
 * @param attributeLocations {object} A key value pair showing which location eact attribute should sit eg {position:0, uvs:1}
 */
var Shader = function(gl, vertexSrc, fragmentSrc, precision, attributeLocations)
{
	/**
	 * The current WebGL rendering context
	 *
	 * @member {WebGLRenderingContext}
	 */
	this.gl = gl;

	if(precision)
	{
		vertexSrc = setPrecision_1(vertexSrc, precision);
		fragmentSrc = setPrecision_1(fragmentSrc, precision);
	}

	/**
	 * The shader program
	 *
	 * @member {WebGLProgram}
	 */
	// First compile the program..
	this.program = compileProgram_1(gl, vertexSrc, fragmentSrc, attributeLocations);

	/**
	 * The attributes of the shader as an object containing the following properties
	 * {
	 * 	type,
	 * 	size,
	 * 	location,
	 * 	pointer
	 * }
	 * @member {Object}
	 */
	// next extract the attributes
	this.attributes = extractAttributes_1(gl, this.program);

    this.uniformData = extractUniforms_1(gl, this.program);

	/**
	 * The uniforms of the shader as an object containing the following properties
	 * {
	 * 	gl,
	 * 	data
	 * }
	 * @member {Object}
	 */
	this.uniforms = generateUniformAccessObject_1( gl, this.uniformData );

};
/**
 * Uses this shader
 */
Shader.prototype.bind = function()
{
	this.gl.useProgram(this.program);
};

/**
 * Destroys this shader
 * TODO
 */
Shader.prototype.destroy = function()
{
	this.attributes = null;
	this.uniformData = null;
	this.uniforms = null;

	var gl = this.gl;
	gl.deleteProgram(this.program);
};


var GLShader = Shader;

// state object//


/**
 * Helper class to work with WebGL VertexArrayObjects (vaos)
 * Only works if WebGL extensions are enabled (they usually are)
 *
 * @class
 * @memberof PIXI.glCore
 * @param gl {WebGLRenderingContext} The current WebGL rendering context
 */
function VertexArrayObject(gl, state)
{
    this.nativeVaoExtension = null;

    if(!VertexArrayObject.FORCE_NATIVE)
    {
        this.nativeVaoExtension = gl.getExtension('OES_vertex_array_object') ||
                                  gl.getExtension('MOZ_OES_vertex_array_object') ||
                                  gl.getExtension('WEBKIT_OES_vertex_array_object');
    }

    this.nativeState = state;

    if(this.nativeVaoExtension)
    {
        this.nativeVao = this.nativeVaoExtension.createVertexArrayOES();

        var maxAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);

        // VAO - overwrite the state..
        this.nativeState = {
            tempAttribState: new Array(maxAttribs),
            attribState: new Array(maxAttribs)
        };
    }

    /**
     * The current WebGL rendering context
     *
     * @member {WebGLRenderingContext}
     */
    this.gl = gl;

    /**
     * An array of attributes
     *
     * @member {Array}
     */
    this.attributes = [];

    /**
     * @member {PIXI.glCore.GLBuffer}
     */
    this.indexBuffer = null;

    /**
     * A boolean flag
     *
     * @member {Boolean}
     */
    this.dirty = false;
}

VertexArrayObject.prototype.constructor = VertexArrayObject;
var VertexArrayObject_1 = VertexArrayObject;

/**
* Some devices behave a bit funny when using the newer extensions (im looking at you ipad 2!)
* If you find on older devices that things have gone a bit weird then set this to true.
*/
/**
 * Lets the VAO know if you should use the WebGL extension or the native methods.
 * Some devices behave a bit funny when using the newer extensions (im looking at you ipad 2!)
 * If you find on older devices that things have gone a bit weird then set this to true.
 * @static
 * @property {Boolean} FORCE_NATIVE
 */
VertexArrayObject.FORCE_NATIVE = false;

/**
 * Binds the buffer
 */
VertexArrayObject.prototype.bind = function()
{
    if(this.nativeVao)
    {
        this.nativeVaoExtension.bindVertexArrayOES(this.nativeVao);

        if(this.dirty)
        {
            this.dirty = false;
            this.activate();
        }
    }
    else
    {

        this.activate();
    }

    return this;
};

/**
 * Unbinds the buffer
 */
VertexArrayObject.prototype.unbind = function()
{
    if(this.nativeVao)
    {
        this.nativeVaoExtension.bindVertexArrayOES(null);
    }

    return this;
};

/**
 * Uses this vao
 */
VertexArrayObject.prototype.activate = function()
{

    var gl = this.gl;
    var lastBuffer = null;

    for (var i = 0; i < this.attributes.length; i++)
    {
        var attrib = this.attributes[i];

        if(lastBuffer !== attrib.buffer)
        {
            attrib.buffer.bind();
            lastBuffer = attrib.buffer;
        }

        gl.vertexAttribPointer(attrib.attribute.location,
                               attrib.attribute.size,
                               attrib.type || gl.FLOAT,
                               attrib.normalized || false,
                               attrib.stride || 0,
                               attrib.start || 0);
    }

    setVertexAttribArrays_1(gl, this.attributes, this.nativeState);

    if(this.indexBuffer)
    {
        this.indexBuffer.bind();
    }

    return this;
};

/**
 *
 * @param buffer     {PIXI.gl.GLBuffer}
 * @param attribute  {*}
 * @param type       {String}
 * @param normalized {Boolean}
 * @param stride     {Number}
 * @param start      {Number}
 */
VertexArrayObject.prototype.addAttribute = function(buffer, attribute, type, normalized, stride, start)
{
    this.attributes.push({
        buffer:     buffer,
        attribute:  attribute,

        location:   attribute.location,
        type:       type || this.gl.FLOAT,
        normalized: normalized || false,
        stride:     stride || 0,
        start:      start || 0
    });

    this.dirty = true;

    return this;
};

/**
 *
 * @param buffer   {PIXI.gl.GLBuffer}
 */
VertexArrayObject.prototype.addIndex = function(buffer/*, options*/)
{
    this.indexBuffer = buffer;

    this.dirty = true;

    return this;
};

/**
 * Unbinds this vao and disables it
 */
VertexArrayObject.prototype.clear = function()
{
    // var gl = this.gl;

    // TODO - should this function unbind after clear?
    // for now, no but lets see what happens in the real world!
    if(this.nativeVao)
    {
        this.nativeVaoExtension.bindVertexArrayOES(this.nativeVao);
    }

    this.attributes.length = 0;
    this.indexBuffer = null;

    return this;
};

/**
 * @param type  {Number}
 * @param size  {Number}
 * @param start {Number}
 */
VertexArrayObject.prototype.draw = function(type, size, start)
{
    var gl = this.gl;

    if(this.indexBuffer)
    {
        gl.drawElements(type, size || this.indexBuffer.data.length, gl.UNSIGNED_SHORT, (start || 0) * 2 );
    }
    else
    {
        // TODO need a better way to calculate size..
        gl.drawArrays(type, start, size || this.getSize());
    }

    return this;
};

/**
 * Destroy this vao
 */
VertexArrayObject.prototype.destroy = function()
{
    // lose references
    this.gl = null;
    this.indexBuffer = null;
    this.attributes = null;
    this.nativeState = null;

    if(this.nativeVao)
    {
        this.nativeVaoExtension.deleteVertexArrayOES(this.nativeVao);
    }

    this.nativeVaoExtension = null;
    this.nativeVao = null;
};

VertexArrayObject.prototype.getSize = function()
{
    var attrib = this.attributes[0];
    return attrib.buffer.data.length / (( attrib.stride/4 ) || attrib.attribute.size);
};

var index$1 = {
    compileProgram: compileProgram_1,
    defaultValue: defaultValue_1,
    extractAttributes: extractAttributes_1,
    extractUniforms: extractUniforms_1,
    generateUniformAccessObject: generateUniformAccessObject_1,
    setPrecision: setPrecision_1,
    mapSize: mapSize_1,
    mapType: mapType
};

var index = createCommonjsModule(function (module) {
var gl = {
    createContext:          createContext_1,
    setVertexAttribArrays:  setVertexAttribArrays_1,
    GLBuffer:               GLBuffer,
    GLFramebuffer:          GLFramebuffer$1,
    GLShader:               GLShader,
    GLTexture:              GLTexture,
    VertexArrayObject:      VertexArrayObject_1,
    shader:                 index$1
};

// Export for Node-compatible environments
if ('object' !== 'undefined' && module.exports)
{
    // Export the module
    module.exports = gl;
}

// Add to the browser window pixi.gl
if (typeof window !== 'undefined')
{
    // add the window object
    window.PIXI = window.PIXI || {};
    window.PIXI.glCore = gl;
}
});

var GLFramebuffer = index.GLFramebuffer;

/**
 * @class
 * @memberof PIXI
 */

var RenderTarget = function () {
  /**
   * @param {WebGLRenderingContext} gl - The current WebGL drawing context
   * @param {number} [width=0] - the horizontal range of the filter
   * @param {number} [height=0] - the vertical range of the filter
   * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values
   * @param {number} [resolution=1] - The current resolution / device pixel ratio
   * @param {boolean} [root=false] - Whether this object is the root element or not
   */
  function RenderTarget(gl, width, height, scaleMode, resolution, root) {
    classCallCheck(this, RenderTarget);

    // TODO Resolution could go here ( eg low res blurs )

    /**
     * The current WebGL drawing context.
     *
     * @member {WebGLRenderingContext}
     */
    this.gl = gl;

    // next time to create a frame buffer and texture

    /**
     * A frame buffer
     *
     * @member {PIXI.glCore.GLFramebuffer}
     */
    this.frameBuffer = null;

    /**
     * The background colour of this render target, as an array of [r,g,b,a] values
     *
     * @member {number[]}
     */
    this.clearColor = [0, 0, 0, 0];

    /**
     * The size of the object as a rectangle
     *
     * @member {PIXI.Rectangle}
     */
    this.size = new Rectangle(0, 0, 1, 1);

    /**
     * The current resolution / device pixel ratio
     *
     * @member {number}
     * @default 1
     */
    this.resolution = resolution || settings.RESOLUTION;

    /**
     * The projection matrix
     *
     * @member {PIXI.Matrix}
     */
    this.projectionMatrix = new Matrix$2();

    /**
     * The object's transform
     *
     * @member {PIXI.Matrix}
     */
    this.transform = null;

    /**
     * The frame.
     *
     * @member {PIXI.Rectangle}
     */
    this.frame = null;

    /**
     * The stencil buffer stores masking data for the render target
     *
     * @member {glCore.GLBuffer}
     */
    this.defaultFrame = new Rectangle();
    this.destinationFrame = null;
    this.sourceFrame = null;

    /**
     * The stencil buffer stores masking data for the render target
     *
     * @member {glCore.GLBuffer}
     */
    this.stencilBuffer = null;

    /**
     * The data structure for the stencil masks
     *
     * @member {PIXI.Graphics[]}
     */
    this.stencilMaskStack = [];

    /**
     * Stores filter data for the render target
     *
     * @member {object[]}
     */
    this.filterData = null;

    /**
     * The scale mode.
     *
     * @member {number}
     * @default PIXI.settings.SCALE_MODE
     * @see PIXI.SCALE_MODES
     */
    this.scaleMode = scaleMode || settings.SCALE_MODE;

    /**
     * Whether this object is the root element or not
     *
     * @member {boolean}
     */
    this.root = root;

    if (!this.root) {
      this.frameBuffer = GLFramebuffer.createRGBA(gl, 100, 100);

      if (this.scaleMode === SCALE_MODES.NEAREST) {
        this.frameBuffer.texture.enableNearestScaling();
      } else {
        this.frameBuffer.texture.enableLinearScaling();
      }
      /*
          A frame buffer needs a target to render to..
          create a texture and bind it attach it to the framebuffer..
       */

      // this is used by the base texture
      this.texture = this.frameBuffer.texture;
    } else {
      // make it a null framebuffer..
      this.frameBuffer = new GLFramebuffer(gl, 100, 100);
      this.frameBuffer.framebuffer = null;
    }

    this.setFrame();

    this.resize(width, height);
  }

  /**
   * Clears the filter texture.
   *
   * @param {number[]} [clearColor=this.clearColor] - Array of [r,g,b,a] to clear the framebuffer
   */


  createClass(RenderTarget, [{
    key: 'clear',
    value: function clear(clearColor) {
      var cc = clearColor || this.clearColor;

      this.frameBuffer.clear(cc[0], cc[1], cc[2], cc[3]); // r,g,b,a);
    }

    /**
     * Binds the stencil buffer.
     *
     */

  }, {
    key: 'attachStencilBuffer',
    value: function attachStencilBuffer() {
      // TODO check if stencil is done?
      /**
       * The stencil buffer is used for masking in pixi
       * lets create one and then add attach it to the framebuffer..
       */
      if (!this.root) {
        this.frameBuffer.enableStencil();
      }
    }

    /**
     * Sets the frame of the render target.
     *
     * @param {Rectangle} destinationFrame - The destination frame.
     * @param {Rectangle} sourceFrame - The source frame.
     */

  }, {
    key: 'setFrame',
    value: function setFrame(destinationFrame, sourceFrame) {
      this.destinationFrame = destinationFrame || this.destinationFrame || this.defaultFrame;
      this.sourceFrame = sourceFrame || this.sourceFrame || destinationFrame;
    }

    /**
     * Binds the buffers and initialises the viewport.
     *
     */

  }, {
    key: 'activate',
    value: function activate() {
      // TOOD refactor usage of frame..
      var gl = this.gl;

      // make sure the texture is unbound!
      this.frameBuffer.bind();

      this.calculateProjection(this.destinationFrame, this.sourceFrame);

      if (this.transform) {
        this.projectionMatrix.append(this.transform);
      }

      // TODO add a check as them may be the same!
      if (this.destinationFrame !== this.sourceFrame) {
        gl.enable(gl.SCISSOR_TEST);
        gl.scissor(this.destinationFrame.x | 0, this.destinationFrame.y | 0, this.destinationFrame.width * this.resolution | 0, this.destinationFrame.height * this.resolution | 0);
      } else {
        gl.disable(gl.SCISSOR_TEST);
      }

      // TODO - does not need to be updated all the time??
      gl.viewport(this.destinationFrame.x | 0, this.destinationFrame.y | 0, this.destinationFrame.width * this.resolution | 0, this.destinationFrame.height * this.resolution | 0);
    }

    /**
     * Updates the projection matrix based on a projection frame (which is a rectangle)
     *
     * @param {Rectangle} destinationFrame - The destination frame.
     * @param {Rectangle} sourceFrame - The source frame.
     */

  }, {
    key: 'calculateProjection',
    value: function calculateProjection(destinationFrame, sourceFrame) {
      var pm = this.projectionMatrix;

      sourceFrame = sourceFrame || destinationFrame;

      pm.identity();

      // TODO: make dest scale source
      if (!this.root) {
        pm.a = 1 / destinationFrame.width * 2;
        pm.d = 1 / destinationFrame.height * 2;

        pm.tx = -1 - sourceFrame.x * pm.a;
        pm.ty = -1 - sourceFrame.y * pm.d;
      } else {
        pm.a = 1 / destinationFrame.width * 2;
        pm.d = -1 / destinationFrame.height * 2;

        pm.tx = -1 - sourceFrame.x * pm.a;
        pm.ty = 1 - sourceFrame.y * pm.d;
      }
    }

    /**
     * Resizes the texture to the specified width and height
     *
     * @param {number} width - the new width of the texture
     * @param {number} height - the new height of the texture
     */

  }, {
    key: 'resize',
    value: function resize(width, height) {
      width = width | 0;
      height = height | 0;

      if (this.size.width === width && this.size.height === height) {
        return;
      }

      this.size.width = width;
      this.size.height = height;

      this.defaultFrame.width = width;
      this.defaultFrame.height = height;

      this.frameBuffer.resize(width * this.resolution, height * this.resolution);

      var projectionFrame = this.frame || this.size;

      this.calculateProjection(projectionFrame);
    }

    /**
     * Destroys the render target.
     *
     */

  }, {
    key: 'destroy',
    value: function destroy() {
      this.frameBuffer.destroy();

      this.frameBuffer = null;
      this.texture = null;
    }
  }]);
  return RenderTarget;
}();

/**
 * @class
 * @memberof PIXI
 */
var WebGLManager = function () {
  /**
   * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.
   */
  function WebGLManager(renderer) {
    classCallCheck(this, WebGLManager);

    /**
     * The renderer this manager works for.
     *
     * @member {PIXI.WebGLRenderer}
     */
    this.renderer = renderer;

    //this.renderer.on('context', this.onContextChange, this);
  }

  /**
   * Generic method called when there is a WebGL context change.
   *
   */


  createClass(WebGLManager, [{
    key: 'onContextChange',
    value: function onContextChange() {}
    // do some codes init!


    /**
     * Generic destroy methods to be overridden by the subclass
     *
     */

  }, {
    key: 'destroy',
    value: function destroy() {
      this.renderer.off('context', this.onContextChange, this);

      this.renderer = null;
    }
  }]);
  return WebGLManager;
}();

/**
 * Base for a common object renderer that can be used as a system renderer plugin.
 *
 * @class
 * @extends PIXI.WebGLManager
 * @memberof PIXI
 */

var ObjectRenderer = function (_WebGLManager) {
  inherits(ObjectRenderer, _WebGLManager);

  function ObjectRenderer() {
    classCallCheck(this, ObjectRenderer);
    return possibleConstructorReturn(this, (ObjectRenderer.__proto__ || Object.getPrototypeOf(ObjectRenderer)).apply(this, arguments));
  }

  createClass(ObjectRenderer, [{
    key: 'start',

    /**
     * Starts the renderer and sets the shader
     *
     */
    value: function start() {}
    // set the shader..


    /**
     * Stops the renderer
     *
     */

  }, {
    key: 'stop',
    value: function stop() {
      this.flush();
    }

    /**
     * Stub method for rendering content and emptying the current batch.
     *
     */

  }, {
    key: 'flush',
    value: function flush() {}
    // flush!


    /**
     * Renders an object
     *
     * @param {PIXI.DisplayObject} object - The object to render.
     */

  }, {
    key: 'render',
    value: function render(object) // eslint-disable-line no-unused-vars
    {
      // render the object
    }
  }]);
  return ObjectRenderer;
}(WebGLManager);

var DEPTH_TEST = 1;
var FRONT_FACE = 2;
var CULL_FACE = 3;

/**
 * A WebGL state machines
 *
 * @memberof PIXI
 * @class
 */

var WebGLState = function () {
    /**
     * @param {WebGLRenderingContext} gl - The current WebGL rendering context
     */
    function WebGLState(gl) {
        classCallCheck(this, WebGLState);

        /**
         * The current active state
         *
         * @member {Uint8Array}
         */
        this.activeState = new Uint8Array(16);

        /**
         * The default state
         *
         * @member {Uint8Array}
         */
        this.defaultState = new Uint8Array(16);

        // default blend mode..
        this.defaultState[0] = 1;

        /**
         * The current state index in the stack
         *
         * @member {number}
         * @private
         */
        this.stackIndex = 0;

        /**
         * The stack holding all the different states
         *
         * @member {Array<*>}
         * @private
         */
        this.stack = [];

        /**
         * The current WebGL rendering context
         *
         * @member {WebGLRenderingContext}
         */
        this.gl = gl;

        this.maxAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);

        this.attribState = {
            tempAttribState: new Array(this.maxAttribs),
            attribState: new Array(this.maxAttribs)
        };

        // check we have vao..
        this.nativeVaoExtension = gl.getExtension('OES_vertex_array_object') || gl.getExtension('MOZ_OES_vertex_array_object') || gl.getExtension('WEBKIT_OES_vertex_array_object');
    }

    /**
     * Pushes a new active state
     */


    createClass(WebGLState, [{
        key: 'push',
        value: function push() {
            // next state..
            var state = this.stack[++this.stackIndex];

            if (!state) {
                state = this.stack[this.stackIndex] = new Uint8Array(16);
            }

            // copy state..
            // set active state so we can force overrides of gl state
            for (var i = 0; i < this.activeState.length; i++) {
                this.activeState[i] = state[i];
            }
        }

        /**
         * Pops a state out
         */

    }, {
        key: 'pop',
        value: function pop() {
            var state = this.stack[--this.stackIndex];

            this.setState(state);
        }

        /**
         * Sets the current state
         *
         * @param {*} state - The state to set.
         */

    }, {
        key: 'setState',
        value: function setState(state) {
            this.setDepthTest(state[DEPTH_TEST]);
            this.setFrontFace(state[FRONT_FACE]);
            this.setCullFace(state[CULL_FACE]);
        }

        /**
         * Sets whether to enable or disable depth test.
         *
         * @param {boolean} value - Turn on or off webgl depth testing.
         */

    }, {
        key: 'setDepthTest',
        value: function setDepthTest(value) {
            value = value ? 1 : 0;

            if (this.activeState[DEPTH_TEST] === value) {
                return;
            }

            this.activeState[DEPTH_TEST] = value;
            this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);
        }

        /**
         * Sets whether to enable or disable cull face.
         *
         * @param {boolean} value - Turn on or off webgl cull face.
         */

    }, {
        key: 'setCullFace',
        value: function setCullFace(value) {
            value = value ? 1 : 0;

            if (this.activeState[CULL_FACE] === value) {
                return;
            }

            this.activeState[CULL_FACE] = value;
            this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);
        }

        /**
         * Sets the gl front face.
         *
         * @param {boolean} value - true is clockwise and false is counter-clockwise
         */

    }, {
        key: 'setFrontFace',
        value: function setFrontFace(value) {
            value = value ? 1 : 0;

            if (this.activeState[FRONT_FACE] === value) {
                return;
            }

            this.activeState[FRONT_FACE] = value;
            this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);
        }

        /**
         * Disables all the vaos in use
         *
         */

    }, {
        key: 'resetAttributes',
        value: function resetAttributes() {
            for (var i = 0; i < this.attribState.tempAttribState.length; i++) {
                this.attribState.tempAttribState[i] = 0;
            }

            for (var _i = 0; _i < this.attribState.attribState.length; _i++) {
                this.attribState.attribState[_i] = 0;
            }

            // im going to assume one is always active for performance reasons.
            for (var _i2 = 1; _i2 < this.maxAttribs; _i2++) {
                this.gl.disableVertexAttribArray(_i2);
            }
        }

        // used
        /**
         * Resets all the logic and disables the vaos
         */

    }, {
        key: 'resetToDefault',
        value: function resetToDefault() {
            // unbind any VAO if they exist..
            if (this.nativeVaoExtension) {
                this.nativeVaoExtension.bindVertexArrayOES(null);
            }

            // reset all attributes..
            this.resetAttributes();

            // set active state so we can force overrides of gl state
            for (var i = 0; i < this.activeState.length; ++i) {
                this.activeState[i] = 32;
            }

            this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);

            this.setState(this.defaultState);
        }
    }]);
    return WebGLState;
}();

function hex2rgb(hex, out) {
    out = out || [];

    out[0] = (hex >> 16 & 0xFF) / 255;
    out[1] = (hex >> 8 & 0xFF) / 255;
    out[2] = (hex & 0xFF) / 255;

    return out;
}

/**
 * An object containing WebGL specific properties to be used by the WebGL renderer
 *
 * @class
 * @private
 * @memberof PIXI
 */

var WebGLGraphicsData = function () {
  /**
   * @param {WebGLRenderingContext} gl - The current WebGL drawing context
   * @param {PIXI.Shader} shader - The shader
   * @param {object} attribsState - The state for the VAO
   */
  function WebGLGraphicsData(gl, shader, attribsState) {
    classCallCheck(this, WebGLGraphicsData);

    /**
     * The current WebGL drawing context
     *
     * @member {WebGLRenderingContext}
     */
    this.gl = gl;

    // TODO does this need to be split before uploading??
    /**
     * An array of color components (r,g,b)
     * @member {number[]}
     */
    this.color = [0, 0, 0]; // color split!

    /**
     * An array of points to draw
     * @member {PIXI.Point[]}
     */
    this.points = [];

    /**
     * The indices of the vertices
     * @member {number[]}
     */
    this.indices = [];
    /**
     * The main buffer
     * @member {WebGLBuffer}
     */
    this.buffer = index.GLBuffer.createVertexBuffer(gl);

    /**
     * The index buffer
     * @member {WebGLBuffer}
     */
    this.indexBuffer = index.GLBuffer.createIndexBuffer(gl);

    /**
     * Whether this graphics is dirty or not
     * @member {boolean}
     */
    this.dirty = true;

    this.glPoints = null;
    this.glIndices = null;

    /**
     *
     * @member {PIXI.Shader}
     */
    this.shader = shader;

    this.vao = new index.VertexArrayObject(gl, attribsState).addIndex(this.indexBuffer).addAttribute(this.buffer, shader.attributes.aVertexPosition, gl.FLOAT, false, 4 * 6, 0).addAttribute(this.buffer, shader.attributes.aColor, gl.FLOAT, false, 4 * 6, 2 * 4);
  }

  /**
   * Resets the vertices and the indices
   */


  createClass(WebGLGraphicsData, [{
    key: 'reset',
    value: function reset() {
      this.points.length = 0;
      this.indices.length = 0;
    }

    /**
     * Binds the buffers and uploads the data
     */

  }, {
    key: 'upload',
    value: function upload() {
      this.glPoints = new Float32Array(this.points);
      this.buffer.upload(this.glPoints);

      this.glIndices = new Uint16Array(this.indices);
      this.indexBuffer.upload(this.glIndices);

      this.dirty = false;
    }

    /**
     * Empties all the data
     */

  }, {
    key: 'destroy',
    value: function destroy() {
      this.color = null;
      this.points = null;
      this.indices = null;

      this.vao.destroy();
      this.buffer.destroy();
      this.indexBuffer.destroy();

      this.gl = null;

      this.buffer = null;
      this.indexBuffer = null;

      this.glPoints = null;
      this.glIndices = null;
    }
  }]);
  return WebGLGraphicsData;
}();

var PRECISION = settings.PRECISION;

var GLShader$2 = index.GLShader;

function checkPrecision(src) {
    if (src instanceof Array) {
        if (src[0].substring(0, 9) !== 'precision') {
            var copy = src.slice(0);

            copy.unshift('precision ' + PRECISION + ' float;');

            return copy;
        }
    } else if (src.substring(0, 9) !== 'precision') {
        return 'precision ' + PRECISION + ' float;\n' + src;
    }

    return src;
}

/**
 * Wrapper class, webGL Shader for Pixi.
 * Adds precision string if vertexSrc or fragmentSrc have no mention of it.
 *
 * @class
 * @extends GLShader
 * @memberof PIXI
 */

var Shader$1 = function (_GLShader) {
    inherits(Shader, _GLShader);

    /**
     *
     * @param {WebGLRenderingContext} gl - The current WebGL rendering context
     * @param {string|string[]} vertexSrc - The vertex shader source as an array of strings.
     * @param {string|string[]} fragmentSrc - The fragment shader source as an array of strings.
     */
    function Shader(gl, vertexSrc, fragmentSrc) {
        classCallCheck(this, Shader);
        return possibleConstructorReturn(this, (Shader.__proto__ || Object.getPrototypeOf(Shader)).call(this, gl, checkPrecision(vertexSrc), checkPrecision(fragmentSrc)));
    }

    return Shader;
}(GLShader$2);

/**
 * This shader is used to draw simple primitive shapes for {@link PIXI.Graphics}.
 *
 * @class
 * @memberof PIXI
 * @extends PIXI.Shader
 */

var PrimitiveShader = function (_Shader) {
    inherits(PrimitiveShader, _Shader);

    /**
     * @param {WebGLRenderingContext} gl - The webgl shader manager this shader works for.
     */
    function PrimitiveShader(gl) {
        classCallCheck(this, PrimitiveShader);
        return possibleConstructorReturn(this, (PrimitiveShader.__proto__ || Object.getPrototypeOf(PrimitiveShader)).call(this, gl,
        // vertex shader
        ['attribute vec2 aVertexPosition;', 'attribute vec4 aColor;', 'uniform mat3 translationMatrix;', 'uniform mat3 projectionMatrix;', 'uniform float alpha;', 'uniform vec3 tint;', 'varying vec4 vColor;', 'void main(void){', '   gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);', '   vColor = aColor * vec4(tint * alpha, alpha);', '}'].join('\n'),
        // fragment shader
        ['varying vec4 vColor;', 'void main(void){', '   gl_FragColor = vColor;', '}'].join('\n')));
    }

    return PrimitiveShader;
}(Shader$1);

/**
 * Builds a line to draw
 *
 * Ignored from docs since it is not directly exposed.
 *
 * @ignore
 * @private
 * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties
 * @param {object} webGLData - an object containing all the webGL-specific information to create this shape
 */
function buildLine(graphicsData, webGLData) {
    // TODO OPTIMISE!
    var points = graphicsData.points;

    if (points.length === 0) {
        return;
    }
    // if the line width is an odd number add 0.5 to align to a whole pixel
    // commenting this out fixes #711 and #1620
    // if (graphicsData.lineWidth%2)
    // {
    //     for (i = 0; i < points.length; i++)
    //     {
    //         points[i] += 0.5;
    //     }
    // }

    // get first and last point.. figure out the middle!
    var firstPoint = new Point$2(points[0], points[1]);
    var lastPoint = new Point$2(points[points.length - 2], points[points.length - 1]);

    // if the first point is the last point - gonna have issues :)
    if (firstPoint.x === lastPoint.x && firstPoint.y === lastPoint.y) {
        // need to clone as we are going to slightly modify the shape..
        points = points.slice();

        points.pop();
        points.pop();

        lastPoint = new Point$2(points[points.length - 2], points[points.length - 1]);

        var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;
        var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;

        points.unshift(midPointX, midPointY);
        points.push(midPointX, midPointY);
    }

    var verts = webGLData.points;
    var indices = webGLData.indices;
    var length = points.length / 2;
    var indexCount = points.length;
    var indexStart = verts.length / 6;

    // DRAW the Line
    var width = graphicsData.lineWidth / 2;

    // sort color
    var color = hex2rgb(graphicsData.strokeStyle);
    var alpha = graphicsData.lineAlpha;
    var r = color[0] * alpha;
    var g = color[1] * alpha;
    var b = color[2] * alpha;

    var p1x = points[0];
    var p1y = points[1];
    var p2x = points[2];
    var p2y = points[3];
    var p3x = 0;
    var p3y = 0;

    var perpx = -(p1y - p2y);
    var perpy = p1x - p2x;
    var perp2x = 0;
    var perp2y = 0;
    var perp3x = 0;
    var perp3y = 0;

    var dist = Math.sqrt(perpx * perpx + perpy * perpy);

    perpx /= dist;
    perpy /= dist;
    perpx *= width;
    perpy *= width;

    // start
    verts.push(p1x - perpx, p1y - perpy, r, g, b, alpha);

    verts.push(p1x + perpx, p1y + perpy, r, g, b, alpha);

    for (var i = 1; i < length - 1; ++i) {
        p1x = points[(i - 1) * 2];
        p1y = points[(i - 1) * 2 + 1];

        p2x = points[i * 2];
        p2y = points[i * 2 + 1];

        p3x = points[(i + 1) * 2];
        p3y = points[(i + 1) * 2 + 1];

        perpx = -(p1y - p2y);
        perpy = p1x - p2x;

        dist = Math.sqrt(perpx * perpx + perpy * perpy);
        perpx /= dist;
        perpy /= dist;
        perpx *= width;
        perpy *= width;

        perp2x = -(p2y - p3y);
        perp2y = p2x - p3x;

        dist = Math.sqrt(perp2x * perp2x + perp2y * perp2y);
        perp2x /= dist;
        perp2y /= dist;
        perp2x *= width;
        perp2y *= width;

        var a1 = -perpy + p1y - (-perpy + p2y);
        var b1 = -perpx + p2x - (-perpx + p1x);
        var c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);
        var a2 = -perp2y + p3y - (-perp2y + p2y);
        var b2 = -perp2x + p2x - (-perp2x + p3x);
        var c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);

        var denom = a1 * b2 - a2 * b1;

        if (Math.abs(denom) < 0.1) {
            denom += 10.1;
            verts.push(p2x - perpx, p2y - perpy, r, g, b, alpha);

            verts.push(p2x + perpx, p2y + perpy, r, g, b, alpha);

            continue;
        }

        var px = (b1 * c2 - b2 * c1) / denom;
        var py = (a2 * c1 - a1 * c2) / denom;
        var pdist = (px - p2x) * (px - p2x) + (py - p2y) * (py - p2y);

        if (pdist > 196 * width * width) {
            perp3x = perpx - perp2x;
            perp3y = perpy - perp2y;

            dist = Math.sqrt(perp3x * perp3x + perp3y * perp3y);
            perp3x /= dist;
            perp3y /= dist;
            perp3x *= width;
            perp3y *= width;

            verts.push(p2x - perp3x, p2y - perp3y);
            verts.push(r, g, b, alpha);

            verts.push(p2x + perp3x, p2y + perp3y);
            verts.push(r, g, b, alpha);

            verts.push(p2x - perp3x, p2y - perp3y);
            verts.push(r, g, b, alpha);

            indexCount++;
        } else {
            verts.push(px, py);
            verts.push(r, g, b, alpha);

            verts.push(p2x - (px - p2x), p2y - (py - p2y));
            verts.push(r, g, b, alpha);
        }
    }

    p1x = points[(length - 2) * 2];
    p1y = points[(length - 2) * 2 + 1];

    p2x = points[(length - 1) * 2];
    p2y = points[(length - 1) * 2 + 1];

    perpx = -(p1y - p2y);
    perpy = p1x - p2x;

    dist = Math.sqrt(perpx * perpx + perpy * perpy);
    perpx /= dist;
    perpy /= dist;
    perpx *= width;
    perpy *= width;

    verts.push(p2x - perpx, p2y - perpy);
    verts.push(r, g, b, alpha);

    verts.push(p2x + perpx, p2y + perpy);
    verts.push(r, g, b, alpha);

    indices.push(indexStart);

    for (var _i = 0; _i < indexCount; ++_i) {
        indices.push(indexStart++);
    }

    indices.push(indexStart - 1);
}

var earcut_1 = earcut;

function earcut(data, holeIndices, dim) {

    dim = dim || 2;

    var hasHoles = holeIndices && holeIndices.length,
        outerLen = hasHoles ? holeIndices[0] * dim : data.length,
        outerNode = linkedList(data, 0, outerLen, dim, true),
        triangles = [];

    if (!outerNode) return triangles;

    var minX, minY, maxX, maxY, x, y, size;

    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);

    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
    if (data.length > 80 * dim) {
        minX = maxX = data[0];
        minY = maxY = data[1];

        for (var i = dim; i < outerLen; i += dim) {
            x = data[i];
            y = data[i + 1];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
        }

        // minX, minY and size are later used to transform coords into integers for z-order calculation
        size = Math.max(maxX - minX, maxY - minY);
    }

    earcutLinked(outerNode, triangles, dim, minX, minY, size);

    return triangles;
}

// create a circular doubly linked list from polygon points in the specified winding order
function linkedList(data, start, end, dim, clockwise) {
    var i, last;

    if (clockwise === (signedArea(data, start, end, dim) > 0)) {
        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
    } else {
        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
    }

    if (last && equals(last, last.next)) {
        removeNode(last);
        last = last.next;
    }

    return last;
}

// eliminate colinear or duplicate points
function filterPoints(start, end) {
    if (!start) return start;
    if (!end) end = start;

    var p = start,
        again;
    do {
        again = false;

        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
            removeNode(p);
            p = end = p.prev;
            if (p === p.next) return null;
            again = true;

        } else {
            p = p.next;
        }
    } while (again || p !== end);

    return end;
}

// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked(ear, triangles, dim, minX, minY, size, pass) {
    if (!ear) return;

    // interlink polygon nodes in z-order
    if (!pass && size) indexCurve(ear, minX, minY, size);

    var stop = ear,
        prev, next;

    // iterate through ears, slicing them one by one
    while (ear.prev !== ear.next) {
        prev = ear.prev;
        next = ear.next;

        if (size ? isEarHashed(ear, minX, minY, size) : isEar(ear)) {
            // cut off the triangle
            triangles.push(prev.i / dim);
            triangles.push(ear.i / dim);
            triangles.push(next.i / dim);

            removeNode(ear);

            // skipping the next vertice leads to less sliver triangles
            ear = next.next;
            stop = next.next;

            continue;
        }

        ear = next;

        // if we looped through the whole remaining polygon and can't find any more ears
        if (ear === stop) {
            // try filtering points and slicing again
            if (!pass) {
                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, size, 1);

            // if this didn't work, try curing all small self-intersections locally
            } else if (pass === 1) {
                ear = cureLocalIntersections(ear, triangles, dim);
                earcutLinked(ear, triangles, dim, minX, minY, size, 2);

            // as a last resort, try splitting the remaining polygon into two
            } else if (pass === 2) {
                splitEarcut(ear, triangles, dim, minX, minY, size);
            }

            break;
        }
    }
}

// check whether a polygon node forms a valid ear with adjacent nodes
function isEar(ear) {
    var a = ear.prev,
        b = ear,
        c = ear.next;

    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

    // now make sure we don't have other points inside the potential ear
    var p = ear.next.next;

    while (p !== ear.prev) {
        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.next;
    }

    return true;
}

function isEarHashed(ear, minX, minY, size) {
    var a = ear.prev,
        b = ear,
        c = ear.next;

    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

    // triangle bbox; min & max are calculated like this for speed
    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),
        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),
        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),
        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);

    // z-order range for the current triangle bbox;
    var minZ = zOrder(minTX, minTY, minX, minY, size),
        maxZ = zOrder(maxTX, maxTY, minX, minY, size);

    // first look for points inside the triangle in increasing z-order
    var p = ear.nextZ;

    while (p && p.z <= maxZ) {
        if (p !== ear.prev && p !== ear.next &&
            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.nextZ;
    }

    // then look for points in decreasing z-order
    p = ear.prevZ;

    while (p && p.z >= minZ) {
        if (p !== ear.prev && p !== ear.next &&
            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
    }

    return true;
}

// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections(start, triangles, dim) {
    var p = start;
    do {
        var a = p.prev,
            b = p.next.next;

        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {

            triangles.push(a.i / dim);
            triangles.push(p.i / dim);
            triangles.push(b.i / dim);

            // remove two nodes involved
            removeNode(p);
            removeNode(p.next);

            p = start = b;
        }
        p = p.next;
    } while (p !== start);

    return p;
}

// try splitting polygon into two and triangulate them independently
function splitEarcut(start, triangles, dim, minX, minY, size) {
    // look for a valid diagonal that divides the polygon into two
    var a = start;
    do {
        var b = a.next.next;
        while (b !== a.prev) {
            if (a.i !== b.i && isValidDiagonal(a, b)) {
                // split the polygon in two by the diagonal
                var c = splitPolygon(a, b);

                // filter colinear points around the cuts
                a = filterPoints(a, a.next);
                c = filterPoints(c, c.next);

                // run earcut on each half
                earcutLinked(a, triangles, dim, minX, minY, size);
                earcutLinked(c, triangles, dim, minX, minY, size);
                return;
            }
            b = b.next;
        }
        a = a.next;
    } while (a !== start);
}

// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles(data, holeIndices, outerNode, dim) {
    var queue = [],
        i, len, start, end, list;

    for (i = 0, len = holeIndices.length; i < len; i++) {
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false);
        if (list === list.next) list.steiner = true;
        queue.push(getLeftmost(list));
    }

    queue.sort(compareX);

    // process holes from left to right
    for (i = 0; i < queue.length; i++) {
        eliminateHole(queue[i], outerNode);
        outerNode = filterPoints(outerNode, outerNode.next);
    }

    return outerNode;
}

function compareX(a, b) {
    return a.x - b.x;
}

// find a bridge between vertices that connects hole with an outer ring and and link it
function eliminateHole(hole, outerNode) {
    outerNode = findHoleBridge(hole, outerNode);
    if (outerNode) {
        var b = splitPolygon(outerNode, hole);
        filterPoints(b, b.next);
    }
}

// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge(hole, outerNode) {
    var p = outerNode,
        hx = hole.x,
        hy = hole.y,
        qx = -Infinity,
        m;

    // find a segment intersected by a ray from the hole's leftmost point to the left;
    // segment's endpoint with lesser x will be potential connection point
    do {
        if (hy <= p.y && hy >= p.next.y) {
            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
                qx = x;
                if (x === hx) {
                    if (hy === p.y) return p;
                    if (hy === p.next.y) return p.next;
                }
                m = p.x < p.next.x ? p : p.next;
            }
        }
        p = p.next;
    } while (p !== outerNode);

    if (!m) return null;

    if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint

    // look for points inside the triangle of hole point, segment intersection and endpoint;
    // if there are no points found, we have a valid connection;
    // otherwise choose the point of the minimum angle with the ray as connection point

    var stop = m,
        mx = m.x,
        my = m.y,
        tanMin = Infinity,
        tan;

    p = m.next;

    while (p !== stop) {
        if (hx >= p.x && p.x >= mx &&
                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {

            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

            if ((tan < tanMin || (tan === tanMin && p.x > m.x)) && locallyInside(p, hole)) {
                m = p;
                tanMin = tan;
            }
        }

        p = p.next;
    }

    return m;
}

// interlink polygon nodes in z-order
function indexCurve(start, minX, minY, size) {
    var p = start;
    do {
        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, size);
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
    } while (p !== start);

    p.prevZ.nextZ = null;
    p.prevZ = null;

    sortLinked(p);
}

// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked(list) {
    var i, p, q, e, tail, numMerges, pSize, qSize,
        inSize = 1;

    do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;

        while (p) {
            numMerges++;
            q = p;
            pSize = 0;
            for (i = 0; i < inSize; i++) {
                pSize++;
                q = q.nextZ;
                if (!q) break;
            }

            qSize = inSize;

            while (pSize > 0 || (qSize > 0 && q)) {

                if (pSize === 0) {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                } else if (qSize === 0 || !q) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else if (p.z <= q.z) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                }

                if (tail) tail.nextZ = e;
                else list = e;

                e.prevZ = tail;
                tail = e;
            }

            p = q;
        }

        tail.nextZ = null;
        inSize *= 2;

    } while (numMerges > 1);

    return list;
}

// z-order of a point given coords and size of the data bounding box
function zOrder(x, y, minX, minY, size) {
    // coords are transformed into non-negative 15-bit integer range
    x = 32767 * (x - minX) / size;
    y = 32767 * (y - minY) / size;

    x = (x | (x << 8)) & 0x00FF00FF;
    x = (x | (x << 4)) & 0x0F0F0F0F;
    x = (x | (x << 2)) & 0x33333333;
    x = (x | (x << 1)) & 0x55555555;

    y = (y | (y << 8)) & 0x00FF00FF;
    y = (y | (y << 4)) & 0x0F0F0F0F;
    y = (y | (y << 2)) & 0x33333333;
    y = (y | (y << 1)) & 0x55555555;

    return x | (y << 1);
}

// find the leftmost node of a polygon ring
function getLeftmost(start) {
    var p = start,
        leftmost = start;
    do {
        if (p.x < leftmost.x) leftmost = p;
        p = p.next;
    } while (p !== start);

    return leftmost;
}

// check if a point lies within a convex triangle
function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&
           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&
           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
}

// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) &&
           locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);
}

// signed area of a triangle
function area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
}

// check if two points are equal
function equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
}

// check if two segments intersect
function intersects(p1, q1, p2, q2) {
    if ((equals(p1, q1) && equals(p2, q2)) ||
        (equals(p1, q2) && equals(p2, q1))) return true;
    return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 &&
           area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;
}

// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon(a, b) {
    var p = a;
    do {
        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
                intersects(p, p.next, a, b)) return true;
        p = p.next;
    } while (p !== a);

    return false;
}

// check if a polygon diagonal is locally inside the polygon
function locallyInside(a, b) {
    return area(a.prev, a, a.next) < 0 ?
        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :
        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
}

// check if the middle point of a polygon diagonal is inside the polygon
function middleInside(a, b) {
    var p = a,
        inside = false,
        px = (a.x + b.x) / 2,
        py = (a.y + b.y) / 2;
    do {
        if (((p.y > py) !== (p.next.y > py)) && (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))
            inside = !inside;
        p = p.next;
    } while (p !== a);

    return inside;
}

// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon(a, b) {
    var a2 = new Node(a.i, a.x, a.y),
        b2 = new Node(b.i, b.x, b.y),
        an = a.next,
        bp = b.prev;

    a.next = b;
    b.prev = a;

    a2.next = an;
    an.prev = a2;

    b2.next = a2;
    a2.prev = b2;

    bp.next = b2;
    b2.prev = bp;

    return b2;
}

// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode(i, x, y, last) {
    var p = new Node(i, x, y);

    if (!last) {
        p.prev = p;
        p.next = p;

    } else {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
    }
    return p;
}

function removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;

    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
}

function Node(i, x, y) {
    // vertice index in coordinates array
    this.i = i;

    // vertex coordinates
    this.x = x;
    this.y = y;

    // previous and next vertice nodes in a polygon ring
    this.prev = null;
    this.next = null;

    // z-order curve value
    this.z = null;

    // previous and next nodes in z-order
    this.prevZ = null;
    this.nextZ = null;

    // indicates whether this is a steiner point
    this.steiner = false;
}

// return a percentage difference between the polygon area and its triangulation area;
// used to verify correctness of triangulation
earcut.deviation = function (data, holeIndices, dim, triangles) {
    var hasHoles = holeIndices && holeIndices.length;
    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;

    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
    if (hasHoles) {
        for (var i = 0, len = holeIndices.length; i < len; i++) {
            var start = holeIndices[i] * dim;
            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
            polygonArea -= Math.abs(signedArea(data, start, end, dim));
        }
    }

    var trianglesArea = 0;
    for (i = 0; i < triangles.length; i += 3) {
        var a = triangles[i] * dim;
        var b = triangles[i + 1] * dim;
        var c = triangles[i + 2] * dim;
        trianglesArea += Math.abs(
            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -
            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
    }

    return polygonArea === 0 && trianglesArea === 0 ? 0 :
        Math.abs((trianglesArea - polygonArea) / polygonArea);
};

function signedArea(data, start, end, dim) {
    var sum = 0;
    for (var i = start, j = end - dim; i < end; i += dim) {
        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
        j = i;
    }
    return sum;
}

// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts
earcut.flatten = function (data) {
    var dim = data[0][0].length,
        result = {vertices: [], holes: [], dimensions: dim},
        holeIndex = 0;

    for (var i = 0; i < data.length; i++) {
        for (var j = 0; j < data[i].length; j++) {
            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
        }
        if (i > 0) {
            holeIndex += data[i - 1].length;
            result.holes.push(holeIndex);
        }
    }
    return result;
};

/**
 * Builds a polygon to draw
 *
 * Ignored from docs since it is not directly exposed.
 *
 * @ignore
 * @private
 * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties
 * @param {object} webGLData - an object containing all the webGL-specific information to create this shape
 */
function buildPoly(graphicsData, webGLData) {
    graphicsData.points = graphicsData.shape.points.slice();

    var points = graphicsData.points;

    if (graphicsData.fill && points.length >= 6) {
        var holeArray = [];
        // Process holes..
        var holes = graphicsData.holes;

        for (var i = 0; i < holes.length; i++) {
            var hole = holes[i];

            holeArray.push(points.length / 2);

            points = points.concat(hole.points);
        }

        // get first and last point.. figure out the middle!
        var verts = webGLData.points;
        var indices = webGLData.indices;

        var length = points.length / 2;

        // sort color
        var color = hex2rgb(graphicsData.fillStyle);
        var alpha = graphicsData.fillAlpha;
        var r = color[0] * alpha;
        var g = color[1] * alpha;
        var b = color[2] * alpha;

        var triangles = earcut_1(points, holeArray, 2);

        if (!triangles) {
            return;
        }

        var vertPos = verts.length / 6;

        for (var _i = 0; _i < triangles.length; _i += 3) {
            indices.push(triangles[_i] + vertPos);
            indices.push(triangles[_i] + vertPos);
            indices.push(triangles[_i + 1] + vertPos);
            indices.push(triangles[_i + 2] + vertPos);
            indices.push(triangles[_i + 2] + vertPos);
        }

        for (var _i2 = 0; _i2 < length; _i2++) {
            verts.push(points[_i2 * 2], points[_i2 * 2 + 1], r, g, b, alpha);
        }
    }

    if (graphicsData.lineWidth > 0) {
        buildLine(graphicsData, webGLData);
    }
}

/**
 * Builds a rectangle to draw
 *
 * Ignored from docs since it is not directly exposed.
 *
 * @ignore
 * @private
 * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties
 * @param {object} webGLData - an object containing all the webGL-specific information to create this shape
 */
function buildRectangle(graphicsData, webGLData) {
    // --- //
    // need to convert points to a nice regular data
    //
    var rectData = graphicsData.shape;
    var x = rectData.x;
    var y = rectData.y;
    var width = rectData.width;
    var height = rectData.height;

    if (graphicsData.fill) {
        var color = hex2rgb(graphicsData.fillStyle);
        var alpha = graphicsData.fillAlpha;

        var r = color[0] * alpha;
        var g = color[1] * alpha;
        var b = color[2] * alpha;

        var verts = webGLData.points;
        var indices = webGLData.indices;

        var vertPos = verts.length / 6;

        // start
        verts.push(x, y);
        verts.push(r, g, b, alpha);

        verts.push(x + width, y);
        verts.push(r, g, b, alpha);

        verts.push(x, y + height);
        verts.push(r, g, b, alpha);

        verts.push(x + width, y + height);
        verts.push(r, g, b, alpha);

        // insert 2 dead triangles..
        indices.push(vertPos, vertPos, vertPos + 1, vertPos + 2, vertPos + 3, vertPos + 3);
    }

    if (graphicsData.lineWidth) {
        var tempPoints = graphicsData.points;

        graphicsData.points = [x, y, x + width, y, x + width, y + height, x, y + height, x, y];

        buildLine(graphicsData, webGLData);

        graphicsData.points = tempPoints;
    }
}

/**
 * Builds a rounded rectangle to draw
 *
 * Ignored from docs since it is not directly exposed.
 *
 * @ignore
 * @private
 * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties
 * @param {object} webGLData - an object containing all the webGL-specific information to create this shape
 */
function buildRoundedRectangle(graphicsData, webGLData) {
    var rrectData = graphicsData.shape;
    var x = rrectData.x;
    var y = rrectData.y;
    var width = rrectData.width;
    var height = rrectData.height;

    var radius = rrectData.radius;

    var recPoints = [];

    recPoints.push(x, y + radius);
    quadraticBezierCurve(x, y + height - radius, x, y + height, x + radius, y + height, recPoints);
    quadraticBezierCurve(x + width - radius, y + height, x + width, y + height, x + width, y + height - radius, recPoints);
    quadraticBezierCurve(x + width, y + radius, x + width, y, x + width - radius, y, recPoints);
    quadraticBezierCurve(x + radius, y, x, y, x, y + radius + 0.0000000001, recPoints);

    // this tiny number deals with the issue that occurs when points overlap and earcut fails to triangulate the item.
    // TODO - fix this properly, this is not very elegant.. but it works for now.

    if (graphicsData.fill) {
        var color = hex2rgb(graphicsData.fillStyle);
        var alpha = graphicsData.fillAlpha;

        var r = color[0] * alpha;
        var g = color[1] * alpha;
        var b = color[2] * alpha;

        var verts = webGLData.points;
        var indices = webGLData.indices;

        var vecPos = verts.length / 6;

        var triangles = earcut_1(recPoints, null, 2);

        for (var i = 0, j = triangles.length; i < j; i += 3) {
            indices.push(triangles[i] + vecPos);
            indices.push(triangles[i] + vecPos);
            indices.push(triangles[i + 1] + vecPos);
            indices.push(triangles[i + 2] + vecPos);
            indices.push(triangles[i + 2] + vecPos);
        }

        for (var _i = 0, _j = recPoints.length; _i < _j; _i++) {
            verts.push(recPoints[_i], recPoints[++_i], r, g, b, alpha);
        }
    }

    if (graphicsData.lineWidth) {
        var tempPoints = graphicsData.points;

        graphicsData.points = recPoints;

        buildLine(graphicsData, webGLData);

        graphicsData.points = tempPoints;
    }
}

/**
 * Calculate the points for a quadratic bezier curve. (helper function..)
 * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c
 *
 * Ignored from docs since it is not directly exposed.
 *
 * @ignore
 * @private
 * @param {number} fromX - Origin point x
 * @param {number} fromY - Origin point x
 * @param {number} cpX - Control point x
 * @param {number} cpY - Control point y
 * @param {number} toX - Destination point x
 * @param {number} toY - Destination point y
 * @param {number[]} [out=[]] - The output array to add points into. If not passed, a new array is created.
 * @return {number[]} an array of points
 */
function quadraticBezierCurve(fromX, fromY, cpX, cpY, toX, toY) {
    var out = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];

    var n = 20;
    var points = out;

    var xa = 0;
    var ya = 0;
    var xb = 0;
    var yb = 0;
    var x = 0;
    var y = 0;

    function getPt(n1, n2, perc) {
        var diff = n2 - n1;

        return n1 + diff * perc;
    }

    for (var i = 0, j = 0; i <= n; ++i) {
        j = i / n;

        // The Green Line
        xa = getPt(fromX, cpX, j);
        ya = getPt(fromY, cpY, j);
        xb = getPt(cpX, toX, j);
        yb = getPt(cpY, toY, j);

        // The Black Dot
        x = getPt(xa, xb, j);
        y = getPt(ya, yb, j);

        points.push(x, y);
    }

    return points;
}

/**
 * Builds a circle to draw
 *
 * Ignored from docs since it is not directly exposed.
 *
 * @ignore
 * @private
 * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object to draw
 * @param {object} webGLData - an object containing all the webGL-specific information to create this shape
 */
function buildCircle(graphicsData, webGLData) {
    debugger;
    // need to convert points to a nice regular data
    var circleData = graphicsData.shape;
    var x = circleData.x;
    var y = circleData.y;
    var width = void 0;
    var height = void 0;

    // TODO - bit hacky??
    if (graphicsData.type === SHAPES.CIRC) {
        width = circleData.radius;
        height = circleData.radius;
    } else {
        width = circleData.width;
        height = circleData.height;
    }

    var totalSegs = Math.floor(30 * Math.sqrt(circleData.radius)) || Math.floor(15 * Math.sqrt(circleData.width + circleData.height));

    var seg = Math.PI * 2 / totalSegs;

    if (graphicsData.fill) {
        var color = hex2rgb(graphicsData.fillStyle);
        var alpha = graphicsData.fillAlpha;

        var r = color[0] * alpha;
        var g = color[1] * alpha;
        var b = color[2] * alpha;

        var verts = webGLData.points;
        var indices = webGLData.indices;

        var vecPos = verts.length / 6;

        indices.push(vecPos);

        for (var i = 0; i < totalSegs + 1; i++) {
            verts.push(x, y, r, g, b, alpha);

            verts.push(x + Math.sin(seg * i) * width, y + Math.cos(seg * i) * height, r, g, b, alpha);

            indices.push(vecPos++, vecPos++);
        }

        indices.push(vecPos - 1);
    }

    if (graphicsData.lineWidth) {
        var tempPoints = graphicsData.points;

        graphicsData.points = [];

        for (var _i = 0; _i < totalSegs + 1; _i++) {
            graphicsData.points.push(x + Math.sin(seg * _i) * width, y + Math.cos(seg * _i) * height);
        }

        buildLine(graphicsData, webGLData);

        graphicsData.points = tempPoints;
    }
}

var GraphicsRenderer = function (_ObjectRenderer) {
    inherits(GraphicsRenderer, _ObjectRenderer);

    /**
     * @param {PIXI.WebGLRenderer} renderer - The renderer this object renderer works for.
     */
    function GraphicsRenderer(renderer) {
        classCallCheck(this, GraphicsRenderer);

        var _this = possibleConstructorReturn(this, (GraphicsRenderer.__proto__ || Object.getPrototypeOf(GraphicsRenderer)).call(this, renderer));

        _this.graphicsDataPool = [];

        _this.primitiveShader = null;

        _this.gl = renderer.gl;

        // easy access!
        _this.CONTEXT_UID = 0;
        return _this;
    }

    /**
     * Called when there is a WebGL context change
     *
     * @private
     *
     */


    createClass(GraphicsRenderer, [{
        key: 'onContextChange',
        value: function onContextChange() {
            this.gl = this.renderer.gl;
            this.CONTEXT_UID = this.renderer.CONTEXT_UID;
            this.primitiveShader = new PrimitiveShader(this.gl);
        }

        /**
         * Destroys this renderer.
         *
         */

    }, {
        key: 'destroy',
        value: function destroy() {
            ObjectRenderer.prototype.destroy.call(this);

            for (var i = 0; i < this.graphicsDataPool.length; ++i) {
                this.graphicsDataPool[i].destroy();
            }

            this.graphicsDataPool = null;
        }

        /**
         * Renders a graphics object.
         *
         * @param {PIXI.Graphics} graphics - The graphics object to render.
         */

    }, {
        key: 'render',
        value: function render(displayObject) {
            var graphics = displayObject.graphics;
            var renderer = this.renderer;
            var gl = renderer.gl;

            var webGLData = void 0;
            var webGL = graphics._webGL[this.CONTEXT_UID];

            if (!webGL || graphics.dirty !== webGL.dirty) {
                this.updateGraphics(graphics);

                webGL = graphics._webGL[this.CONTEXT_UID];
            }

            // This  could be speeded up for sure!
            var shader = this.primitiveShader;

            renderer.bindShader(shader);

            for (var i = 0, n = webGL.data.length; i < n; i++) {
                webGLData = webGL.data[i];
                var shaderTemp = webGLData.shader;

                renderer.bindShader(shaderTemp);

                var globalMatrix = displayObject.getConcatenatedMatrix().toArray(true);
                shaderTemp.uniforms.translationMatrix = globalMatrix;
                shaderTemp.uniforms.tint = hex2rgb(graphics.tint);
                shaderTemp.uniforms.alpha = graphics.worldAlpha;

                renderer.bindVao(webGLData.vao);
                webGLData.vao.draw(gl.TRIANGLE_STRIP, webGLData.indices.length);
            }
        }

        /**
         * Updates the graphics object
         *
         * @private
         * @param {PIXI.Graphics} graphics - The graphics object to update
         */

    }, {
        key: 'updateGraphics',
        value: function updateGraphics(graphics) {
            var gl = this.renderer.gl;

            // get the contexts graphics object
            var webGL = graphics._webGL[this.CONTEXT_UID];

            // if the graphics object does not exist in the webGL context time to create it!
            if (!webGL) {
                webGL = graphics._webGL[this.CONTEXT_UID] = { lastIndex: 0, data: [], gl: gl, clearDirty: -1, dirty: -1 };
            }

            // flag the graphics as not dirty as we are about to update it...
            webGL.dirty = graphics.dirty;

            // if the user cleared the graphics object we will need to clear every object
            if (graphics.clearDirty !== webGL.clearDirty) {
                webGL.clearDirty = graphics.clearDirty;

                // loop through and return all the webGLDatas to the object pool so than can be reused later on
                for (var i = 0; i < webGL.data.length; i++) {
                    this.graphicsDataPool.push(webGL.data[i]);
                }

                // clear the array and reset the index..
                webGL.data.length = 0;
                webGL.lastIndex = 0;
            }

            var webGLData = void 0;

            // loop through the graphics datas and construct each one..
            // if the object is a complex fill then the new stencil buffer technique will be used
            // other wise graphics objects will be pushed into a batch..
            for (var _i = webGL.lastIndex; _i < graphics.graphicsData.length; _i++) {
                var data = graphics.graphicsData[_i];

                // TODO - this can be simplified
                webGLData = this.getWebGLData(webGL, 0);

                if (data.type === SHAPES.POLY) {
                    buildPoly(data, webGLData);
                }
                if (data.type === SHAPES.RECT) {
                    buildRectangle(data, webGLData);
                } else if (data.type === SHAPES.CIRC || data.type === SHAPES.ELIP) {
                    buildCircle(data, webGLData);
                } else if (data.type === SHAPES.RREC) {
                    buildRoundedRectangle(data, webGLData);
                }

                webGL.lastIndex++;
            }

            this.renderer.bindVao(null);

            // upload all the dirty data...
            for (var _i2 = 0; _i2 < webGL.data.length; _i2++) {
                webGLData = webGL.data[_i2];

                if (webGLData.dirty) {
                    webGLData.upload();
                }
            }
        }

        /**
         *
         * @private
         * @param {WebGLRenderingContext} gl - the current WebGL drawing context
         * @param {number} type - TODO @Alvin
         * @return {*} TODO
         */

    }, {
        key: 'getWebGLData',
        value: function getWebGLData(gl, type) {
            var webGLData = gl.data[gl.data.length - 1];

            if (!webGLData || webGLData.points.length > 320000) {
                webGLData = this.graphicsDataPool.pop() || new WebGLGraphicsData(this.renderer.gl, this.primitiveShader, this.renderer.state.attribsState);

                webGLData.reset(type);
                gl.data.push(webGLData);
            }

            webGLData.dirty = true;

            return webGLData;
        }
    }]);
    return GraphicsRenderer;
}(ObjectRenderer);

/**
 * Generic Mask Stack data structure.
 *
 * @memberof PIXI
 * @function mapWebGLDrawModesToPixi
 * @private
 * @param {WebGLRenderingContext} gl - The current WebGL drawing context
 * @param {object} [object={}] - The object to map into
 * @return {object} The mapped draw modes.
 */
function mapWebGLDrawModesToPixi(gl) {
  var object = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  object[DRAW_MODES.POINTS] = gl.POINTS;
  object[DRAW_MODES.LINES] = gl.LINES;
  object[DRAW_MODES.LINE_LOOP] = gl.LINE_LOOP;
  object[DRAW_MODES.LINE_STRIP] = gl.LINE_STRIP;
  object[DRAW_MODES.TRIANGLES] = gl.TRIANGLES;
  object[DRAW_MODES.TRIANGLE_STRIP] = gl.TRIANGLE_STRIP;
  object[DRAW_MODES.TRIANGLE_FAN] = gl.TRIANGLE_FAN;

  return object;
}

var CONTEXT_UID = 0;

var WebGLStageRenderer = function () {
    function WebGLStageRenderer(stage, app) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        classCallCheck(this, WebGLStageRenderer);

        this.type = RENDERER_TYPE.WEBGL;
        this.width = app.width;
        this.height = app.height;
        this.canvas = stage.canvas;

        /*
        * 处理上下文丢失和恢复
        * 你的WebGL程序必须有一个用于处理上下文丢失（Lost Context）的机制
        * 导致上下文丢失的原因：
        * 移动设备电力不足
        * 其他外因导致GPU重置
        * 当浏览器标签页处于后台时，浏览器抛弃了上下文
        * 耗费资源过多，浏览器抛弃了上下文
        */
        this.handleContextLost = this.handleContextLost.bind(this);
        this.handleContextRestored = this.handleContextRestored.bind(this);
        this.canvas.addEventListener('webglcontextlost', this.handleContextLost, false);
        this.canvas.addEventListener('webglcontextrestored', this.handleContextRestored, false);

        this._backgroundColor = 0x000000;
        this._backgroundColorRgba = [0, 0, 0, 0];
        this._backgroundColorString = '#000000';
        this.backgroundColor = options.backgroundColor || this._backgroundColor;

        this._contextOptions = {
            alpha: options.transparent,
            antialias: options.antialias,
            premultipliedAlpha: options.transparent && options.transparent !== 'notMultiplied',
            stencil: true,
            preserveDrawingBuffer: options.preserveDrawingBuffer
        };

        this.emptyRenderer = new ObjectRenderer(this);

        this.currentRenderer = this.emptyRenderer;

        this.gl = options.context || index.createContext(this.canvas, this._contextOptions);

        this.CONTEXT_UID = CONTEXT_UID++;

        this.state = new WebGLState(this.gl);

        this.renderingToScreen = true;

        /**
         * Holds the current shader
         *
         * @member {PIXI.Shader}
         */
        this._activeShader = null;

        this._activeVao = null;

        /**
         * Holds the current render target
         *
         * @member {PIXI.RenderTarget}
         */
        this._activeRenderTarget = null;

        // map some webGL blend and drawmodes..
        this.drawModes = mapWebGLDrawModesToPixi(this.gl);

        this.webglGR = new GraphicsRenderer(this);

        this._initContext();
    }

    /**
     * Creates the WebGL context
     *
     * @private
     */


    createClass(WebGLStageRenderer, [{
        key: '_initContext',
        value: function _initContext() {
            var gl = this.gl;

            // restore a context if it was previously lost
            if (gl.isContextLost() && gl.getExtension('WEBGL_lose_context')) {
                gl.getExtension('WEBGL_lose_context').restoreContext();
            }

            this.state.resetToDefault();

            this.rootRenderTarget = new RenderTarget(gl, this.width, this.height, null, settings.RESOLUTION, true);
            this.rootRenderTarget.clearColor = this._backgroundColorRgba;

            this.bindRenderTarget(this.rootRenderTarget);

            this.webglGR.onContextChange();
        }
    }, {
        key: 'render',
        value: function render(displayObject) {
            // can be handy to know!
            this.renderingToScreen = true;

            if (!this.gl || this.gl.isContextLost()) {
                return;
            }

            this.currentRenderer.start();

            this._activeRenderTarget.clear();

            this.webglGR.render(displayObject);
            //displayObject.renderWebGL(this);

            // apply transform..
            this.currentRenderer.flush();
        }

        /**
         * Changes the current renderer to the one given in parameter
         *
         * @param {PIXI.ObjectRenderer} objectRenderer - The object renderer to use.
         */

    }, {
        key: 'setObjectRenderer',
        value: function setObjectRenderer(objectRenderer) {
            if (this.currentRenderer === objectRenderer) {
                return;
            }

            this.currentRenderer.stop();
            this.currentRenderer = objectRenderer;
            this.currentRenderer.start();
        }

        /**
         * This should be called if you wish to do some custom rendering
         * It will basically render anything that may be batched up such as sprites
         *
         */

    }, {
        key: 'flush',
        value: function flush() {
            this.setObjectRenderer(this.emptyRenderer);
        }

        /**
         * Resizes the webGL view to the specified width and height.
         *
         * @param {number} width - the new width of the webGL view
         * @param {number} height - the new height of the webGL view
         */

    }, {
        key: 'resize',
        value: function resize(width, height) {
            //  if(width * this.resolution === this.width && height * this.resolution === this.height)return;

            this.rootRenderTarget.resize(width, height);

            if (this._activeRenderTarget === this.rootRenderTarget) {
                this.rootRenderTarget.activate();

                if (this._activeShader) {
                    this._activeShader.uniforms.projectionMatrix = this.rootRenderTarget.projectionMatrix.toArray(true);
                }
            }
        }

        /**
         * Erases the active render target and fills the drawing area with a colour
         *
         * @param {number} [clearColor] - The colour
         */

    }, {
        key: 'clear',
        value: function clear(clearColor) {
            this._activeRenderTarget.clear(clearColor);
        }

        /**
         * Sets the transform of the active render target to the given matrix
         *
         * @param {PIXI.Matrix} matrix - The transformation matrix
         */

    }, {
        key: 'setTransform',
        value: function setTransform(matrix) {
            this._activeRenderTarget.transform = matrix;
        }

        /**
         * Changes the current render target to the one given in parameter
         *
         * @param {PIXI.RenderTarget} renderTarget - the new render target
         * @return {PIXI.WebGLRenderer} Returns itself.
         */

    }, {
        key: 'bindRenderTarget',
        value: function bindRenderTarget(renderTarget) {
            if (renderTarget !== this._activeRenderTarget) {
                this._activeRenderTarget = renderTarget;
                renderTarget.activate();

                if (this._activeShader) {
                    this._activeShader.uniforms.projectionMatrix = renderTarget.projectionMatrix.toArray(true);
                }
            }
            return this;
        }

        /**
         * Changes the current shader to the one given in parameter
         *
         * @param {PIXI.Shader} shader - the new shader
         * @return {PIXI.WebGLRenderer} Returns itself.
         */

    }, {
        key: 'bindShader',
        value: function bindShader(shader) {
            // TODO cache
            if (this._activeShader !== shader) {
                this._activeShader = shader;
                shader.bind();

                // automatically set the projection matrix
                shader.uniforms.projectionMatrix = this._activeRenderTarget.projectionMatrix.toArray(true);
            }

            return this;
        }

        /**
         * Creates a new VAO from this renderer's context and state.
         *
         * @return {VertexArrayObject} The new VAO.
         */

    }, {
        key: 'createVao',
        value: function createVao() {
            return new index.VertexArrayObject(this.gl, this.state.attribState);
        }

        /**
         * Changes the current Vao to the one given in parameter
         *
         * @param {PIXI.VertexArrayObject} vao - the new Vao
         * @return {PIXI.WebGLRenderer} Returns itself.
         */

    }, {
        key: 'bindVao',
        value: function bindVao(vao) {
            if (this._activeVao === vao) {
                return this;
            }

            if (vao) {
                vao.bind();
            } else if (this._activeVao) {
                // TODO this should always be true i think?
                this._activeVao.unbind();
            }

            this._activeVao = vao;

            return this;
        }

        /**
         * Resets the WebGL state so you can render things however you fancy!
         *
         * @return {PIXI.WebGLRenderer} Returns itself.
         */

    }, {
        key: 'reset',
        value: function reset() {
            this.setObjectRenderer(this.emptyRenderer);

            this._activeShader = null;
            this._activeRenderTarget = this.rootRenderTarget;

            // bind the main frame buffer (the screen);
            this.rootRenderTarget.activate();

            this.state.resetToDefault();

            return this;
        }

        /**
         * Handles a lost webgl context
         *
         * @private
         * @param {WebGLContextEvent} event - The context lost event.
         */

    }, {
        key: 'handleContextLost',
        value: function handleContextLost(event) {
            event.preventDefault();
        }

        /**
         * Handles a restored webgl context
         *
         * @private
         */

    }, {
        key: 'handleContextRestored',
        value: function handleContextRestored() {
            this._initContext();
            this.textureManager.removeAll();
        }

        /**
         * Removes everything from the renderer (event listeners, spritebatch, etc...)
         *
         * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.
         *  See: https://github.com/pixijs/pixi.js/issues/2233
         */

    }, {
        key: 'destroy',
        value: function destroy(removeView) {
            this.destroyPlugins();

            // remove listeners
            this.view.removeEventListener('webglcontextlost', this.handleContextLost);
            this.view.removeEventListener('webglcontextrestored', this.handleContextRestored);

            // call base destroy
            get(WebGLStageRenderer.prototype.__proto__ || Object.getPrototypeOf(WebGLStageRenderer.prototype), 'destroy', this).call(this, removeView);

            this.uid = 0;

            this.currentRenderer = null;

            this.handleContextLost = null;
            this.handleContextRestored = null;

            this._contextOptions = null;
            this.gl.useProgram(null);

            if (this.gl.getExtension('WEBGL_lose_context')) {
                this.gl.getExtension('WEBGL_lose_context').loseContext();
            }

            this.gl = null;
        }
    }]);
    return WebGLStageRenderer;
}();

var WebGLRenderer = function (_SystemRenderer) {
    inherits(WebGLRenderer, _SystemRenderer);

    function WebGLRenderer(app) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, WebGLRenderer);
        return possibleConstructorReturn(this, (WebGLRenderer.__proto__ || Object.getPrototypeOf(WebGLRenderer)).call(this, RENDERER_TYPE.CANVAS, app, options));
    }

    createClass(WebGLRenderer, [{
        key: 'render',
        value: function render(app) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var me = this;

            me.app = app;
            _$1.extend(this.options, options);

            _$1.each(_$1.values(app.convertStages), function (convertStage) {
                me.renderStage(convertStage.stage);
            });

            app.convertStages = {};
        }
    }, {
        key: 'renderStage',
        value: function renderStage(stage) {
            if (!stage.webGLStageRenderer) {
                stage.webGLStageRenderer = new WebGLStageRenderer(stage, app, this.options);
            }
            stage.stageRending = true;
            this._clear(stage);
            this._render(stage);
            stage.stageRending = false;
        }
    }, {
        key: '_render',
        value: function _render(stage, displayObject) {
            if (!displayObject) {
                displayObject = stage;
            }

            if (!displayObject.context.visible || displayObject.context.globalAlpha <= 0) {
                return;
            }

            //if( displayObject.graphics ){
            //    stage.webGLRenderer.render( displayObject );
            //};
            if (displayObject.graphics) {
                stage.webGLStageRenderer.render(displayObject);
            }

            if (displayObject.children) {
                for (var i = 0, len = displayObject.children.length; i < len; i++) {
                    this._render(stage, displayObject.children[i]);
                }
            }
        }
    }, {
        key: '_clear',
        value: function _clear(stage) {
            //TODO:这里有点 奇怪， 之前的版本clearRect的时候，不需要 *RESOLUTION（分辨率）
            stage.webGLStageRenderer.clear();
        }
    }]);
    return WebGLRenderer;
}(SystemRenderer);

function autoRenderer(app, options) {
    if (!app.noWebGL && Utils.isWebGLSupported()) {
        return new WebGLRenderer(app, options);
    }

    return new CanvasRenderer(app, options);
}

/**
 * Application {{PKG_VERSION}}
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 主引擎 类
 *
 * 负责所有canvas的层级管理，和心跳机制的实现,捕获到心跳包后 
 * 分发到对应的stage(canvas)来绘制对应的改动
 * 然后 默认有实现了shape的 mouseover  mouseout  drag 事件
 *
 **/

//utils
var Application = function Application(opt) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    this.type = "canvax";
    this._cid = new Date().getTime() + "_" + Math.floor(Math.random() * 100);

    this.el = $.query(opt.el);

    this.width = parseInt("width" in opt || this.el.offsetWidth, 10);
    this.height = parseInt("height" in opt || this.el.offsetHeight, 10);

    var viewObj = $.createView(this.width, this.height, this._cid);
    this.view = viewObj.view;
    this.stage_c = viewObj.stage_c;
    this.dom_c = viewObj.dom_c;

    this.el.innerHTML = "";
    this.el.appendChild(this.view);

    this.viewOffset = $.offset(this.view);
    this.lastGetRO = 0; //最后一次获取 viewOffset 的时间

    this.noWebGL = opt.noWebGL;
    this.renderer = autoRenderer(this, options);

    this.event = null;

    this._bufferStage = null;

    //是否阻止浏览器默认事件的执行
    this.preventDefault = true;
    if (opt.preventDefault === false) {
        this.preventDefault = false;
    }

    //该属性在systenRender里面操作，每帧由心跳上报的 需要重绘的stages 列表
    this.convertStages = {};

    Application.superclass.constructor.apply(this, arguments);
};

Utils.creatClass(Application, DisplayObjectContainer, {
    init: function init() {
        this.context.width = this.width;
        this.context.height = this.height;

        //然后创建一个用于绘制激活 shape 的 stage 到activation
        this._creatHoverStage();

        //创建一个如果要用像素检测的时候的容器
        this._createPixelContext();
    },
    registEvent: function registEvent(opt) {
        //初始化事件委托到root元素上面
        this.event = new EventHandler(this, opt);
        this.event.init();
        return this.event;
    },
    resize: function resize(opt) {
        //重新设置坐标系统 高宽 等。
        this.width = parseInt(opt && "width" in opt || this.el.offsetWidth, 10);
        this.height = parseInt(opt && "height" in opt || this.el.offsetHeight, 10);

        this.view.style.width = this.width + "px";
        this.view.style.height = this.height + "px";

        this.viewOffset = $.offset(this.view);
        this._notWatch = true;
        this.context.width = this.width;
        this.context.height = this.height;
        this._notWatch = false;

        var me = this;
        var reSizeCanvas = function reSizeCanvas(ctx) {
            var canvas = ctx.canvas;
            canvas.style.width = me.width + "px";
            canvas.style.height = me.height + "px";
            canvas.setAttribute("width", me.width * Utils._devicePixelRatio);
            canvas.setAttribute("height", me.height * Utils._devicePixelRatio);

            //如果是swf的话就还要调用这个方法。
            if (ctx.resize) {
                ctx.resize(me.width, me.height);
            }
        };
        _$1.each(this.children, function (s, i) {
            s._notWatch = true;
            s.context.width = me.width;
            s.context.height = me.height;
            reSizeCanvas(s.canvas);
            s._notWatch = false;
        });

        this.dom_c.style.width = this.width + "px";
        this.dom_c.style.height = this.height + "px";

        this.heartBeat();
    },
    getHoverStage: function getHoverStage() {
        return this._bufferStage;
    },
    _creatHoverStage: function _creatHoverStage() {
        //TODO:创建stage的时候一定要传入width height  两个参数
        this._bufferStage = new Stage({
            id: "activCanvas" + new Date().getTime(),
            context: {
                width: this.context.width,
                height: this.context.height
            }
        });
        //该stage不参与事件检测
        this._bufferStage._eventEnabled = false;
        this.addChild(this._bufferStage);
    },
    /**
     * 用来检测文本width height 
     * @return {Object} 上下文
    */
    _createPixelContext: function _createPixelContext() {
        var _pixelCanvas = $.query("_pixelCanvas");
        if (!_pixelCanvas) {
            _pixelCanvas = $.createCanvas(0, 0, "_pixelCanvas");
        } else {
            //如果又的话 就不需要在创建了
            return;
        }
        document.body.appendChild(_pixelCanvas);
        Utils.initElement(_pixelCanvas);
        if (Utils.canvasSupport()) {
            //canvas的话，哪怕是display:none的页可以用来左像素检测和measureText文本width检测
            _pixelCanvas.style.display = "none";
        } else {
            //flashCanvas 的话，swf如果display:none了。就做不了measureText 文本宽度 检测了
            _pixelCanvas.style.zIndex = -1;
            _pixelCanvas.style.position = "absolute";
            _pixelCanvas.style.left = -this.context.width + "px";
            _pixelCanvas.style.top = -this.context.height + "px";
            _pixelCanvas.style.visibility = "hidden";
        }
        Utils._pixelCtx = _pixelCanvas.getContext('2d');
    },

    updateViewOffset: function updateViewOffset() {
        var now = new Date().getTime();
        if (now - this.lastGetRO > 1000) {
            this.viewOffset = $.offset(this.view);
            this.lastGetRO = now;
        }
    },

    _afterAddChild: function _afterAddChild(stage, index) {
        var canvas;

        if (!stage.canvas) {
            canvas = $.createCanvas(this.context.width, this.context.height, stage.id);
        } else {
            canvas = stage.canvas;
        }

        if (this.children.length == 1) {
            this.stage_c.appendChild(canvas);
        } else if (this.children.length > 1) {
            if (index == undefined) {
                //如果没有指定位置，那么就放到_bufferStage的下面。
                this.stage_c.insertBefore(canvas, this._bufferStage.canvas);
            } else {
                //如果有指定的位置，那么就指定的位置来
                if (index >= this.children.length - 1) {
                    this.stage_c.appendChild(canvas);
                } else {
                    this.stage_c.insertBefore(canvas, this.children[index].canvas);
                }
            }
        }

        Utils.initElement(canvas);
        stage.initStage(canvas, this.context.width, this.context.height);
    },
    _afterDelChild: function _afterDelChild(stage) {
        this.stage_c.removeChild(stage.canvas);
    },

    heartBeat: function heartBeat(opt) {
        this.renderer.heartBeat(opt);
    }
});

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 模拟as3 中 的sprite类，目前还只是个简单的容易。
 */
var Sprite = function Sprite() {
    this.type = "sprite";
    Sprite.superclass.constructor.apply(this, arguments);
};

Utils.creatClass(Sprite, DisplayObjectContainer, {
    init: function init() {}
});

var GraphicsData = function () {
    function GraphicsData(lineWidth, strokeStyle, lineAlpha, fillStyle, fillAlpha, shape) {
        classCallCheck(this, GraphicsData);

        this.lineWidth = lineWidth;
        this.strokeStyle = strokeStyle;
        this.lineAlpha = lineAlpha;

        this.fillStyle = fillStyle;
        this.fillAlpha = fillAlpha;

        this.shape = shape;
        this.type = shape.type;

        this.holes = [];

        //这两个可以被后续修改， 具有一票否决权
        //比如polygon的 虚线描边。必须在fill的poly上面设置line为false
        this.fill = true;
        this.line = true;
    }

    createClass(GraphicsData, [{
        key: "clone",
        value: function clone() {
            return new GraphicsData(this.lineWidth, this.strokeStyle, this.lineAlpha, this.fillStyle, this.fillAlpha, this.shape);
        }
    }, {
        key: "addHole",
        value: function addHole(shape) {
            this.holes.push(shape);
        }

        //从宿主graphics中同步最新的style属性

    }, {
        key: "synsStyle",
        value: function synsStyle(graphics) {
            //从shape中把绘图需要的style属性同步过来
            this.lineWidth = graphics.lineWidth;
            this.strokeStyle = graphics.strokeStyle;
            this.lineAlpha = graphics.lineAlpha;

            this.fillStyle = graphics.fillStyle;
            this.fillAlpha = graphics.fillAlpha;
        }
    }, {
        key: "hasFill",
        value: function hasFill() {
            return this.fillStyle && this.fill && this.shape.closed !== undefined && this.shape.closed && this.fillAlpha;
        }
    }, {
        key: "hasLine",
        value: function hasLine() {
            return this.strokeStyle && this.lineWidth && this.lineAlpha && this.line;
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.shape = null;
            this.holes = null;
        }
    }]);
    return GraphicsData;
}();

/**
 * Calculate the points for a bezier curve and then draws it.
 *
 * Ignored from docs since it is not directly exposed.
 *
 * @ignore
 * @param {number} fromX - Starting point x
 * @param {number} fromY - Starting point y
 * @param {number} cpX - Control point x
 * @param {number} cpY - Control point y
 * @param {number} cpX2 - Second Control point x
 * @param {number} cpY2 - Second Control point y
 * @param {number} toX - Destination point x
 * @param {number} toY - Destination point y
 * @param {number[]} [path=[]] - Path array to push points into
 * @return {number[]} Array of points of the curve
 */
function bezierCurveTo(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY) {
    var path = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : [];

    var n = 20;
    var dt = 0;
    var dt2 = 0;
    var dt3 = 0;
    var t2 = 0;
    var t3 = 0;

    path.push(fromX, fromY);

    for (var i = 1, j = 0; i <= n; ++i) {
        j = i / n;

        dt = 1 - j;
        dt2 = dt * dt;
        dt3 = dt2 * dt;

        t2 = j * j;
        t3 = t2 * j;

        path.push(dt3 * fromX + 3 * dt2 * j * cpX + 3 * dt * t2 * cpX2 + t3 * toX, dt3 * fromY + 3 * dt2 * j * cpY + 3 * dt * t2 * cpY2 + t3 * toY);
    }

    return path;
}

/**
 * 线段包含判断
 * @points [0,0,0,0]
 */
var _isInsideLine = function _isInsideLine(points, x, y, lineWidth) {
    var x0 = points[0];
    var y0 = points[1];
    var x1 = points[2];
    var y1 = points[3];
    var _l = Math.max(lineWidth, 3);
    var _a = 0;
    var _b = x0;

    if (y > y0 + _l && y > y1 + _l || y < y0 - _l && y < y1 - _l || x > x0 + _l && x > x1 + _l || x < x0 - _l && x < x1 - _l) {
        return false;
    }

    if (x0 !== x1) {
        _a = (y0 - y1) / (x0 - x1);
        _b = (x0 * y1 - x1 * y0) / (x0 - x1);
    } else {
        return Math.abs(x - x0) <= _l / 2;
    }

    var _s = (_a * x - y + _b) * (_a * x - y + _b) / (_a * _a + 1);
    return _s <= _l / 2 * _l / 2;
};

function insideLine(data, x, y, line) {
    var points = data.shape.points;
    var lineWidth = data.lineWidth;
    var insideCatch = false;
    for (var i = 0; i < points.length; ++i) {
        insideCatch = _isInsideLine(points.slice(i, i + 4), x, y, lineWidth);
        if (insideCatch) {
            break;
        }
        i += 1;
    }
    return insideCatch;
}

/*
* Graphics绘图法则
* 单个grahics实例里的fill line 样式属性，都从对应shape.context中获取
* 
*/

var Graphics = function () {
    function Graphics(shape) {
        classCallCheck(this, Graphics);

        this.shape = shape;

        this.lineWidth = 1;
        this.strokeStyle = null;
        this.lineAlpha = 1;
        this.fillStyle = null;
        this.fillAlpha = 1;

        this.graphicsData = [];
        this.currentPath = null;

        this.synsStyle();

        this.dirty = 0; //脏数据
        this._webGL = {};
        this.worldAlpha = 1;
        this.tint = 0xFFFFFF; //目标对象附加颜色
    }

    createClass(Graphics, [{
        key: 'synsStyle',
        value: function synsStyle() {
            //从shape中把绘图需要的style属性同步过来
            var sctx = this.shape.context;
            this.lineWidth = sctx.lineWidth;
            this.strokeStyle = sctx.strokeStyle;
            this.lineAlpha = sctx.lineAlpha * sctx.globalAlpha;

            this.fillStyle = sctx.fillStyle;
            this.fillAlpha = sctx.fillAlpha * sctx.globalAlpha;

            //如果graphicsData有多分组的情况下，如果以为shape的 style 属性改变调用的synsStyle
            //则会覆盖全部的 graphicsData 元素
            for (var i = 0; i < this.graphicsData.length; ++i) {
                this.graphicsData[i].synsStyle(this);
            }
        }
    }, {
        key: 'clone',
        value: function clone() {
            var clone = new Graphics();

            clone.dirty = 0;

            // copy graphics data
            for (var i = 0; i < this.graphicsData.length; ++i) {
                clone.graphicsData.push(this.graphicsData[i].clone());
            }

            clone.currentPath = clone.graphicsData[clone.graphicsData.length - 1];
            return clone;
        }
    }, {
        key: 'moveTo',
        value: function moveTo(x, y) {
            var shape = new Polygon([x, y]);

            shape.closed = false;
            this.drawShape(shape);

            return this;
        }
    }, {
        key: 'lineTo',
        value: function lineTo(x, y) {
            if (this.currentPath) {
                this.currentPath.shape.points.push(x, y);
                this.dirty++;
            } else {
                this.moveTo(0, 0);
            }
            return this;
        }
    }, {
        key: 'quadraticCurveTo',
        value: function quadraticCurveTo(cpX, cpY, toX, toY) {
            if (this.currentPath) {
                if (this.currentPath.shape.points.length === 0) {
                    this.currentPath.shape.points = [0, 0];
                }
            } else {
                this.moveTo(0, 0);
            }

            var n = 20;
            var points = this.currentPath.shape.points;
            var xa = 0;
            var ya = 0;

            if (points.length === 0) {
                this.moveTo(0, 0);
            }

            var fromX = points[points.length - 2];
            var fromY = points[points.length - 1];

            for (var i = 1; i <= n; ++i) {
                var j = i / n;

                xa = fromX + (cpX - fromX) * j;
                ya = fromY + (cpY - fromY) * j;

                points.push(xa + (cpX + (toX - cpX) * j - xa) * j, ya + (cpY + (toY - cpY) * j - ya) * j);
            }

            this.dirty++;

            return this;
        }
    }, {
        key: 'bezierCurveTo',
        value: function bezierCurveTo$$1(cpX, cpY, cpX2, cpY2, toX, toY) {
            if (this.currentPath) {
                if (this.currentPath.shape.points.length === 0) {
                    this.currentPath.shape.points = [0, 0];
                }
            } else {
                this.moveTo(0, 0);
            }

            var points = this.currentPath.shape.points;

            var fromX = points[points.length - 2];
            var fromY = points[points.length - 1];

            points.length -= 2;

            bezierCurveTo(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY, points);

            this.dirty++;

            return this;
        }
    }, {
        key: 'arcTo',
        value: function arcTo(x1, y1, x2, y2, radius) {
            if (this.currentPath) {
                if (this.currentPath.shape.points.length === 0) {
                    this.currentPath.shape.points.push(x1, y1);
                }
            } else {
                this.moveTo(x1, y1);
            }

            var points = this.currentPath.shape.points;
            var fromX = points[points.length - 2];
            var fromY = points[points.length - 1];
            var a1 = fromY - y1;
            var b1 = fromX - x1;
            var a2 = y2 - y1;
            var b2 = x2 - x1;
            var mm = Math.abs(a1 * b2 - b1 * a2);

            if (mm < 1.0e-8 || radius === 0) {
                if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1) {
                    points.push(x1, y1);
                }
            } else {
                var dd = a1 * a1 + b1 * b1;
                var cc = a2 * a2 + b2 * b2;
                var tt = a1 * a2 + b1 * b2;
                var k1 = radius * Math.sqrt(dd) / mm;
                var k2 = radius * Math.sqrt(cc) / mm;
                var j1 = k1 * tt / dd;
                var j2 = k2 * tt / cc;
                var cx = k1 * b2 + k2 * b1;
                var cy = k1 * a2 + k2 * a1;
                var px = b1 * (k2 + j1);
                var py = a1 * (k2 + j1);
                var qx = b2 * (k1 + j2);
                var qy = a2 * (k1 + j2);
                var startAngle = Math.atan2(py - cy, px - cx);
                var endAngle = Math.atan2(qy - cy, qx - cx);

                this.arc(cx + x1, cy + y1, radius, startAngle, endAngle, b1 * a2 > b2 * a1);
            }

            this.dirty++;

            return this;
        }
    }, {
        key: 'arc',
        value: function arc(cx, cy, radius, startAngle, endAngle) {
            var anticlockwise = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

            if (startAngle === endAngle) {
                return this;
            }

            if (!anticlockwise && endAngle <= startAngle) {
                endAngle += Math.PI * 2;
            } else if (anticlockwise && startAngle <= endAngle) {
                startAngle += Math.PI * 2;
            }

            var sweep = endAngle - startAngle;
            var segs = Math.ceil(Math.abs(sweep) / (Math.PI * 2)) * 40;

            if (sweep === 0) {
                return this;
            }

            var startX = cx + Math.cos(startAngle) * radius;
            var startY = cy + Math.sin(startAngle) * radius;

            // If the currentPath exists, take its points. Otherwise call `moveTo` to start a path.
            var points = this.currentPath ? this.currentPath.shape.points : null;

            if (points) {
                if (points[points.length - 2] !== startX || points[points.length - 1] !== startY) {
                    points.push(startX, startY);
                }
            } else {
                this.moveTo(startX, startY);
                points = this.currentPath.shape.points;
            }

            var theta = sweep / (segs * 2);
            var theta2 = theta * 2;

            var cTheta = Math.cos(theta);
            var sTheta = Math.sin(theta);

            var segMinus = segs - 1;

            var remainder = segMinus % 1 / segMinus;

            for (var i = 0; i <= segMinus; ++i) {
                var real = i + remainder * i;

                var angle = theta + startAngle + theta2 * real;

                var c = Math.cos(angle);
                var s = -Math.sin(angle);

                points.push((cTheta * c + sTheta * s) * radius + cx, (cTheta * -s + sTheta * c) * radius + cy);
            }

            this.dirty++;

            return this;
        }
    }, {
        key: 'drawRect',
        value: function drawRect(x, y, width, height) {
            this.drawShape(new Rectangle(x, y, width, height));
            return this;
        }
    }, {
        key: 'drawCircle',
        value: function drawCircle(x, y, radius) {
            this.drawShape(new Circle(x, y, radius));

            return this;
        }
    }, {
        key: 'drawEllipse',
        value: function drawEllipse(x, y, width, height) {
            this.drawShape(new Ellipse(x, y, width, height));

            return this;
        }
    }, {
        key: 'drawPolygon',
        value: function drawPolygon(path) {
            // prevents an argument assignment deopt
            // see section 3.1: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments
            var points = path;

            var closed = true;

            if (points instanceof Polygon) {
                closed = points.closed;
                points = points.points;
            }

            if (!Array.isArray(points)) {
                // prevents an argument leak deopt
                // see section 3.2: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments
                points = new Array(arguments.length);

                for (var i = 0; i < points.length; ++i) {
                    points[i] = arguments[i]; // eslint-disable-line prefer-rest-params
                }
            }

            var shape = new Polygon(points);

            shape.closed = closed;

            this.drawShape(shape);

            return this;
        }
    }, {
        key: 'clear',
        value: function clear() {
            if (this.graphicsData.length > 0) {
                this.dirty++;
                this.graphicsData.length = 0;
            }

            this.currentPath = null;

            return this;
        }
    }, {
        key: 'drawShape',
        value: function drawShape(shape) {
            if (this.currentPath) {
                if (this.currentPath.shape.points.length <= 2) {
                    this.graphicsData.pop();
                }
            }

            this.currentPath = null;

            var data = new GraphicsData(this.lineWidth, this.strokeStyle, this.lineAlpha, this.fillStyle, this.fillAlpha, shape);

            this.graphicsData.push(data);

            if (data.type === SHAPES.POLY) {
                data.shape.closed = data.shape.closed;
                this.currentPath = data;
            }

            this.dirty++;

            return data;
        }
    }, {
        key: 'closePath',
        value: function closePath() {
            var currentPath = this.currentPath;

            if (currentPath && currentPath.shape) {
                currentPath.shape.close();
            }

            return this;
        }

        /**
         * Tests if a point is inside this graphics object
         *
         * @param {PIXI.Point} point - the point to test
         * @return {boolean} the result of the test
         */

    }, {
        key: 'containsPoint',
        value: function containsPoint(point) {
            var graphicsData = this.graphicsData;
            var inside = false;
            for (var i = 0; i < graphicsData.length; ++i) {
                var data = graphicsData[i];
                if (data.shape) {
                    //先检测fill， fill的检测概率大些。
                    //像circle,ellipse这样的shape 就直接把lineWidth算在fill里面计算就好了，所以他们是没有insideLine的
                    if (data.hasFill() && data.shape.contains(point.x, point.y)) {
                        inside = true;
                        if (inside) {
                            break;
                        }
                    }

                    //circle,ellipse等就没有points
                    if (data.hasLine() && data.shape.points) {
                        //然后检测是否和描边碰撞
                        inside = insideLine(data, point.x, point.y);
                        if (inside) {
                            break;
                        }
                    }
                }
            }

            return inside;
        }

        /**
        * Update the bounds of the object
        *
        */

    }, {
        key: 'updateLocalBounds',
        value: function updateLocalBounds() {
            var minX = Infinity;
            var maxX = -Infinity;

            var minY = Infinity;
            var maxY = -Infinity;

            if (this.graphicsData.length) {
                var shape = 0;
                var x = 0;
                var y = 0;
                var w = 0;
                var h = 0;

                for (var i = 0; i < this.graphicsData.length; i++) {
                    var data = this.graphicsData[i];
                    var type = data.type;
                    var lineWidth = data.lineWidth;

                    shape = data.shape;

                    if (type === SHAPES.RECT || type === SHAPES.RREC) {
                        x = shape.x - lineWidth / 2;
                        y = shape.y - lineWidth / 2;
                        w = shape.width + lineWidth;
                        h = shape.height + lineWidth;

                        minX = x < minX ? x : minX;
                        maxX = x + w > maxX ? x + w : maxX;

                        minY = y < minY ? y : minY;
                        maxY = y + h > maxY ? y + h : maxY;
                    } else if (type === SHAPES.CIRC) {
                        x = shape.x;
                        y = shape.y;
                        w = shape.radius + lineWidth / 2;
                        h = shape.radius + lineWidth / 2;

                        minX = x - w < minX ? x - w : minX;
                        maxX = x + w > maxX ? x + w : maxX;

                        minY = y - h < minY ? y - h : minY;
                        maxY = y + h > maxY ? y + h : maxY;
                    } else if (type === SHAPES.ELIP) {
                        x = shape.x;
                        y = shape.y;
                        w = shape.width + lineWidth / 2;
                        h = shape.height + lineWidth / 2;

                        minX = x - w < minX ? x - w : minX;
                        maxX = x + w > maxX ? x + w : maxX;

                        minY = y - h < minY ? y - h : minY;
                        maxY = y + h > maxY ? y + h : maxY;
                    } else {
                        // POLY
                        var points = shape.points;
                        var x2 = 0;
                        var y2 = 0;
                        var dx = 0;
                        var dy = 0;
                        var rw = 0;
                        var rh = 0;
                        var cx = 0;
                        var cy = 0;

                        for (var j = 0; j + 2 < points.length; j += 2) {
                            x = points[j];
                            y = points[j + 1];
                            x2 = points[j + 2];
                            y2 = points[j + 3];
                            dx = Math.abs(x2 - x);
                            dy = Math.abs(y2 - y);
                            h = lineWidth;
                            w = Math.sqrt(dx * dx + dy * dy);

                            if (w < 1e-9) {
                                continue;
                            }

                            rw = (h / w * dy + dx) / 2;
                            rh = (h / w * dx + dy) / 2;
                            cx = (x2 + x) / 2;
                            cy = (y2 + y) / 2;

                            minX = cx - rw < minX ? cx - rw : minX;
                            maxX = cx + rw > maxX ? cx + rw : maxX;

                            minY = cy - rh < minY ? cy - rh : minY;
                            maxY = cy + rh > maxY ? cy + rh : maxY;
                        }
                    }
                }
            } else {
                minX = 0;
                maxX = 0;
                minY = 0;
                maxY = 0;
            }

            this.Bound.minX = minX;
            this.Bound.maxX = maxX;

            this.Bound.minY = minY;
            this.Bound.maxY = maxY;
        }
    }, {
        key: 'destroy',
        value: function destroy(options) {
            get(Graphics.prototype.__proto__ || Object.getPrototypeOf(Graphics.prototype), 'destroy', this).call(this, options);

            for (var i = 0; i < this.graphicsData.length; ++i) {
                this.graphicsData[i].destroy();
            }
            for (var id in this._webgl) {
                for (var j = 0; j < this._webgl[id].data.length; ++j) {
                    this._webgl[id].data[j].destroy();
                }
            }

            this.graphicsData = null;
            this.currentPath = null;
            this._webgl = null;
        }
    }]);
    return Graphics;
}();

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 模拟as3 DisplayList 中的shape 类
 */
var Shape = function (_DisplayObject) {
    inherits(Shape, _DisplayObject);

    function Shape(opt) {
        classCallCheck(this, Shape);


        opt = Utils.checkOpt(opt);
        var _context = _$1.extend(_$1.clone(SHAPE_CONTEXT_DEFAULT), opt.context);
        opt.context = _context;

        var _this = possibleConstructorReturn(this, (Shape.__proto__ || Object.getPrototypeOf(Shape)).call(this, opt));

        _this.graphics = new Graphics(_this);

        //元素是否有hover事件 和 chick事件，由addEvenetLister和remiveEventLister来触发修改
        _this._hoverable = false;
        _this._clickable = false;

        //over的时候如果有修改样式，就为true
        _this._hoverClass = false;
        _this.hoverClone = true; //是否开启在hover的时候clone一份到active stage 中 
        _this.pointChkPriority = true; //在鼠标mouseover到该节点，然后mousemove的时候，是否优先检测该节点

        //拖拽drag的时候显示在activShape的副本
        _this._dragDuplicate = null;

        //元素是否 开启 drag 拖动，这个有用户设置传入
        //self.draggable = opt.draggable || false;

        _this.type = _this.type || "shape";
        opt.draw && (_this.draw = opt.draw);

        //处理所有的图形一些共有的属性配置,把除开id,context之外的所有属性，全部挂载到this上面
        _this.initCompProperty(opt);

        _this._rect = null;
        return _this;
    }

    createClass(Shape, [{
        key: "init",
        value: function init() {}
    }, {
        key: "draw",
        value: function draw() {}
    }, {
        key: "initCompProperty",
        value: function initCompProperty(opt) {
            for (var i in opt) {
                if (i != "id" && i != "context") {
                    this[i] = opt[i];
                }
            }
        }

        /*
         * 画虚线
         */

    }, {
        key: "dashedLineTo",
        value: function dashedLineTo(x1, y1, x2, y2, dashLength) {
            dashLength = typeof dashLength == 'undefined' ? 3 : dashLength;
            dashLength = Math.max(dashLength, this.context.lineWidth);
            var deltaX = x2 - x1;
            var deltaY = y2 - y1;
            var numDashes = Math.floor(Math.sqrt(deltaX * deltaX + deltaY * deltaY) / dashLength);
            for (var i = 0; i < numDashes; ++i) {
                var x = parseInt(x1 + deltaX / numDashes * i);
                var y = parseInt(y1 + deltaY / numDashes * i);
                this.graphics[i % 2 === 0 ? 'moveTo' : 'lineTo'](x, y);
                if (i == numDashes - 1 && i % 2 === 0) {
                    this.graphics.lineTo(x2, y2);
                }
            }
        }

        /*
         *从cpl节点中获取到4个方向的边界节点
         *@param  context 
         *
         **/

    }, {
        key: "getRectFormPointList",
        value: function getRectFormPointList(context) {
            var minX = Number.MAX_VALUE;
            var maxX = Number.MIN_VALUE;
            var minY = Number.MAX_VALUE;
            var maxY = Number.MIN_VALUE;

            var cpl = context.pointList; //this.getcpl();
            for (var i = 0, l = cpl.length; i < l; i++) {
                if (cpl[i][0] < minX) {
                    minX = cpl[i][0];
                }
                if (cpl[i][0] > maxX) {
                    maxX = cpl[i][0];
                }
                if (cpl[i][1] < minY) {
                    minY = cpl[i][1];
                }
                if (cpl[i][1] > maxY) {
                    maxY = cpl[i][1];
                }
            }

            var lineWidth;
            if (context.strokeStyle || context.fillStyle) {
                lineWidth = context.lineWidth || 1;
            } else {
                lineWidth = 0;
            }
            return {
                x: Math.round(minX - lineWidth / 2),
                y: Math.round(minY - lineWidth / 2),
                width: maxX - minX + lineWidth,
                height: maxY - minY + lineWidth
            };
        }
    }]);
    return Shape;
}(DisplayObject);

/**
 * Canvax--Text
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 文本 类
 **/
var Text = function Text(text, opt) {
    var self = this;
    self.type = "text";
    self._reNewline = /\r?\n/;
    self.fontProperts = ["fontStyle", "fontVariant", "fontWeight", "fontSize", "fontFamily"];

    //做一次简单的opt参数校验，保证在用户不传opt的时候 或者传了opt但是里面没有context的时候报错
    opt = Utils.checkOpt(opt);

    self._context = _$1.extend({
        fontSize: 13, //字体大小默认13
        fontWeight: "normal",
        fontFamily: "微软雅黑,sans-serif",
        textDecoration: null,
        fillStyle: 'blank',
        strokeStyle: null,
        lineWidth: 0,
        lineHeight: 1.2,
        backgroundColor: null,
        textBackgroundColor: null
    }, opt.context);

    self._context.font = self._getFontDeclaration();

    self.text = text.toString();

    Text.superclass.constructor.apply(this, [opt]);
};

Utils.creatClass(Text, DisplayObject, {
    $watch: function $watch(name, value, preValue) {
        //context属性有变化的监听函数
        if (_$1.indexOf(this.fontProperts, name) >= 0) {
            this._context[name] = value;
            //如果修改的是font的某个内容，就重新组装一遍font的值，
            //然后通知引擎这次对context的修改不需要上报心跳
            this._notWatch = false;
            this.context.font = this._getFontDeclaration();
            this.context.width = this.getTextWidth();
            this.context.height = this.getTextHeight();
        }
    },
    init: function init(text, opt) {
        var self = this;
        var c = this.context;
        c.width = this.getTextWidth();
        c.height = this.getTextHeight();
    },
    render: function render(ctx) {
        for (var p in this.context.$model) {
            if (p in ctx) {
                if (p != "textBaseline" && this.context.$model[p]) {
                    ctx[p] = this.context.$model[p];
                }
            }
        }
        this._renderText(ctx, this._getTextLines());
    },
    resetText: function resetText(text) {
        this.text = text.toString();
        this.heartBeat();
    },
    getTextWidth: function getTextWidth() {
        var width = 0;
        Utils._pixelCtx.save();
        Utils._pixelCtx.font = this.context.font;
        width = this._getTextWidth(Utils._pixelCtx, this._getTextLines());
        Utils._pixelCtx.restore();
        return width;
    },
    getTextHeight: function getTextHeight() {
        return this._getTextHeight(Utils._pixelCtx, this._getTextLines());
    },
    _getTextLines: function _getTextLines() {
        return this.text.split(this._reNewline);
    },
    _renderText: function _renderText(ctx, textLines) {
        ctx.save();
        this._renderTextStroke(ctx, textLines);
        this._renderTextFill(ctx, textLines);
        ctx.restore();
    },
    _getFontDeclaration: function _getFontDeclaration() {
        var self = this;
        var fontArr = [];

        _$1.each(this.fontProperts, function (p) {
            var fontP = self._context[p];
            if (p == "fontSize") {
                fontP = parseFloat(fontP) + "px";
            }
            fontP && fontArr.push(fontP);
        });

        return fontArr.join(' ');
    },
    _renderTextFill: function _renderTextFill(ctx, textLines) {
        if (!this.context.fillStyle) return;

        this._boundaries = [];
        var lineHeights = 0;

        for (var i = 0, len = textLines.length; i < len; i++) {
            var heightOfLine = this._getHeightOfLine(ctx, i, textLines);
            lineHeights += heightOfLine;

            this._renderTextLine('fillText', ctx, textLines[i], 0, //this._getLeftOffset(),
            this._getTopOffset() + lineHeights, i);
        }
    },
    _renderTextStroke: function _renderTextStroke(ctx, textLines) {
        if (!this.context.strokeStyle || !this.context.lineWidth) return;

        var lineHeights = 0;

        ctx.save();
        if (this.strokeDashArray) {
            if (1 & this.strokeDashArray.length) {
                this.strokeDashArray.push.apply(this.strokeDashArray, this.strokeDashArray);
            }
            supportsLineDash && ctx.setLineDash(this.strokeDashArray);
        }

        ctx.beginPath();
        for (var i = 0, len = textLines.length; i < len; i++) {
            var heightOfLine = this._getHeightOfLine(ctx, i, textLines);
            lineHeights += heightOfLine;

            this._renderTextLine('strokeText', ctx, textLines[i], 0, //this._getLeftOffset(),
            this._getTopOffset() + lineHeights, i);
        }
        ctx.closePath();
        ctx.restore();
    },
    _renderTextLine: function _renderTextLine(method, ctx, line, left, top, lineIndex) {
        top -= this._getHeightOfLine() / 4;
        if (this.context.textAlign !== 'justify') {
            this._renderChars(method, ctx, line, left, top, lineIndex);
            return;
        }
        var lineWidth = ctx.measureText(line).width;
        var totalWidth = this.context.width;

        if (totalWidth > lineWidth) {
            var words = line.split(/\s+/);
            var wordsWidth = ctx.measureText(line.replace(/\s+/g, '')).width;
            var widthDiff = totalWidth - wordsWidth;
            var numSpaces = words.length - 1;
            var spaceWidth = widthDiff / numSpaces;

            var leftOffset = 0;
            for (var i = 0, len = words.length; i < len; i++) {
                this._renderChars(method, ctx, words[i], left + leftOffset, top, lineIndex);
                leftOffset += ctx.measureText(words[i]).width + spaceWidth;
            }
        } else {
            this._renderChars(method, ctx, line, left, top, lineIndex);
        }
    },
    _renderChars: function _renderChars(method, ctx, chars, left, top) {
        ctx[method](chars, 0, top);
    },
    _getHeightOfLine: function _getHeightOfLine() {
        return this.context.fontSize * this.context.lineHeight;
    },
    _getTextWidth: function _getTextWidth(ctx, textLines) {
        var maxWidth = ctx.measureText(textLines[0] || '|').width;
        for (var i = 1, len = textLines.length; i < len; i++) {
            var currentLineWidth = ctx.measureText(textLines[i]).width;
            if (currentLineWidth > maxWidth) {
                maxWidth = currentLineWidth;
            }
        }
        return maxWidth;
    },
    _getTextHeight: function _getTextHeight(ctx, textLines) {
        return this.context.fontSize * textLines.length * this.context.lineHeight;
    },

    /**
     * @private
     * @return {Number} Top offset
     */
    _getTopOffset: function _getTopOffset() {
        var t = 0;
        switch (this.context.textBaseline) {
            case "top":
                t = 0;
                break;
            case "middle":
                t = -this.context.height / 2;
                break;
            case "bottom":
                t = -this.context.height;
                break;
        }
        return t;
    },
    getRect: function getRect() {
        var c = this.context;
        var x = 0;
        var y = 0;
        //更具textAlign 和 textBaseline 重新矫正 xy
        if (c.textAlign == "center") {
            x = -c.width / 2;
        }
        if (c.textAlign == "right") {
            x = -c.width;
        }
        if (c.textBaseline == "middle") {
            y = -c.height / 2;
        }
        if (c.textBaseline == "bottom") {
            y = -c.height;
        }

        return {
            x: x,
            y: y,
            width: c.width,
            height: c.height
        };
    }
});

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 向量操作类
 * */
function Vector(x, y) {
    var vx = 0,
        vy = 0;
    if (arguments.length == 1 && _$1.isObject(x)) {
        var arg = arguments[0];
        if (_$1.isArray(arg)) {
            vx = arg[0];
            vy = arg[1];
        } else if (arg.hasOwnProperty("x") && arg.hasOwnProperty("y")) {
            vx = arg.x;
            vy = arg.y;
        }
    }
    this._axes = [vx, vy];
}
Vector.prototype = {
    distance: function distance(v) {
        var x = this._axes[0] - v._axes[0];
        var y = this._axes[1] - v._axes[1];

        return Math.sqrt(x * x + y * y);
    }
};

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 处理为平滑线条
 */
/**
 * @inner
 */
function interpolate(p0, p1, p2, p3, t, t2, t3) {
    var v0 = (p2 - p0) * 0.25;
    var v1 = (p3 - p1) * 0.25;
    return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;
}
/**
 * 多线段平滑曲线 
 * opt ==> points , isLoop
 */
var SmoothSpline = function (opt) {
    var points = opt.points;
    var isLoop = opt.isLoop;
    var smoothFilter = opt.smoothFilter;

    var len = points.length;
    if (len == 1) {
        return points;
    }
    var ret = [];
    var distance = 0;
    var preVertor = new Vector(points[0]);
    var iVtor = null;
    for (var i = 1; i < len; i++) {
        iVtor = new Vector(points[i]);
        distance += preVertor.distance(iVtor);
        preVertor = iVtor;
    }

    preVertor = null;
    iVtor = null;

    //基本上等于曲率
    var segs = distance / 6;

    segs = segs < len ? len : segs;
    for (var i = 0; i < segs; i++) {
        var pos = i / (segs - 1) * (isLoop ? len : len - 1);
        var idx = Math.floor(pos);

        var w = pos - idx;

        var p0;
        var p1 = points[idx % len];
        var p2;
        var p3;
        if (!isLoop) {
            p0 = points[idx === 0 ? idx : idx - 1];
            p2 = points[idx > len - 2 ? len - 1 : idx + 1];
            p3 = points[idx > len - 3 ? len - 1 : idx + 2];
        } else {
            p0 = points[(idx - 1 + len) % len];
            p2 = points[(idx + 1) % len];
            p3 = points[(idx + 2) % len];
        }

        var w2 = w * w;
        var w3 = w * w2;

        var rp = [interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3), interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)];

        _$1.isFunction(smoothFilter) && smoothFilter(rp);

        ret.push(rp);
    }
    return ret;
};

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 数学 类
 *
 **/

var _cache = {
    sin: {}, //sin缓存
    cos: {} //cos缓存
};
var _radians = Math.PI / 180;

/**
 * @param angle 弧度（角度）参数
 * @param isDegrees angle参数是否为角度计算，默认为false，angle为以弧度计量的角度
 */
function sin(angle, isDegrees) {
    angle = (isDegrees ? angle * _radians : angle).toFixed(4);
    if (typeof _cache.sin[angle] == 'undefined') {
        _cache.sin[angle] = Math.sin(angle);
    }
    return _cache.sin[angle];
}

/**
 * @param radians 弧度参数
 */
function cos(angle, isDegrees) {
    angle = (isDegrees ? angle * _radians : angle).toFixed(4);
    if (typeof _cache.cos[angle] == 'undefined') {
        _cache.cos[angle] = Math.cos(angle);
    }
    return _cache.cos[angle];
}

/**
 * 角度转弧度
 * @param {Object} angle
 */
function degreeToRadian(angle) {
    return angle * _radians;
}

/**
 * 弧度转角度
 * @param {Object} angle
 */
function radianToDegree(angle) {
    return angle / _radians;
}

/*
 * 校验角度到360度内
 * @param {angle} number
 */
function degreeTo360(angle) {
    var reAng = (360 + angle % 360) % 360; //Math.abs(360 + Math.ceil( angle ) % 360) % 360;
    if (reAng == 0 && angle !== 0) {
        reAng = 360;
    }
    return reAng;
}

function getIsgonPointList(n, r) {
    var pointList = [];
    var dStep = 2 * Math.PI / n;
    var beginDeg = -Math.PI / 2;
    var deg = beginDeg;
    for (var i = 0, end = n; i < end; i++) {
        pointList.push([r * Math.cos(deg), r * Math.sin(deg)]);
        deg += dStep;
    }
    return pointList;
}

function getSmoothPointList(pList, smoothFilter) {
    //smoothFilter -- 比如在折线图中。会传一个smoothFilter过来做point的纠正。
    //让y不能超过底部的原点
    var obj = {
        points: pList
    };
    if (_.isFunction(smoothFilter)) {
        obj.smoothFilter = smoothFilter;
    }

    var currL = SmoothSpline(obj);
    if (pList && pList.length > 0) {
        currL.push(pList[pList.length - 1]);
    }

    return currL;
}

var myMath = {
    PI: Math.PI,
    sin: sin,
    cos: cos,
    degreeToRadian: degreeToRadian,
    radianToDegree: radianToDegree,
    degreeTo360: degreeTo360,
    getIsgonPointList: getIsgonPointList,
    getSmoothPointList: getSmoothPointList
};

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 折线 类
 *
 * 对应context的属性有
 * @pointList 各个顶角坐标
 **/
var BrokenLine = function (_Shape) {
    inherits(BrokenLine, _Shape);

    function BrokenLine(opt, atype) {
        classCallCheck(this, BrokenLine);

        opt = Utils.checkOpt(opt);
        var _context = _$1.extend({
            lineType: null,
            smooth: false,
            pointList: [], //{Array}  // 必须，各个顶角坐标
            smoothFilter: Utils.__emptyFunc
        }, opt.context);

        if (atype !== "clone" && _context.smooth) {
            _context.pointList = myMath.getSmoothPointList(_context.pointList);
        }

        opt.context = _context;

        var _this = possibleConstructorReturn(this, (BrokenLine.__proto__ || Object.getPrototypeOf(BrokenLine)).call(this, opt));

        _this.type = "brokenline";
        _this.id = Utils.createId(_this.type);

        _this.setGraphics();
        return _this;
    }

    createClass(BrokenLine, [{
        key: "$watch",
        value: function $watch(name, value, preValue) {
            if (name == "pointList" || name == "smooth" || name == "lineType") {
                this.setGraphics();
            }
        }
    }, {
        key: "setGraphics",
        value: function setGraphics() {
            this.graphics.clear();

            var context = this.context;
            var pointList = context.pointList;
            if (pointList.length < 2) {
                //少于2个点就不画了~
                return this;
            }
            if (!context.lineType || context.lineType == 'solid') {
                //默认为实线
                //TODO:目前如果 有设置smooth 的情况下是不支持虚线的
                this.graphics.moveTo(pointList[0][0], pointList[0][1]);
                for (var i = 1, l = pointList.length; i < l; i++) {
                    this.graphics.lineTo(pointList[i][0], pointList[i][1]);
                }
            } else if (context.lineType == 'dashed' || context.lineType == 'dotted') {
                if (context.smooth) {
                    for (var si = 0, sl = pointList.length; si < sl; si++) {
                        if (si == sl - 1) {
                            break;
                        }
                        this.graphics.moveTo(pointList[si][0], pointList[si][1]);
                        this.graphics.lineTo(pointList[si + 1][0], pointList[si + 1][1]);
                        si += 1;
                    }
                } else {
                    //画虚线的方法  
                    this.graphics.moveTo(pointList[0][0], pointList[0][1]);
                    for (var i = 1, l = pointList.length; i < l; i++) {
                        var fromX = pointList[i - 1][0];
                        var toX = pointList[i][0];
                        var fromY = pointList[i - 1][1];
                        var toY = pointList[i][1];
                        this.dashedLineTo(fromX, fromY, toX, toY, 5);
                    }
                }
            }
            return this;
        }
    }]);
    return BrokenLine;
}(Shape);

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 圆形 类
 *
 * 坐标原点再圆心
 *
 * 对应context的属性有
 * @r 圆半径
 **/
var Circle$2 = function (_Shape) {
    inherits(Circle, _Shape);

    function Circle(opt) {
        classCallCheck(this, Circle);

        opt = Utils.checkOpt(opt);
        //默认情况下面，circle不需要把xy进行parentInt转换
        "xyToInt" in opt || (opt.xyToInt = false);
        var _context = _$1.extend({
            r: 0 //{number},  // 必须，圆半径
        }, opt.context);

        opt.context = _context;

        var _this = possibleConstructorReturn(this, (Circle.__proto__ || Object.getPrototypeOf(Circle)).call(this, opt));

        _this.type = "circle";
        _this.id = Utils.createId(_this.type);

        _this.setGraphics();
        return _this;
    }

    createClass(Circle, [{
        key: "$watch",
        value: function $watch(name, value, preValue) {
            if (name == "r") {
                this.setGraphics();
            }
        }
    }, {
        key: "setGraphics",
        value: function setGraphics() {
            this.graphics.clear();
            //this.graphics.arc(0 , 0, this.context.r, 0, Math.PI * 2, true);
            this.graphics.drawCircle(0, 0, this.context.r);
        }
    }]);
    return Circle;
}(Shape);

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * Path 类，Path主要用于把svgpath 字符串转换为pointList，然后构建graphicsData
 *
 * 对应context的属性有
 * @path path串
 **/
var Path = function (_Shape) {
    inherits(Path, _Shape);

    function Path(opt) {
        classCallCheck(this, Path);


        opt = Utils.checkOpt(opt);
        var _context = _$1.extend({
            pointList: [], //从下面的path中计算得到的边界点的集合
            path: "" //字符串 必须，路径。例如:M 0 0 L 0 10 L 10 10 Z (一个三角形)
            //M = moveto
            //L = lineto
            //H = horizontal lineto
            //V = vertical lineto
            //C = curveto
            //S = smooth curveto
            //Q = quadratic Belzier curve
            //T = smooth quadratic Belzier curveto
            //Z = closepath
        }, opt.context);
        opt.context = _context;

        var _this = possibleConstructorReturn(this, (Path.__proto__ || Object.getPrototypeOf(Path)).call(this, opt));

        if ("drawTypeOnly" in opt) {
            _this.drawTypeOnly = opt.drawTypeOnly;
        }

        _this.__parsePathData = null;

        _this.type = "path";
        _this.id = Utils.createId(_this.type);

        _this.setGraphics();

        return _this;
    }

    createClass(Path, [{
        key: "$watch",
        value: function $watch(name, value, preValue) {
            if (name == "path") {
                //如果path有变动，需要自动计算新的pointList
                this.setGraphics();
            }
        }
    }, {
        key: "_parsePathData",
        value: function _parsePathData(data) {
            if (this.__parsePathData) {
                return this.__parsePathData;
            }
            if (!data) {
                return [];
            }
            //分拆子分组
            this.__parsePathData = [];
            var paths = _$1.compact(data.replace(/[Mm]/g, "\\r$&").split('\\r'));
            var me = this;
            _$1.each(paths, function (pathStr) {
                me.__parsePathData.push(me._parseChildPathData(pathStr));
            });
            return this.__parsePathData;
        }
    }, {
        key: "_parseChildPathData",
        value: function _parseChildPathData(data) {
            // command string
            var cs = data;
            // command chars
            var cc = ['m', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z', 'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'];
            cs = cs.replace(/  /g, ' ');
            cs = cs.replace(/ /g, ',');
            //cs = cs.replace(/(.)-/g, "$1,-");
            cs = cs.replace(/(\d)-/g, '$1,-');
            cs = cs.replace(/,,/g, ',');
            var n;
            // create pipes so that we can split the data
            for (n = 0; n < cc.length; n++) {
                cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);
            }
            // create array
            var arr = cs.split('|');
            var ca = [];
            // init context point
            var cpx = 0;
            var cpy = 0;
            for (n = 1; n < arr.length; n++) {
                var str = arr[n];
                var c = str.charAt(0);
                str = str.slice(1);
                str = str.replace(new RegExp('e,-', 'g'), 'e-');

                //有的时候，比如“22，-22” 数据可能会经常的被写成22-22，那么需要手动修改
                //str = str.replace(new RegExp('-', 'g'), ',-');
                //str = str.replace(/(.)-/g, "$1,-")
                var p = str.split(',');

                if (p.length > 0 && p[0] === '') {
                    p.shift();
                }

                for (var i = 0; i < p.length; i++) {
                    p[i] = parseFloat(p[i]);
                }
                while (p.length > 0) {
                    if (isNaN(p[0])) {
                        break;
                    }
                    var cmd = null;
                    var points = [];

                    var ctlPtx;
                    var ctlPty;
                    var prevCmd;

                    var rx;
                    var ry;
                    var psi;
                    var fa;
                    var fs;

                    var x1 = cpx;
                    var y1 = cpy;

                    // convert l, H, h, V, and v to L
                    switch (c) {
                        case 'l':
                            cpx += p.shift();
                            cpy += p.shift();
                            cmd = 'L';
                            points.push(cpx, cpy);
                            break;
                        case 'L':
                            cpx = p.shift();
                            cpy = p.shift();
                            points.push(cpx, cpy);
                            break;
                        case 'm':
                            cpx += p.shift();
                            cpy += p.shift();
                            cmd = 'M';
                            points.push(cpx, cpy);
                            c = 'l';
                            break;
                        case 'M':
                            cpx = p.shift();
                            cpy = p.shift();
                            cmd = 'M';
                            points.push(cpx, cpy);
                            c = 'L';
                            break;

                        case 'h':
                            cpx += p.shift();
                            cmd = 'L';
                            points.push(cpx, cpy);
                            break;
                        case 'H':
                            cpx = p.shift();
                            cmd = 'L';
                            points.push(cpx, cpy);
                            break;
                        case 'v':
                            cpy += p.shift();
                            cmd = 'L';
                            points.push(cpx, cpy);
                            break;
                        case 'V':
                            cpy = p.shift();
                            cmd = 'L';
                            points.push(cpx, cpy);
                            break;
                        case 'C':
                            points.push(p.shift(), p.shift(), p.shift(), p.shift());
                            cpx = p.shift();
                            cpy = p.shift();
                            points.push(cpx, cpy);
                            break;
                        case 'c':
                            points.push(cpx + p.shift(), cpy + p.shift(), cpx + p.shift(), cpy + p.shift());
                            cpx += p.shift();
                            cpy += p.shift();
                            cmd = 'C';
                            points.push(cpx, cpy);
                            break;
                        case 'S':
                            ctlPtx = cpx;
                            ctlPty = cpy;
                            prevCmd = ca[ca.length - 1];
                            if (prevCmd.command === 'C') {
                                ctlPtx = cpx + (cpx - prevCmd.points[2]);
                                ctlPty = cpy + (cpy - prevCmd.points[3]);
                            }
                            points.push(ctlPtx, ctlPty, p.shift(), p.shift());
                            cpx = p.shift();
                            cpy = p.shift();
                            cmd = 'C';
                            points.push(cpx, cpy);
                            break;
                        case 's':
                            ctlPtx = cpx, ctlPty = cpy;
                            prevCmd = ca[ca.length - 1];
                            if (prevCmd.command === 'C') {
                                ctlPtx = cpx + (cpx - prevCmd.points[2]);
                                ctlPty = cpy + (cpy - prevCmd.points[3]);
                            }
                            points.push(ctlPtx, ctlPty, cpx + p.shift(), cpy + p.shift());
                            cpx += p.shift();
                            cpy += p.shift();
                            cmd = 'C';
                            points.push(cpx, cpy);
                            break;
                        case 'Q':
                            points.push(p.shift(), p.shift());
                            cpx = p.shift();
                            cpy = p.shift();
                            points.push(cpx, cpy);
                            break;
                        case 'q':
                            points.push(cpx + p.shift(), cpy + p.shift());
                            cpx += p.shift();
                            cpy += p.shift();
                            cmd = 'Q';
                            points.push(cpx, cpy);
                            break;
                        case 'T':
                            ctlPtx = cpx, ctlPty = cpy;
                            prevCmd = ca[ca.length - 1];
                            if (prevCmd.command === 'Q') {
                                ctlPtx = cpx + (cpx - prevCmd.points[0]);
                                ctlPty = cpy + (cpy - prevCmd.points[1]);
                            }
                            cpx = p.shift();
                            cpy = p.shift();
                            cmd = 'Q';
                            points.push(ctlPtx, ctlPty, cpx, cpy);
                            break;
                        case 't':
                            ctlPtx = cpx, ctlPty = cpy;
                            prevCmd = ca[ca.length - 1];
                            if (prevCmd.command === 'Q') {
                                ctlPtx = cpx + (cpx - prevCmd.points[0]);
                                ctlPty = cpy + (cpy - prevCmd.points[1]);
                            }
                            cpx += p.shift();
                            cpy += p.shift();
                            cmd = 'Q';
                            points.push(ctlPtx, ctlPty, cpx, cpy);
                            break;
                        case 'A':
                            rx = p.shift(); //x半径
                            ry = p.shift(); //y半径
                            psi = p.shift(); //旋转角度
                            fa = p.shift(); //角度大小 
                            fs = p.shift(); //时针方向

                            x1 = cpx, y1 = cpy;
                            cpx = p.shift(), cpy = p.shift();
                            cmd = 'A';
                            points = [rx, ry, psi, fa, fs, cpx, cpy, x1, y1];
                            break;
                        case 'a':
                            rx = p.shift();
                            ry = p.shift();
                            psi = p.shift();
                            fa = p.shift();
                            fs = p.shift();

                            x1 = cpx, y1 = cpy;
                            cpx += p.shift();
                            cpy += p.shift();
                            cmd = 'A';
                            points = [rx, ry, psi, fa, fs, cpx, cpy, x1, y1];
                            break;

                    }

                    ca.push({
                        command: cmd || c,
                        points: points
                    });
                }

                if (c === 'z' || c === 'Z') {
                    ca.push({
                        command: 'z',
                        points: []
                    });
                }
            }
            return ca;
        }

        //重新根的path绘制graphics

    }, {
        key: "setGraphics",
        value: function setGraphics() {

            this.graphics.clear();
            this.__parsePathData = null;
            this.context.pointList = [];

            var pathArray = this._parsePathData(this.context.path);

            for (var g = 0, gl = pathArray.length; g < gl; g++) {
                for (var i = 0, l = pathArray[g].length; i < l; i++) {
                    var c = pathArray[g][i].command,
                        p = pathArray[g][i].points;
                    switch (c) {
                        case 'L':
                            this.graphics.lineTo(p[0], p[1]);
                            break;
                        case 'M':
                            this.graphics.moveTo(p[0], p[1]);
                            break;
                        case 'C':
                            this.graphics.bezierCurveTo(p[0], p[1], p[2], p[3], p[4], p[5]);
                            break;
                        case 'Q':
                            this.graphics.quadraticCurveTo(p[0], p[1], p[2], p[3]);
                            break;
                        case 'A':
                            //前面6个元素用来放path的A 6个参数，path A命令详见
                            Arc.drawArc(this.graphics, p[7], p[8], p);
                            break;
                        case 'z':
                            this.graphics.closePath();
                            break;
                    }
                }
            }
            return this;
        }
    }]);
    return Path;
}(Shape);

/**
 * Canvax
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 水滴形 类
 * 派生自Path类
 *
 * 对应context的属性有
 * @hr 水滴横宽（中心到水平边缘最宽处距离）
 * @vr 水滴纵高（中心到尖端距离）
 **/
var Droplet = function (_Path) {
    inherits(Droplet, _Path);

    function Droplet(opt) {
        var _this;

        classCallCheck(this, Droplet);

        opt = Utils.checkOpt(opt);
        var _context = _$1.extend({
            hr: 0, //{number},  // 必须，水滴横宽（中心到水平边缘最宽处距离）
            vr: 0 //{number},  // 必须，水滴纵高（中心到尖端距离）
        }, opt.context);

        opt.context = _context;

        var my = (_this = possibleConstructorReturn(this, (Droplet.__proto__ || Object.getPrototypeOf(Droplet)).call(this, opt)), _this);

        _this.type = "droplet";
        _this.id = Utils.createId(_this.type);

        _this.context.path = _this._createPath();
        return _this;
    }

    createClass(Droplet, [{
        key: "$watch",
        value: function $watch(name, value, preValue) {
            if (name == "hr" || name == "vr") {
                this.context.path = this._createPath();
            }

            if (name == "path") {
                this.setGraphics();
            }
        }
    }, {
        key: "_createPath",
        value: function _createPath() {
            var context = this.context;
            var ps = "M 0 " + context.hr + " C " + context.hr + " " + context.hr + " " + context.hr * 3 / 2 + " " + -context.hr / 3 + " 0 " + -context.vr;
            ps += " C " + -context.hr * 3 / 2 + " " + -context.hr / 3 + " " + -context.hr + " " + context.hr + " 0 " + context.hr + "z";
            return ps;
        }
    }]);
    return Droplet;
}(Path);

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 椭圆形 类
 *
 * 对应context的属性有 
 *
 * @hr 椭圆横轴半径
 * @vr 椭圆纵轴半径
 */
var Ellipse$2 = function (_Shape) {
    inherits(Ellipse, _Shape);

    function Ellipse(opt) {
        classCallCheck(this, Ellipse);

        opt = Utils.checkOpt(opt);
        var _context = _$1.extend({
            //x             : 0 , //{number},  // 丢弃
            //y             : 0 , //{number},  // 丢弃，原因同circle
            hr: 0, //{number},  // 必须，椭圆横轴半径
            vr: 0 //{number},  // 必须，椭圆纵轴半径
        }, opt.context);

        opt.context = _context;

        var _this = possibleConstructorReturn(this, (Ellipse.__proto__ || Object.getPrototypeOf(Ellipse)).call(this, opt));

        _this.type = "ellipse";
        _this.id = Utils.createId(_this.type);

        _this.setGraphics();
        return _this;
    }

    createClass(Ellipse, [{
        key: "$watch",
        value: function $watch(name, value, preValue) {
            if (name == "hr" || name == "vr") {
                this.setGraphics();
            }
        }
    }, {
        key: "setGraphics",
        value: function setGraphics() {
            this.graphics.clear();
            this.graphics.drawEllipse(0, 0, this.context.hr * 2, this.context.vr * 2);
        }
    }]);
    return Ellipse;
}(Shape);

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 多边形 类  （不规则）
 *
 * 对应context的属性有
 * @pointList 多边形各个顶角坐标
 **/
var Polygon$2 = function (_Shape) {
    inherits(Polygon, _Shape);

    function Polygon(opt, atype) {
        classCallCheck(this, Polygon);

        opt = Utils.checkOpt(opt);
        var _context = _$1.extend({
            lineType: null,
            smooth: false,
            pointList: [], //{Array}  // 必须，各个顶角坐标
            smoothFilter: Utils.__emptyFunc
        }, opt.context);

        if (atype !== "clone") {
            var start = _context.pointList[0];
            var end = _context.pointList.slice(-1)[0];
            if (_context.smooth) {
                _context.pointList.unshift(end);
                _context.pointList = myMath.getSmoothPointList(_context.pointList);
            }
            //else {
            //    _context.pointList.push( start );
            //}
        }

        opt.context = _context;

        var _this = possibleConstructorReturn(this, (Polygon.__proto__ || Object.getPrototypeOf(Polygon)).call(this, opt, atype));

        _this._drawTypeOnly = null;
        _this.type = "polygon";
        _this.id = Utils.createId(_this.type);

        _this.setGraphics();
        return _this;
    }

    createClass(Polygon, [{
        key: "$watch",
        value: function $watch(name, value, preValue) {
            //调用parent的setGraphics
            if (name == "pointList" || name == "smooth" || name == "lineType") {
                this.setGraphics();
            }
        }
    }, {
        key: "setGraphics",
        value: function setGraphics() {
            this.graphics.clear();

            var context = this.context;
            var pointList = context.pointList;
            if (pointList.length < 2) {
                //少于2个点就不画了~
                return;
            }

            this.graphics.moveTo(pointList[0][0], pointList[0][1]);
            for (var i = 1, l = pointList.length; i < l; i++) {
                this.graphics.lineTo(pointList[i][0], pointList[i][1]);
            }
            this.graphics.closePath();

            //如果为虚线
            if (context.lineType == 'dashed' || context.lineType == 'dotted') {
                //首先把前面的draphicsData设置为fill only
                //也就是把line强制设置为false，这点很重要，否则你虚线画不出来，会和这个实现重叠了
                this.graphics.currentPath.line = false;

                if (context.smooth) {
                    //如果是smooth，本身已经被用曲率打散过了，不需要采用间隔法
                    for (var si = 0, sl = pointList.length; si < sl; si++) {
                        if (si == sl - 1) {
                            break;
                        }
                        this.graphics.moveTo(pointList[si][0], pointList[si][1]);
                        this.graphics.lineTo(pointList[si + 1][0], pointList[si + 1][1]);
                        si += 1;
                    }
                } else {
                    //画虚线的方法  
                    this.graphics.moveTo(pointList[0][0], pointList[0][1]);
                    for (var i = 1, l = pointList.length; i < l; i++) {
                        var fromX = pointList[i - 1][0];
                        var toX = pointList[i][0];
                        var fromY = pointList[i - 1][1];
                        var toY = pointList[i][1];
                        this.dashedLineTo(fromX, fromY, toX, toY, 5);
                    }
                }
            }
            return;
        }
    }]);
    return Polygon;
}(Shape);

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 正n边形（n>=3）
 *
 * 对应context的属性有 
 *
 * @r 正n边形外接圆半径
 * @r 指明正几边形
 *
 * @pointList 私有，从上面的r和n计算得到的边界值的集合
 */
var Isogon = function (_Polygon) {
    inherits(Isogon, _Polygon);

    function Isogon(opt) {
        classCallCheck(this, Isogon);

        opt = Utils.checkOpt(opt);
        var _context = _$1.extend({
            pointList: [], //从下面的r和n计算得到的边界值的集合
            r: 0, //{number},  // 必须，正n边形外接圆半径
            n: 0 //{number},  // 必须，指明正几边形
        }, opt.context);
        _context.pointList = myMath.getIsgonPointList(_context.n, _context.r);

        opt.context = _context;

        var _this = possibleConstructorReturn(this, (Isogon.__proto__ || Object.getPrototypeOf(Isogon)).call(this, opt));

        _this.type = "isogon";
        _this.id = Utils.createId(_this.type);
        return _this;
    }

    createClass(Isogon, [{
        key: "$watch",
        value: function $watch(name, value, preValue) {
            if (name == "r" || name == "n") {
                //如果path有变动，需要自动计算新的pointList
                this.context.pointList = myMath.getIsgonPointList(style.n, style.r);
            }

            if (name == "pointList" || name == "smooth" || name == "lineType") {
                this.setGraphics();
                this.graphics.closePath();
            }
        }
    }]);
    return Isogon;
}(Polygon$2);

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 线条 类
 *
 *
 * 对应context的属性有
 * @lineType  可选 虚线 实现 的 类型
 * @xStart    必须，起点横坐标
 * @yStart    必须，起点纵坐标
 * @xEnd      必须，终点横坐标
 * @yEnd      必须，终点纵坐标
 **/
var Line = function (_Shape) {
    inherits(Line, _Shape);

    function Line(opt) {
        classCallCheck(this, Line);

        opt = Utils.checkOpt(opt);
        var _context = _$1.extend({
            lineType: null, //可选 虚线 实现 的 类型
            start: {
                x: 0, // 必须，起点横坐标
                y: 0 // 必须，起点纵坐标
            },
            end: {
                x: 0, // 必须，终点横坐标
                y: 0 // 必须，终点纵坐标
            },
            dashLength: 3 // 虚线间隔
        }, opt.context);
        opt.context = _context;

        var _this = possibleConstructorReturn(this, (Line.__proto__ || Object.getPrototypeOf(Line)).call(this, opt));

        _this.setGraphics();

        _this.type = "line";
        _this.id = Utils.createId(_this.type);
        return _this;
    }

    createClass(Line, [{
        key: "$watch",
        value: function $watch(name, value, preValue) {
            //并不清楚是start.x 还是end.x， 当然，这并不重要
            if (name == "x" || name == "y") {
                this.setGraphics();
            }
        }
    }, {
        key: "setGraphics",
        value: function setGraphics() {
            this.graphics.clear();
            var context = this.context;
            if (!context.lineType || context.lineType == 'solid') {
                this.graphics.moveTo(context.start.x, context.start.y);
                this.graphics.lineTo(context.end.x, context.end.y);
            } else if (context.lineType == 'dashed' || context.lineType == 'dotted') {
                this.dashedLineTo(context.start.x, context.start.y, context.end.x, context.end.y, this.context.dashLength);
            }
            return this;
        }
    }]);
    return Line;
}(Shape);

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 矩现 类  （不规则）
 *
 *
 * 对应context的属性有
 * @width 宽度
 * @height 高度
 * @radius 如果是圆角的，则为【上右下左】顺序的圆角半径数组
 **/
var Rect = function (_Shape) {
    inherits(Rect, _Shape);

    function Rect(opt) {
        classCallCheck(this, Rect);

        opt = Utils.checkOpt(opt);
        var _context = _$1.extend({
            width: 0,
            height: 0,
            radius: []
        }, opt.context);
        opt.context = _context;

        var _this = possibleConstructorReturn(this, (Rect.__proto__ || Object.getPrototypeOf(Rect)).call(this, opt));

        _this.type = "rect";
        _this.id = Utils.createId(_this.type);

        _this.setGraphics();
        return _this;
    }

    createClass(Rect, [{
        key: "$watch",
        value: function $watch(name, value, preValue) {
            if (name == "width" || name == "height" || name == "radius") {
                this.setGraphics();
            }
        }

        /**
         * 绘制圆角矩形
         */

    }, {
        key: "_buildRadiusPath",
        value: function _buildRadiusPath() {
            var context = this.context;
            //左上、右上、右下、左下角的半径依次为r1、r2、r3、r4
            //r缩写为1         相当于 [1, 1, 1, 1]
            //r缩写为[1]       相当于 [1, 1, 1, 1]
            //r缩写为[1, 2]    相当于 [1, 2, 1, 2]
            //r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]
            var x = 0;
            var y = 0;
            var width = this.context.width;
            var height = this.context.height;

            var r = Utils.getCssOrderArr(context.radius);
            var G = this.graphics;

            G.moveTo(parseInt(x + r[0]), parseInt(y));
            G.lineTo(parseInt(x + width - r[1]), parseInt(y));
            r[1] !== 0 && G.quadraticCurveTo(x + width, y, x + width, y + r[1]);
            G.lineTo(parseInt(x + width), parseInt(y + height - r[2]));
            r[2] !== 0 && G.quadraticCurveTo(x + width, y + height, x + width - r[2], y + height);
            G.lineTo(parseInt(x + r[3]), parseInt(y + height));
            r[3] !== 0 && G.quadraticCurveTo(x, y + height, x, y + height - r[3]);
            G.lineTo(parseInt(x), parseInt(y + r[0]));
            r[0] !== 0 && G.quadraticCurveTo(x, y, x + r[0], y);
        }
        /**
         * 创建矩形路径
         * @param {Context2D} ctx Canvas 2D上下文
         * @param {Object} context 样式
         */

    }, {
        key: "setGraphics",
        value: function setGraphics() {
            this.graphics.clear();
            if (!this.context.radius.length) {
                this.graphics.drawRect(0, 0, this.context.width, this.context.height);
            } else {
                this._buildRadiusPath();
            }
            this.graphics.closePath();
            return;
        }
    }]);
    return Rect;
}(Shape);

/**
 * Canvax
 *
 * @author 释剑 (李涛, litao.lt@alibaba-inc.com)
 *
 * 扇形 类
 *
 * 坐标原点再圆心
 *
 * 对应context的属性有
 * @r0 默认为0，内圆半径指定后将出现内弧，同时扇边长度 = r - r0
 * @r  必须，外圆半径
 * @startAngle 起始角度(0, 360)
 * @endAngle   结束角度(0, 360)
 **/
var Sector = function (_Shape) {
    inherits(Sector, _Shape);

    function Sector(opt) {
        classCallCheck(this, Sector);

        opt = Utils.checkOpt(opt);
        var _context = _$1.extend({
            pointList: [], //边界点的集合,私有，从下面的属性计算的来
            r0: 0, // 默认为0，内圆半径指定后将出现内弧，同时扇边长度 = r - r0
            r: 0, //{number},  // 必须，外圆半径
            startAngle: 0, //{number},  // 必须，起始角度[0, 360)
            endAngle: 0, //{number},  // 必须，结束角度(0, 360]
            clockwise: false //是否顺时针，默认为false(顺时针)
        }, opt.context);

        opt.context = _context;

        var _this = possibleConstructorReturn(this, (Sector.__proto__ || Object.getPrototypeOf(Sector)).call(this, opt));

        _this.regAngle = [];
        _this.isRing = false; //是否为一个圆环
        _this.type = "sector";
        _this.id = Utils.createId(_this.type);

        _this.setGraphics();
        return _this;
    }

    createClass(Sector, [{
        key: "$watch",
        value: function $watch(name, value, preValue) {
            if (name == "r0" || name == "r" || name == "startAngle" || name == "endAngle" || name == "clockwise") {
                this.setGraphics();
            }
        }
    }, {
        key: "setGraphics",
        value: function setGraphics() {
            var context = this.context;
            // 形内半径[0,r)
            var r0 = typeof context.r0 == 'undefined' ? 0 : context.r0;
            var r = context.r; // 扇形外半径(0,r]
            var startAngle = myMath.degreeTo360(context.startAngle); // 起始角度[0,360)
            var endAngle = myMath.degreeTo360(context.endAngle); // 结束角度(0,360]

            //var isRing     = false;                       //是否为圆环

            //if( startAngle != endAngle && Math.abs(startAngle - endAngle) % 360 == 0 ) {
            if (startAngle == endAngle && context.startAngle != context.endAngle) {
                //如果两个角度相等，那么就认为是个圆环了
                this.isRing = true;
                startAngle = 0;
                endAngle = 360;
            }

            startAngle = myMath.degreeToRadian(startAngle);
            endAngle = myMath.degreeToRadian(endAngle);

            //处理下极小夹角的情况
            if (endAngle - startAngle < 0.025) {
                startAngle -= 0.003;
            }

            var G = this.graphics;

            G.arc(0, 0, r, startAngle, endAngle, this.context.clockwise);
            if (r0 !== 0) {
                if (this.isRing) {
                    //加上这个isRing的逻辑是为了兼容flashcanvas下绘制圆环的的问题
                    //不加这个逻辑flashcanvas会绘制一个大圆 ， 而不是圆环
                    G.moveTo(r0, 0);
                    G.arc(0, 0, r0, startAngle, endAngle, !this.context.clockwise);
                } else {
                    G.arc(0, 0, r0, endAngle, startAngle, !this.context.clockwise);
                }
            } else {
                //TODO:在r0为0的时候，如果不加lineTo(0,0)来把路径闭合，会出现有搞笑的一个bug
                //整个圆会出现一个以每个扇形两端为节点的镂空，我可能描述不清楚，反正这个加上就好了
                G.lineTo(0, 0);
            }

            G.closePath();
        }
    }, {
        key: "getRegAngle",
        value: function getRegAngle() {
            this.regIn = true; //如果在start和end的数值中，end大于start而且是顺时针则regIn为true
            var c = this.context;
            var startAngle = myMath.degreeTo360(c.startAngle); // 起始角度[0,360)
            var endAngle = myMath.degreeTo360(c.endAngle); // 结束角度(0,360]

            if (startAngle > endAngle && !c.clockwise || startAngle < endAngle && c.clockwise) {
                this.regIn = false; //out
            }
            //度的范围，从小到大
            this.regAngle = [Math.min(startAngle, endAngle), Math.max(startAngle, endAngle)];
        }
    }, {
        key: "getRect",
        value: function getRect(context) {
            var context = context ? context : this.context;
            var r0 = typeof context.r0 == 'undefined' // 形内半径[0,r)
            ? 0 : context.r0;
            var r = context.r; // 扇形外半径(0,r]

            this.getRegAngle();

            var startAngle = myMath.degreeTo360(context.startAngle); // 起始角度[0,360)
            var endAngle = myMath.degreeTo360(context.endAngle); // 结束角度(0,360]

            var pointList = [];

            var p4Direction = {
                "90": [0, r],
                "180": [-r, 0],
                "270": [0, -r],
                "360": [r, 0]
            };

            for (var d in p4Direction) {
                var inAngleReg = parseInt(d) > this.regAngle[0] && parseInt(d) < this.regAngle[1];
                if (this.isRing || inAngleReg && this.regIn || !inAngleReg && !this.regIn) {
                    pointList.push(p4Direction[d]);
                }
            }

            if (!this.isRing) {
                startAngle = myMath.degreeToRadian(startAngle);
                endAngle = myMath.degreeToRadian(endAngle);

                pointList.push([myMath.cos(startAngle) * r0, myMath.sin(startAngle) * r0]);

                pointList.push([myMath.cos(startAngle) * r, myMath.sin(startAngle) * r]);

                pointList.push([myMath.cos(endAngle) * r, myMath.sin(endAngle) * r]);

                pointList.push([myMath.cos(endAngle) * r0, myMath.sin(endAngle) * r0]);
            }

            context.pointList = pointList;
            return this.getRectFormPointList(context);
        }
    }]);
    return Sector;
}(Shape);

//shapes
var Canvax = {
    App: Application
};

Canvax.Display = {
    DisplayObject: DisplayObject,
    DisplayObjectContainer: DisplayObjectContainer,
    Stage: Stage,
    Sprite: Sprite,
    Shape: Shape,
    Point: Point,
    Text: Text
};

Canvax.Shapes = {
    BrokenLine: BrokenLine,
    Circle: Circle$2,
    Droplet: Droplet,
    Ellipse: Ellipse$2,
    Isogon: Isogon,
    Line: Line,
    Path: Path,
    Polygon: Polygon$2,
    Rect: Rect,
    Sector: Sector
};

Canvax.Event = {
    EventDispatcher: EventDispatcher,
    EventManager: EventManager
};

return Canvax;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FudmF4LmpzIiwic291cmNlcyI6WyIuLi8uLi9jYW52YXgvdXRpbHMvdW5kZXJzY29yZS5qcyIsIi4uLy4uL2NhbnZheC91dGlscy9pbmRleC5qcyIsIi4uLy4uL2NhbnZheC9kaXNwbGF5L1BvaW50LmpzIiwiLi4vLi4vY2FudmF4L2V2ZW50L0NhbnZheEV2ZW50LmpzIiwiLi4vLi4vY2FudmF4L3NldHRpbmdzLmpzIiwiLi4vLi4vY2FudmF4L3V0aWxzL2RvbS5qcyIsIi4uLy4uL2NhbnZheC9ldmVudC9FdmVudEhhbmRsZXIuanMiLCIuLi8uLi9jYW52YXgvZXZlbnQvRXZlbnRNYW5hZ2VyLmpzIiwiLi4vLi4vY2FudmF4L2V2ZW50L0V2ZW50RGlzcGF0Y2hlci5qcyIsIi4uLy4uL2NhbnZheC9nZW9tL01hdHJpeC5qcyIsIi4uLy4uL2NhbnZheC9hbmltYXRpb24vVHdlZW4uanMiLCIuLi8uLi9jYW52YXgvYW5pbWF0aW9uL0FuaW1hdGlvbkZyYW1lLmpzIiwiLi4vLi4vY2FudmF4L3V0aWxzL29ic2VydmUuanMiLCIuLi8uLi9jYW52YXgvY29uc3QuanMiLCIuLi8uLi9jYW52YXgvZGlzcGxheS9EaXNwbGF5T2JqZWN0LmpzIiwiLi4vLi4vY2FudmF4L2Rpc3BsYXkvRGlzcGxheU9iamVjdENvbnRhaW5lci5qcyIsIi4uLy4uL2NhbnZheC9kaXNwbGF5L1N0YWdlLmpzIiwiLi4vLi4vY2FudmF4L3JlbmRlcmVycy9TeXN0ZW1SZW5kZXJlci5qcyIsIi4uLy4uL2NhbnZheC9ncmFwaGljcy9jYW52YXMvR3JhcGhpY3NSZW5kZXJlci5qcyIsIi4uLy4uL2NhbnZheC9yZW5kZXJlcnMvY2FudmFzL0NhbnZhc1JlbmRlcmVyLmpzIiwiLi4vLi4vY2FudmF4L21hdGgvUG9pbnQuanMiLCIuLi8uLi9jYW52YXgvbWF0aC9NYXRyaXguanMiLCIuLi8uLi9jYW52YXgvbWF0aC9Hcm91cEQ4LmpzIiwiLi4vLi4vY2FudmF4L21hdGgvQXJjLmpzIiwiLi4vLi4vY2FudmF4L21hdGgvc2hhcGVzL1JlY3RhbmdsZS5qcyIsIi4uLy4uL2NhbnZheC9tYXRoL3NoYXBlcy9DaXJjbGUuanMiLCIuLi8uLi9jYW52YXgvbWF0aC9zaGFwZXMvRWxsaXBzZS5qcyIsIi4uLy4uL2NhbnZheC9tYXRoL3NoYXBlcy9Qb2x5Z29uLmpzIiwiLi4vLi4vY2FudmF4L21hdGgvaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcGl4aS1nbC1jb3JlL3NyYy9jcmVhdGVDb250ZXh0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3BpeGktZ2wtY29yZS9zcmMvc2V0VmVydGV4QXR0cmliQXJyYXlzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3BpeGktZ2wtY29yZS9zcmMvR0xCdWZmZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcGl4aS1nbC1jb3JlL3NyYy9HTFRleHR1cmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcGl4aS1nbC1jb3JlL3NyYy9HTEZyYW1lYnVmZmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3BpeGktZ2wtY29yZS9zcmMvc2hhZGVyL2NvbXBpbGVQcm9ncmFtLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3BpeGktZ2wtY29yZS9zcmMvc2hhZGVyL21hcFR5cGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcGl4aS1nbC1jb3JlL3NyYy9zaGFkZXIvbWFwU2l6ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9waXhpLWdsLWNvcmUvc3JjL3NoYWRlci9leHRyYWN0QXR0cmlidXRlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9waXhpLWdsLWNvcmUvc3JjL3NoYWRlci9kZWZhdWx0VmFsdWUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcGl4aS1nbC1jb3JlL3NyYy9zaGFkZXIvZXh0cmFjdFVuaWZvcm1zLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3BpeGktZ2wtY29yZS9zcmMvc2hhZGVyL3NldFByZWNpc2lvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9waXhpLWdsLWNvcmUvc3JjL3NoYWRlci9nZW5lcmF0ZVVuaWZvcm1BY2Nlc3NPYmplY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcGl4aS1nbC1jb3JlL3NyYy9HTFNoYWRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9waXhpLWdsLWNvcmUvc3JjL1ZlcnRleEFycmF5T2JqZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3BpeGktZ2wtY29yZS9zcmMvc2hhZGVyL2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3BpeGktZ2wtY29yZS9zcmMvaW5kZXguanMiLCIuLi8uLi9jYW52YXgvcmVuZGVyZXJzL3dlYmdsL3V0aWxzL1JlbmRlclRhcmdldC5qcyIsIi4uLy4uL2NhbnZheC9yZW5kZXJlcnMvd2ViZ2wvbWFuYWdlcnMvV2ViR0xNYW5hZ2VyLmpzIiwiLi4vLi4vY2FudmF4L3JlbmRlcmVycy93ZWJnbC91dGlscy9PYmplY3RSZW5kZXJlci5qcyIsIi4uLy4uL2NhbnZheC9yZW5kZXJlcnMvd2ViZ2wvV2ViR0xTdGF0ZS5qcyIsIi4uLy4uL2NhbnZheC91dGlscy9jb2xvci5qcyIsIi4uLy4uL2NhbnZheC9ncmFwaGljcy93ZWJnbC9XZWJHTEdyYXBoaWNzRGF0YS5qcyIsIi4uLy4uL2NhbnZheC9TaGFkZXIuanMiLCIuLi8uLi9jYW52YXgvZ3JhcGhpY3Mvd2ViZ2wvc2hhZGVycy9QcmltaXRpdmVTaGFkZXIuanMiLCIuLi8uLi9jYW52YXgvZ3JhcGhpY3Mvd2ViZ2wvdXRpbHMvYnVpbGRMaW5lLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VhcmN1dC9zcmMvZWFyY3V0LmpzIiwiLi4vLi4vY2FudmF4L2dyYXBoaWNzL3dlYmdsL3V0aWxzL2J1aWxkUG9seS5qcyIsIi4uLy4uL2NhbnZheC9ncmFwaGljcy93ZWJnbC91dGlscy9idWlsZFJlY3RhbmdsZS5qcyIsIi4uLy4uL2NhbnZheC9ncmFwaGljcy93ZWJnbC91dGlscy9idWlsZFJvdW5kZWRSZWN0YW5nbGUuanMiLCIuLi8uLi9jYW52YXgvZ3JhcGhpY3Mvd2ViZ2wvdXRpbHMvYnVpbGRDaXJjbGUuanMiLCIuLi8uLi9jYW52YXgvZ3JhcGhpY3Mvd2ViZ2wvR3JhcGhpY3NSZW5kZXJlci5qcyIsIi4uLy4uL2NhbnZheC9yZW5kZXJlcnMvd2ViZ2wvdXRpbHMvbWFwV2ViR0xEcmF3TW9kZXNUb1BpeGkuanMiLCIuLi8uLi9jYW52YXgvcmVuZGVyZXJzL3dlYmdsL1dlYkdMU3RhZ2VSZW5kZXJlci5qcyIsIi4uLy4uL2NhbnZheC9yZW5kZXJlcnMvd2ViZ2wvV2ViR0xSZW5kZXJlci5qcyIsIi4uLy4uL2NhbnZheC9yZW5kZXJlcnMvYXV0b1JlbmRlcmVyLmpzIiwiLi4vLi4vY2FudmF4L0FwcGxpY2F0aW9uLmpzIiwiLi4vLi4vY2FudmF4L2Rpc3BsYXkvU3ByaXRlLmpzIiwiLi4vLi4vY2FudmF4L2dyYXBoaWNzL0dyYXBoaWNzRGF0YS5qcyIsIi4uLy4uL2NhbnZheC9ncmFwaGljcy91dGlscy9iZXppZXJDdXJ2ZVRvLmpzIiwiLi4vLi4vY2FudmF4L2dlb20vSW5zaWRlTGluZS5qcyIsIi4uLy4uL2NhbnZheC9ncmFwaGljcy9HcmFwaGljcy5qcyIsIi4uLy4uL2NhbnZheC9kaXNwbGF5L1NoYXBlLmpzIiwiLi4vLi4vY2FudmF4L2Rpc3BsYXkvVGV4dC5qcyIsIi4uLy4uL2NhbnZheC9nZW9tL1ZlY3Rvci5qcyIsIi4uLy4uL2NhbnZheC9nZW9tL1Ntb290aFNwbGluZS5qcyIsIi4uLy4uL2NhbnZheC9nZW9tL01hdGguanMiLCIuLi8uLi9jYW52YXgvc2hhcGUvQnJva2VuTGluZS5qcyIsIi4uLy4uL2NhbnZheC9zaGFwZS9DaXJjbGUuanMiLCIuLi8uLi9jYW52YXgvc2hhcGUvUGF0aC5qcyIsIi4uLy4uL2NhbnZheC9zaGFwZS9Ecm9wbGV0LmpzIiwiLi4vLi4vY2FudmF4L3NoYXBlL0VsbGlwc2UuanMiLCIuLi8uLi9jYW52YXgvc2hhcGUvUG9seWdvbi5qcyIsIi4uLy4uL2NhbnZheC9zaGFwZS9Jc29nb24uanMiLCIuLi8uLi9jYW52YXgvc2hhcGUvTGluZS5qcyIsIi4uLy4uL2NhbnZheC9zaGFwZS9SZWN0LmpzIiwiLi4vLi4vY2FudmF4L3NoYXBlL1NlY3Rvci5qcyIsIi4uLy4uL2NhbnZheC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgXyA9IHt9XG52YXIgYnJlYWtlciA9IHt9O1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsIE9ialByb3RvID0gT2JqZWN0LnByb3RvdHlwZSwgRnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyXG50b1N0cmluZyAgICAgICAgID0gT2JqUHJvdG8udG9TdHJpbmcsXG5oYXNPd25Qcm9wZXJ0eSAgID0gT2JqUHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbnZhclxubmF0aXZlRm9yRWFjaCAgICAgID0gQXJyYXlQcm90by5mb3JFYWNoLFxubmF0aXZlRmlsdGVyICAgICAgID0gQXJyYXlQcm90by5maWx0ZXIsXG5uYXRpdmVJbmRleE9mICAgICAgPSBBcnJheVByb3RvLmluZGV4T2YsXG5uYXRpdmVJc0FycmF5ICAgICAgPSBBcnJheS5pc0FycmF5LFxubmF0aXZlS2V5cyAgICAgICAgID0gT2JqZWN0LmtleXM7XG5cbl8udmFsdWVzID0gZnVuY3Rpb24ob2JqKSB7XG4gIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIHZhbHVlcyA9IG5ldyBBcnJheShsZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdmFsdWVzW2ldID0gb2JqW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiB2YWx1ZXM7XG59O1xuXG5fLmtleXMgPSBuYXRpdmVLZXlzIHx8IGZ1bmN0aW9uKG9iaikge1xuICBpZiAob2JqICE9PSBPYmplY3Qob2JqKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBvYmplY3QnKTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKF8uaGFzKG9iaiwga2V5KSkga2V5cy5wdXNoKGtleSk7XG4gICAgcmV0dXJuIGtleXM7XG59O1xuXG5fLmhhcyA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbn07XG5cbnZhciBlYWNoID0gXy5lYWNoID0gXy5mb3JFYWNoID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICBpZiAob2JqID09IG51bGwpIHJldHVybjtcbiAgaWYgKG5hdGl2ZUZvckVhY2ggJiYgb2JqLmZvckVhY2ggPT09IG5hdGl2ZUZvckVhY2gpIHtcbiAgICBvYmouZm9yRWFjaChpdGVyYXRvciwgY29udGV4dCk7XG4gIH0gZWxzZSBpZiAob2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGgpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpbaV0sIGksIG9iaikgPT09IGJyZWFrZXIpIHJldHVybjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleXNbaV1dLCBrZXlzW2ldLCBvYmopID09PSBicmVha2VyKSByZXR1cm47XG4gICAgfVxuICB9XG59O1xuXG5fLmNvbXBhY3QgPSBmdW5jdGlvbihhcnJheSkge1xuICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIF8uaWRlbnRpdHkpO1xufTtcblxuXy5maWx0ZXIgPSBfLnNlbGVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0cztcbiAgaWYgKG5hdGl2ZUZpbHRlciAmJiBvYmouZmlsdGVyID09PSBuYXRpdmVGaWx0ZXIpIHJldHVybiBvYmouZmlsdGVyKGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgIGlmIChpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpIHJlc3VsdHMucHVzaCh2YWx1ZSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0cztcbn07XG5cbmVhY2goWydBcmd1bWVudHMnLCAnRnVuY3Rpb24nLCAnU3RyaW5nJywgJ051bWJlcicsICdEYXRlJywgJ1JlZ0V4cCddLCBmdW5jdGlvbihuYW1lKSB7XG4gIF9bJ2lzJyArIG5hbWVdID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PSAnW29iamVjdCAnICsgbmFtZSArICddJztcbiAgfTtcbn0pO1xuXG5pZiAodHlwZW9mICgvLi8pICE9PSAnZnVuY3Rpb24nKSB7XG4gIF8uaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nO1xuICB9O1xufTtcblxuXy5pc0Zpbml0ZSA9IGZ1bmN0aW9uKG9iaikge1xuICByZXR1cm4gaXNGaW5pdGUob2JqKSAmJiAhaXNOYU4ocGFyc2VGbG9hdChvYmopKTtcbn07XG5cbl8uaXNOYU4gPSBmdW5jdGlvbihvYmopIHtcbiAgcmV0dXJuIF8uaXNOdW1iZXIob2JqKSAmJiBvYmogIT0gK29iajtcbn07XG5cbl8uaXNCb29sZWFuID0gZnVuY3Rpb24ob2JqKSB7XG4gIHJldHVybiBvYmogPT09IHRydWUgfHwgb2JqID09PSBmYWxzZSB8fCB0b1N0cmluZy5jYWxsKG9iaikgPT0gJ1tvYmplY3QgQm9vbGVhbl0nO1xufTtcblxuXy5pc051bGwgPSBmdW5jdGlvbihvYmopIHtcbiAgcmV0dXJuIG9iaiA9PT0gbnVsbDtcbn07XG5cbl8uaXNFbXB0eSA9IGZ1bmN0aW9uKG9iaikge1xuICBpZiAob2JqID09IG51bGwpIHJldHVybiB0cnVlO1xuICBpZiAoXy5pc0FycmF5KG9iaikgfHwgXy5pc1N0cmluZyhvYmopKSByZXR1cm4gb2JqLmxlbmd0aCA9PT0gMDtcbiAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKF8uaGFzKG9iaiwga2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xufTtcblxuXy5pc0VsZW1lbnQgPSBmdW5jdGlvbihvYmopIHtcbiAgcmV0dXJuICEhKG9iaiAmJiBvYmoubm9kZVR5cGUgPT09IDEpO1xufTtcblxuXy5pc0FycmF5ID0gbmF0aXZlSXNBcnJheSB8fCBmdW5jdGlvbihvYmopIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuXy5pc09iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuICByZXR1cm4gb2JqID09PSBPYmplY3Qob2JqKTtcbn07XG5cbl8uaWRlbnRpdHkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59O1xuXG5fLmluZGV4T2YgPSBmdW5jdGlvbihhcnJheSwgaXRlbSwgaXNTb3J0ZWQpIHtcbiAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiAtMTtcbiAgdmFyIGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIGlmIChpc1NvcnRlZCkge1xuICAgIGlmICh0eXBlb2YgaXNTb3J0ZWQgPT0gJ251bWJlcicpIHtcbiAgICAgIGkgPSAoaXNTb3J0ZWQgPCAwID8gTWF0aC5tYXgoMCwgbGVuZ3RoICsgaXNTb3J0ZWQpIDogaXNTb3J0ZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpID0gXy5zb3J0ZWRJbmRleChhcnJheSwgaXRlbSk7XG4gICAgICByZXR1cm4gYXJyYXlbaV0gPT09IGl0ZW0gPyBpIDogLTE7XG4gICAgfVxuICB9XG4gIGlmIChuYXRpdmVJbmRleE9mICYmIGFycmF5LmluZGV4T2YgPT09IG5hdGl2ZUluZGV4T2YpIHJldHVybiBhcnJheS5pbmRleE9mKGl0ZW0sIGlzU29ydGVkKTtcbiAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykgaWYgKGFycmF5W2ldID09PSBpdGVtKSByZXR1cm4gaTtcbiAgICByZXR1cm4gLTE7XG59O1xuXG5fLmlzV2luZG93ID0gZnVuY3Rpb24oIG9iaiApIHsgXG4gICByZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09IG9iai53aW5kb3c7XG59O1xuXy5pc1BsYWluT2JqZWN0ID0gZnVuY3Rpb24oIG9iaiApIHtcbiAgICAvLyBCZWNhdXNlIG9mIElFLCB3ZSBhbHNvIGhhdmUgdG8gY2hlY2sgdGhlIHByZXNlbmNlIG9mIHRoZSBjb25zdHJ1Y3RvciBwcm9wZXJ0eS5cbiAgICAvLyBNYWtlIHN1cmUgdGhhdCBET00gbm9kZXMgYW5kIHdpbmRvdyBvYmplY3RzIGRvbid0IHBhc3MgdGhyb3VnaCwgYXMgd2VsbFxuICAgIGlmICggIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiIHx8IG9iai5ub2RlVHlwZSB8fCBfLmlzV2luZG93KCBvYmogKSApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyBOb3Qgb3duIGNvbnN0cnVjdG9yIHByb3BlcnR5IG11c3QgYmUgT2JqZWN0XG4gICAgICAgIGlmICggb2JqLmNvbnN0cnVjdG9yICYmXG4gICAgICAgICAgICAhaGFzT3duLmNhbGwob2JqLCBcImNvbnN0cnVjdG9yXCIpICYmXG4gICAgICAgICAgICAhaGFzT3duLmNhbGwob2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgXCJpc1Byb3RvdHlwZU9mXCIpICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoIGUgKSB7XG4gICAgICAgIC8vIElFOCw5IFdpbGwgdGhyb3cgZXhjZXB0aW9ucyBvbiBjZXJ0YWluIGhvc3Qgb2JqZWN0cyAjOTg5N1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIE93biBwcm9wZXJ0aWVzIGFyZSBlbnVtZXJhdGVkIGZpcnN0bHksIHNvIHRvIHNwZWVkIHVwLFxuICAgIC8vIGlmIGxhc3Qgb25lIGlzIG93biwgdGhlbiBhbGwgcHJvcGVydGllcyBhcmUgb3duLlxuICAgIHZhciBrZXk7XG4gICAgZm9yICgga2V5IGluIG9iaiApIHt9XG5cbiAgICByZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgfHwgaGFzT3duLmNhbGwoIG9iaiwga2V5ICk7XG59O1xuXG4vKipcbipcbirlpoLmnpzmmK/mt7HluqZleHRlbmTvvIznrKzkuIDkuKrlj4LmlbDlsLHorr7nva7kuLp0cnVlXG4qL1xuXy5leHRlbmQgPSBmdW5jdGlvbigpIHsgIFxuICB2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsICBcbiAgICAgIHRhcmdldCA9IGFyZ3VtZW50c1swXSB8fCB7fSwgIFxuICAgICAgaSA9IDEsICBcbiAgICAgIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsICBcbiAgICAgIGRlZXAgPSBmYWxzZTsgIFxuICBpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkgeyAgXG4gICAgICBkZWVwID0gdGFyZ2V0OyAgXG4gICAgICB0YXJnZXQgPSBhcmd1bWVudHNbMV0gfHwge307ICBcbiAgICAgIGkgPSAyOyAgXG4gIH07ICBcbiAgaWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFfLmlzRnVuY3Rpb24odGFyZ2V0KSApIHsgIFxuICAgICAgdGFyZ2V0ID0ge307ICBcbiAgfTsgIFxuICBpZiAoIGxlbmd0aCA9PT0gaSApIHsgIFxuICAgICAgdGFyZ2V0ID0gdGhpczsgIFxuICAgICAgLS1pOyAgXG4gIH07ICBcbiAgZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7ICBcbiAgICAgIGlmICggKG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSkgIT0gbnVsbCApIHsgIFxuICAgICAgICAgIGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHsgIFxuICAgICAgICAgICAgICBzcmMgPSB0YXJnZXRbIG5hbWUgXTsgIFxuICAgICAgICAgICAgICBjb3B5ID0gb3B0aW9uc1sgbmFtZSBdOyAgXG4gICAgICAgICAgICAgIGlmICggdGFyZ2V0ID09PSBjb3B5ICkgeyAgXG4gICAgICAgICAgICAgICAgICBjb250aW51ZTsgIFxuICAgICAgICAgICAgICB9ICBcbiAgICAgICAgICAgICAgaWYgKCBkZWVwICYmIGNvcHkgJiYgKCBfLmlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0gXy5pc0FycmF5KGNvcHkpKSApICkgeyAgXG4gICAgICAgICAgICAgICAgICBpZiAoIGNvcHlJc0FycmF5ICkgeyAgXG4gICAgICAgICAgICAgICAgICAgICAgY29weUlzQXJyYXkgPSBmYWxzZTsgIFxuICAgICAgICAgICAgICAgICAgICAgIGNsb25lID0gc3JjICYmIF8uaXNBcnJheShzcmMpID8gc3JjIDogW107ICBcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICBcbiAgICAgICAgICAgICAgICAgICAgICBjbG9uZSA9IHNyYyAmJiBfLmlzUGxhaW5PYmplY3Qoc3JjKSA/IHNyYyA6IHt9OyAgXG4gICAgICAgICAgICAgICAgICB9ICBcbiAgICAgICAgICAgICAgICAgIHRhcmdldFsgbmFtZSBdID0gXy5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7ICBcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkgeyAgXG4gICAgICAgICAgICAgICAgICB0YXJnZXRbIG5hbWUgXSA9IGNvcHk7ICBcbiAgICAgICAgICAgICAgfSAgXG4gICAgICAgICAgfSAgXG4gICAgICB9ICBcbiAgfSAgXG4gIHJldHVybiB0YXJnZXQ7ICBcbn07IFxuXy5jbG9uZSA9IGZ1bmN0aW9uKG9iaikge1xuICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIG9iajtcbiAgcmV0dXJuIF8uaXNBcnJheShvYmopID8gb2JqLnNsaWNlKCkgOiBfLmV4dGVuZCh0cnVlLCB7fSwgb2JqKTtcbn07XG5leHBvcnQgZGVmYXVsdCBfOyIsIi8qKlxuICogQ2FudmF4XG4gKlxuICogQGF1dGhvciDph4rliZEgKOadjua2mywgbGl0YW8ubHRAYWxpYmFiYS1pbmMuY29tIFxuKi9cbmltcG9ydCBfIGZyb20gXCIuLi91dGlscy91bmRlcnNjb3JlXCI7XG5cbnZhciBVdGlscyA9IHtcbiAgICBtYWluRnJhbWVSYXRlICAgOiA2MCwvL+m7mOiupOS4u+W4p+eOh1xuICAgIG5vdyA6IDAsXG4gICAgLyrlg4/ntKDmo4DmtYvkuJPnlKgqL1xuICAgIF9waXhlbEN0eCAgIDogbnVsbCxcbiAgICBfX2VtcHR5RnVuYyA6IGZ1bmN0aW9uKCl7fSxcbiAgICAvL3JldGluYSDlsY/luZXkvJjljJZcbiAgICBfZGV2aWNlUGl4ZWxSYXRpbyA6IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDEsXG4gICAgX1VJRCAgOiAwLCAvL+ivpeWAvOS4uuWQkeS4iueahOiHquWinumVv+aVtOaVsOWAvFxuICAgIGdldFVJRDpmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gdGhpcy5fVUlEKys7XG4gICAgfSxcbiAgICBjcmVhdGVJZCA6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgaWYoIW5hbWUpe1xuICAgICAgICAgICAgZGVidWdnZXJcbiAgICAgICAgfVxuICAgICAgICAvL2lmIGVuZCB3aXRoIGEgZGlnaXQsIHRoZW4gYXBwZW5kIGFuIHVuZGVyc0Jhc2UgYmVmb3JlIGFwcGVuZGluZ1xuICAgICAgICB2YXIgY2hhckNvZGUgPSBuYW1lLmNoYXJDb2RlQXQobmFtZS5sZW5ndGggLSAxKTtcbiAgICAgICAgaWYgKGNoYXJDb2RlID49IDQ4ICYmIGNoYXJDb2RlIDw9IDU3KSBuYW1lICs9IFwiX1wiO1xuICAgICAgICByZXR1cm4gbmFtZSArIFV0aWxzLmdldFVJRCgpO1xuICAgIH0sXG4gICAgY2FudmFzU3VwcG9ydCA6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gISFkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKS5nZXRDb250ZXh0O1xuICAgIH0sXG4gICAgY3JlYXRlT2JqZWN0IDogZnVuY3Rpb24oIHByb3RvICwgY29uc3RydWN0b3IgKSB7XG4gICAgICAgIHZhciBuZXdQcm90bztcbiAgICAgICAgdmFyIE9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG4gICAgICAgIGlmIChPYmplY3RDcmVhdGUpIHtcbiAgICAgICAgICAgIG5ld1Byb3RvID0gT2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFV0aWxzLl9fZW1wdHlGdW5jLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgICAgICAgbmV3UHJvdG8gPSBuZXcgVXRpbHMuX19lbXB0eUZ1bmMoKTtcbiAgICAgICAgfVxuICAgICAgICBuZXdQcm90by5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuICAgICAgICByZXR1cm4gbmV3UHJvdG87XG4gICAgfSxcbiAgICBjcmVhdENsYXNzIDogZnVuY3Rpb24ociwgcywgcHgpe1xuICAgICAgICBpZiAoIXMgfHwgIXIpIHtcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzcCA9IHMucHJvdG90eXBlLCBycDtcbiAgICAgICAgLy8gYWRkIHByb3RvdHlwZSBjaGFpblxuICAgICAgICBycCA9IFV0aWxzLmNyZWF0ZU9iamVjdChzcCwgcik7XG4gICAgICAgIHIucHJvdG90eXBlID0gXy5leHRlbmQocnAsIHIucHJvdG90eXBlKTtcbiAgICAgICAgci5zdXBlcmNsYXNzID0gVXRpbHMuY3JlYXRlT2JqZWN0KHNwLCBzKTtcbiAgICAgICAgLy8gYWRkIHByb3RvdHlwZSBvdmVycmlkZXNcbiAgICAgICAgaWYgKHB4KSB7XG4gICAgICAgICAgICBfLmV4dGVuZChycCwgcHgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByO1xuICAgIH0sXG4gICAgaW5pdEVsZW1lbnQgOiBmdW5jdGlvbiggY2FudmFzICl7XG4gICAgICAgIGlmKCB3aW5kb3cuRmxhc2hDYW52YXMgJiYgRmxhc2hDYW52YXMuaW5pdEVsZW1lbnQpe1xuICAgICAgICAgICAgRmxhc2hDYW52YXMuaW5pdEVsZW1lbnQoIGNhbnZhcyApO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAvL+WBmuS4gOasoeeugOWNleeahG9wdOWPguaVsOagoemqjO+8jOS/neivgeWcqOeUqOaIt+S4jeS8oG9wdOeahOaXtuWAmSDmiJbogIXkvKDkuoZvcHTkvYbmmK/ph4zpnaLmsqHmnIljb250ZXh055qE5pe25YCZ5oql6ZSZXG4gICAgY2hlY2tPcHQgICAgOiBmdW5jdGlvbihvcHQpe1xuICAgICAgICBpZiggIW9wdCApe1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb250ZXh0IDoge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSAgIFxuICAgICAgICB9IGVsc2UgaWYoIG9wdCAmJiAhb3B0LmNvbnRleHQgKSB7XG4gICAgICAgICAgb3B0LmNvbnRleHQgPSB7fVxuICAgICAgICAgIHJldHVybiBvcHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG9wdDtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXG4gICAgLyoqXG4gICAgICog5oyJ54WnY3Nz55qE6aG65bqP77yM6L+U5Zue5LiA5LiqW+S4iizlj7Ms5LiLLOW3pl1cbiAgICAgKi9cbiAgICBnZXRDc3NPcmRlckFyciA6IGZ1bmN0aW9uKCByICl7XG4gICAgICAgIHZhciByMTsgXG4gICAgICAgIHZhciByMjsgXG4gICAgICAgIHZhciByMzsgXG4gICAgICAgIHZhciByNDtcblxuICAgICAgICBpZih0eXBlb2YgciA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHIxID0gcjIgPSByMyA9IHI0ID0gcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKHIgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgaWYgKHIubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcjEgPSByMiA9IHIzID0gcjQgPSByWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihyLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgIHIxID0gcjMgPSByWzBdO1xuICAgICAgICAgICAgICAgIHIyID0gcjQgPSByWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihyLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgICAgIHIxID0gclswXTtcbiAgICAgICAgICAgICAgICByMiA9IHI0ID0gclsxXTtcbiAgICAgICAgICAgICAgICByMyA9IHJbMl07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHIxID0gclswXTtcbiAgICAgICAgICAgICAgICByMiA9IHJbMV07XG4gICAgICAgICAgICAgICAgcjMgPSByWzJdO1xuICAgICAgICAgICAgICAgIHI0ID0gclszXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHIxID0gcjIgPSByMyA9IHI0ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3IxLHIyLHIzLHI0XTtcbiAgICB9LFxuXG4gICAgaXNXZWJHTFN1cHBvcnRlZCA6IGZ1bmN0aW9uICgpe1xuICAgICAgICB2YXIgY29udGV4dE9wdGlvbnMgPSB7IHN0ZW5jaWw6IHRydWUgfTtcbiAgICAgICAgdHJ5XG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICghd2luZG93LldlYkdMUmVuZGVyaW5nQ29udGV4dCkgLy/kuI3lrZjlnKjnm7TmjqVyZXR1cm5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyksIFxuICAgICAgICAgICAgICAgIGdsID0gY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJywgY29udGV4dE9wdGlvbnMpIHx8IGNhbnZhcy5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnLCBjb250ZXh0T3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gISEoZ2wgJiYgZ2wuZ2V0Q29udGV4dEF0dHJpYnV0ZXMoKS5zdGVuY2lsKTsgLy/ov5jopoHnoa7lrp7mo4DmtYvmmK/lkKbmlK/mjIF3ZWJHTOaooeW8j1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBVdGlsczsiLCIvKipcbiAqIFBvaW50XG4gKlxuICogQGF1dGhvciDph4rliZEgKOadjua2mywgbGl0YW8ubHRAYWxpYmFiYS1pbmMuY29tKVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb2ludFxue1xuICAgIGNvbnN0cnVjdG9yKCB4PTAgLCB5PTAgKVxuICAgIHtcbiAgICAgICAgaWYoIGFyZ3VtZW50cy5sZW5ndGg9PTEgJiYgdHlwZW9mIGFyZ3VtZW50c1swXSA9PSAnb2JqZWN0JyApe1xuICAgICAgICAgICAgdmFyIGFyZz1hcmd1bWVudHNbMF1cbiAgICAgICAgICAgIGlmKCBcInhcIiBpbiBhcmcgJiYgXCJ5XCIgaW4gYXJnICl7XG4gICAgICAgICAgICAgICAgdGhpcy54ID0gYXJnLngqMTtcbiAgICAgICAgICAgICAgICB0aGlzLnkgPSBhcmcueSoxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgaT0wO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHAgaW4gYXJnKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoaT09MCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnggPSBhcmdbcF0qMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueSA9IGFyZ1twXSoxO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMueCA9IHgqMTtcbiAgICAgICAgICAgIHRoaXMueSA9IHkqMTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvQXJyYXkoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzLnggLCB0aGlzLnldICBcbiAgICB9XG59O1xuXG4iLCIvKipcbiAqIENhbnZheFxuICpcbiAqIEBhdXRob3Ig6YeK5YmRICjmnY7mtpssIGxpdGFvLmx0QGFsaWJhYmEtaW5jLmNvbSlcbiAqXG4gKiBjYW52YXMg5LiK5aeU5omY55qE5LqL5Lu2566h55CGXG4gKi9cbmltcG9ydCBfIGZyb20gXCIuLi91dGlscy91bmRlcnNjb3JlXCI7XG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4uL3V0aWxzL2luZGV4XCI7XG5cbnZhciBDYW52YXhFdmVudCA9IGZ1bmN0aW9uKCBldnQgLCBwYXJhbXMgKSB7XG5cdFxuXHR2YXIgZXZlbnRUeXBlID0gXCJDYW52YXhFdmVudFwiOyBcbiAgICBpZiggXy5pc1N0cmluZyggZXZ0ICkgKXtcbiAgICBcdGV2ZW50VHlwZSA9IGV2dDtcbiAgICB9O1xuICAgIGlmKCBfLmlzT2JqZWN0KCBldnQgKSAmJiBldnQudHlwZSApe1xuICAgIFx0ZXZlbnRUeXBlID0gZXZ0LnR5cGU7XG4gICAgfTtcblxuICAgIHRoaXMudGFyZ2V0ID0gbnVsbDtcbiAgICB0aGlzLmN1cnJlbnRUYXJnZXQgPSBudWxsO1x0XG4gICAgdGhpcy50eXBlICAgPSBldmVudFR5cGU7XG4gICAgdGhpcy5wb2ludCAgPSBudWxsO1xuXG4gICAgdGhpcy5fc3RvcFByb3BhZ2F0aW9uID0gZmFsc2UgOyAvL+m7mOiupOS4jemYu+atouS6i+S7tuWGkuazoVxufVxuQ2FudmF4RXZlbnQucHJvdG90eXBlID0ge1xuICAgIHN0b3BQcm9wYWdhdGlvbiA6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9zdG9wUHJvcGFnYXRpb24gPSB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IENhbnZheEV2ZW50OyIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICAvL+iuvuWkh+WIhui+qOeOh1xuICAgIFJFU09MVVRJT046IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDEsXG5cblxuICAgIC8qKlxuICAgICAqIFRhcmdldCBmcmFtZXMgcGVyIG1pbGxpc2Vjb25kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJvZiBQSVhJLnNldHRpbmdzXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwLjA2XG4gICAgICovXG4gICAgVEFSR0VUX0ZQTVM6IDAuMDYsXG5cbiAgICAvKipcbiAgICAgKiBJZiBzZXQgdG8gdHJ1ZSBXZWJHTCB3aWxsIGF0dGVtcHQgbWFrZSB0ZXh0dXJlcyBtaW1wYXBlZCBieSBkZWZhdWx0LlxuICAgICAqIE1pcG1hcHBpbmcgd2lsbCBvbmx5IHN1Y2NlZWQgaWYgdGhlIGJhc2UgdGV4dHVyZSB1cGxvYWRlZCBoYXMgcG93ZXIgb2YgdHdvIGRpbWVuc2lvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgTUlQTUFQX1RFWFRVUkVTOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBmaWx0ZXIgcmVzb2x1dGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5zZXR0aW5nc1xuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuICAgIEZJTFRFUl9SRVNPTFVUSU9OOiAxLFxuXG5cbiAgICAvLyBUT0RPOiBtYXliZSBjaGFuZ2UgdG8gU1BSSVRFLkJBVENIX1NJWkU6IDIwMDBcbiAgICAvLyBUT0RPOiBtYXliZSBhZGQgUEFSVElDTEUuQkFUQ0hfU0laRTogMTUwMDBcblxuICAgIC8qKlxuICAgICAqIFRoZSBkZWZhdWx0IHNwcml0ZSBiYXRjaCBzaXplLlxuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHQgYWltcyB0byBiYWxhbmNlIGRlc2t0b3AgYW5kIG1vYmlsZSBkZXZpY2VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJvZiBQSVhJLnNldHRpbmdzXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCA0MDk2XG4gICAgICovXG4gICAgU1BSSVRFX0JBVENIX1NJWkU6IDQwOTYsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgcHJlZml4IHRoYXQgZGVub3RlcyBhIFVSTCBpcyBmb3IgYSByZXRpbmEgYXNzZXQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAgICAgKiBAdHlwZSB7UmVnRXhwfHN0cmluZ31cbiAgICAgKiBAZXhhbXBsZSBgQDJ4YFxuICAgICAqIEBkZWZhdWx0IC9AKC4rKXgvXG4gICAgICovXG4gICAgUkVUSU5BX1BSRUZJWDogL0AoLispeC8sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGVmYXVsdCByZW5kZXIgb3B0aW9ucyBpZiBub25lIGFyZSBzdXBwbGllZCB0byB7QGxpbmsgUElYSS5XZWJHTFJlbmRlcmVyfVxuICAgICAqIG9yIHtAbGluayBQSVhJLkNhbnZhc1JlbmRlcmVyfS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5zZXR0aW5nc1xuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQHByb3BlcnR5IHtIVE1MQ2FudmFzRWxlbWVudH0gdmlldz1udWxsXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHJlc29sdXRpb249MVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gYW50aWFsaWFzPWZhbHNlXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBmb3JjZUZYQUE9ZmFsc2VcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IGF1dG9SZXNpemU9ZmFsc2VcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IHRyYW5zcGFyZW50PWZhbHNlXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGJhY2tncm91bmRDb2xvcj0weDAwMDAwMFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gY2xlYXJCZWZvcmVSZW5kZXI9dHJ1ZVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gcHJlc2VydmVEcmF3aW5nQnVmZmVyPWZhbHNlXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSByb3VuZFBpeGVscz1mYWxzZVxuICAgICAqL1xuICAgIFJFTkRFUl9PUFRJT05TOiB7XG4gICAgICAgIHZpZXc6IG51bGwsXG4gICAgICAgIGFudGlhbGlhczogdHJ1ZSxcbiAgICAgICAgZm9yY2VGWEFBOiBmYWxzZSxcbiAgICAgICAgYXV0b1Jlc2l6ZTogZmFsc2UsXG4gICAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IDB4MDAwMDAwLFxuICAgICAgICBjbGVhckJlZm9yZVJlbmRlcjogdHJ1ZSxcbiAgICAgICAgcHJlc2VydmVEcmF3aW5nQnVmZmVyOiBmYWxzZSxcbiAgICAgICAgcm91bmRQaXhlbHM6IGZhbHNlLFxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IHRyYW5zZm9ybSB0eXBlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJvZiBQSVhJLnNldHRpbmdzXG4gICAgICogQHR5cGUge1BJWEkuVFJBTlNGT1JNX01PREV9XG4gICAgICogQGRlZmF1bHQgUElYSS5UUkFOU0ZPUk1fTU9ERS5TVEFUSUNcbiAgICAgKi9cbiAgICBUUkFOU0ZPUk1fTU9ERTogMCxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgR2FyYmFnZSBDb2xsZWN0aW9uIG1vZGUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAgICAgKiBAdHlwZSB7UElYSS5HQ19NT0RFU31cbiAgICAgKiBAZGVmYXVsdCBQSVhJLkdDX01PREVTLkFVVE9cbiAgICAgKi9cbiAgICBHQ19NT0RFOiAwLFxuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBHYXJiYWdlIENvbGxlY3Rpb24gbWF4IGlkbGUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDM2MDBcbiAgICAgKi9cbiAgICBHQ19NQVhfSURMRTogNjAgKiA2MCxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgR2FyYmFnZSBDb2xsZWN0aW9uIG1heGltdW0gY2hlY2sgY291bnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDYwMFxuICAgICAqL1xuICAgIEdDX01BWF9DSEVDS19DT1VOVDogNjAgKiAxMCxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgd3JhcCBtb2RlcyB0aGF0IGFyZSBzdXBwb3J0ZWQgYnkgcGl4aS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5zZXR0aW5nc1xuICAgICAqIEB0eXBlIHtQSVhJLldSQVBfTU9ERVN9XG4gICAgICogQGRlZmF1bHQgUElYSS5XUkFQX01PREVTLkNMQU1QXG4gICAgICovXG4gICAgV1JBUF9NT0RFOiAwLFxuXG4gICAgLyoqXG4gICAgICogVGhlIHNjYWxlIG1vZGVzIHRoYXQgYXJlIHN1cHBvcnRlZCBieSBwaXhpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJvZiBQSVhJLnNldHRpbmdzXG4gICAgICogQHR5cGUge1BJWEkuU0NBTEVfTU9ERVN9XG4gICAgICogQGRlZmF1bHQgUElYSS5TQ0FMRV9NT0RFUy5MSU5FQVJcbiAgICAgKi9cbiAgICBTQ0FMRV9NT0RFOiAwLFxuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBzcGVjaWZ5IGZsb2F0IHByZWNpc2lvbiBpbiBzaGFkZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJvZiBQSVhJLnNldHRpbmdzXG4gICAgICogQHR5cGUge1BJWEkuUFJFQ0lTSU9OfVxuICAgICAqIEBkZWZhdWx0IFBJWEkuUFJFQ0lTSU9OLk1FRElVTVxuICAgICAqL1xuICAgIFBSRUNJU0lPTjogJ21lZGl1bXAnLFxuXG59O1xuIiwiaW1wb3J0IF8gZnJvbSBcIi4vdW5kZXJzY29yZVwiO1xuaW1wb3J0IHNldHRpbmdzIGZyb20gXCIuLi9zZXR0aW5nc1wiXG5cbnZhciBhZGRPclJtb3ZlRXZlbnRIYW5kID0gZnVuY3Rpb24oIGRvbUhhbmQgLCBpZUhhbmQgKXtcbiAgICBpZiggZG9jdW1lbnRbIGRvbUhhbmQgXSApe1xuICAgICAgICBmdW5jdGlvbiBldmVudERvbUZuKCBlbCAsIHR5cGUgLCBmbiApe1xuICAgICAgICAgICAgaWYoIGVsLmxlbmd0aCApe1xuICAgICAgICAgICAgICAgIGZvcih2YXIgaT0wIDsgaSA8IGVsLmxlbmd0aCA7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50RG9tRm4oIGVsW2ldICwgdHlwZSAsIGZuICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbFsgZG9tSGFuZCBdKCB0eXBlICwgZm4gLCBmYWxzZSApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZXZlbnREb21GblxuICAgIH0gZWxzZSB7XG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50Rm4oIGVsICwgdHlwZSAsIGZuICl7XG4gICAgICAgICAgICBpZiggZWwubGVuZ3RoICl7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBpPTAgOyBpIDwgZWwubGVuZ3RoIDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRGbiggZWxbaV0sdHlwZSxmbiApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZWxbIGllSGFuZCBdKCBcIm9uXCIrdHlwZSAsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmbi5jYWxsKCBlbCAsIHdpbmRvdy5ldmVudCApO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZXZlbnRGblxuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICAvLyBkb23mk43kvZznm7jlhbPku6PnoIFcbiAgICBxdWVyeSA6IGZ1bmN0aW9uKGVsKXtcbiAgICAgICAgaWYoXy5pc1N0cmluZyhlbCkpe1xuICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWwpXG4gICAgICAgIH1cbiAgICAgICAgaWYoZWwubm9kZVR5cGUgPT0gMSl7XG4gICAgICAgICAgIC8v5YiZ5Li65LiA5LiqZWxlbWVudOacrOi6q1xuICAgICAgICAgICByZXR1cm4gZWxcbiAgICAgICAgfVxuICAgICAgICBpZihlbC5sZW5ndGgpe1xuICAgICAgICAgICByZXR1cm4gZWxbMF1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIG9mZnNldCA6IGZ1bmN0aW9uKGVsKXtcbiAgICAgICAgdmFyIGJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBcbiAgICAgICAgZG9jID0gZWwub3duZXJEb2N1bWVudCwgXG4gICAgICAgIGJvZHkgPSBkb2MuYm9keSwgXG4gICAgICAgIGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50LCBcblxuICAgICAgICAvLyBmb3IgaWUgIFxuICAgICAgICBjbGllbnRUb3AgPSBkb2NFbGVtLmNsaWVudFRvcCB8fCBib2R5LmNsaWVudFRvcCB8fCAwLCBcbiAgICAgICAgY2xpZW50TGVmdCA9IGRvY0VsZW0uY2xpZW50TGVmdCB8fCBib2R5LmNsaWVudExlZnQgfHwgMCwgXG5cbiAgICAgICAgLy8gSW4gSW50ZXJuZXQgRXhwbG9yZXIgNyBnZXRCb3VuZGluZ0NsaWVudFJlY3QgcHJvcGVydHkgaXMgdHJlYXRlZCBhcyBwaHlzaWNhbCwgXG4gICAgICAgIC8vIHdoaWxlIG90aGVycyBhcmUgbG9naWNhbC4gTWFrZSBhbGwgbG9naWNhbCwgbGlrZSBpbiBJRTguIFxuICAgICAgICB6b29tID0gMTsgXG4gICAgICAgIGlmIChib2R5LmdldEJvdW5kaW5nQ2xpZW50UmVjdCkgeyBcbiAgICAgICAgICAgIHZhciBib3VuZCA9IGJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IFxuICAgICAgICAgICAgem9vbSA9IChib3VuZC5yaWdodCAtIGJvdW5kLmxlZnQpL2JvZHkuY2xpZW50V2lkdGg7IFxuICAgICAgICB9IFxuICAgICAgICBpZiAoem9vbSA+IDEpeyBcbiAgICAgICAgICAgIGNsaWVudFRvcCA9IDA7IFxuICAgICAgICAgICAgY2xpZW50TGVmdCA9IDA7IFxuICAgICAgICB9IFxuICAgICAgICB2YXIgdG9wID0gYm94LnRvcC96b29tICsgKHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2NFbGVtICYmIGRvY0VsZW0uc2Nyb2xsVG9wL3pvb20gfHwgYm9keS5zY3JvbGxUb3Avem9vbSkgLSBjbGllbnRUb3AsIFxuICAgICAgICAgICAgbGVmdCA9IGJveC5sZWZ0L3pvb20gKyAod2luZG93LnBhZ2VYT2Zmc2V0fHwgZG9jRWxlbSAmJiBkb2NFbGVtLnNjcm9sbExlZnQvem9vbSB8fCBib2R5LnNjcm9sbExlZnQvem9vbSkgLSBjbGllbnRMZWZ0OyBcblxuICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgIHRvcDogdG9wLCBcbiAgICAgICAgICAgIGxlZnQ6IGxlZnQgXG4gICAgICAgIH07IFxuICAgIH0sXG4gICAgYWRkRXZlbnQgOiBhZGRPclJtb3ZlRXZlbnRIYW5kKCBcImFkZEV2ZW50TGlzdGVuZXJcIiAsIFwiYXR0YWNoRXZlbnRcIiApLFxuICAgIHJlbW92ZUV2ZW50IDogYWRkT3JSbW92ZUV2ZW50SGFuZCggXCJyZW1vdmVFdmVudExpc3RlbmVyXCIgLCBcImRldGFjaEV2ZW50XCIgKSxcbiAgICBwYWdlWDogZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoZS5wYWdlWCkgcmV0dXJuIGUucGFnZVg7XG4gICAgICAgIGVsc2UgaWYgKGUuY2xpZW50WClcbiAgICAgICAgICAgIHJldHVybiBlLmNsaWVudFggKyAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgP1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCA6IGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCk7XG4gICAgICAgIGVsc2UgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBwYWdlWTogZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoZS5wYWdlWSkgcmV0dXJuIGUucGFnZVk7XG4gICAgICAgIGVsc2UgaWYgKGUuY2xpZW50WSlcbiAgICAgICAgICAgIHJldHVybiBlLmNsaWVudFkgKyAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA/XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgOiBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCk7XG4gICAgICAgIGVsc2UgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDliJvlu7pkb21cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgZG9tIGlkIOW+heeUqFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIDogZG9tIHR5cGXvvIwgc3VjaCBhcyBjYW52YXMsIGRpdiBldGMuXG4gICAgICovXG4gICAgY3JlYXRlQ2FudmFzIDogZnVuY3Rpb24oIF93aWR0aCAsIF9oZWlnaHQgLCBpZCkge1xuICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgY2FudmFzLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgY2FudmFzLnN0eWxlLndpZHRoICA9IF93aWR0aCArICdweCc7XG4gICAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBfaGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgY2FudmFzLnN0eWxlLmxlZnQgICA9IDA7XG4gICAgICAgIGNhbnZhcy5zdHlsZS50b3AgICAgPSAwO1xuICAgICAgICBjYW52YXMuc2V0QXR0cmlidXRlKCd3aWR0aCcsIF93aWR0aCAqIHNldHRpbmdzLlJFU09MVVRJT04pO1xuICAgICAgICBjYW52YXMuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBfaGVpZ2h0ICogc2V0dGluZ3MuUkVTT0xVVElPTik7XG4gICAgICAgIGNhbnZhcy5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpO1xuICAgICAgICByZXR1cm4gY2FudmFzO1xuICAgIH0sXG4gICAgY3JlYXRlVmlldzogZnVuY3Rpb24oX3dpZHRoICwgX2hlaWdodCwgaWQpe1xuICAgICAgICB2YXIgdmlldyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHZpZXcuY2xhc3NOYW1lID0gXCJjYW52YXgtdmlld1wiO1xuICAgICAgICB2aWV3LnN0eWxlLmNzc1RleHQgKz0gXCJwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDpcIiArIF93aWR0aCArIFwicHg7aGVpZ2h0OlwiICsgX2hlaWdodCArXCJweDtcIlxuXG4gICAgICAgIHZhciBzdGFnZV9jID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdmlldy5zdHlsZS5jc3NUZXh0ICs9IFwicG9zaXRpb246YWJzb2x1dGU7d2lkdGg6XCIgKyBfd2lkdGggKyBcInB4O2hlaWdodDpcIiArIF9oZWlnaHQgK1wicHg7XCJcblxuICAgICAgICAvL+eUqOadpeWtmOaUvuS4gOS6m2RvbeWFg+e0oFxuICAgICAgICB2YXIgZG9tX2MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB2aWV3LnN0eWxlLmNzc1RleHQgKz0gXCJwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDpcIiArIF93aWR0aCArIFwicHg7aGVpZ2h0OlwiICsgX2hlaWdodCArXCJweDtcIlxuXG4gICAgICAgIHZpZXcuYXBwZW5kQ2hpbGQoc3RhZ2VfYyk7XG4gICAgICAgIHZpZXcuYXBwZW5kQ2hpbGQoZG9tX2MpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZpZXcgOiB2aWV3LFxuICAgICAgICAgICAgc3RhZ2VfYzogc3RhZ2VfYyxcbiAgICAgICAgICAgIGRvbV9jOiBkb21fY1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vZG9t55u45YWz5Luj56CB57uT5p2fXG59OyIsIi8qKlxuICogQ2FudmF4XG4gKlxuICogQGF1dGhvciDph4rliZEgKOadjua2mywgbGl0YW8ubHRAYWxpYmFiYS1pbmMuY29tKVxuICpcbiAqL1xuaW1wb3J0IFBvaW50IGZyb20gXCIuLi9kaXNwbGF5L1BvaW50XCI7XG5pbXBvcnQgQ2FudmF4RXZlbnQgZnJvbSBcIi4vQ2FudmF4RXZlbnRcIjtcbmltcG9ydCBfIGZyb20gXCIuLi91dGlscy91bmRlcnNjb3JlXCI7XG5pbXBvcnQgJCBmcm9tIFwiLi4vdXRpbHMvZG9tXCI7XG5cbnZhciBfbW91c2VFdmVudFR5cGVzID0gW1wiY2xpY2tcIixcImRibGNsaWNrXCIsXCJtb3VzZWRvd25cIixcIm1vdXNlbW92ZVwiLFwibW91c2V1cFwiLFwibW91c2VvdXRcIl07XG52YXIgX2hhbW1lckV2ZW50VHlwZXMgPSBbIFxuICAgIFwicGFuXCIsXCJwYW5zdGFydFwiLFwicGFubW92ZVwiLFwicGFuZW5kXCIsXCJwYW5jYW5jZWxcIixcInBhbmxlZnRcIixcInBhbnJpZ2h0XCIsXCJwYW51cFwiLFwicGFuZG93blwiLFxuICAgIFwicHJlc3NcIiAsIFwicHJlc3N1cFwiLFxuICAgIFwic3dpcGVcIiAsIFwic3dpcGVsZWZ0XCIgLCBcInN3aXBlcmlnaHRcIiAsIFwic3dpcGV1cFwiICwgXCJzd2lwZWRvd25cIixcbiAgICBcInRhcFwiXG5dO1xuXG52YXIgRXZlbnRIYW5kbGVyID0gZnVuY3Rpb24oY2FudmF4ICwgb3B0KSB7XG4gICAgdGhpcy5jYW52YXggPSBjYW52YXg7XG5cbiAgICB0aGlzLmN1clBvaW50cyA9IFtuZXcgUG9pbnQoMCwgMCldIC8vWCxZIOeahCBwb2ludCDpm4blkIgsIOWcqHRvdWNo5LiL6Z2i5YiZ5Li6IHRvdWNo55qE6ZuG5ZCI77yM5Y+q5piv6L+Z5LiqdG91Y2jooqvmt7vliqDkuoblr7nlupTnmoR477yMeVxuICAgIC8v5b2T5YmN5r+A5rS755qE54K55a+55bqU55qEb2Jq77yM5ZyodG91Y2jkuIvlj6/ku6XmmK/kuKrmlbDnu4Qs5ZKM5LiK6Z2i55qEIGN1clBvaW50cyDlr7nlupRcbiAgICB0aGlzLmN1clBvaW50c1RhcmdldCA9IFtdO1xuXG4gICAgdGhpcy5fdG91Y2hpbmcgPSBmYWxzZTtcbiAgICAvL+ato+WcqOaLluWKqO+8jOWJjeaPkOaYr190b3VjaGluZz10cnVlXG4gICAgdGhpcy5fZHJhZ2luZyA9IGZhbHNlO1xuXG4gICAgLy/lvZPliY3nmoTpvKDmoIfnirbmgIFcbiAgICB0aGlzLl9jdXJzb3IgPSBcImRlZmF1bHRcIjtcblxuICAgIHRoaXMudGFyZ2V0ID0gdGhpcy5jYW52YXgudmlldztcbiAgICB0aGlzLnR5cGVzID0gW107XG5cbiAgICAvL21vdXNl5L2T57uf5Lit5LiN6ZyA6KaB6YWN572uZHJhZyx0b3VjaOS4reS8mueUqOWIsOesrOS4ieaWueeahHRvdWNo5bqT77yM5q+P5Liq5bqT55qE5LqL5Lu25ZCN56ew5Y+v6IO95LiN5LiA5qC377yMXG4gICAgLy/lsLHopoHov5nph4zphY3nva7vvIzpu5jorqTlrp7njrDnmoTmmK9oYW1tZXJqc+eahCzmiYDku6Xpu5jorqTlj6/ku6XlnKjpobnnm67ph4zlvJXlhaVoYW1tZXJqcyBodHRwOi8vaGFtbWVyanMuZ2l0aHViLmlvL1xuICAgIHRoaXMuZHJhZyA9IHtcbiAgICAgICAgc3RhcnQgOiBcInBhbnN0YXJ0XCIsXG4gICAgICAgIG1vdmUgOiBcInBhbm1vdmVcIixcbiAgICAgICAgZW5kIDogXCJwYW5lbmRcIlxuICAgIH07XG5cbiAgICBfLmV4dGVuZCggdHJ1ZSAsIHRoaXMgLCBvcHQgKTtcblxufTtcblxuLy/ov5nmoLfnmoTlpb3lpITmmK9kb2N1bWVudC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbuWPquS8muWcqOWumuS5ieeahOaXtuWAmeaJp+ihjOS4gOasoeOAglxudmFyIGNvbnRhaW5zID0gZG9jdW1lbnQuY29tcGFyZURvY3VtZW50UG9zaXRpb24gPyBmdW5jdGlvbiAocGFyZW50LCBjaGlsZCkge1xuICAgIGlmKCAhY2hpbGQgKXtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gISEocGFyZW50LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGNoaWxkKSAmIDE2KTtcbn0gOiBmdW5jdGlvbiAocGFyZW50LCBjaGlsZCkge1xuICAgIGlmKCAhY2hpbGQgKXtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gY2hpbGQgIT09IGNoaWxkICYmIChwYXJlbnQuY29udGFpbnMgPyBwYXJlbnQuY29udGFpbnMoY2hpbGQpIDogdHJ1ZSk7XG59O1xuXG5FdmVudEhhbmRsZXIucHJvdG90eXBlID0ge1xuICAgIGluaXQgOiBmdW5jdGlvbigpe1xuICAgICAgICBcbiAgICAgICAgLy/kvp3mrKHmt7vliqDkuIrmtY/op4jlmajnmoToh6rluKbkuovku7bkvqblkKxcbiAgICAgICAgdmFyIG1lICAgPSB0aGlzO1xuICAgICAgICBpZiggbWUudGFyZ2V0Lm5vZGVUeXBlID09IHVuZGVmaW5lZCApe1xuICAgICAgICAgICAgLy/lpoLmnpx0YXJnZXQubm9kZVR5cGXmsqHmnInnmoTor53vvIwg6K+05piO6K+ldGFyZ2V05Li65LiA5LiqalF1ZXJ55a+56LGhIG9yIGtpc3N5IOWvueixoW9yIGhhbW1lcuWvueixoVxuICAgICAgICAgICAgLy/ljbPkuLrnrKzkuInmlrnlupPvvIzpgqPkuYjlsLHopoHlr7nmjqXnrKzkuInmlrnlupPnmoTkuovku7bns7vnu5/jgILpu5jorqTlrp7njrBoYW1tZXLnmoTlpKfpg6jliIbkuovku7bns7vnu59cbiAgICAgICAgICAgIGlmKCAhbWUudHlwZXMgfHwgbWUudHlwZXMubGVuZ3RoID09IDAgICl7XG4gICAgICAgICAgICAgICAgbWUudHlwZXMgPSBfaGFtbWVyRXZlbnRUeXBlcztcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiggbWUudGFyZ2V0Lm5vZGVUeXBlID09IDEgKXtcbiAgICAgICAgICAgIG1lLnR5cGVzID0gX21vdXNlRXZlbnRUeXBlcztcbiAgICAgICAgfTtcblxuICAgICAgICBfLmVhY2goIG1lLnR5cGVzICwgZnVuY3Rpb24oIHR5cGUgKXtcbiAgICAgICAgICAgIC8v5LiN5YaN5YWz5b+D5rWP6KeI5Zmo546v5aKD5piv5ZCmICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyBcbiAgICAgICAgICAgIC8v6ICM5piv55u05o6l5Y+q566h5Lyg57uZ5LqL5Lu25qih5Z2X55qE5piv5LiA5Liq5Y6f55SfZG9t6L+Y5pivIGpx5a+56LGhIG9yIGhhbW1lcuWvueixoeetiVxuICAgICAgICAgICAgaWYoIG1lLnRhcmdldC5ub2RlVHlwZSA9PSAxICl7XG4gICAgICAgICAgICAgICAgJC5hZGRFdmVudCggbWUudGFyZ2V0ICwgdHlwZSAsIGZ1bmN0aW9uKCBlICl7XG4gICAgICAgICAgICAgICAgICAgIG1lLl9fbW91c2VIYW5kbGVyKCBlICk7XG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZS50YXJnZXQub24oIHR5cGUgLCBmdW5jdGlvbiggZSApe1xuICAgICAgICAgICAgICAgICAgICBtZS5fX2xpYkhhbmRsZXIoIGUgKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gKTtcbiAgICB9LFxuICAgIC8qXG4gICAgKiDljp/nlJ/kuovku7bns7vnu58tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1iZWdpblxuICAgICog6byg5qCH5LqL5Lu25aSE55CG5Ye95pWwXG4gICAgKiovXG4gICAgX19tb3VzZUhhbmRsZXIgOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICAgIHZhciByb290ID0gbWUuY2FudmF4O1xuXG4gICAgICAgIHJvb3QudXBkYXRlVmlld09mZnNldCgpO1xuICAgIFxuICAgICAgICBtZS5jdXJQb2ludHMgPSBbIG5ldyBQb2ludCggXG4gICAgICAgICAgICAkLnBhZ2VYKCBlICkgLSByb290LnZpZXdPZmZzZXQubGVmdCAsIFxuICAgICAgICAgICAgJC5wYWdlWSggZSApIC0gcm9vdC52aWV3T2Zmc2V0LnRvcFxuICAgICAgICApXTtcblxuICAgICAgICAvL+eQhuiuuuS4iuadpeivtO+8jOi/memHjOaLv+WIsHBvaW505LqG5ZCO77yM5bCx6KaB6K6h566X6L+Z5LiqcG9pbnTlr7nlupTnmoR0YXJnZXTmnaVwdXNo5YiwY3VyUG9pbnRzVGFyZ2V06YeM77yMXG4gICAgICAgIC8v5L2G5piv5Zug5Li65ZyoZHJhZ+eahOaXtuWAmeWFtuWunuaYr+WPr+S7peS4jeeUqOiuoeeul+WvueW6lHRhcmdldOeahOOAglxuICAgICAgICAvL+aJgOS7peaUvuWcqOS6huS4i+mdoueahG1lLl9fZ2V0Y3VyUG9pbnRzVGFyZ2V0KCBlICwgY3VyTW91c2VQb2ludCApO+W4uOinhG1vdXNlbW92ZeS4reaJp+ihjFxuXG4gICAgICAgIHZhciBjdXJNb3VzZVBvaW50ICA9IG1lLmN1clBvaW50c1swXTsgXG4gICAgICAgIHZhciBjdXJNb3VzZVRhcmdldCA9IG1lLmN1clBvaW50c1RhcmdldFswXTtcblxuICAgICAgICAvL+aooeaLn2RyYWcsbW91c2VvdmVyLG1vdXNlb3V0IOmDqOWIhuS7o+eggSBiZWdpbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgICAgICAvL21vdXNlZG93bueahOaXtuWAmSDlpoLmnpwgY3VyTW91c2VUYXJnZXQuZHJhZ0VuYWJsZWQg5Li6dHJ1ZeOAguWwseimgeW8gOWni+WHhuWkh2RyYWfkuoZcbiAgICAgICAgaWYoIGUudHlwZSA9PSBcIm1vdXNlZG93blwiICl7XG4gICAgICAgICAgIC8v5aaC5p6cY3VyVGFyZ2V0IOeahOaVsOe7hOS4uuepuuaIluiAheesrOS4gOS4quS4umZhbHNlIO+8jO+8jO+8jFxuICAgICAgICAgICBpZiggIWN1ck1vdXNlVGFyZ2V0ICl7XG4gICAgICAgICAgICAgdmFyIG9iaiA9IHJvb3QuZ2V0T2JqZWN0c1VuZGVyUG9pbnQoIGN1ck1vdXNlUG9pbnQgLCAxKVswXTtcbiAgICAgICAgICAgICBpZihvYmope1xuICAgICAgICAgICAgICAgbWUuY3VyUG9pbnRzVGFyZ2V0ID0gWyBvYmogXTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgIH07XG4gICAgICAgICAgIGN1ck1vdXNlVGFyZ2V0ID0gbWUuY3VyUG9pbnRzVGFyZ2V0WzBdO1xuICAgICAgICAgICBpZiAoIGN1ck1vdXNlVGFyZ2V0ICYmIGN1ck1vdXNlVGFyZ2V0LmRyYWdFbmFibGVkICl7XG4gICAgICAgICAgICAgICAvL+m8oOagh+S6i+S7tuW3sue7j+aRuOWIsOS6huS4gOS4qlxuICAgICAgICAgICAgICAgbWUuX3RvdWNoaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiggZS50eXBlID09IFwibW91c2V1cFwiIHx8IChlLnR5cGUgPT0gXCJtb3VzZW91dFwiICYmICFjb250YWlucyhyb290LnZpZXcgLCAoZS50b0VsZW1lbnQgfHwgZS5yZWxhdGVkVGFyZ2V0KSApKSApe1xuICAgICAgICAgICAgaWYobWUuX2RyYWdpbmcgPT0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgLy/or7TmmI7liJrliJrlnKjmi5bliqhcbiAgICAgICAgICAgICAgICBtZS5fZHJhZ0VuZCggZSAsIGN1ck1vdXNlVGFyZ2V0ICwgMCApO1xuICAgICAgICAgICAgICAgIGN1ck1vdXNlVGFyZ2V0LmZpcmUoXCJkcmFnZW5kXCIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG1lLl9kcmFnaW5nICA9IGZhbHNlO1xuICAgICAgICAgICAgbWUuX3RvdWNoaW5nID0gZmFsc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYoIGUudHlwZSA9PSBcIm1vdXNlb3V0XCIgKXtcbiAgICAgICAgICAgIGlmKCAhY29udGFpbnMocm9vdC52aWV3ICwgKGUudG9FbGVtZW50IHx8IGUucmVsYXRlZFRhcmdldCkgKSApe1xuICAgICAgICAgICAgICAgIG1lLl9fZ2V0Y3VyUG9pbnRzVGFyZ2V0KGUgLCBjdXJNb3VzZVBvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmKCBlLnR5cGUgPT0gXCJtb3VzZW1vdmVcIiApeyAgLy98fCBlLnR5cGUgPT0gXCJtb3VzZWRvd25cIiApe1xuICAgICAgICAgICAgLy/mi5bliqjov4fnqIvkuK3lsLHkuI3lnKjlgZrlhbbku5bnmoRtb3VzZW92ZXLmo4DmtYvvvIxkcmFn5LyY5YWIXG4gICAgICAgICAgICBpZihtZS5fdG91Y2hpbmcgJiYgZS50eXBlID09IFwibW91c2Vtb3ZlXCIgJiYgY3VyTW91c2VUYXJnZXQpe1xuICAgICAgICAgICAgICAgIC8v6K+05piO5q2j5Zyo5ouW5Yqo5ZWKXG4gICAgICAgICAgICAgICAgaWYoIW1lLl9kcmFnaW5nKXtcbiAgICAgICAgICAgICAgICAgICAgLy9iZWdpbiBkcmFnXG4gICAgICAgICAgICAgICAgICAgIGN1ck1vdXNlVGFyZ2V0LmZpcmUoXCJkcmFnc3RhcnRcIik7XG4gICAgICAgICAgICAgICAgICAgIC8v5YWI5oqK5pys5bCK57uZ6ZqQ6JeP5LqGXG4gICAgICAgICAgICAgICAgICAgIGN1ck1vdXNlVGFyZ2V0LmNvbnRleHQuZ2xvYmFsQWxwaGEgPSAwO1xuICAgICAgICAgICAgICAgICAgICAvL+eEtuWQjuWFi+mahuS4gOS4quWJr+acrOWIsGFjdGl2ZVN0YWdlXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2xvbmVPYmplY3QgPSBtZS5fY2xvbmUyaG92ZXJTdGFnZSggY3VyTW91c2VUYXJnZXQgLCAwICk7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lT2JqZWN0LmNvbnRleHQuZ2xvYmFsQWxwaGEgPSBjdXJNb3VzZVRhcmdldC5fZ2xvYmFsQWxwaGE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9kcmFnIG1vdmUgaW5nXG4gICAgICAgICAgICAgICAgICAgIG1lLl9kcmFnTW92ZUhhbmRlciggZSAsIGN1ck1vdXNlVGFyZ2V0ICwgMCApO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbWUuX2RyYWdpbmcgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvL+W4uOinhG1vdXNlbW92ZeajgOa1i1xuICAgICAgICAgICAgICAgIC8vbW92ZeS6i+S7tuS4re+8jOmcgOimgeS4jeWBnOeahOaQnOe0onRhcmdldO+8jOi/meS4quW8gOmUgOaMuuWkp++8jFxuICAgICAgICAgICAgICAgIC8v5ZCO57ut5Y+v5Lul5LyY5YyW77yM5Yqg5LiK5ZKM5bin546H55u45b2T55qE5bu26L+f5aSE55CGXG4gICAgICAgICAgICAgICAgbWUuX19nZXRjdXJQb2ludHNUYXJnZXQoIGUgLCBjdXJNb3VzZVBvaW50ICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8v5YW25LuW55qE5LqL5Lu25bCx55u05o6l5ZyodGFyZ2V05LiK6Z2i5rS+5Y+R5LqL5Lu2XG4gICAgICAgICAgICB2YXIgY2hpbGQgPSBjdXJNb3VzZVRhcmdldDtcbiAgICAgICAgICAgIGlmKCAhY2hpbGQgKXtcbiAgICAgICAgICAgICAgICBjaGlsZCA9IHJvb3Q7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbWUuX19kaXNwYXRjaEV2ZW50SW5DaGlsZHMoIGUgLCBbIGNoaWxkIF0gKTtcbiAgICAgICAgICAgIG1lLl9jdXJzb3JIYW5kZXIoIGNoaWxkICk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYoIHJvb3QucHJldmVudERlZmF1bHQgKSB7XG4gICAgICAgICAgICAvL+mYu+atoum7mOiupOa1j+iniOWZqOWKqOS9nChXM0MpIFxuICAgICAgICAgICAgaWYgKCBlICYmIGUucHJldmVudERlZmF1bHQgKSB7XG4gICAgICAgICAgICAgICDCoGUucHJldmVudERlZmF1bHQoKTsgXG4gICAgICAgICAgICB9wqBlbHNlIHtcbiAgICAgICAgICAgIMKgwqDCoMKgd2luZG93LmV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07IFxuICAgIH0sXG4gICAgX19nZXRjdXJQb2ludHNUYXJnZXQgOiBmdW5jdGlvbihlICwgcG9pbnQgKSB7XG4gICAgICAgIHZhciBtZSAgICAgPSB0aGlzO1xuICAgICAgICB2YXIgcm9vdCAgID0gbWUuY2FudmF4O1xuICAgICAgICB2YXIgb2xkT2JqID0gbWUuY3VyUG9pbnRzVGFyZ2V0WzBdO1xuXG4gICAgICAgIGlmKCBvbGRPYmogJiYgIW9sZE9iai5jb250ZXh0ICl7XG4gICAgICAgICAgICBvbGRPYmogPSBudWxsO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBlID0gbmV3IENhbnZheEV2ZW50KCBlICk7XG5cbiAgICAgICAgaWYoIGUudHlwZT09XCJtb3VzZW1vdmVcIlxuICAgICAgICAgICAgJiYgb2xkT2JqICYmIG9sZE9iai5faG92ZXJDbGFzcyAmJiBvbGRPYmoucG9pbnRDaGtQcmlvcml0eVxuICAgICAgICAgICAgJiYgb2xkT2JqLmdldENoaWxkSW5Qb2ludCggcG9pbnQgKSApe1xuICAgICAgICAgICAgLy/lsI/kvJjljJYs6byg5qCHbW92ZeeahOaXtuWAmeOAguiuoeeul+mikeeOh+WkquWkp++8jOaJgOS7peOAguWBmuatpOS8mOWMllxuICAgICAgICAgICAgLy/lpoLmnpzmnIl0YXJnZXTlrZjlnKjvvIzogIzkuJTlvZPliY3lhYPntKDmraPlnKhob3ZlclN0YWdl5Lit77yM6ICM5LiU5b2T5YmN6byg5qCH6L+Y5ZyodGFyZ2V05YaFLOWwseayoeW/heimgeWPluajgOa1i+aVtOS4qmRpc3BsYXlMaXN05LqGXG4gICAgICAgICAgICAvL+W8gOWPkea0vuWPkeW4uOinhG1vdXNlbW92ZeS6i+S7tlxuICAgICAgICAgICAgZS50YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQgPSBvbGRPYmo7XG4gICAgICAgICAgICBlLnBvaW50ICA9IG9sZE9iai5nbG9iYWxUb0xvY2FsKCBwb2ludCApO1xuICAgICAgICAgICAgb2xkT2JqLmRpc3BhdGNoRXZlbnQoIGUgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG9iaiA9IHJvb3QuZ2V0T2JqZWN0c1VuZGVyUG9pbnQoIHBvaW50ICwgMSlbMF07XG5cbiAgICAgICAgaWYob2xkT2JqICYmIG9sZE9iaiAhPSBvYmogfHwgZS50eXBlPT1cIm1vdXNlb3V0XCIpIHtcbiAgICAgICAgICAgIGlmKCBvbGRPYmogJiYgb2xkT2JqLmNvbnRleHQgKXtcbiAgICAgICAgICAgICAgICBtZS5jdXJQb2ludHNUYXJnZXRbMF0gPSBudWxsO1xuICAgICAgICAgICAgICAgIGUudHlwZSAgICAgPSBcIm1vdXNlb3V0XCI7XG4gICAgICAgICAgICAgICAgZS50b1RhcmdldCA9IG9iajsgXG4gICAgICAgICAgICAgICAgZS50YXJnZXQgICA9IGUuY3VycmVudFRhcmdldCA9IG9sZE9iajtcbiAgICAgICAgICAgICAgICBlLnBvaW50ICAgID0gb2xkT2JqLmdsb2JhbFRvTG9jYWwoIHBvaW50ICk7XG4gICAgICAgICAgICAgICAgb2xkT2JqLmRpc3BhdGNoRXZlbnQoIGUgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiggb2JqICYmIG9sZE9iaiAhPSBvYmogKXsgLy8mJiBvYmouX2hvdmVyYWJsZSDlt7Lnu48g5bmy5o6J5LqGXG4gICAgICAgICAgICBtZS5jdXJQb2ludHNUYXJnZXRbMF0gPSBvYmo7XG4gICAgICAgICAgICBlLnR5cGUgICAgICAgPSBcIm1vdXNlb3ZlclwiO1xuICAgICAgICAgICAgZS5mcm9tVGFyZ2V0ID0gb2xkT2JqO1xuICAgICAgICAgICAgZS50YXJnZXQgICAgID0gZS5jdXJyZW50VGFyZ2V0ID0gb2JqO1xuICAgICAgICAgICAgZS5wb2ludCAgICAgID0gb2JqLmdsb2JhbFRvTG9jYWwoIHBvaW50ICk7XG4gICAgICAgICAgICBvYmouZGlzcGF0Y2hFdmVudCggZSApO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmKCBlLnR5cGUgPT0gXCJtb3VzZW1vdmVcIiAmJiBvYmogKXtcbiAgICAgICAgICAgIGUudGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0ID0gb2xkT2JqO1xuICAgICAgICAgICAgZS5wb2ludCAgPSBvbGRPYmouZ2xvYmFsVG9Mb2NhbCggcG9pbnQgKTtcbiAgICAgICAgICAgIG9sZE9iai5kaXNwYXRjaEV2ZW50KCBlICk7XG4gICAgICAgIH07XG4gICAgICAgIG1lLl9jdXJzb3JIYW5kZXIoIG9iaiAsIG9sZE9iaiApO1xuICAgIH0sXG4gICAgX2N1cnNvckhhbmRlciAgICA6IGZ1bmN0aW9uKCBvYmogLCBvbGRPYmogKXtcbiAgICAgICAgaWYoIW9iaiAmJiAhb2xkT2JqICl7XG4gICAgICAgICAgICB0aGlzLl9zZXRDdXJzb3IoXCJkZWZhdWx0XCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmKG9iaiAmJiBvbGRPYmogIT0gb2JqICYmIG9iai5jb250ZXh0KXtcbiAgICAgICAgICAgIHRoaXMuX3NldEN1cnNvcihvYmouY29udGV4dC5jdXJzb3IpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBfc2V0Q3Vyc29yIDogZnVuY3Rpb24oY3Vyc29yKSB7XG4gICAgICAgIGlmKHRoaXMuX2N1cnNvciA9PSBjdXJzb3Ipe1xuICAgICAgICAgIC8v5aaC5p6c5Lik5qyh6KaB6K6+572u55qE6byg5qCH54q25oCB5piv5LiA5qC355qEXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNhbnZheC52aWV3LnN0eWxlLmN1cnNvciA9IGN1cnNvcjtcbiAgICAgICAgdGhpcy5fY3Vyc29yID0gY3Vyc29yO1xuICAgIH0sXG4gICAgLypcbiAgICAqIOWOn+eUn+S6i+S7tuezu+e7ny0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLWVuZFxuICAgICovXG5cbiAgICAvKlxuICAgICAq56ys5LiJ5pa55bqT55qE5LqL5Lu257O757ufLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tYmVnaW5cbiAgICAgKuinpuWxj+S6i+S7tuWkhOeQhuWHveaVsFxuICAgICAqICovXG4gICAgX19saWJIYW5kbGVyIDogZnVuY3Rpb24oIGUgKSB7XG4gICAgICAgIHZhciBtZSAgID0gdGhpcztcbiAgICAgICAgdmFyIHJvb3QgPSBtZS5jYW52YXg7XG4gICAgICAgIHJvb3QudXBkYXRlVmlld09mZnNldCgpO1xuICAgICAgICAvLyB0b3VjaCDkuIvnmoQgY3VyUG9pbnRzVGFyZ2V0IOS7jnRvdWNoZXPkuK3mnaVcbiAgICAgICAgLy/ojrflj5ZjYW52YXjlnZDmoIfns7vnu5/ph4zpnaLnmoTlnZDmoIdcbiAgICAgICAgbWUuY3VyUG9pbnRzID0gbWUuX19nZXRDYW52YXhQb2ludEluVG91Y2hzKCBlICk7XG4gICAgICAgIGlmKCAhbWUuX2RyYWdpbmcgKXtcbiAgICAgICAgICAgIC8v5aaC5p6c5ZyoZHJhZ2luZ+eahOivne+8jHRhcmdldOW3sue7j+aYr+mAieS4reS6hueahO+8jOWPr+S7peS4jeeUqCDmo4DmtYvkuoZcbiAgICAgICAgICAgIG1lLmN1clBvaW50c1RhcmdldCA9IG1lLl9fZ2V0Q2hpbGRJblRvdWNocyggbWUuY3VyUG9pbnRzICk7XG4gICAgICAgIH07XG4gICAgICAgIGlmKCBtZS5jdXJQb2ludHNUYXJnZXQubGVuZ3RoID4gMCApe1xuICAgICAgICAgICAgLy9kcmFn5byA5aeLXG4gICAgICAgICAgICBpZiggZS50eXBlID09IG1lLmRyYWcuc3RhcnQpe1xuICAgICAgICAgICAgICAgIC8vZHJhZ3N0YXJ055qE5pe25YCZdG91Y2jlt7Lnu4/lh4blpIflpb3kuoZ0YXJnZXTvvIwgY3VyUG9pbnRzVGFyZ2V0IOmHjOmdouWPquimgeacieS4gOS4quaYr+acieaViOeahFxuICAgICAgICAgICAgICAgIC8v5bCx6K6k5Li6ZHJhZ3PlvIDlp4tcbiAgICAgICAgICAgICAgICBfLmVhY2goIG1lLmN1clBvaW50c1RhcmdldCAsIGZ1bmN0aW9uKCBjaGlsZCAsIGkgKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoIGNoaWxkICYmIGNoaWxkLmRyYWdFbmFibGVkICl7XG4gICAgICAgICAgICAgICAgICAgICAgIC8v5Y+q6KaB5pyJ5LiA5Liq5YWD57Sg5bCx6K6k5Li65q2j5Zyo5YeG5aSHZHJhZ+S6hlxuICAgICAgICAgICAgICAgICAgICAgICBtZS5fZHJhZ2luZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgIC8v54S25ZCO5YWL6ZqG5LiA5Liq5Ymv5pys5YiwYWN0aXZlU3RhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgbWUuX2Nsb25lMmhvdmVyU3RhZ2UoIGNoaWxkICwgaSApO1xuICAgICAgICAgICAgICAgICAgICAgICAvL+WFiOaKiuacrOWwiue7memakOiXj+S6hlxuICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5jb250ZXh0Lmdsb2JhbEFscGhhID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5maXJlKFwiZHJhZ3N0YXJ0XCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKSBcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vZHJhZ0luZ1xuICAgICAgICAgICAgaWYoIGUudHlwZSA9PSBtZS5kcmFnLm1vdmUpe1xuICAgICAgICAgICAgICAgIGlmKCBtZS5fZHJhZ2luZyApe1xuICAgICAgICAgICAgICAgICAgICBfLmVhY2goIG1lLmN1clBvaW50c1RhcmdldCAsIGZ1bmN0aW9uKCBjaGlsZCAsIGkgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBjaGlsZCAmJiBjaGlsZC5kcmFnRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuX2RyYWdNb3ZlSGFuZGVyKCBlICwgY2hpbGQgLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy9kcmFn57uT5p2fXG4gICAgICAgICAgICBpZiggZS50eXBlID09IG1lLmRyYWcuZW5kKXtcbiAgICAgICAgICAgICAgICBpZiggbWUuX2RyYWdpbmcgKXtcbiAgICAgICAgICAgICAgICAgICAgXy5lYWNoKCBtZS5jdXJQb2ludHNUYXJnZXQgLCBmdW5jdGlvbiggY2hpbGQgLCBpICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggY2hpbGQgJiYgY2hpbGQuZHJhZ0VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5fZHJhZ0VuZCggZSAsIGNoaWxkICwgMCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLmZpcmUoXCJkcmFnZW5kXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgICAgIG1lLl9kcmFnaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG1lLl9fZGlzcGF0Y2hFdmVudEluQ2hpbGRzKCBlICwgbWUuY3VyUG9pbnRzVGFyZ2V0ICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL+WmguaenOW9k+WJjeayoeacieS4gOS4qnRhcmdldO+8jOWwseaKiuS6i+S7tua0vuWPkeWIsGNhbnZheOS4iumdolxuICAgICAgICAgICAgbWUuX19kaXNwYXRjaEV2ZW50SW5DaGlsZHMoIGUgLCBbIHJvb3QgXSApO1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgLy/ku450b3VjaHPkuK3ojrflj5bliLDlr7nlupR0b3VjaCAsIOWcqOS4iumdoua3u+WKoOS4imNhbnZheOWdkOagh+ezu+e7n+eahHjvvIx5XG4gICAgX19nZXRDYW52YXhQb2ludEluVG91Y2hzIDogZnVuY3Rpb24oIGUgKXtcbiAgICAgICAgdmFyIG1lICAgICAgICA9IHRoaXM7XG4gICAgICAgIHZhciByb290ICAgICAgPSBtZS5jYW52YXg7XG4gICAgICAgIHZhciBjdXJUb3VjaHMgPSBbXTtcbiAgICAgICAgXy5lYWNoKCBlLnBvaW50ICwgZnVuY3Rpb24oIHRvdWNoICl7XG4gICAgICAgICAgIGN1clRvdWNocy5wdXNoKCB7XG4gICAgICAgICAgICAgICB4IDogQ2FudmF4RXZlbnQucGFnZVgoIHRvdWNoICkgLSByb290LnZpZXdPZmZzZXQubGVmdCxcbiAgICAgICAgICAgICAgIHkgOiBDYW52YXhFdmVudC5wYWdlWSggdG91Y2ggKSAtIHJvb3Qudmlld09mZnNldC50b3BcbiAgICAgICAgICAgfSApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGN1clRvdWNocztcbiAgICB9LFxuICAgIF9fZ2V0Q2hpbGRJblRvdWNocyA6IGZ1bmN0aW9uKCB0b3VjaHMgKXtcbiAgICAgICAgdmFyIG1lICAgPSB0aGlzO1xuICAgICAgICB2YXIgcm9vdCA9IG1lLmNhbnZheDtcbiAgICAgICAgdmFyIHRvdWNoZXNUYXJnZXQgPSBbXTtcbiAgICAgICAgXy5lYWNoKCB0b3VjaHMgLCBmdW5jdGlvbih0b3VjaCl7XG4gICAgICAgICAgICB0b3VjaGVzVGFyZ2V0LnB1c2goIHJvb3QuZ2V0T2JqZWN0c1VuZGVyUG9pbnQoIHRvdWNoICwgMSlbMF0gKTtcbiAgICAgICAgfSApO1xuICAgICAgICByZXR1cm4gdG91Y2hlc1RhcmdldDtcbiAgICB9LFxuICAgIC8qXG4gICAgKuesrOS4ieaWueW6k+eahOS6i+S7tuezu+e7ny0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLWJlZ2luXG4gICAgKi9cblxuXG4gICAgLypcbiAgICAgKkBwYXJhbSB7YXJyYXl9IGNoaWxkcyBcbiAgICAgKiAqL1xuICAgIF9fZGlzcGF0Y2hFdmVudEluQ2hpbGRzOiBmdW5jdGlvbihlLCBjaGlsZHMpIHtcbiAgICAgICAgaWYgKCFjaGlsZHMgJiYgIShcImxlbmd0aFwiIGluIGNoaWxkcykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWUgPSB0aGlzO1xuICAgICAgICB2YXIgaGFzQ2hpbGQgPSBmYWxzZTtcbiAgICAgICAgXy5lYWNoKGNoaWxkcywgZnVuY3Rpb24oY2hpbGQsIGkpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgICAgICAgIGhhc0NoaWxkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgY2UgPSBuZXcgQ2FudmF4RXZlbnQoZSk7XG4gICAgICAgICAgICAgICAgY2UudGFyZ2V0ID0gY2UuY3VycmVudFRhcmdldCA9IGNoaWxkIHx8IHRoaXM7XG4gICAgICAgICAgICAgICAgY2Uuc3RhZ2VQb2ludCA9IG1lLmN1clBvaW50c1tpXTtcbiAgICAgICAgICAgICAgICBjZS5wb2ludCA9IGNlLnRhcmdldC5nbG9iYWxUb0xvY2FsKGNlLnN0YWdlUG9pbnQpO1xuICAgICAgICAgICAgICAgIGNoaWxkLmRpc3BhdGNoRXZlbnQoY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGhhc0NoaWxkO1xuICAgIH0sXG4gICAgLy/lhYvpmobkuIDkuKrlhYPntKDliLBob3ZlciBzdGFnZeS4reWOu1xuICAgIF9jbG9uZTJob3ZlclN0YWdlOiBmdW5jdGlvbih0YXJnZXQsIGkpIHtcbiAgICAgICAgdmFyIG1lID0gdGhpcztcbiAgICAgICAgdmFyIHJvb3QgPSBtZS5jYW52YXg7XG4gICAgICAgIHZhciBfZHJhZ0R1cGxpY2F0ZSA9IHJvb3QuX2J1ZmZlclN0YWdlLmdldENoaWxkQnlJZCh0YXJnZXQuaWQpO1xuICAgICAgICBpZiAoIV9kcmFnRHVwbGljYXRlKSB7XG4gICAgICAgICAgICBfZHJhZ0R1cGxpY2F0ZSA9IHRhcmdldC5jbG9uZSh0cnVlKTtcbiAgICAgICAgICAgIF9kcmFnRHVwbGljYXRlLl90cmFuc2Zvcm0gPSB0YXJnZXQuZ2V0Q29uY2F0ZW5hdGVkTWF0cml4KCk7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICpUT0RPOiDlm6DkuLrlkI7nu63lj6/og73kvJrmnInmiYvliqjmt7vliqDnmoQg5YWD57Sg5YiwX2J1ZmZlclN0YWdlIOmHjOmdouadpVxuICAgICAgICAgICAgICrmr5TlpoJ0aXBzXG4gICAgICAgICAgICAgKui/meexu+aJi+WKqOa3u+WKoOi/m+adpeeahOiCr+WumuaYr+WboOS4uumcgOimgeaYvuekuuWcqOacgOWkluWxgueahOOAguWcqGhvdmVy5YWD57Sg5LmL5LiK44CCXG4gICAgICAgICAgICAgKuaJgOacieiHquWKqOa3u+WKoOeahGhvdmVy5YWD57Sg6YO96buY6K6k5re75Yqg5ZyoX2J1ZmZlclN0YWdl55qE5pyA5bqV5bGCXG4gICAgICAgICAgICAgKiovXG4gICAgICAgICAgICByb290Ll9idWZmZXJTdGFnZS5hZGRDaGlsZEF0KF9kcmFnRHVwbGljYXRlLCAwKTtcbiAgICAgICAgfVxuICAgICAgICBfZHJhZ0R1cGxpY2F0ZS5jb250ZXh0Lmdsb2JhbEFscGhhID0gdGFyZ2V0Ll9nbG9iYWxBbHBoYTtcbiAgICAgICAgdGFyZ2V0Ll9kcmFnUG9pbnQgPSB0YXJnZXQuZ2xvYmFsVG9Mb2NhbChtZS5jdXJQb2ludHNbaV0pO1xuICAgICAgICByZXR1cm4gX2RyYWdEdXBsaWNhdGU7XG4gICAgfSxcbiAgICAvL2RyYWcg5LitIOeahOWkhOeQhuWHveaVsFxuICAgIF9kcmFnTW92ZUhhbmRlcjogZnVuY3Rpb24oZSwgdGFyZ2V0LCBpKSB7XG4gICAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICAgIHZhciByb290ID0gbWUuY2FudmF4O1xuICAgICAgICB2YXIgX3BvaW50ID0gdGFyZ2V0Lmdsb2JhbFRvTG9jYWwoIG1lLmN1clBvaW50c1tpXSApO1xuXG4gICAgICAgIC8v6KaB5a+55bqU55qE5L+u5pS55pys5bCK55qE5L2N572u77yM5L2G5piv6KaB5ZGK6K+J5byV5pOO5LiN6KaBd2F0Y2jov5nkuKrml7blgJnnmoTlj5jljJZcbiAgICAgICAgdGFyZ2V0Ll9ub3RXYXRjaCA9IHRydWU7XG4gICAgICAgIHZhciBfbW92ZVN0YWdlID0gdGFyZ2V0Lm1vdmVpbmc7XG4gICAgICAgIHRhcmdldC5tb3ZlaW5nID0gdHJ1ZTtcbiAgICAgICAgdGFyZ2V0LmNvbnRleHQueCArPSAoX3BvaW50LnggLSB0YXJnZXQuX2RyYWdQb2ludC54KTtcbiAgICAgICAgdGFyZ2V0LmNvbnRleHQueSArPSAoX3BvaW50LnkgLSB0YXJnZXQuX2RyYWdQb2ludC55KTtcbiAgICAgICAgdGFyZ2V0LmZpcmUoXCJkcmFnbW92ZVwiKTtcbiAgICAgICAgdGFyZ2V0Lm1vdmVpbmcgPSBfbW92ZVN0YWdlO1xuICAgICAgICB0YXJnZXQuX25vdFdhdGNoID0gZmFsc2U7XG4gICAgICAgIC8v5ZCM5q2l5a6M5q+V5pys5bCK55qE5L2N572uXG5cbiAgICAgICAgLy/ov5nph4zlj6rog73nm7TmjqXkv67mlLlfdHJhbnNmb3JtIOOAgiDkuI3og73nlKjkuIvpnaLnmoTkv67mlLl477yMeeeahOaWueW8j+OAglxuICAgICAgICB2YXIgX2RyYWdEdXBsaWNhdGUgPSByb290Ll9idWZmZXJTdGFnZS5nZXRDaGlsZEJ5SWQodGFyZ2V0LmlkKTtcbiAgICAgICAgX2RyYWdEdXBsaWNhdGUuX3RyYW5zZm9ybSA9IHRhcmdldC5nZXRDb25jYXRlbmF0ZWRNYXRyaXgoKTtcbiAgICAgICAgLy/ku6XkuLrnm7TmjqXkv67mlLnnmoRfdHJhbnNmb3Jt5LiN5Lya5Ye65Y+R5b+D6Lez5LiK5oql77yMIOa4suafk+W8leaTjuS4jeWItuWKqOi/meS4qnN0YWdl6ZyA6KaB57uY5Yi244CCXG4gICAgICAgIC8v5omA5Lul6KaB5omL5Yqo5Ye65Y+R5b+D6Lez5YyFXG4gICAgICAgIF9kcmFnRHVwbGljYXRlLmhlYXJ0QmVhdCgpO1xuICAgIH0sXG4gICAgLy9kcmFn57uT5p2f55qE5aSE55CG5Ye95pWwXG4gICAgX2RyYWdFbmQ6IGZ1bmN0aW9uKGUsIHRhcmdldCwgaSkge1xuICAgICAgICB2YXIgbWUgPSB0aGlzO1xuICAgICAgICB2YXIgcm9vdCA9IG1lLmNhbnZheDtcblxuICAgICAgICAvL19kcmFnRHVwbGljYXRlIOWkjeWItuWcqF9idWZmZXJTdGFnZSDkuK3nmoTlia/mnKxcbiAgICAgICAgdmFyIF9kcmFnRHVwbGljYXRlID0gcm9vdC5fYnVmZmVyU3RhZ2UuZ2V0Q2hpbGRCeUlkKHRhcmdldC5pZCk7XG4gICAgICAgIF9kcmFnRHVwbGljYXRlLmRlc3Ryb3koKTtcblxuICAgICAgICB0YXJnZXQuY29udGV4dC5nbG9iYWxBbHBoYSA9IHRhcmdldC5fZ2xvYmFsQWxwaGE7XG4gICAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IEV2ZW50SGFuZGxlcjsiLCIvKipcbiAqIENhbnZheFxuICpcbiAqIEBhdXRob3Ig6YeK5YmRICjmnY7mtpssIGxpdGFvLmx0QGFsaWJhYmEtaW5jLmNvbSlcbiAqXG4gKiDkuovku7bnrqHnkIbnsbtcbiAqL1xuaW1wb3J0IF8gZnJvbSBcIi4uL3V0aWxzL3VuZGVyc2NvcmVcIjtcblxuLyoqXG4gKiDmnoTpgKDlh73mlbAuXG4gKiBAbmFtZSBFdmVudERpc3BhdGNoZXJcbiAqIEBjbGFzcyBFdmVudERpc3BhdGNoZXLnsbvmmK/lj6/osIPluqbkuovku7bnmoTnsbvnmoTln7rnsbvvvIzlroPlhYHorrjmmL7npLrliJfooajkuIrnmoTku7vkvZXlr7nosaHpg73mmK/kuIDkuKrkuovku7bnm67moIfjgIJcbiAqL1xudmFyIEV2ZW50TWFuYWdlciA9IGZ1bmN0aW9uKCkge1xuICAgIC8v5LqL5Lu25pig5bCE6KGo77yM5qC85byP5Li677yae3R5cGUxOltsaXN0ZW5lcjEsIGxpc3RlbmVyMl0sIHR5cGUyOltsaXN0ZW5lcjMsIGxpc3RlbmVyNF19XG4gICAgdGhpcy5fZXZlbnRNYXAgPSB7fTtcbn07XG5cbkV2ZW50TWFuYWdlci5wcm90b3R5cGUgPSB7IFxuICAgIC8qXG4gICAgICog5rOo5YaM5LqL5Lu25L6m5ZCs5Zmo5a+56LGh77yM5Lul5L2/5L6m5ZCs5Zmo6IO95aSf5o6l5pS25LqL5Lu26YCa55+l44CCXG4gICAgICovXG4gICAgX2FkZEV2ZW50TGlzdGVuZXIgOiBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuXG4gICAgICAgIGlmKCB0eXBlb2YgbGlzdGVuZXIgIT0gXCJmdW5jdGlvblwiICl7XG4gICAgICAgICAgLy9saXN0ZW5lcuW/hemhu+aYr+S4qmZ1bmN0aW9u5ZGQ5LqyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhZGRSZXN1bHQgPSB0cnVlO1xuICAgICAgICB2YXIgc2VsZiAgICAgID0gdGhpcztcbiAgICAgICAgXy5lYWNoKCB0eXBlLnNwbGl0KFwiIFwiKSAsIGZ1bmN0aW9uKHR5cGUpe1xuICAgICAgICAgICAgdmFyIG1hcCA9IHNlbGYuX2V2ZW50TWFwW3R5cGVdO1xuICAgICAgICAgICAgaWYoIW1hcCl7XG4gICAgICAgICAgICAgICAgbWFwID0gc2VsZi5fZXZlbnRNYXBbdHlwZV0gPSBbXTtcbiAgICAgICAgICAgICAgICBtYXAucHVzaChsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgc2VsZi5fZXZlbnRFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoXy5pbmRleE9mKG1hcCAsbGlzdGVuZXIpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgbWFwLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgIHNlbGYuX2V2ZW50RW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFkZFJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFkZFJlc3VsdDtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOWIoOmZpOS6i+S7tuS+puWQrOWZqOOAglxuICAgICAqL1xuICAgIF9yZW1vdmVFdmVudExpc3RlbmVyIDogZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgaWYoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSByZXR1cm4gdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyQnlUeXBlKHR5cGUpO1xuXG4gICAgICAgIHZhciBtYXAgPSB0aGlzLl9ldmVudE1hcFt0eXBlXTtcbiAgICAgICAgaWYoIW1hcCl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgbWFwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbGkgPSBtYXBbaV07XG4gICAgICAgICAgICBpZihsaSA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBtYXAuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIGlmKG1hcC5sZW5ndGggICAgPT0gMCkgeyBcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50TWFwW3R5cGVdO1xuICAgICAgICAgICAgICAgICAgICAvL+WmguaenOi/meS4quWmguaenOi/meS4quaXtuWAmWNoaWxk5rKh5pyJ5Lu75L2V5LqL5Lu25L6m5ZCsXG4gICAgICAgICAgICAgICAgICAgIGlmKF8uaXNFbXB0eSh0aGlzLl9ldmVudE1hcCkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy/pgqPkuYjor6XlhYPntKDkuI3lho3mjqXlj5fkuovku7bnmoTmo4DmtYtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50RW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDliKDpmaTmjIflrprnsbvlnovnmoTmiYDmnInkuovku7bkvqblkKzlmajjgIJcbiAgICAgKi9cbiAgICBfcmVtb3ZlRXZlbnRMaXN0ZW5lckJ5VHlwZSA6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgdmFyIG1hcCA9IHRoaXMuX2V2ZW50TWFwW3R5cGVdO1xuICAgICAgICBpZighbWFwKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fZXZlbnRNYXBbdHlwZV07XG5cbiAgICAgICAgICAgIC8v5aaC5p6c6L+Z5Liq5aaC5p6c6L+Z5Liq5pe25YCZY2hpbGTmsqHmnInku7vkvZXkuovku7bkvqblkKxcbiAgICAgICAgICAgIGlmKF8uaXNFbXB0eSh0aGlzLl9ldmVudE1hcCkpe1xuICAgICAgICAgICAgICAgIC8v6YKj5LmI6K+l5YWD57Sg5LiN5YaN5o6l5Y+X5LqL5Lu255qE5qOA5rWLXG4gICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRFbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOWIoOmZpOaJgOacieS6i+S7tuS+puWQrOWZqOOAglxuICAgICAqL1xuICAgIF9yZW1vdmVBbGxFdmVudExpc3RlbmVycyA6IGZ1bmN0aW9uKCkge1x0XG4gICAgICAgIHRoaXMuX2V2ZW50TWFwID0ge307XG4gICAgICAgIHRoaXMuX2V2ZW50RW5hYmxlZCA9IGZhbHNlO1xuICAgIH0sXG4gICAgLyoqXG4gICAgKiDmtL7lj5Hkuovku7bvvIzosIPnlKjkuovku7bkvqblkKzlmajjgIJcbiAgICAqL1xuICAgIF9kaXNwYXRjaEV2ZW50IDogZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgbWFwID0gdGhpcy5fZXZlbnRNYXBbZS50eXBlXTtcbiAgICAgICAgXG4gICAgICAgIGlmKCBtYXAgKXtcbiAgICAgICAgICAgIGlmKCFlLnRhcmdldCkgZS50YXJnZXQgPSB0aGlzO1xuICAgICAgICAgICAgbWFwID0gbWFwLnNsaWNlKCk7XG5cbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBtYXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBtYXBbaV07XG4gICAgICAgICAgICAgICAgaWYodHlwZW9mKGxpc3RlbmVyKSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiggIWUuX3N0b3BQcm9wYWdhdGlvbiApIHtcbiAgICAgICAgICAgIC8v5ZCR5LiK5YaS5rOhXG4gICAgICAgICAgICBpZiggdGhpcy5wYXJlbnQgKXtcbiAgICAgICAgICAgICAgICBlLmN1cnJlbnRUYXJnZXQgPSB0aGlzLnBhcmVudDtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5fZGlzcGF0Y2hFdmVudCggZSApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IFxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAgICog5qOA5p+l5piv5ZCm5Li65oyH5a6a5LqL5Lu257G75Z6L5rOo5YaM5LqG5Lu75L2V5L6m5ZCs5Zmo44CCXG4gICAgICAgKi9cbiAgICBfaGFzRXZlbnRMaXN0ZW5lciA6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgdmFyIG1hcCA9IHRoaXMuX2V2ZW50TWFwW3R5cGVdO1xuICAgICAgICByZXR1cm4gbWFwICE9IG51bGwgJiYgbWFwLmxlbmd0aCA+IDA7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFdmVudE1hbmFnZXI7XG4iLCIvKipcbiAqIENhbnZheFxuICpcbiAqIEBhdXRob3Ig6YeK5YmRICjmnY7mtpssIGxpdGFvLmx0QGFsaWJhYmEtaW5jLmNvbSlcbiAqXG4gKiDkuovku7bmtL7lj5HnsbtcbiAqL1xuaW1wb3J0IFV0aWxzIGZyb20gXCIuLi91dGlscy9pbmRleFwiO1xuaW1wb3J0IEV2ZW50TWFuYWdlciBmcm9tIFwiLi9FdmVudE1hbmFnZXJcIjtcbmltcG9ydCBDYW52YXhFdmVudCBmcm9tIFwiLi9DYW52YXhFdmVudFwiO1xuaW1wb3J0IF8gZnJvbSBcIi4uL3V0aWxzL3VuZGVyc2NvcmVcIjtcblxuXG52YXIgRXZlbnREaXNwYXRjaGVyID0gZnVuY3Rpb24oKXtcbiAgICBFdmVudERpc3BhdGNoZXIuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIG5hbWUpO1xufTtcblxuVXRpbHMuY3JlYXRDbGFzcyhFdmVudERpc3BhdGNoZXIgLCBFdmVudE1hbmFnZXIgLCB7XG4gICAgb24gOiBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcil7XG4gICAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBhZGRFdmVudExpc3RlbmVyOmZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKXtcbiAgICAgICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHVuIDogZnVuY3Rpb24odHlwZSxsaXN0ZW5lcil7XG4gICAgICAgIHRoaXMuX3JlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOmZ1bmN0aW9uKHR5cGUsbGlzdGVuZXIpe1xuICAgICAgICB0aGlzLl9yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckJ5VHlwZTpmdW5jdGlvbih0eXBlKXtcbiAgICAgICAgdGhpcy5fcmVtb3ZlRXZlbnRMaXN0ZW5lckJ5VHlwZSggdHlwZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgcmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnM6ZnVuY3Rpb24oKXtcbiAgICAgICAgdGhpcy5fcmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vcGFyYW1zIOimgeS8oOe7mWV2dOeahGV2ZW50aGFuZGxlcuWkhOeQhuWHveaVsOeahOWPguaVsO+8jOS8muiiq21lcmdl5YiwQ2FudmF4IGV2ZW505LitXG4gICAgZmlyZSA6IGZ1bmN0aW9uKGV2ZW50VHlwZSAsIHBhcmFtcyl7XG4gICAgICAgIHZhciBlID0gbmV3IENhbnZheEV2ZW50KCBldmVudFR5cGUgKTtcblxuICAgICAgICBpZiggcGFyYW1zICl7XG4gICAgICAgICAgICBmb3IoIHZhciBwIGluIHBhcmFtcyApe1xuICAgICAgICAgICAgICAgIGlmKCBwIGluIGUgKXtcbiAgICAgICAgICAgICAgICAgICAgLy9wYXJhbXPkuK3nmoTmlbDmja7kuI3og73opobnm5ZldmVudOWxnuaAp1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggcCArIFwi5bGe5oCn5LiN6IO96KaG55uWQ2FudmF4RXZlbnTlsZ7mgKdcIiApXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZVtwXSA9IHBhcmFtc1twXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIG1lID0gdGhpcztcbiAgICAgICAgXy5lYWNoKCBldmVudFR5cGUuc3BsaXQoXCIgXCIpICwgZnVuY3Rpb24oZVR5cGUpe1xuICAgICAgICAgICAgZS5jdXJyZW50VGFyZ2V0ID0gbWU7XG4gICAgICAgICAgICBtZS5kaXNwYXRjaEV2ZW50KCBlICk7XG4gICAgICAgIH0gKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBkaXNwYXRjaEV2ZW50OmZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgLy90aGlzIGluc3RhbmNlb2YgRGlzcGxheU9iamVjdENvbnRhaW5lciA9PT4gdGhpcy5jaGlsZHJlblxuICAgICAgICAvL1RPRE86IOi/memHjGltcG9ydCBEaXNwbGF5T2JqZWN0Q29udGFpbmVyIOeahOivne+8jOWcqGRpc3BsYXlPYmplY3Tph4zpnaLnmoRpbXBvcnQgRXZlbnREaXNwYXRjaGVyIGZyb20gXCIuLi9ldmVudC9FdmVudERpc3BhdGNoZXJcIjtcbiAgICAgICAgLy/kvJrlvpfliLDkuIDkuKp1bmRlZmluZWTvvIzmhJ/op4nmmK/miJDkuobkuIDkuKrlvqrnjq/kvp3otZbnmoTpl67popjvvIzmiYDku6Xov5nph4zmjaLnlKjnroDljZXnmoTliKTmlq3mnaXliKTmlq3oh6rlt7HmmK/kuIDkuKrlrrnmmJPvvIzmi6XmnIljaGlsZHJlblxuICAgICAgICBpZiggdGhpcy5jaGlsZHJlbiAgJiYgZXZlbnQucG9pbnQgKXtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLmdldE9iamVjdHNVbmRlclBvaW50KCBldmVudC5wb2ludCAsIDEpWzBdO1xuICAgICAgICAgICAgaWYoIHRhcmdldCApe1xuICAgICAgICAgICAgICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KCBldmVudCApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgaWYodGhpcy5jb250ZXh0ICYmIGV2ZW50LnR5cGUgPT0gXCJtb3VzZW92ZXJcIil7XG4gICAgICAgICAgICAvL+iusOW9lWRpc3BhdGNoRXZlbnTkuYvliY3nmoTlv4Pot7NcbiAgICAgICAgICAgIHZhciBwcmVIZWFydEJlYXQgPSB0aGlzLl9oZWFydEJlYXROdW07XG4gICAgICAgICAgICB2YXIgcHJlZ0FscGhhICAgID0gdGhpcy5jb250ZXh0Lmdsb2JhbEFscGhhO1xuICAgICAgICAgICAgdGhpcy5fZGlzcGF0Y2hFdmVudCggZXZlbnQgKTtcbiAgICAgICAgICAgIGlmKCBwcmVIZWFydEJlYXQgIT0gdGhpcy5faGVhcnRCZWF0TnVtICl7XG4gICAgICAgICAgICAgICAgdGhpcy5faG92ZXJDbGFzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYoIHRoaXMuaG92ZXJDbG9uZSApe1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FudmF4ID0gdGhpcy5nZXRTdGFnZSgpLnBhcmVudDtcbiAgICAgICAgICAgICAgICAgICAgLy/nhLblkI5jbG9uZeS4gOS7vW9iau+8jOa3u+WKoOWIsF9idWZmZXJTdGFnZSDkuK1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGl2U2hhcGUgPSB0aGlzLmNsb25lKHRydWUpOyAgXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2U2hhcGUuX3RyYW5zZm9ybSA9IHRoaXMuZ2V0Q29uY2F0ZW5hdGVkTWF0cml4KCk7XG4gICAgICAgICAgICAgICAgICAgIGNhbnZheC5fYnVmZmVyU3RhZ2UuYWRkQ2hpbGRBdCggYWN0aXZTaGFwZSAsIDAgKTsgXG4gICAgICAgICAgICAgICAgICAgIC8v54S25ZCO5oqK6Ieq5bex6ZqQ6JeP5LqGXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2dsb2JhbEFscGhhID0gcHJlZ0FscGhhO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZ2xvYmFsQWxwaGEgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9kaXNwYXRjaEV2ZW50KCBldmVudCApO1xuXG4gICAgICAgIGlmKCB0aGlzLmNvbnRleHQgJiYgZXZlbnQudHlwZSA9PSBcIm1vdXNlb3V0XCIpe1xuICAgICAgICAgICAgaWYodGhpcy5faG92ZXJDbGFzcyl7XG4gICAgICAgICAgICAgICAgLy/or7TmmI7liJrliJpvdmVy55qE5pe25YCZ5pyJ5re75Yqg5qC35byPXG4gICAgICAgICAgICAgICAgdmFyIGNhbnZheCA9IHRoaXMuZ2V0U3RhZ2UoKS5wYXJlbnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5faG92ZXJDbGFzcyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgY2FudmF4Ll9idWZmZXJTdGFnZS5yZW1vdmVDaGlsZEJ5SWQodGhpcy5pZCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYoIHRoaXMuX2dsb2JhbEFscGhhICl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5nbG9iYWxBbHBoYSA9IHRoaXMuX2dsb2JhbEFscGhhO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fZ2xvYmFsQWxwaGE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBoYXNFdmVudDpmdW5jdGlvbih0eXBlKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc0V2ZW50TGlzdGVuZXIodHlwZSk7XG4gICAgfSxcbiAgICBoYXNFdmVudExpc3RlbmVyOmZ1bmN0aW9uKHR5cGUpe1xuICAgICAgICByZXR1cm4gdGhpcy5faGFzRXZlbnRMaXN0ZW5lcih0eXBlKTtcbiAgICB9LFxuICAgIGhvdmVyIDogZnVuY3Rpb24oIG92ZXJGdW4gLCBvdXRGdW4gKXtcbiAgICAgICAgdGhpcy5vbihcIm1vdXNlb3ZlclwiICwgb3ZlckZ1bik7XG4gICAgICAgIHRoaXMub24oXCJtb3VzZW91dFwiICAsIG91dEZ1biApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIG9uY2UgOiBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcil7XG4gICAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICAgIHZhciBvbmNlSGFuZGxlID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGxpc3RlbmVyLmFwcGx5KG1lICwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHRoaXMudW4odHlwZSAsIG9uY2VIYW5kbGUpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uKHR5cGUgLCBvbmNlSGFuZGxlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEV2ZW50RGlzcGF0Y2hlcjtcbiIsIlxuLyoqXG4gKiBDYW52YXhcbiAqXG4gKiBAYXV0aG9yIOmHiuWJkSAo5p2O5rabLCBsaXRhby5sdEBhbGliYWJhLWluYy5jb20pXG4gKlxuICogTWF0cml4IOefqemYteW6kyDnlKjkuo7mlbTkuKrns7vnu5/nmoTlh6DkvZXlj5jmjaLorqHnrpdcbiAqIGNvZGUgZnJvbSBodHRwOi8vZXZhbncuZ2l0aHViLmlvL2xpZ2h0Z2wuanMvZG9jcy9tYXRyaXguaHRtbFxuICovXG5cbnZhciBNYXRyaXggPSBmdW5jdGlvbihhLCBiLCBjLCBkLCB0eCwgdHkpe1xuICAgIHRoaXMuYSA9IGEgIT0gdW5kZWZpbmVkID8gYSA6IDE7XG4gICAgdGhpcy5iID0gYiAhPSB1bmRlZmluZWQgPyBiIDogMDtcbiAgICB0aGlzLmMgPSBjICE9IHVuZGVmaW5lZCA/IGMgOiAwO1xuICAgIHRoaXMuZCA9IGQgIT0gdW5kZWZpbmVkID8gZCA6IDE7XG4gICAgdGhpcy50eCA9IHR4ICE9IHVuZGVmaW5lZCA/IHR4IDogMDtcbiAgICB0aGlzLnR5ID0gdHkgIT0gdW5kZWZpbmVkID8gdHkgOiAwO1xufTtcblxuTWF0cml4LnByb3RvdHlwZSA9IHtcbiAgICBjb25jYXQgOiBmdW5jdGlvbihtdHgpe1xuICAgICAgICB2YXIgYSA9IHRoaXMuYTtcbiAgICAgICAgdmFyIGMgPSB0aGlzLmM7XG4gICAgICAgIHZhciB0eCA9IHRoaXMudHg7XG5cbiAgICAgICAgdGhpcy5hID0gYSAqIG10eC5hICsgdGhpcy5iICogbXR4LmM7XG4gICAgICAgIHRoaXMuYiA9IGEgKiBtdHguYiArIHRoaXMuYiAqIG10eC5kO1xuICAgICAgICB0aGlzLmMgPSBjICogbXR4LmEgKyB0aGlzLmQgKiBtdHguYztcbiAgICAgICAgdGhpcy5kID0gYyAqIG10eC5iICsgdGhpcy5kICogbXR4LmQ7XG4gICAgICAgIHRoaXMudHggPSB0eCAqIG10eC5hICsgdGhpcy50eSAqIG10eC5jICsgbXR4LnR4O1xuICAgICAgICB0aGlzLnR5ID0gdHggKiBtdHguYiArIHRoaXMudHkgKiBtdHguZCArIG10eC50eTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBjb25jYXRUcmFuc2Zvcm0gOiBmdW5jdGlvbih4LCB5LCBzY2FsZVgsIHNjYWxlWSwgcm90YXRpb24pe1xuICAgICAgICB2YXIgY29zID0gMTtcbiAgICAgICAgdmFyIHNpbiA9IDA7XG4gICAgICAgIGlmKHJvdGF0aW9uJTM2MCl7XG4gICAgICAgICAgICB2YXIgciA9IHJvdGF0aW9uICogTWF0aC5QSSAvIDE4MDtcbiAgICAgICAgICAgIGNvcyA9IE1hdGguY29zKHIpO1xuICAgICAgICAgICAgc2luID0gTWF0aC5zaW4ocik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvbmNhdChuZXcgTWF0cml4KGNvcypzY2FsZVgsIHNpbipzY2FsZVgsIC1zaW4qc2NhbGVZLCBjb3Mqc2NhbGVZLCB4LCB5KSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgcm90YXRlIDogZnVuY3Rpb24oYW5nbGUpe1xuICAgICAgICAvL+ebruWJjeW3sue7j+aPkOS+m+WvuemhuuaXtumSiOmAhuaXtumSiOS4pOS4quaWueWQkeaXi+i9rOeahOaUr+aMgVxuICAgICAgICB2YXIgY29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICB2YXIgc2luID0gTWF0aC5zaW4oYW5nbGUpO1xuXG4gICAgICAgIHZhciBhID0gdGhpcy5hO1xuICAgICAgICB2YXIgYyA9IHRoaXMuYztcbiAgICAgICAgdmFyIHR4ID0gdGhpcy50eDtcblxuICAgICAgICBpZiAoYW5nbGU+MCl7XG4gICAgICAgICAgICB0aGlzLmEgPSBhICogY29zIC0gdGhpcy5iICogc2luO1xuICAgICAgICAgICAgdGhpcy5iID0gYSAqIHNpbiArIHRoaXMuYiAqIGNvcztcbiAgICAgICAgICAgIHRoaXMuYyA9IGMgKiBjb3MgLSB0aGlzLmQgKiBzaW47XG4gICAgICAgICAgICB0aGlzLmQgPSBjICogc2luICsgdGhpcy5kICogY29zO1xuICAgICAgICAgICAgdGhpcy50eCA9IHR4ICogY29zIC0gdGhpcy50eSAqIHNpbjtcbiAgICAgICAgICAgIHRoaXMudHkgPSB0eCAqIHNpbiArIHRoaXMudHkgKiBjb3M7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgc3QgPSBNYXRoLnNpbihNYXRoLmFicyhhbmdsZSkpO1xuICAgICAgICAgICAgdmFyIGN0ID0gTWF0aC5jb3MoTWF0aC5hYnMoYW5nbGUpKTtcblxuICAgICAgICAgICAgdGhpcy5hID0gYSpjdCArIHRoaXMuYipzdDtcbiAgICAgICAgICAgIHRoaXMuYiA9IC1hKnN0ICsgdGhpcy5iKmN0O1xuICAgICAgICAgICAgdGhpcy5jID0gYypjdCArIHRoaXMuZCpzdDtcbiAgICAgICAgICAgIHRoaXMuZCA9IC1jKnN0ICsgY3QqdGhpcy5kO1xuICAgICAgICAgICAgdGhpcy50eCA9IGN0KnR4ICsgc3QqdGhpcy50eTtcbiAgICAgICAgICAgIHRoaXMudHkgPSBjdCp0aGlzLnR5IC0gc3QqdHg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBzY2FsZSA6IGZ1bmN0aW9uKHN4LCBzeSl7XG4gICAgICAgIHRoaXMuYSAqPSBzeDtcbiAgICAgICAgdGhpcy5kICo9IHN5O1xuICAgICAgICB0aGlzLnR4ICo9IHN4O1xuICAgICAgICB0aGlzLnR5ICo9IHN5O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHRyYW5zbGF0ZSA6IGZ1bmN0aW9uKGR4LCBkeSl7XG4gICAgICAgIHRoaXMudHggKz0gZHg7XG4gICAgICAgIHRoaXMudHkgKz0gZHk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgaWRlbnRpdHkgOiBmdW5jdGlvbigpe1xuICAgICAgICAvL+WIneWni+WMllxuICAgICAgICB0aGlzLmEgPSB0aGlzLmQgPSAxO1xuICAgICAgICB0aGlzLmIgPSB0aGlzLmMgPSB0aGlzLnR4ID0gdGhpcy50eSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgaW52ZXJ0IDogZnVuY3Rpb24oKXtcbiAgICAgICAgLy/pgIblkJHnn6npmLVcbiAgICAgICAgdmFyIGEgPSB0aGlzLmE7XG4gICAgICAgIHZhciBiID0gdGhpcy5iO1xuICAgICAgICB2YXIgYyA9IHRoaXMuYztcbiAgICAgICAgdmFyIGQgPSB0aGlzLmQ7XG4gICAgICAgIHZhciB0eCA9IHRoaXMudHg7XG4gICAgICAgIHZhciBpID0gYSAqIGQgLSBiICogYztcblxuICAgICAgICB0aGlzLmEgPSBkIC8gaTtcbiAgICAgICAgdGhpcy5iID0gLWIgLyBpO1xuICAgICAgICB0aGlzLmMgPSAtYyAvIGk7XG4gICAgICAgIHRoaXMuZCA9IGEgLyBpO1xuICAgICAgICB0aGlzLnR4ID0gKGMgKiB0aGlzLnR5IC0gZCAqIHR4KSAvIGk7XG4gICAgICAgIHRoaXMudHkgPSAtKGEgKiB0aGlzLnR5IC0gYiAqIHR4KSAvIGk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgY2xvbmUgOiBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gbmV3IE1hdHJpeCh0aGlzLmEsIHRoaXMuYiwgdGhpcy5jLCB0aGlzLmQsIHRoaXMudHgsIHRoaXMudHkpO1xuICAgIH0sXG4gICAgdG9BcnJheSA6IGZ1bmN0aW9uKHRyYW5zcG9zZSwgb3V0KXtcbiAgICAgICAgaWYoIGFyZ3VtZW50cy5sZW5ndGggPT0gMCApXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vY2FudmFzMmQg5Lit5LiN5Lya5pyJ5Lu75L2V55qE5Y+C5pWw5Lyg5YWlXG4gICAgICAgICAgICByZXR1cm4gWyB0aGlzLmEgLCB0aGlzLmIgLCB0aGlzLmMgLCB0aGlzLmQgLCB0aGlzLnR4ICwgdGhpcy50eSBdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy93ZWJnbOeahGdsc2zpnIDopoHnlKjnmoTml7blgJnvvIzpnIDopoHkvKDlhaV0cmFuc3Bvc2Ug5p2l6L2s5o2i5Li65LiA5LiqMyoz5a6M5pW055+p6Zi1XG4gICAgICAgIGlmICghdGhpcy5hcnJheSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5hcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoOSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYXJyYXkgPSBvdXQgfHwgdGhpcy5hcnJheTtcblxuICAgICAgICBpZiAodHJhbnNwb3NlKVxuICAgICAgICB7XG4gICAgICAgICAgICBhcnJheVswXSA9IHRoaXMuYTtcbiAgICAgICAgICAgIGFycmF5WzFdID0gdGhpcy5iO1xuICAgICAgICAgICAgYXJyYXlbMl0gPSAwO1xuICAgICAgICAgICAgYXJyYXlbM10gPSB0aGlzLmM7XG4gICAgICAgICAgICBhcnJheVs0XSA9IHRoaXMuZDtcbiAgICAgICAgICAgIGFycmF5WzVdID0gMDtcbiAgICAgICAgICAgIGFycmF5WzZdID0gdGhpcy50eDtcbiAgICAgICAgICAgIGFycmF5WzddID0gdGhpcy50eTtcbiAgICAgICAgICAgIGFycmF5WzhdID0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFycmF5WzBdID0gdGhpcy5hO1xuICAgICAgICAgICAgYXJyYXlbMV0gPSB0aGlzLmM7XG4gICAgICAgICAgICBhcnJheVsyXSA9IHRoaXMudHg7XG4gICAgICAgICAgICBhcnJheVszXSA9IHRoaXMuYjtcbiAgICAgICAgICAgIGFycmF5WzRdID0gdGhpcy5kO1xuICAgICAgICAgICAgYXJyYXlbNV0gPSB0aGlzLnR5O1xuICAgICAgICAgICAgYXJyYXlbNl0gPSAwO1xuICAgICAgICAgICAgYXJyYXlbN10gPSAwO1xuICAgICAgICAgICAgYXJyYXlbOF0gPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH0sXG4gICAgLyoqXG4gICAgICog55+p6Zi15bem5LmY5ZCR6YePXG4gICAgICovXG4gICAgbXVsVmVjdG9yIDogZnVuY3Rpb24odikge1xuICAgICAgICB2YXIgYWEgPSB0aGlzLmEsIGFjID0gdGhpcy5jLCBhdHggPSB0aGlzLnR4O1xuICAgICAgICB2YXIgYWIgPSB0aGlzLmIsIGFkID0gdGhpcy5kLCBhdHkgPSB0aGlzLnR5O1xuXG4gICAgICAgIHZhciBvdXQgPSBbMCwwXTtcbiAgICAgICAgb3V0WzBdID0gdlswXSAqIGFhICsgdlsxXSAqIGFjICsgYXR4O1xuICAgICAgICBvdXRbMV0gPSB2WzBdICogYWIgKyB2WzFdICogYWQgKyBhdHk7XG5cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9ICAgIFxufVxuXG5leHBvcnQgZGVmYXVsdCBNYXRyaXg7XG4iLCJpbXBvcnQgXyBmcm9tIFwiLi4vdXRpbHMvdW5kZXJzY29yZVwiO1xuXG4vKipcbiAqIFR3ZWVuLmpzIC0gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vdHdlZW5qcy90d2Vlbi5qc1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdHdlZW5qcy90d2Vlbi5qcy9ncmFwaHMvY29udHJpYnV0b3JzIGZvciB0aGUgZnVsbCBsaXN0IG9mIGNvbnRyaWJ1dG9ycy5cbiAqIFRoYW5rIHlvdSBhbGwsIHlvdSdyZSBhd2Vzb21lIVxuICovXG5cbiB2YXIgVFdFRU4gPSBUV0VFTiB8fCAoZnVuY3Rpb24gKCkge1xuXG4gXHR2YXIgX3R3ZWVucyA9IFtdO1xuXG4gXHRyZXR1cm4ge1xuXG4gXHRcdGdldEFsbDogZnVuY3Rpb24gKCkge1xuXG4gXHRcdFx0cmV0dXJuIF90d2VlbnM7XG5cbiBcdFx0fSxcblxuIFx0XHRyZW1vdmVBbGw6IGZ1bmN0aW9uICgpIHtcblxuIFx0XHRcdF90d2VlbnMgPSBbXTtcblxuIFx0XHR9LFxuXG4gXHRcdGFkZDogZnVuY3Rpb24gKHR3ZWVuKSB7XG5cbiBcdFx0XHRfdHdlZW5zLnB1c2godHdlZW4pO1xuXG4gXHRcdH0sXG5cbiBcdFx0cmVtb3ZlOiBmdW5jdGlvbiAodHdlZW4pIHtcblxuXHRcdFx0dmFyIGkgPSBfLmluZGV4T2YoIF90d2VlbnMgLCB0d2VlbiApOy8vX3R3ZWVucy5pbmRleE9mKHR3ZWVuKTtcblxuXHRcdFx0aWYgKGkgIT09IC0xKSB7XG5cdFx0XHRcdF90d2VlbnMuc3BsaWNlKGksIDEpO1xuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdHVwZGF0ZTogZnVuY3Rpb24gKHRpbWUsIHByZXNlcnZlKSB7XG5cblx0XHRcdGlmIChfdHdlZW5zLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBpID0gMDtcblxuXHRcdFx0dGltZSA9IHRpbWUgIT09IHVuZGVmaW5lZCA/IHRpbWUgOiBUV0VFTi5ub3coKTtcblxuXHRcdFx0d2hpbGUgKGkgPCBfdHdlZW5zLmxlbmd0aCkge1xuXG4gICAgICAgICAgICAgICAgLyogb2xkIFxuXHRcdFx0XHRpZiAoX3R3ZWVuc1tpXS51cGRhdGUodGltZSkgfHwgcHJlc2VydmUpIHtcblx0XHRcdFx0XHRpKys7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0X3R3ZWVucy5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ki9cblxuICAgICAgICAgICAgICAgIC8vbmV3IGNvZGVcbiAgICAgICAgICAgICAgICAvL2luIHJlYWwgd29ybGQsIHR3ZWVuLnVwZGF0ZSBoYXMgY2hhbmNlIHRvIHJlbW92ZSBpdHNlbGYsIHNvIHdlIGhhdmUgdG8gaGFuZGxlIHRoaXMgc2l0dWF0aW9uLlxuICAgICAgICAgICAgICAgIC8vaW4gY2VydGFpbiBjYXNlcywgb25VcGRhdGVDYWxsYmFjayB3aWxsIHJlbW92ZSBpbnN0YW5jZXMgaW4gX3R3ZWVucywgd2hpY2ggbWFrZSBfdHdlZW5zLnNwbGljZShpLCAxKSBmYWlsXG4gICAgICAgICAgICAgICAgLy9AbGl0YW8ubHRAYWxpYmFiYS1pbmMuY29tXG4gICAgICAgICAgICAgICAgdmFyIF90ID0gX3R3ZWVuc1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgX3VwZGF0ZVJlcyA9IF90LnVwZGF0ZSh0aW1lKTtcblxuICAgICAgICAgICAgICAgIGlmKCAhX3R3ZWVuc1tpXSApe1xuICAgICAgICAgICAgICAgIFx0YnJlYWs7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoIF90ID09PSBfdHdlZW5zW2ldICkge1xuICAgICAgICAgICAgICAgIFx0aWYgKCBfdXBkYXRlUmVzIHx8IHByZXNlcnZlICkge1xuICAgICAgICAgICAgICAgIFx0XHRpKys7XG4gICAgICAgICAgICAgICAgXHR9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFx0XHRfdHdlZW5zLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBcdH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgfVxuICAgIH07XG5cbn0pKCk7XG5cblxuLy8gSW5jbHVkZSBhIHBlcmZvcm1hbmNlLm5vdyBwb2x5ZmlsbC5cbi8vIEluIG5vZGUuanMsIHVzZSBwcm9jZXNzLmhydGltZS5cbmlmICh0eXBlb2YgKHdpbmRvdykgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiAocHJvY2VzcykgIT09ICd1bmRlZmluZWQnKSB7XG5cdFRXRUVOLm5vdyA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgdGltZSA9IHByb2Nlc3MuaHJ0aW1lKCk7XG5cblx0XHQvLyBDb252ZXJ0IFtzZWNvbmRzLCBuYW5vc2Vjb25kc10gdG8gbWlsbGlzZWNvbmRzLlxuXHRcdHJldHVybiB0aW1lWzBdICogMTAwMCArIHRpbWVbMV0gLyAxMDAwMDAwO1xuXHR9O1xufVxuLy8gSW4gYSBicm93c2VyLCB1c2Ugd2luZG93LnBlcmZvcm1hbmNlLm5vdyBpZiBpdCBpcyBhdmFpbGFibGUuXG5lbHNlIGlmICh0eXBlb2YgKHdpbmRvdykgIT09ICd1bmRlZmluZWQnICYmXG5cdHdpbmRvdy5wZXJmb3JtYW5jZSAhPT0gdW5kZWZpbmVkICYmXG5cdHdpbmRvdy5wZXJmb3JtYW5jZS5ub3cgIT09IHVuZGVmaW5lZCkge1xuXHQvLyBUaGlzIG11c3QgYmUgYm91bmQsIGJlY2F1c2UgZGlyZWN0bHkgYXNzaWduaW5nIHRoaXMgZnVuY3Rpb25cblx0Ly8gbGVhZHMgdG8gYW4gaW52b2NhdGlvbiBleGNlcHRpb24gaW4gQ2hyb21lLlxuXHRUV0VFTi5ub3cgPSB3aW5kb3cucGVyZm9ybWFuY2Uubm93LmJpbmQod2luZG93LnBlcmZvcm1hbmNlKTtcbn1cbi8vIFVzZSBEYXRlLm5vdyBpZiBpdCBpcyBhdmFpbGFibGUuXG5lbHNlIGlmIChEYXRlLm5vdyAhPT0gdW5kZWZpbmVkKSB7XG5cdFRXRUVOLm5vdyA9IERhdGUubm93O1xufVxuLy8gT3RoZXJ3aXNlLCB1c2UgJ25ldyBEYXRlKCkuZ2V0VGltZSgpJy5cbmVsc2Uge1xuXHRUV0VFTi5ub3cgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHR9O1xufVxuXG5cblRXRUVOLlR3ZWVuID0gZnVuY3Rpb24gKG9iamVjdCkge1xuXG5cdHZhciBfb2JqZWN0ID0gb2JqZWN0O1xuXHR2YXIgX3ZhbHVlc1N0YXJ0ID0ge307XG5cdHZhciBfdmFsdWVzRW5kID0ge307XG5cdHZhciBfdmFsdWVzU3RhcnRSZXBlYXQgPSB7fTtcblx0dmFyIF9kdXJhdGlvbiA9IDEwMDA7XG5cdHZhciBfcmVwZWF0ID0gMDtcblx0dmFyIF9yZXBlYXREZWxheVRpbWU7XG5cdHZhciBfeW95byA9IGZhbHNlO1xuXHR2YXIgX2lzUGxheWluZyA9IGZhbHNlO1xuXHR2YXIgX3JldmVyc2VkID0gZmFsc2U7XG5cdHZhciBfZGVsYXlUaW1lID0gMDtcblx0dmFyIF9zdGFydFRpbWUgPSBudWxsO1xuXHR2YXIgX2Vhc2luZ0Z1bmN0aW9uID0gVFdFRU4uRWFzaW5nLkxpbmVhci5Ob25lO1xuXHR2YXIgX2ludGVycG9sYXRpb25GdW5jdGlvbiA9IFRXRUVOLkludGVycG9sYXRpb24uTGluZWFyO1xuXHR2YXIgX2NoYWluZWRUd2VlbnMgPSBbXTtcblx0dmFyIF9vblN0YXJ0Q2FsbGJhY2sgPSBudWxsO1xuXHR2YXIgX29uU3RhcnRDYWxsYmFja0ZpcmVkID0gZmFsc2U7XG5cdHZhciBfb25VcGRhdGVDYWxsYmFjayA9IG51bGw7XG5cdHZhciBfb25Db21wbGV0ZUNhbGxiYWNrID0gbnVsbDtcblx0dmFyIF9vblN0b3BDYWxsYmFjayA9IG51bGw7XG5cblx0dGhpcy50byA9IGZ1bmN0aW9uIChwcm9wZXJ0aWVzLCBkdXJhdGlvbikge1xuXG5cdFx0X3ZhbHVlc0VuZCA9IHByb3BlcnRpZXM7XG5cblx0XHRpZiAoZHVyYXRpb24gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0X2R1cmF0aW9uID0gZHVyYXRpb247XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fTtcblxuXHR0aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKHRpbWUpIHtcblxuXHRcdFRXRUVOLmFkZCh0aGlzKTtcblxuXHRcdF9pc1BsYXlpbmcgPSB0cnVlO1xuXG5cdFx0X29uU3RhcnRDYWxsYmFja0ZpcmVkID0gZmFsc2U7XG5cblx0XHRfc3RhcnRUaW1lID0gdGltZSAhPT0gdW5kZWZpbmVkID8gdGltZSA6IFRXRUVOLm5vdygpO1xuXHRcdF9zdGFydFRpbWUgKz0gX2RlbGF5VGltZTtcblxuXHRcdGZvciAodmFyIHByb3BlcnR5IGluIF92YWx1ZXNFbmQpIHtcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYW4gQXJyYXkgd2FzIHByb3ZpZGVkIGFzIHByb3BlcnR5IHZhbHVlXG5cdFx0XHRpZiAoX3ZhbHVlc0VuZFtwcm9wZXJ0eV0gaW5zdGFuY2VvZiBBcnJheSkge1xuXG5cdFx0XHRcdGlmIChfdmFsdWVzRW5kW3Byb3BlcnR5XS5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSBhIGxvY2FsIGNvcHkgb2YgdGhlIEFycmF5IHdpdGggdGhlIHN0YXJ0IHZhbHVlIGF0IHRoZSBmcm9udFxuXHRcdFx0XHRfdmFsdWVzRW5kW3Byb3BlcnR5XSA9IFtfb2JqZWN0W3Byb3BlcnR5XV0uY29uY2F0KF92YWx1ZXNFbmRbcHJvcGVydHldKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBgdG8oKWAgc3BlY2lmaWVzIGEgcHJvcGVydHkgdGhhdCBkb2Vzbid0IGV4aXN0IGluIHRoZSBzb3VyY2Ugb2JqZWN0LFxuXHRcdFx0Ly8gd2Ugc2hvdWxkIG5vdCBzZXQgdGhhdCBwcm9wZXJ0eSBpbiB0aGUgb2JqZWN0XG5cdFx0XHRpZiAoX29iamVjdFtwcm9wZXJ0eV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSB0aGUgc3RhcnRpbmcgdmFsdWUuXG5cdFx0XHRfdmFsdWVzU3RhcnRbcHJvcGVydHldID0gX29iamVjdFtwcm9wZXJ0eV07XG5cblx0XHRcdGlmICgoX3ZhbHVlc1N0YXJ0W3Byb3BlcnR5XSBpbnN0YW5jZW9mIEFycmF5KSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0X3ZhbHVlc1N0YXJ0W3Byb3BlcnR5XSAqPSAxLjA7IC8vIEVuc3VyZXMgd2UncmUgdXNpbmcgbnVtYmVycywgbm90IHN0cmluZ3Ncblx0XHRcdH1cblxuXHRcdFx0X3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XSA9IF92YWx1ZXNTdGFydFtwcm9wZXJ0eV0gfHwgMDtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cblx0dGhpcy5zdG9wID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCFfaXNQbGF5aW5nKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHRUV0VFTi5yZW1vdmUodGhpcyk7XG5cdFx0X2lzUGxheWluZyA9IGZhbHNlO1xuXG5cdFx0aWYgKF9vblN0b3BDYWxsYmFjayAhPT0gbnVsbCkge1xuXHRcdFx0X29uU3RvcENhbGxiYWNrLmNhbGwoX29iamVjdCwgX29iamVjdCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wQ2hhaW5lZFR3ZWVucygpO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cblx0dGhpcy5lbmQgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnVwZGF0ZShfc3RhcnRUaW1lICsgX2R1cmF0aW9uKTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9O1xuXG5cdHRoaXMuc3RvcENoYWluZWRUd2VlbnMgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRmb3IgKHZhciBpID0gMCwgbnVtQ2hhaW5lZFR3ZWVucyA9IF9jaGFpbmVkVHdlZW5zLmxlbmd0aDsgaSA8IG51bUNoYWluZWRUd2VlbnM7IGkrKykge1xuXHRcdFx0X2NoYWluZWRUd2VlbnNbaV0uc3RvcCgpO1xuXHRcdH1cblxuXHR9O1xuXG5cdHRoaXMuZGVsYXkgPSBmdW5jdGlvbiAoYW1vdW50KSB7XG5cblx0XHRfZGVsYXlUaW1lID0gYW1vdW50O1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cblx0dGhpcy5yZXBlYXQgPSBmdW5jdGlvbiAodGltZXMpIHtcblxuXHRcdF9yZXBlYXQgPSB0aW1lcztcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9O1xuXG5cdHRoaXMucmVwZWF0RGVsYXkgPSBmdW5jdGlvbiAoYW1vdW50KSB7XG5cblx0XHRfcmVwZWF0RGVsYXlUaW1lID0gYW1vdW50O1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cblx0dGhpcy55b3lvID0gZnVuY3Rpb24gKHlveW8pIHtcblxuXHRcdF95b3lvID0geW95bztcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9O1xuXG5cblx0dGhpcy5lYXNpbmcgPSBmdW5jdGlvbiAoZWFzaW5nKSB7XG5cblx0XHRfZWFzaW5nRnVuY3Rpb24gPSBlYXNpbmc7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fTtcblxuXHR0aGlzLmludGVycG9sYXRpb24gPSBmdW5jdGlvbiAoaW50ZXJwb2xhdGlvbikge1xuXG5cdFx0X2ludGVycG9sYXRpb25GdW5jdGlvbiA9IGludGVycG9sYXRpb247XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fTtcblxuXHR0aGlzLmNoYWluID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0X2NoYWluZWRUd2VlbnMgPSBhcmd1bWVudHM7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fTtcblxuXHR0aGlzLm9uU3RhcnQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblxuXHRcdF9vblN0YXJ0Q2FsbGJhY2sgPSBjYWxsYmFjaztcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9O1xuXG5cdHRoaXMub25VcGRhdGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblxuXHRcdF9vblVwZGF0ZUNhbGxiYWNrID0gY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fTtcblxuXHR0aGlzLm9uQ29tcGxldGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblxuXHRcdF9vbkNvbXBsZXRlQ2FsbGJhY2sgPSBjYWxsYmFjaztcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9O1xuXG5cdHRoaXMub25TdG9wID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cblx0XHRfb25TdG9wQ2FsbGJhY2sgPSBjYWxsYmFjaztcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9O1xuXG5cdHRoaXMudXBkYXRlID0gZnVuY3Rpb24gKHRpbWUpIHtcblxuXHRcdHZhciBwcm9wZXJ0eTtcblx0XHR2YXIgZWxhcHNlZDtcblx0XHR2YXIgdmFsdWU7XG5cblx0XHRpZiAodGltZSA8IF9zdGFydFRpbWUpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGlmIChfb25TdGFydENhbGxiYWNrRmlyZWQgPT09IGZhbHNlKSB7XG5cblx0XHRcdGlmIChfb25TdGFydENhbGxiYWNrICE9PSBudWxsKSB7XG5cdFx0XHRcdF9vblN0YXJ0Q2FsbGJhY2suY2FsbChfb2JqZWN0LCBfb2JqZWN0KTtcblx0XHRcdH1cblxuXHRcdFx0X29uU3RhcnRDYWxsYmFja0ZpcmVkID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRlbGFwc2VkID0gKHRpbWUgLSBfc3RhcnRUaW1lKSAvIF9kdXJhdGlvbjtcblx0XHRlbGFwc2VkID0gZWxhcHNlZCA+IDEgPyAxIDogZWxhcHNlZDtcblxuXHRcdHZhbHVlID0gX2Vhc2luZ0Z1bmN0aW9uKGVsYXBzZWQpO1xuXG5cdFx0Zm9yIChwcm9wZXJ0eSBpbiBfdmFsdWVzRW5kKSB7XG5cblx0XHRcdC8vIERvbid0IHVwZGF0ZSBwcm9wZXJ0aWVzIHRoYXQgZG8gbm90IGV4aXN0IGluIHRoZSBzb3VyY2Ugb2JqZWN0XG5cdFx0XHRpZiAoX3ZhbHVlc1N0YXJ0W3Byb3BlcnR5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgc3RhcnQgPSBfdmFsdWVzU3RhcnRbcHJvcGVydHldIHx8IDA7XG5cdFx0XHR2YXIgZW5kID0gX3ZhbHVlc0VuZFtwcm9wZXJ0eV07XG5cblx0XHRcdGlmIChlbmQgaW5zdGFuY2VvZiBBcnJheSkge1xuXG5cdFx0XHRcdF9vYmplY3RbcHJvcGVydHldID0gX2ludGVycG9sYXRpb25GdW5jdGlvbihlbmQsIHZhbHVlKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBQYXJzZXMgcmVsYXRpdmUgZW5kIHZhbHVlcyB3aXRoIHN0YXJ0IGFzIGJhc2UgKGUuZy46ICsxMCwgLTMpXG5cdFx0XHRcdGlmICh0eXBlb2YgKGVuZCkgPT09ICdzdHJpbmcnKSB7XG5cblx0XHRcdFx0XHRpZiAoZW5kLmNoYXJBdCgwKSA9PT0gJysnIHx8IGVuZC5jaGFyQXQoMCkgPT09ICctJykge1xuXHRcdFx0XHRcdFx0ZW5kID0gc3RhcnQgKyBwYXJzZUZsb2F0KGVuZCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVuZCA9IHBhcnNlRmxvYXQoZW5kKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm90ZWN0IGFnYWluc3Qgbm9uIG51bWVyaWMgcHJvcGVydGllcy5cblx0XHRcdFx0aWYgKHR5cGVvZiAoZW5kKSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0XHRfb2JqZWN0W3Byb3BlcnR5XSA9IHN0YXJ0ICsgKGVuZCAtIHN0YXJ0KSAqIHZhbHVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmIChfb25VcGRhdGVDYWxsYmFjayAhPT0gbnVsbCkge1xuXHRcdFx0X29uVXBkYXRlQ2FsbGJhY2suY2FsbChfb2JqZWN0LCB2YWx1ZSk7XG5cdFx0fVxuXG5cdFx0aWYgKGVsYXBzZWQgPT09IDEpIHtcblxuXHRcdFx0aWYgKF9yZXBlYXQgPiAwKSB7XG5cblx0XHRcdFx0aWYgKGlzRmluaXRlKF9yZXBlYXQpKSB7XG5cdFx0XHRcdFx0X3JlcGVhdC0tO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVhc3NpZ24gc3RhcnRpbmcgdmFsdWVzLCByZXN0YXJ0IGJ5IG1ha2luZyBzdGFydFRpbWUgPSBub3dcblx0XHRcdFx0Zm9yIChwcm9wZXJ0eSBpbiBfdmFsdWVzU3RhcnRSZXBlYXQpIHtcblxuXHRcdFx0XHRcdGlmICh0eXBlb2YgKF92YWx1ZXNFbmRbcHJvcGVydHldKSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0XHRcdF92YWx1ZXNTdGFydFJlcGVhdFtwcm9wZXJ0eV0gPSBfdmFsdWVzU3RhcnRSZXBlYXRbcHJvcGVydHldICsgcGFyc2VGbG9hdChfdmFsdWVzRW5kW3Byb3BlcnR5XSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKF95b3lvKSB7XG5cdFx0XHRcdFx0XHR2YXIgdG1wID0gX3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XTtcblxuXHRcdFx0XHRcdFx0X3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XSA9IF92YWx1ZXNFbmRbcHJvcGVydHldO1xuXHRcdFx0XHRcdFx0X3ZhbHVlc0VuZFtwcm9wZXJ0eV0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0X3ZhbHVlc1N0YXJ0W3Byb3BlcnR5XSA9IF92YWx1ZXNTdGFydFJlcGVhdFtwcm9wZXJ0eV07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChfeW95bykge1xuXHRcdFx0XHRcdF9yZXZlcnNlZCA9ICFfcmV2ZXJzZWQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoX3JlcGVhdERlbGF5VGltZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0X3N0YXJ0VGltZSA9IHRpbWUgKyBfcmVwZWF0RGVsYXlUaW1lO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdF9zdGFydFRpbWUgPSB0aW1lICsgX2RlbGF5VGltZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmIChfb25Db21wbGV0ZUNhbGxiYWNrICE9PSBudWxsKSB7XG5cblx0XHRcdFx0XHRfb25Db21wbGV0ZUNhbGxiYWNrLmNhbGwoX29iamVjdCwgX29iamVjdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKHZhciBpID0gMCwgbnVtQ2hhaW5lZFR3ZWVucyA9IF9jaGFpbmVkVHdlZW5zLmxlbmd0aDsgaSA8IG51bUNoYWluZWRUd2VlbnM7IGkrKykge1xuXHRcdFx0XHRcdC8vIE1ha2UgdGhlIGNoYWluZWQgdHdlZW5zIHN0YXJ0IGV4YWN0bHkgYXQgdGhlIHRpbWUgdGhleSBzaG91bGQsXG5cdFx0XHRcdFx0Ly8gZXZlbiBpZiB0aGUgYHVwZGF0ZSgpYCBtZXRob2Qgd2FzIGNhbGxlZCB3YXkgcGFzdCB0aGUgZHVyYXRpb24gb2YgdGhlIHR3ZWVuXG5cdFx0XHRcdFx0X2NoYWluZWRUd2VlbnNbaV0uc3RhcnQoX3N0YXJ0VGltZSArIF9kdXJhdGlvbik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH07XG5cbn07XG5cblxuVFdFRU4uRWFzaW5nID0ge1xuXG5cdExpbmVhcjoge1xuXG5cdFx0Tm9uZTogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIGs7XG5cblx0XHR9XG5cblx0fSxcblxuXHRRdWFkcmF0aWM6IHtcblxuXHRcdEluOiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRyZXR1cm4gayAqIGs7XG5cblx0XHR9LFxuXG5cdFx0T3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRyZXR1cm4gayAqICgyIC0gayk7XG5cblx0XHR9LFxuXG5cdFx0SW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdGlmICgoayAqPSAyKSA8IDEpIHtcblx0XHRcdFx0cmV0dXJuIDAuNSAqIGsgKiBrO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gLSAwLjUgKiAoLS1rICogKGsgLSAyKSAtIDEpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Q3ViaWM6IHtcblxuXHRcdEluOiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRyZXR1cm4gayAqIGsgKiBrO1xuXG5cdFx0fSxcblxuXHRcdE91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIC0tayAqIGsgKiBrICsgMTtcblxuXHRcdH0sXG5cblx0XHRJbk91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0aWYgKChrICo9IDIpIDwgMSkge1xuXHRcdFx0XHRyZXR1cm4gMC41ICogayAqIGsgKiBrO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMC41ICogKChrIC09IDIpICogayAqIGsgKyAyKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdFF1YXJ0aWM6IHtcblxuXHRcdEluOiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRyZXR1cm4gayAqIGsgKiBrICogaztcblxuXHRcdH0sXG5cblx0XHRPdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiAxIC0gKC0tayAqIGsgKiBrICogayk7XG5cblx0XHR9LFxuXG5cdFx0SW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdGlmICgoayAqPSAyKSA8IDEpIHtcblx0XHRcdFx0cmV0dXJuIDAuNSAqIGsgKiBrICogayAqIGs7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAtIDAuNSAqICgoayAtPSAyKSAqIGsgKiBrICogayAtIDIpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0UXVpbnRpYzoge1xuXG5cdFx0SW46IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiBrICogayAqIGsgKiBrICogaztcblxuXHRcdH0sXG5cblx0XHRPdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiAtLWsgKiBrICogayAqIGsgKiBrICsgMTtcblxuXHRcdH0sXG5cblx0XHRJbk91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0aWYgKChrICo9IDIpIDwgMSkge1xuXHRcdFx0XHRyZXR1cm4gMC41ICogayAqIGsgKiBrICogayAqIGs7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwLjUgKiAoKGsgLT0gMikgKiBrICogayAqIGsgKiBrICsgMik7XG5cblx0XHR9XG5cblx0fSxcblxuXHRTaW51c29pZGFsOiB7XG5cblx0XHRJbjogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIDEgLSBNYXRoLmNvcyhrICogTWF0aC5QSSAvIDIpO1xuXG5cdFx0fSxcblxuXHRcdE91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIE1hdGguc2luKGsgKiBNYXRoLlBJIC8gMik7XG5cblx0XHR9LFxuXG5cdFx0SW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiAwLjUgKiAoMSAtIE1hdGguY29zKE1hdGguUEkgKiBrKSk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRFeHBvbmVudGlhbDoge1xuXG5cdFx0SW46IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiBrID09PSAwID8gMCA6IE1hdGgucG93KDEwMjQsIGsgLSAxKTtcblxuXHRcdH0sXG5cblx0XHRPdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiBrID09PSAxID8gMSA6IDEgLSBNYXRoLnBvdygyLCAtIDEwICogayk7XG5cblx0XHR9LFxuXG5cdFx0SW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdGlmIChrID09PSAwKSB7XG5cdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoayA9PT0gMSkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKChrICo9IDIpIDwgMSkge1xuXHRcdFx0XHRyZXR1cm4gMC41ICogTWF0aC5wb3coMTAyNCwgayAtIDEpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMC41ICogKC0gTWF0aC5wb3coMiwgLSAxMCAqIChrIC0gMSkpICsgMik7XG5cblx0XHR9XG5cblx0fSxcblxuXHRDaXJjdWxhcjoge1xuXG5cdFx0SW46IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiAxIC0gTWF0aC5zcXJ0KDEgLSBrICogayk7XG5cblx0XHR9LFxuXG5cdFx0T3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRyZXR1cm4gTWF0aC5zcXJ0KDEgLSAoLS1rICogaykpO1xuXG5cdFx0fSxcblxuXHRcdEluT3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRpZiAoKGsgKj0gMikgPCAxKSB7XG5cdFx0XHRcdHJldHVybiAtIDAuNSAqIChNYXRoLnNxcnQoMSAtIGsgKiBrKSAtIDEpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMC41ICogKE1hdGguc3FydCgxIC0gKGsgLT0gMikgKiBrKSArIDEpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0RWxhc3RpYzoge1xuXG5cdFx0SW46IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdGlmIChrID09PSAwKSB7XG5cdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoayA9PT0gMSkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIC1NYXRoLnBvdygyLCAxMCAqIChrIC0gMSkpICogTWF0aC5zaW4oKGsgLSAxLjEpICogNSAqIE1hdGguUEkpO1xuXG5cdFx0fSxcblxuXHRcdE91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0aWYgKGsgPT09IDApIHtcblx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChrID09PSAxKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gTWF0aC5wb3coMiwgLTEwICogaykgKiBNYXRoLnNpbigoayAtIDAuMSkgKiA1ICogTWF0aC5QSSkgKyAxO1xuXG5cdFx0fSxcblxuXHRcdEluT3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRpZiAoayA9PT0gMCkge1xuXHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGsgPT09IDEpIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGsgKj0gMjtcblxuXHRcdFx0aWYgKGsgPCAxKSB7XG5cdFx0XHRcdHJldHVybiAtMC41ICogTWF0aC5wb3coMiwgMTAgKiAoayAtIDEpKSAqIE1hdGguc2luKChrIC0gMS4xKSAqIDUgKiBNYXRoLlBJKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDAuNSAqIE1hdGgucG93KDIsIC0xMCAqIChrIC0gMSkpICogTWF0aC5zaW4oKGsgLSAxLjEpICogNSAqIE1hdGguUEkpICsgMTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdEJhY2s6IHtcblxuXHRcdEluOiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHR2YXIgcyA9IDEuNzAxNTg7XG5cblx0XHRcdHJldHVybiBrICogayAqICgocyArIDEpICogayAtIHMpO1xuXG5cdFx0fSxcblxuXHRcdE91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0dmFyIHMgPSAxLjcwMTU4O1xuXG5cdFx0XHRyZXR1cm4gLS1rICogayAqICgocyArIDEpICogayArIHMpICsgMTtcblxuXHRcdH0sXG5cblx0XHRJbk91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0dmFyIHMgPSAxLjcwMTU4ICogMS41MjU7XG5cblx0XHRcdGlmICgoayAqPSAyKSA8IDEpIHtcblx0XHRcdFx0cmV0dXJuIDAuNSAqIChrICogayAqICgocyArIDEpICogayAtIHMpKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDAuNSAqICgoayAtPSAyKSAqIGsgKiAoKHMgKyAxKSAqIGsgKyBzKSArIDIpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Qm91bmNlOiB7XG5cblx0XHRJbjogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIDEgLSBUV0VFTi5FYXNpbmcuQm91bmNlLk91dCgxIC0gayk7XG5cblx0XHR9LFxuXG5cdFx0T3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRpZiAoayA8ICgxIC8gMi43NSkpIHtcblx0XHRcdFx0cmV0dXJuIDcuNTYyNSAqIGsgKiBrO1xuXHRcdFx0fSBlbHNlIGlmIChrIDwgKDIgLyAyLjc1KSkge1xuXHRcdFx0XHRyZXR1cm4gNy41NjI1ICogKGsgLT0gKDEuNSAvIDIuNzUpKSAqIGsgKyAwLjc1O1xuXHRcdFx0fSBlbHNlIGlmIChrIDwgKDIuNSAvIDIuNzUpKSB7XG5cdFx0XHRcdHJldHVybiA3LjU2MjUgKiAoayAtPSAoMi4yNSAvIDIuNzUpKSAqIGsgKyAwLjkzNzU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gNy41NjI1ICogKGsgLT0gKDIuNjI1IC8gMi43NSkpICogayArIDAuOTg0Mzc1O1xuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdEluT3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRpZiAoayA8IDAuNSkge1xuXHRcdFx0XHRyZXR1cm4gVFdFRU4uRWFzaW5nLkJvdW5jZS5JbihrICogMikgKiAwLjU7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBUV0VFTi5FYXNpbmcuQm91bmNlLk91dChrICogMiAtIDEpICogMC41ICsgMC41O1xuXG5cdFx0fVxuXG5cdH1cblxufTtcblxuVFdFRU4uSW50ZXJwb2xhdGlvbiA9IHtcblxuXHRMaW5lYXI6IGZ1bmN0aW9uICh2LCBrKSB7XG5cblx0XHR2YXIgbSA9IHYubGVuZ3RoIC0gMTtcblx0XHR2YXIgZiA9IG0gKiBrO1xuXHRcdHZhciBpID0gTWF0aC5mbG9vcihmKTtcblx0XHR2YXIgZm4gPSBUV0VFTi5JbnRlcnBvbGF0aW9uLlV0aWxzLkxpbmVhcjtcblxuXHRcdGlmIChrIDwgMCkge1xuXHRcdFx0cmV0dXJuIGZuKHZbMF0sIHZbMV0sIGYpO1xuXHRcdH1cblxuXHRcdGlmIChrID4gMSkge1xuXHRcdFx0cmV0dXJuIGZuKHZbbV0sIHZbbSAtIDFdLCBtIC0gZik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZuKHZbaV0sIHZbaSArIDEgPiBtID8gbSA6IGkgKyAxXSwgZiAtIGkpO1xuXG5cdH0sXG5cblx0QmV6aWVyOiBmdW5jdGlvbiAodiwgaykge1xuXG5cdFx0dmFyIGIgPSAwO1xuXHRcdHZhciBuID0gdi5sZW5ndGggLSAxO1xuXHRcdHZhciBwdyA9IE1hdGgucG93O1xuXHRcdHZhciBibiA9IFRXRUVOLkludGVycG9sYXRpb24uVXRpbHMuQmVybnN0ZWluO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPD0gbjsgaSsrKSB7XG5cdFx0XHRiICs9IHB3KDEgLSBrLCBuIC0gaSkgKiBwdyhrLCBpKSAqIHZbaV0gKiBibihuLCBpKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYjtcblxuXHR9LFxuXG5cdENhdG11bGxSb206IGZ1bmN0aW9uICh2LCBrKSB7XG5cblx0XHR2YXIgbSA9IHYubGVuZ3RoIC0gMTtcblx0XHR2YXIgZiA9IG0gKiBrO1xuXHRcdHZhciBpID0gTWF0aC5mbG9vcihmKTtcblx0XHR2YXIgZm4gPSBUV0VFTi5JbnRlcnBvbGF0aW9uLlV0aWxzLkNhdG11bGxSb207XG5cblx0XHRpZiAodlswXSA9PT0gdlttXSkge1xuXG5cdFx0XHRpZiAoayA8IDApIHtcblx0XHRcdFx0aSA9IE1hdGguZmxvb3IoZiA9IG0gKiAoMSArIGspKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuKHZbKGkgLSAxICsgbSkgJSBtXSwgdltpXSwgdlsoaSArIDEpICUgbV0sIHZbKGkgKyAyKSAlIG1dLCBmIC0gaSk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoayA8IDApIHtcblx0XHRcdFx0cmV0dXJuIHZbMF0gLSAoZm4odlswXSwgdlswXSwgdlsxXSwgdlsxXSwgLWYpIC0gdlswXSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChrID4gMSkge1xuXHRcdFx0XHRyZXR1cm4gdlttXSAtIChmbih2W21dLCB2W21dLCB2W20gLSAxXSwgdlttIC0gMV0sIGYgLSBtKSAtIHZbbV0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm4odltpID8gaSAtIDEgOiAwXSwgdltpXSwgdlttIDwgaSArIDEgPyBtIDogaSArIDFdLCB2W20gPCBpICsgMiA/IG0gOiBpICsgMl0sIGYgLSBpKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdFV0aWxzOiB7XG5cblx0XHRMaW5lYXI6IGZ1bmN0aW9uIChwMCwgcDEsIHQpIHtcblxuXHRcdFx0cmV0dXJuIChwMSAtIHAwKSAqIHQgKyBwMDtcblxuXHRcdH0sXG5cblx0XHRCZXJuc3RlaW46IGZ1bmN0aW9uIChuLCBpKSB7XG5cblx0XHRcdHZhciBmYyA9IFRXRUVOLkludGVycG9sYXRpb24uVXRpbHMuRmFjdG9yaWFsO1xuXG5cdFx0XHRyZXR1cm4gZmMobikgLyBmYyhpKSAvIGZjKG4gLSBpKTtcblxuXHRcdH0sXG5cblx0XHRGYWN0b3JpYWw6IChmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHZhciBhID0gWzFdO1xuXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKG4pIHtcblxuXHRcdFx0XHR2YXIgcyA9IDE7XG5cblx0XHRcdFx0aWYgKGFbbl0pIHtcblx0XHRcdFx0XHRyZXR1cm4gYVtuXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAodmFyIGkgPSBuOyBpID4gMTsgaS0tKSB7XG5cdFx0XHRcdFx0cyAqPSBpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YVtuXSA9IHM7XG5cdFx0XHRcdHJldHVybiBzO1xuXG5cdFx0XHR9O1xuXG5cdFx0fSkoKSxcblxuXHRcdENhdG11bGxSb206IGZ1bmN0aW9uIChwMCwgcDEsIHAyLCBwMywgdCkge1xuXG5cdFx0XHR2YXIgdjAgPSAocDIgLSBwMCkgKiAwLjU7XG5cdFx0XHR2YXIgdjEgPSAocDMgLSBwMSkgKiAwLjU7XG5cdFx0XHR2YXIgdDIgPSB0ICogdDtcblx0XHRcdHZhciB0MyA9IHQgKiB0MjtcblxuXHRcdFx0cmV0dXJuICgyICogcDEgLSAyICogcDIgKyB2MCArIHYxKSAqIHQzICsgKC0gMyAqIHAxICsgMyAqIHAyIC0gMiAqIHYwIC0gdjEpICogdDIgKyB2MCAqIHQgKyBwMTtcblxuXHRcdH1cblxuXHR9XG5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRXRUVOO1xuIiwiaW1wb3J0IFR3ZWVuIGZyb20gXCIuL1R3ZWVuXCI7XG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4uL3V0aWxzL2luZGV4XCI7XG5pbXBvcnQgXyBmcm9tIFwiLi4vdXRpbHMvdW5kZXJzY29yZVwiO1xuXG4vKipcbiAqIOiuvue9riBBbmltYXRpb25GcmFtZSBiZWdpblxuICovXG52YXIgbGFzdFRpbWUgPSAwO1xudmFyIHZlbmRvcnMgPSBbJ21zJywgJ21veicsICd3ZWJraXQnLCAnbyddO1xuZm9yICh2YXIgeCA9IDA7IHggPCB2ZW5kb3JzLmxlbmd0aCAmJiAhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTsgKyt4KSB7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvd1t2ZW5kb3JzW3hdICsgJ1JlcXVlc3RBbmltYXRpb25GcmFtZSddO1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IHdpbmRvd1t2ZW5kb3JzW3hdICsgJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJ10gfHwgd2luZG93W3ZlbmRvcnNbeF0gKyAnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XG59O1xuaWYgKCF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBlbGVtZW50KSB7XG4gICAgICAgIHZhciBjdXJyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICB2YXIgdGltZVRvQ2FsbCA9IE1hdGgubWF4KDAsIDE2IC0gKGN1cnJUaW1lIC0gbGFzdFRpbWUpKTtcbiAgICAgICAgdmFyIGlkID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soY3VyclRpbWUgKyB0aW1lVG9DYWxsKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aW1lVG9DYWxsKTtcbiAgICAgICAgbGFzdFRpbWUgPSBjdXJyVGltZSArIHRpbWVUb0NhbGw7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9O1xufTtcbmlmICghd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9O1xufTtcblxuLy/nrqHnkIbmiYDmnInlm77ooajnmoTmuLLmn5Pku7vliqFcbnZhciBfdGFza0xpc3QgPSBbXTsgLy9beyBpZCA6IHRhc2s6IH0uLi5dXG52YXIgX3JlcXVlc3RBaWQgPSBudWxsO1xuXG5mdW5jdGlvbiBlbmFibGVkQW5pbWF0aW9uRnJhbWUoKXtcbiAgICBpZiAoIV9yZXF1ZXN0QWlkKSB7XG4gICAgICAgIF9yZXF1ZXN0QWlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImZyYW1lX19cIiArIF90YXNrTGlzdC5sZW5ndGgpO1xuICAgICAgICAgICAgLy9pZiAoIFR3ZWVuLmdldEFsbCgpLmxlbmd0aCApIHtcbiAgICAgICAgICAgIFR3ZWVuLnVwZGF0ZSgpOyAvL3R3ZWVu6Ieq5bex5Lya5YGabGVuZ3Ro5Yik5patXG4gICAgICAgICAgICAvL307XG4gICAgICAgICAgICB2YXIgY3VyclRhc2tMaXN0ID0gX3Rhc2tMaXN0O1xuICAgICAgICAgICAgX3Rhc2tMaXN0ID0gW107XG4gICAgICAgICAgICBfcmVxdWVzdEFpZCA9IG51bGw7XG4gICAgICAgICAgICB3aGlsZSAoY3VyclRhc2tMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjdXJyVGFza0xpc3Quc2hpZnQoKS50YXNrKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBfcmVxdWVzdEFpZDtcbn07IFxuXG4vKlxuICogQHBhcmFtIHRhc2sg6KaB5Yqg5YWl5Yiw5riy5p+T5bin6Zif5YiX5Lit55qE5Lu75YqhXG4gKiBAcmVzdWx0IGZyYW1laWRcbiAqL1xuZnVuY3Rpb24gcmVnaXN0RnJhbWUoICRmcmFtZSApIHtcbiAgICBpZiAoISRmcmFtZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfTtcbiAgICBfdGFza0xpc3QucHVzaCgkZnJhbWUpO1xuICAgIHJldHVybiBlbmFibGVkQW5pbWF0aW9uRnJhbWUoKTtcbn07XG5cbi8qXG4gKiAgQHBhcmFtIHRhc2sg6KaB5LuO5riy5p+T5bin6Zif5YiX5Lit5Yig6Zmk55qE5Lu75YqhXG4gKi9cbmZ1bmN0aW9uIGRlc3Ryb3lGcmFtZSggJGZyYW1lICkge1xuICAgIHZhciBkX3Jlc3VsdCA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gX3Rhc2tMaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoX3Rhc2tMaXN0W2ldLmlkID09PSAkZnJhbWUuaWQpIHtcbiAgICAgICAgICAgIGRfcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgIF90YXNrTGlzdC5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICBpLS07XG4gICAgICAgICAgICBsLS07XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBpZiAoX3Rhc2tMaXN0Lmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKF9yZXF1ZXN0QWlkKTtcbiAgICAgICAgX3JlcXVlc3RBaWQgPSBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIGRfcmVzdWx0O1xufTtcblxuXG4vKiBcbiAqIEBwYXJhbSBvcHQge2Zyb20gLCB0byAsIG9uVXBkYXRlICwgb25Db21wbGV0ZSAsIC4uLi4uLn1cbiAqIEByZXN1bHQgdHdlZW5cbiAqL1xuZnVuY3Rpb24gcmVnaXN0VHdlZW4ob3B0aW9ucykge1xuICAgIHZhciBvcHQgPSBfLmV4dGVuZCh7XG4gICAgICAgIGZyb206IG51bGwsXG4gICAgICAgIHRvOiBudWxsLFxuICAgICAgICBkdXJhdGlvbjogNTAwLFxuICAgICAgICBvblN0YXJ0OiBmdW5jdGlvbigpe30sXG4gICAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICBvblN0b3A6IGZ1bmN0aW9uKCl7fSxcbiAgICAgICAgcmVwZWF0OiAwLFxuICAgICAgICBkZWxheTogMCxcbiAgICAgICAgZWFzaW5nOiAnTGluZWFyLk5vbmUnLFxuICAgICAgICBkZXNjOiAnJyAvL+WKqOeUu+aPj+i/sO+8jOaWueS+v+afpeaJvmJ1Z1xuICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgdmFyIHR3ZWVuID0ge307XG4gICAgdmFyIHRpZCA9IFwidHdlZW5fXCIgKyBVdGlscy5nZXRVSUQoKTtcbiAgICBvcHQuaWQgJiYgKCB0aWQgPSB0aWQrXCJfXCIrb3B0LmlkICk7XG5cbiAgICBpZiAob3B0LmZyb20gJiYgb3B0LnRvKSB7XG4gICAgICAgIHR3ZWVuID0gbmV3IFR3ZWVuLlR3ZWVuKCBvcHQuZnJvbSApXG4gICAgICAgIC50byggb3B0LnRvLCBvcHQuZHVyYXRpb24gKVxuICAgICAgICAub25TdGFydChmdW5jdGlvbigpe1xuICAgICAgICAgICAgb3B0Lm9uU3RhcnQuYXBwbHkoIHRoaXMgKVxuICAgICAgICB9KVxuICAgICAgICAub25VcGRhdGUoIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBvcHQub25VcGRhdGUuYXBwbHkoIHRoaXMgKTtcbiAgICAgICAgfSApXG4gICAgICAgIC5vbkNvbXBsZXRlKCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRlc3Ryb3lGcmFtZSh7XG4gICAgICAgICAgICAgICAgaWQ6IHRpZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0d2Vlbi5faXNDb21wbGV0ZWVkID0gdHJ1ZTtcbiAgICAgICAgICAgIG9wdC5vbkNvbXBsZXRlLmFwcGx5KCB0aGlzICwgW3RoaXNdICk7IC8v5omn6KGM55So5oi355qEY29uQ29tcGxldGVcbiAgICAgICAgfSApXG4gICAgICAgIC5vblN0b3AoIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBkZXN0cm95RnJhbWUoe1xuICAgICAgICAgICAgICAgIGlkOiB0aWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdHdlZW4uX2lzU3RvcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIG9wdC5vblN0b3AuYXBwbHkoIHRoaXMgLCBbdGhpc10gKTtcbiAgICAgICAgfSApXG4gICAgICAgIC5yZXBlYXQoIG9wdC5yZXBlYXQgKVxuICAgICAgICAuZGVsYXkoIG9wdC5kZWxheSApXG4gICAgICAgIC5lYXNpbmcoIFR3ZWVuLkVhc2luZ1tvcHQuZWFzaW5nLnNwbGl0KFwiLlwiKVswXV1bb3B0LmVhc2luZy5zcGxpdChcIi5cIilbMV1dIClcbiAgICAgICAgXG4gICAgICAgIHR3ZWVuLmlkID0gdGlkO1xuICAgICAgICB0d2Vlbi5zdGFydCgpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGFuaW1hdGUoKSB7XG5cbiAgICAgICAgICAgIGlmICggdHdlZW4uX2lzQ29tcGxldGVlZCB8fCB0d2Vlbi5faXNTdG9wZWQgKSB7XG4gICAgICAgICAgICAgICAgdHdlZW4gPSBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZWdpc3RGcmFtZSh7XG4gICAgICAgICAgICAgICAgaWQ6IHRpZCxcbiAgICAgICAgICAgICAgICB0YXNrOiBhbmltYXRlLFxuICAgICAgICAgICAgICAgIGRlc2M6IG9wdC5kZXNjLFxuICAgICAgICAgICAgICAgIHR3ZWVuOiB0d2VlblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGFuaW1hdGUoKTtcblxuICAgIH07XG4gICAgcmV0dXJuIHR3ZWVuO1xufTtcbi8qXG4gKiBAcGFyYW0gdHdlZW5cbiAqIEByZXN1bHQgdm9pZCgwKVxuICovXG5mdW5jdGlvbiBkZXN0cm95VHdlZW4odHdlZW4gLCBtc2cpIHtcbiAgICB0d2Vlbi5zdG9wKCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgcmVnaXN0RnJhbWU6IHJlZ2lzdEZyYW1lLFxuICAgIGRlc3Ryb3lGcmFtZTogZGVzdHJveUZyYW1lLFxuICAgIHJlZ2lzdFR3ZWVuOiByZWdpc3RUd2VlbixcbiAgICBkZXN0cm95VHdlZW46IGRlc3Ryb3lUd2VlblxufTsiLCIvKipcbiAqIENhbnZheFxuICpcbiAqIEBhdXRob3Ig6YeK5YmRICjmnY7mtpssIGxpdGFvLmx0QGFsaWJhYmEtaW5jLmNvbSlcbiAqXG4gKiDlsZ7mgKflt6XljoLvvIxpZeS4i+mdoueUqFZCU+aPkOS+m+aUr+aMgVxuICog5p2l57uZ5pW05Liq5byV5pOO5o+Q5L6b5b+D6Lez5YyF55qE6Kem5Y+R5py65Yi2XG4gKi9cbmltcG9ydCBfIGZyb20gXCIuLi91dGlscy91bmRlcnNjb3JlXCI7XG5cbi8v5a6a5LmJ5bCB6KOF5aW955qE5YW85a655aSn6YOo5YiG5rWP6KeI5Zmo55qEZGVmaW5lUHJvcGVydGllcyDnmoQg5bGe5oCn5bel5Y6CXG52YXIgdW53YXRjaE9uZSA9IHtcbiAgICBcIiRza2lwQXJyYXlcIiA6IDAsXG4gICAgXCIkd2F0Y2hcIiAgICAgOiAxLFxuICAgIFwiJGZpcmVcIiAgICAgIDogMiwvL+S4u+imgeaYr2dldCBzZXQg5pi+5oCn6K6+572u55qEIOinpuWPkVxuICAgIFwiJG1vZGVsXCIgICAgIDogMyxcbiAgICBcIiRhY2Nlc3NvclwiICA6IDQsXG4gICAgXCIkb3duZXJcIiAgICAgOiA1LFxuICAgIC8vXCJwYXRoXCIgICAgICAgOiA2LCAvL+i/meS4quW6lOivpeaYr+WUr+S4gOS4gOS4quS4jeeUqHdhdGNo55qE5LiN5bimJOeahOaIkOWRmOS6huWQp++8jOWboOS4uuWcsOWbvuetieeahHBhdGjmmK/lnKjlpKrlpKdcbiAgICBcIiRwYXJlbnRcIiAgICA6IDcgIC8v55So5LqO5bu656uL5pWw5o2u55qE5YWz57O76ZO+XG59XG5cbmZ1bmN0aW9uIE9ic2VydmUoc2NvcGUsIG1vZGVsLCB3YXRjaE1vcmUpIHtcblxuICAgIHZhciBzdG9wUmVwZWF0QXNzaWduPXRydWU7XG5cbiAgICB2YXIgc2tpcEFycmF5ID0gc2NvcGUuJHNraXBBcnJheSwgLy/opoHlv73nlaXnm5HmjqfnmoTlsZ7mgKflkI3liJfooahcbiAgICAgICAgcG1vZGVsID0ge30sIC8v6KaB6L+U5Zue55qE5a+56LGhXG4gICAgICAgIGFjY2Vzc29yZXMgPSB7fSwgLy/lhoXpg6jnlKjkuo7ovazmjaLnmoTlr7nosaFcbiAgICAgICAgVkJQdWJsaWNzID0gXy5rZXlzKCB1bndhdGNoT25lICk7IC8v55So5LqOSUU2LThcblxuICAgICAgICBtb2RlbCA9IG1vZGVsIHx8IHt9Oy8v6L+Z5pivcG1vZGVs5LiK55qEJG1vZGVs5bGe5oCnXG4gICAgICAgIHdhdGNoTW9yZSA9IHdhdGNoTW9yZSB8fCB7fTsvL+S7pSTlvIDlpLTkvYbopoHlvLrliLbnm5HlkKznmoTlsZ7mgKdcbiAgICAgICAgc2tpcEFycmF5ID0gXy5pc0FycmF5KHNraXBBcnJheSkgPyBza2lwQXJyYXkuY29uY2F0KFZCUHVibGljcykgOiBWQlB1YmxpY3M7XG5cbiAgICBmdW5jdGlvbiBsb29wKG5hbWUsIHZhbCkge1xuICAgICAgICBpZiAoICF1bndhdGNoT25lW25hbWVdIHx8ICh1bndhdGNoT25lW25hbWVdICYmIG5hbWUuY2hhckF0KDApICE9PSBcIiRcIikgKSB7XG4gICAgICAgICAgICBtb2RlbFtuYW1lXSA9IHZhbFxuICAgICAgICB9O1xuICAgICAgICB2YXIgdmFsdWVUeXBlID0gdHlwZW9mIHZhbDtcbiAgICAgICAgaWYgKHZhbHVlVHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBpZighdW53YXRjaE9uZVtuYW1lXSl7XG4gICAgICAgICAgICAgIFZCUHVibGljcy5wdXNoKG5hbWUpIC8v5Ye95pWw5peg6ZyA6KaB6L2s5o2iXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoXy5pbmRleE9mKHNraXBBcnJheSxuYW1lKSAhPT0gLTEgfHwgKG5hbWUuY2hhckF0KDApID09PSBcIiRcIiAmJiAhd2F0Y2hNb3JlW25hbWVdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBWQlB1YmxpY3MucHVzaChuYW1lKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGFjY2Vzc29yID0gZnVuY3Rpb24obmVvKSB7IC8v5Yib5bu655uR5o6n5bGe5oCn5oiW5pWw57uE77yM6Ieq5Y+Y6YeP77yM55Sx55So5oi36Kem5Y+R5YW25pS55Y+YXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gYWNjZXNzb3IudmFsdWUsIHByZVZhbHVlID0gdmFsdWUsIGNvbXBsZXhWYWx1ZTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAvL+WGmeaTjeS9nFxuICAgICAgICAgICAgICAgICAgICAvL3NldCDnmoQg5YC855qEIOexu+Wei1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmVvVHlwZSA9IHR5cGVvZiBuZW87XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0b3BSZXBlYXRBc3NpZ24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvL+mYu+atoumHjeWkjei1i+WAvFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gbmVvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggbmVvICYmIG5lb1R5cGUgPT09IFwib2JqZWN0XCIgJiYgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIShuZW8gaW5zdGFuY2VvZiBBcnJheSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhbmVvLmFkZENvbG9yU3RvcCAvLyBuZW8gaW5zdGFuY2VvZiBDYW52YXNHcmFkaWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBuZW8uJG1vZGVsID8gbmVvIDogT2JzZXJ2ZShuZW8gLCBuZW8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXhWYWx1ZSA9IHZhbHVlLiRtb2RlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7Ly/lpoLmnpzmmK/lhbbku5bmlbDmja7nsbvlnotcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmKCBuZW9UeXBlID09PSBcImFycmF5XCIgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICB2YWx1ZSA9IF8uY2xvbmUobmVvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL30gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbmVvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy99XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3Nvci52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxbbmFtZV0gPSBjb21wbGV4VmFsdWUgPyBjb21wbGV4VmFsdWUgOiB2YWx1ZTsvL+abtOaWsCRtb2RlbOS4reeahOWAvFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21wbGV4VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbW9kZWwuJGZpcmUgJiYgcG1vZGVsLiRmaXJlKG5hbWUsIHZhbHVlLCBwcmVWYWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbHVlVHlwZSAhPSBuZW9UeXBlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WmguaenHNldOeahOWAvOexu+Wei+W3sue7j+aUueWPmO+8jFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v6YKj5LmI5Lmf6KaB5oqK5a+55bqU55qEdmFsdWVUeXBl5L+u5pS55Li65a+55bqU55qEbmVvVHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlVHlwZSA9IG5lb1R5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFzV2F0Y2hNb2RlbCA9IHBtb2RlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8v5omA5pyJ55qE6LWL5YC86YO96KaB6Kem5Y+Rd2F0Y2jnmoTnm5HlkKzkuovku7ZcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIXBtb2RlbC4kd2F0Y2ggKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKCBoYXNXYXRjaE1vZGVsLiRwYXJlbnQgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzV2F0Y2hNb2RlbCA9IGhhc1dhdGNoTW9kZWwuJHBhcmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBoYXNXYXRjaE1vZGVsLiR3YXRjaCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzV2F0Y2hNb2RlbC4kd2F0Y2guY2FsbChoYXNXYXRjaE1vZGVsICwgbmFtZSwgdmFsdWUsIHByZVZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8v6K+75pON5L2cXG4gICAgICAgICAgICAgICAgICAgIC8v6K+755qE5pe25YCZ77yM5Y+R546wdmFsdWXmmK/kuKpvYmrvvIzogIzkuJTov5jmsqHmnIlkZWZpbmVQcm9wZXJ0eVxuICAgICAgICAgICAgICAgICAgICAvL+mCo+S5iOWwseS4tOaXtmRlZmluZVByb3BlcnR55LiA5qyhXG4gICAgICAgICAgICAgICAgICAgIGlmICggdmFsdWUgJiYgKHZhbHVlVHlwZSA9PT0gXCJvYmplY3RcIikgXG4gICAgICAgICAgICAgICAgICAgICAgICYmICEodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkgXG4gICAgICAgICAgICAgICAgICAgICAgICYmICF2YWx1ZS4kbW9kZWxcbiAgICAgICAgICAgICAgICAgICAgICAgJiYgIXZhbHVlLmFkZENvbG9yU3RvcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy/lu7rnq4vlkozniLbmlbDmja7oioLngrnnmoTlhbPns7tcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLiRwYXJlbnQgPSBwbW9kZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IE9ic2VydmUodmFsdWUgLCB2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWNjZXNzb3IudmFsdWUg6YeN5paw5aSN5Yi25Li6ZGVmaW5lUHJvcGVydHnov4flkI7nmoTlr7nosaFcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc29yLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhY2Nlc3Nvci52YWx1ZSA9IHZhbDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYWNjZXNzb3Jlc1tuYW1lXSA9IHtcbiAgICAgICAgICAgICAgICBzZXQ6IGFjY2Vzc29yLFxuICAgICAgICAgICAgICAgIGdldDogYWNjZXNzb3IsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBcbiAgICBmb3IgKHZhciBpIGluIHNjb3BlKSB7XG4gICAgICAgIGxvb3AoaSwgc2NvcGVbaV0pXG4gICAgfTtcblxuICAgIHBtb2RlbCA9IGRlZmluZVByb3BlcnRpZXMocG1vZGVsLCBhY2Nlc3NvcmVzLCBWQlB1YmxpY3MpOy8v55Sf5oiQ5LiA5Liq56m655qEVmlld01vZGVsXG5cbiAgICBfLmZvckVhY2goVkJQdWJsaWNzLGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgaWYgKHNjb3BlW25hbWVdKSB7Ly/lhYjkuLrlh73mlbDnrYnkuI3ooqvnm5HmjqfnmoTlsZ7mgKfotYvlgLxcbiAgICAgICAgICAgIGlmKHR5cGVvZiBzY29wZVtuYW1lXSA9PSBcImZ1bmN0aW9uXCIgKXtcbiAgICAgICAgICAgICAgIHBtb2RlbFtuYW1lXSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICBzY29wZVtuYW1lXS5hcHBseSh0aGlzICwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICBwbW9kZWxbbmFtZV0gPSBzY29wZVtuYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcG1vZGVsLiRtb2RlbCA9IG1vZGVsO1xuICAgIHBtb2RlbC4kYWNjZXNzb3IgPSBhY2Nlc3NvcmVzO1xuXG4gICAgcG1vZGVsLmhhc093blByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgICByZXR1cm4gbmFtZSBpbiBwbW9kZWwuJG1vZGVsXG4gICAgfTtcblxuICAgIHN0b3BSZXBlYXRBc3NpZ24gPSBmYWxzZTtcblxuICAgIHJldHVybiBwbW9kZWxcbn1cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eVxuICAgIC8v5aaC5p6c5rWP6KeI5Zmo5LiN5pSv5oyBZWNtYTI2MnY155qET2JqZWN0LmRlZmluZVByb3BlcnRpZXPmiJbogIXlrZjlnKhCVUfvvIzmr5TlpoJJRThcbiAgICAvL+agh+WHhua1j+iniOWZqOS9v+eUqF9fZGVmaW5lR2V0dGVyX18sIF9fZGVmaW5lU2V0dGVyX1/lrp7njrBcbiAgICB0cnkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eSh7fSwgXCJfXCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBcInhcIlxuICAgICAgICB9KVxuICAgICAgICB2YXIgZGVmaW5lUHJvcGVydGllcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoXCJfX2RlZmluZUdldHRlcl9fXCIgaW4gT2JqZWN0KSB7XG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uKG9iaiwgcHJvcCwgZGVzYykge1xuICAgICAgICAgICAgICAgIGlmICgndmFsdWUnIGluIGRlc2MpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqW3Byb3BdID0gZGVzYy52YWx1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoJ2dldCcgaW4gZGVzYykge1xuICAgICAgICAgICAgICAgICAgICBvYmouX19kZWZpbmVHZXR0ZXJfXyhwcm9wLCBkZXNjLmdldClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCdzZXQnIGluIGRlc2MpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLl9fZGVmaW5lU2V0dGVyX18ocHJvcCwgZGVzYy5zZXQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvYmpcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24ob2JqLCBkZXNjcykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gZGVzY3MpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlc2NzLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIGRlc2NzW3Byb3BdKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvYmpcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4vL0lFNi045L2/55SoVkJTY3JpcHTnsbvnmoRzZXQgZ2V06K+t5Y+l5a6e546wXG5pZiAoIWRlZmluZVByb3BlcnRpZXMgJiYgd2luZG93LlZCQXJyYXkpIHtcbiAgICB3aW5kb3cuZXhlY1NjcmlwdChbXG4gICAgICAgICAgICBcIkZ1bmN0aW9uIHBhcnNlVkIoY29kZSlcIixcbiAgICAgICAgICAgIFwiXFx0RXhlY3V0ZUdsb2JhbChjb2RlKVwiLFxuICAgICAgICAgICAgXCJFbmQgRnVuY3Rpb25cIlxuICAgICAgICAgICAgXS5qb2luKFwiXFxuXCIpLCBcIlZCU2NyaXB0XCIpO1xuXG4gICAgZnVuY3Rpb24gVkJNZWRpYXRvcihkZXNjcmlwdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGZuID0gZGVzY3JpcHRpb25bbmFtZV0gJiYgZGVzY3JpcHRpb25bbmFtZV0uc2V0O1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgZm4odmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZuKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbihwdWJsaWNzLCBkZXNjcmlwdGlvbiwgYXJyYXkpIHtcbiAgICAgICAgcHVibGljcyA9IGFycmF5LnNsaWNlKDApO1xuICAgICAgICBwdWJsaWNzLnB1c2goXCJoYXNPd25Qcm9wZXJ0eVwiKTtcbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9IFwiVkJDbGFzc1wiICsgc2V0VGltZW91dChcIjFcIiksIG93bmVyID0ge30sIGJ1ZmZlciA9IFtdO1xuICAgICAgICBidWZmZXIucHVzaChcbiAgICAgICAgICAgICAgICBcIkNsYXNzIFwiICsgY2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgIFwiXFx0UHJpdmF0ZSBbX19kYXRhX19dLCBbX19wcm94eV9fXVwiLFxuICAgICAgICAgICAgICAgIFwiXFx0UHVibGljIERlZmF1bHQgRnVuY3Rpb24gW19fY29uc3RfX10oZCwgcClcIixcbiAgICAgICAgICAgICAgICBcIlxcdFxcdFNldCBbX19kYXRhX19dID0gZDogc2V0IFtfX3Byb3h5X19dID0gcFwiLFxuICAgICAgICAgICAgICAgIFwiXFx0XFx0U2V0IFtfX2NvbnN0X19dID0gTWVcIiwgLy/pk77lvI/osIPnlKhcbiAgICAgICAgICAgICAgICBcIlxcdEVuZCBGdW5jdGlvblwiKTtcbiAgICAgICAgXy5mb3JFYWNoKHB1YmxpY3MsZnVuY3Rpb24obmFtZSkgeyAvL+a3u+WKoOWFrOWFseWxnuaApyzlpoLmnpzmraTml7bkuI3liqDku6XlkI7lsLHmsqHmnLrkvJrkuoZcbiAgICAgICAgICAgIGlmIChvd25lcltuYW1lXSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIG93bmVyW25hbWVdID0gdHJ1ZSAvL+WboOS4ulZCU2NyaXB05a+56LGh5LiN6IO95YOPSlPpgqPmoLfpmo/mhI/lop7liKDlsZ7mgKdcbiAgICAgICAgICAgIGJ1ZmZlci5wdXNoKFwiXFx0UHVibGljIFtcIiArIG5hbWUgKyBcIl1cIikgLy/kvaDlj6/ku6XpooTlhYjmlL7liLBza2lwQXJyYXnkuK1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIG93bmVyW25hbWVdID0gdHJ1ZVxuICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgLy/nlLHkuo7kuI3nn6Xlr7nmlrnkvJrkvKDlhaXku4DkuYgs5Zug5q2kc2V0LCBsZXTpg73nlKjkuIpcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXFx0UHVibGljIFByb3BlcnR5IExldCBbXCIgKyBuYW1lICsgXCJdKHZhbClcIiwgLy9zZXR0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXFx0XFx0Q2FsbCBbX19wcm94eV9fXShbX19kYXRhX19dLCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLCB2YWwpXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlxcdEVuZCBQcm9wZXJ0eVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJcXHRQdWJsaWMgUHJvcGVydHkgU2V0IFtcIiArIG5hbWUgKyBcIl0odmFsKVwiLCAvL3NldHRlclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJcXHRcXHRDYWxsIFtfX3Byb3h5X19dKFtfX2RhdGFfX10sIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIsIHZhbClcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXFx0RW5kIFByb3BlcnR5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlxcdFB1YmxpYyBQcm9wZXJ0eSBHZXQgW1wiICsgbmFtZSArIFwiXVwiLCAvL2dldHRlclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJcXHRPbiBFcnJvciBSZXN1bWUgTmV4dFwiLCAvL+W/hemhu+S8mOWFiOS9v+eUqHNldOivreWPpSzlkKbliJnlroPkvJror6/lsIbmlbDnu4TlvZPlrZfnrKbkuLLov5Tlm55cbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXFx0XFx0U2V0W1wiICsgbmFtZSArIFwiXSA9IFtfX3Byb3h5X19dKFtfX2RhdGFfX10sXFxcIlwiICsgbmFtZSArIFwiXFxcIilcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXFx0SWYgRXJyLk51bWJlciA8PiAwIFRoZW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXFx0XFx0W1wiICsgbmFtZSArIFwiXSA9IFtfX3Byb3h5X19dKFtfX2RhdGFfX10sXFxcIlwiICsgbmFtZSArIFwiXFxcIilcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXFx0RW5kIElmXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlxcdE9uIEVycm9yIEdvdG8gMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJcXHRFbmQgUHJvcGVydHlcIilcbiAgICAgICAgfVxuICAgICAgICBidWZmZXIucHVzaChcIkVuZCBDbGFzc1wiKTsgLy/nsbvlrprkuYnlrozmr5VcbiAgICAgICAgYnVmZmVyLnB1c2goXG4gICAgICAgICAgICAgICAgXCJGdW5jdGlvbiBcIiArIGNsYXNzTmFtZSArIFwiRmFjdG9yeShhLCBiKVwiLCAvL+WIm+W7uuWunuS+i+W5tuS8oOWFpeS4pOS4quWFs+mUrueahOWPguaVsFxuICAgICAgICAgICAgICAgIFwiXFx0RGltIG9cIixcbiAgICAgICAgICAgICAgICBcIlxcdFNldCBvID0gKE5ldyBcIiArIGNsYXNzTmFtZSArIFwiKShhLCBiKVwiLFxuICAgICAgICAgICAgICAgIFwiXFx0U2V0IFwiICsgY2xhc3NOYW1lICsgXCJGYWN0b3J5ID0gb1wiLFxuICAgICAgICAgICAgICAgIFwiRW5kIEZ1bmN0aW9uXCIpO1xuICAgICAgICB3aW5kb3cucGFyc2VWQihidWZmZXIuam9pbihcIlxcclxcblwiKSk7Ly/lhYjliJvlu7rkuIDkuKpWQuexu+W3peWOglxuICAgICAgICByZXR1cm4gIHdpbmRvd1tjbGFzc05hbWUgKyBcIkZhY3RvcnlcIl0oZGVzY3JpcHRpb24sIFZCTWVkaWF0b3IpOy8v5b6X5Yiw5YW25Lqn5ZOBXG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgT2JzZXJ2ZTtcblxuIiwiXG5leHBvcnQgY29uc3QgVkVSU0lPTiA9IF9fVkVSU0lPTl9fO1xuXG5leHBvcnQgY29uc3QgUElfMiA9IE1hdGguUEkgKiAyO1xuXG5leHBvcnQgY29uc3QgUkFEX1RPX0RFRyA9IDE4MCAvIE1hdGguUEk7XG5cbmV4cG9ydCBjb25zdCBERUdfVE9fUkFEID0gTWF0aC5QSSAvIDE4MDtcblxuZXhwb3J0IGNvbnN0IFJFTkRFUkVSX1RZUEUgPSB7XG4gICAgVU5LTk9XTjogICAgMCxcbiAgICBXRUJHTDogICAgICAxLFxuICAgIENBTlZBUzogICAgIDIsXG59O1xuXG5leHBvcnQgY29uc3QgRFJBV19NT0RFUyA9IHtcbiAgICBQT0lOVFM6ICAgICAgICAgMCxcbiAgICBMSU5FUzogICAgICAgICAgMSxcbiAgICBMSU5FX0xPT1A6ICAgICAgMixcbiAgICBMSU5FX1NUUklQOiAgICAgMyxcbiAgICBUUklBTkdMRVM6ICAgICAgNCxcbiAgICBUUklBTkdMRV9TVFJJUDogNSxcbiAgICBUUklBTkdMRV9GQU46ICAgNixcbn07XG5cbmV4cG9ydCBjb25zdCBTSEFQRVMgPSB7XG4gICAgUE9MWTogMCxcbiAgICBSRUNUOiAxLFxuICAgIENJUkM6IDIsXG4gICAgRUxJUDogMyxcbiAgICBSUkVDOiA0LFxufTtcblxuZXhwb3J0IGNvbnN0IFNDQUxFX01PREVTID0ge1xuICAgIExJTkVBUjogICAgIDAsXG4gICAgTkVBUkVTVDogICAgMSxcbn07XG5cbmV4cG9ydCBjb25zdCBDT05URVhUX0RFRkFVTFQgPSB7XG4gICAgd2lkdGggICAgICAgICA6IDAsXG4gICAgaGVpZ2h0ICAgICAgICA6IDAsXG4gICAgeCAgICAgICAgICAgICA6IDAsXG4gICAgeSAgICAgICAgICAgICA6IDAsXG4gICAgc2NhbGVYICAgICAgICA6IDEsXG4gICAgc2NhbGVZICAgICAgICA6IDEsXG4gICAgc2NhbGVPcmlnaW4gICA6IHtcbiAgICAgICAgeCA6IDAsXG4gICAgICAgIHkgOiAwXG4gICAgfSxcbiAgICByb3RhdGlvbiAgICAgIDogMCxcbiAgICByb3RhdGVPcmlnaW4gIDogIHtcbiAgICAgICAgeCA6IDAsXG4gICAgICAgIHkgOiAwXG4gICAgfSxcbiAgICB2aXNpYmxlICAgICAgIDogdHJ1ZSxcbiAgICBnbG9iYWxBbHBoYSAgIDogMSxcblxuICAgIC8vc2hhcGUg5omN6ZyA6KaB55So5Yiw77yMIOW3sue7j+i/geenu+WIsHNoYXBl5Lit5Y675LqG77yM6L+Z6YeM5YWI5rOo6YeK5o6JXG4gICAgLypcbiAgICBjdXJzb3IgICAgICAgIDogXCJkZWZhdWx0XCIsXG5cbiAgICBmaWxsQWxwaGEgICAgIDogMSwvL2NvbnRleHQyZOmHjOayoeacie+8jOiHquWumuS5iVxuICAgIGZpbGxTdHlsZSAgICAgOiBudWxsLC8vXCIjMDAwMDAwXCIsXG5cbiAgICBsaW5lQ2FwICAgICAgIDogbnVsbCwvL+m7mOiupOmDveaYr+ebtOinklxuICAgIGxpbmVKb2luICAgICAgOiBudWxsLC8v6L+Z5Lik5Liq55uu5YmNd2ViZ2zph4zpnaLmsqHlrp7njrBcbiAgICBtaXRlckxpbWl0ICAgIDogbnVsbCwvL21pdGVyTGltaXQg5bGe5oCn6K6+572u5oiW6L+U5Zue5pyA5aSn5pac5o6l6ZW/5bqmLOWPquacieW9kyBsaW5lSm9pbiDlsZ7mgKfkuLogXCJtaXRlclwiIOaXtu+8jG1pdGVyTGltaXQg5omN5pyJ5pWI44CCXG5cbiAgICBsaW5lQWxwaGEgICAgIDogMSwvL2NvbnRleHQyZOmHjOayoeacie+8jOiHquWumuS5iVxuICAgIHN0cm9rZVN0eWxlICAgOiBudWxsLFxuICAgIGxpbmVUeXBlICAgICAgOiBcInNvbGlkXCIsIC8vY29udGV4dDJk6YeM5rKh5pyJ77yM6Ieq5a6a5LmJ57q/5p2h55qEdHlwZe+8jOm7mOiupOS4uuWunue6v1xuICAgIGxpbmVXaWR0aCAgICAgOiBudWxsLFxuICAgICovXG4gICAgXG4gICAgXG4gICAgLy/msqHnlKjliLDnmoTmmoLml7bkuI3nlKhcbiAgICAvL3NoYWRvd0JsdXIgICAgOiBudWxsLFxuICAgIC8vc2hhZG93Q29sb3IgICA6IG51bGwsXG4gICAgLy9zaGFkb3dPZmZzZXRYIDogbnVsbCxcbiAgICAvL3NoYWRvd09mZnNldFkgOiBudWxsLFxuICAgIFxuICAgIC8vZm9udCAgICAgICAgICA6IG51bGwsXG4gICAgLy90ZXh0QWxpZ24gICAgIDogXCJsZWZ0XCIsXG4gICAgLy90ZXh0QmFzZWxpbmUgIDogXCJ0b3BcIiwgXG4gICAgLy9hcmNTY2FsZVhfICAgIDogbnVsbCxcbiAgICAvL2FyY1NjYWxlWV8gICAgOiBudWxsLFxuICAgIC8vbGluZVNjYWxlXyAgICA6IG51bGwsXG4gICAgXG4gICAgLy9nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gOiBudWxsXG5cbn07XG5leHBvcnQgY29uc3QgU0hBUEVfQ09OVEVYVF9ERUZBVUxUID0ge1xuICAgIGN1cnNvciAgICAgICAgOiBcImRlZmF1bHRcIixcblxuICAgIGZpbGxBbHBoYSAgICAgOiAxLC8vY29udGV4dDJk6YeM5rKh5pyJ77yM6Ieq5a6a5LmJXG4gICAgZmlsbFN0eWxlICAgICA6IG51bGwsLy9cIiMwMDAwMDBcIixcblxuICAgIGxpbmVDYXAgICAgICAgOiBudWxsLC8v6buY6K6k6YO95piv55u06KeSXG4gICAgbGluZUpvaW4gICAgICA6IG51bGwsLy/ov5nkuKTkuKrnm67liY13ZWJnbOmHjOmdouayoeWunueOsFxuICAgIG1pdGVyTGltaXQgICAgOiBudWxsLC8vbWl0ZXJMaW1pdCDlsZ7mgKforr7nva7miJbov5Tlm57mnIDlpKfmlpzmjqXplb/luqYs5Y+q5pyJ5b2TIGxpbmVKb2luIOWxnuaAp+S4uiBcIm1pdGVyXCIg5pe277yMbWl0ZXJMaW1pdCDmiY3mnInmlYjjgIJcblxuICAgIGxpbmVBbHBoYSAgICAgOiAxLC8vY29udGV4dDJk6YeM5rKh5pyJ77yM6Ieq5a6a5LmJXG4gICAgc3Ryb2tlU3R5bGUgICA6IG51bGwsXG4gICAgbGluZVR5cGUgICAgICA6IFwic29saWRcIiwgLy9jb250ZXh0MmTph4zmsqHmnInvvIzoh6rlrprkuYnnur/mnaHnmoR0eXBl77yM6buY6K6k5Li65a6e57q/XG4gICAgbGluZVdpZHRoICAgICA6IG51bGxcbn1cblxuXG5cbiIsIi8qKlxuICogQ2FudmF4XG4gKlxuICogQGF1dGhvciDph4rliZEgKOadjua2mywgbGl0YW8ubHRAYWxpYmFiYS1pbmMuY29tKVxuICpcbiAqIOaooeaLn2FzMyBEaXNwbGF5TGlzdCDnmoQg546w5a6e5a+56LGh5Z+657G7XG4gKi9cbmltcG9ydCBfIGZyb20gXCIuLi91dGlscy91bmRlcnNjb3JlXCI7XG5pbXBvcnQgRXZlbnREaXNwYXRjaGVyIGZyb20gXCIuLi9ldmVudC9FdmVudERpc3BhdGNoZXJcIjtcbmltcG9ydCBNYXRyaXggZnJvbSBcIi4uL2dlb20vTWF0cml4XCI7XG5pbXBvcnQgUG9pbnQgZnJvbSBcIi4vUG9pbnRcIjtcbmltcG9ydCBVdGlscyBmcm9tIFwiLi4vdXRpbHMvaW5kZXhcIjtcbmltcG9ydCBBbmltYXRpb25GcmFtZSBmcm9tIFwiLi4vYW5pbWF0aW9uL0FuaW1hdGlvbkZyYW1lXCI7XG5pbXBvcnQgT2JzZXJ2ZSBmcm9tIFwiLi4vdXRpbHMvb2JzZXJ2ZVwiO1xuaW1wb3J0IHtDT05URVhUX0RFRkFVTFR9IGZyb20gXCIuLi9jb25zdFwiXG5cbnZhciBEaXNwbGF5T2JqZWN0ID0gZnVuY3Rpb24ob3B0KXtcbiAgICBEaXNwbGF5T2JqZWN0LnN1cGVyY2xhc3MuY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIC8v5aaC5p6c55So5oi35rKh5pyJ5Lyg5YWlY29udGV4dOiuvue9ru+8jOWwsem7mOiupOS4uuepuueahOWvueixoVxuICAgIG9wdCAgICAgID0gVXRpbHMuY2hlY2tPcHQoIG9wdCApO1xuXG4gICAgLy/nm7jlr7nniLbnuqflhYPntKDnmoTnn6npmLVcbiAgICB0aGlzLl90cmFuc2Zvcm0gICAgICA9IG51bGw7XG5cbiAgICAvL+W/g+i3s+asoeaVsFxuICAgIHRoaXMuX2hlYXJ0QmVhdE51bSAgID0gMDtcblxuICAgIC8v5YWD57Sg5a+55bqU55qEc3RhZ2XlhYPntKBcbiAgICB0aGlzLnN0YWdlICAgICAgICAgICA9IG51bGw7XG5cbiAgICAvL+WFg+e0oOeahOeItuWFg+e0oFxuICAgIHRoaXMucGFyZW50ICAgICAgICAgID0gbnVsbDtcblxuICAgIHRoaXMuX2V2ZW50RW5hYmxlZCAgID0gZmFsc2U7ICAgLy/mmK/lkKblk43lupTkuovku7bkuqTkupIs5Zyo5re75Yqg5LqG5LqL5Lu25L6m5ZCs5ZCO5Lya6Ieq5Yqo6K6+572u5Li6dHJ1ZVxuXG4gICAgdGhpcy5kcmFnRW5hYmxlZCAgICAgPSB0cnVlIDsvL1wiZHJhZ0VuYWJsZWRcIiBpbiBvcHQgPyBvcHQuZHJhZ0VuYWJsZWQgOiBmYWxzZTsgICAvL+aYr+WQpuWQr+eUqOWFg+e0oOeahOaLluaLvVxuXG4gICAgdGhpcy54eVRvSW50ICAgICAgICAgPSBcInh5VG9JbnRcIiBpbiBvcHQgPyBvcHQueHlUb0ludCA6IHRydWU7ICAgIC8v5piv5ZCm5a+5eHnlnZDmoIfnu5/kuIBpbnTlpITnkIbvvIzpu5jorqTkuLp0cnVl77yM5L2G5piv5pyJ55qE5pe25YCZ5Y+v5Lul55Sx5aSW55WM55So5oi35omL5Yqo5oyH5a6a5piv5ZCm6ZyA6KaB6K6h566X5Li6aW5077yM5Zug5Li65pyJ55qE5pe25YCZ5LiN6K6h566X5q+U6L6D5aW977yM5q+U5aaC77yM6L+b5bqm5Zu+6KGo5Lit77yM5YaNc2VjdG9y55qE5Lik56uv5re75Yqg5Lik5Liq5ZyG5p2l5YGa5ZyG6KeS55qE6L+b5bqm5p2h55qE5pe25YCZ77yM5ZyGY2lyY2xl5LiN5YGaaW506K6h566X77yM5omN6IO95ZKMc2VjdG9y5pu05aW955qE6KGU5o6lXG5cbiAgICB0aGlzLm1vdmVpbmcgICAgICAgICA9IGZhbHNlOyAvL+WmguaenOWFg+e0oOWcqOacgOi9qOmBk+i/kOWKqOS4reeahOaXtuWAme+8jOacgOWlveaKiui/meS4quiuvue9ruS4unRydWXvvIzov5nmoLfog73kv53or4Hovajov7nnmoTkuJ3mkKzpobrmu5HvvIzlkKbliJnlm6DkuLp4eVRvSW5055qE5Y6f5Zug77yM5Lya5pyJ6Lez6LeDXG5cbiAgICAvL+WIm+W7uuWlvWNvbnRleHRcbiAgICB0aGlzLl9jcmVhdGVDb250ZXh0KCBvcHQgKTtcblxuICAgIHRoaXMuaWQgPSBVdGlscy5jcmVhdGVJZCh0aGlzLnR5cGUgfHwgXCJkaXNwbGF5T2JqZWN0XCIpO1xuXG4gICAgdGhpcy5pbml0LmFwcGx5KHRoaXMgLCBhcmd1bWVudHMpO1xuXG4gICAgLy/miYDmnInlsZ7mgKflh4blpIflpb3kuoblkI7vvIzlhYjopoHorqHnrpfkuIDmrKF0aGlzLl91cGRhdGVUcmFuc2Zvcm0oKeW+l+WIsF90YW5zZm9ybVxuICAgIHRoaXMuX3VwZGF0ZVRyYW5zZm9ybSgpO1xufTtcblxuVXRpbHMuY3JlYXRDbGFzcyggRGlzcGxheU9iamVjdCAsIEV2ZW50RGlzcGF0Y2hlciAsIHtcbiAgICBpbml0IDogZnVuY3Rpb24oKXt9LFxuICAgIF9jcmVhdGVDb250ZXh0IDogZnVuY3Rpb24oIG9wdCApe1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIC8v5omA5pyJ5pi+56S65a+56LGh77yM6YO95pyJ5LiA5Liq57G75Ly8Y2FudmFzLmNvbnRleHTnsbvkvLznmoQgY29udGV4dOWxnuaAp1xuICAgICAgICAvL+eUqOadpeWtmOWPluaUueaYvuekuuWvueixoeaJgOacieWSjOaYvuekuuacieWFs+eahOWxnuaAp++8jOWdkOagh++8jOagt+W8j+etieOAglxuICAgICAgICAvL+ivpeWvueixoeS4ukNvZXIuT2JzZXJ2ZSgp5bel5Y6C5Ye95pWw55Sf5oiQXG4gICAgICAgIHNlbGYuY29udGV4dCA9IG51bGw7XG5cbiAgICAgICAgLy/mj5Dkvpvnu5lDb2VyLk9ic2VydmUoKSDmnaUg57uZIHNlbGYuY29udGV4dCDorr7nva4gcHJvcGVydHlzXG4gICAgICAgIC8v6L+Z6YeM5LiN6IO955SoXy5leHRlbmTvvIwg5Zug5Li66KaB5L+d6K+BX2NvbnRleHRBVFRSU+eahOe6r+eyue+8jOWPquimhuebluS4i+mdouW3suacieeahOWxnuaAp1xuICAgICAgICB2YXIgX2NvbnRleHRBVFRSUyA9IF8uZXh0ZW5kKCBfLmNsb25lKENPTlRFWFRfREVGQVVMVCksIG9wdC5jb250ZXh0ICwgdHJ1ZSk7XG5cbiAgICAgICAgLy/mnInkupvlvJXmk47lhoXpg6jorr7nva5jb250ZXh05bGe5oCn55qE5pe25YCZ5piv5LiN55So5LiK5oql5b+D6Lez55qE77yM5q+U5aaC5YGa54Ot54K55qOA5rWL55qE5pe25YCZXG4gICAgICAgIHNlbGYuX25vdFdhdGNoID0gZmFsc2U7XG5cbiAgICAgICAgX2NvbnRleHRBVFRSUy4kb3duZXIgPSBzZWxmO1xuICAgICAgICBfY29udGV4dEFUVFJTLiR3YXRjaCA9IGZ1bmN0aW9uKG5hbWUgLCB2YWx1ZSAsIHByZVZhbHVlKXtcblxuICAgICAgICAgICAgLy/kuIvpnaLnmoTov5nkupvlsZ7mgKflj5jljJbvvIzpg73kvJrpnIDopoHph43mlrDnu4Tnu4fnn6npmLXlsZ7mgKcgX3RyYW5zZm9ybSBcbiAgICAgICAgICAgIHZhciB0cmFuc0Zvcm1Qcm9wcyA9IFsgXCJ4XCIgLCBcInlcIiAsIFwic2NhbGVYXCIgLCBcInNjYWxlWVwiICwgXCJyb3RhdGlvblwiICwgXCJzY2FsZU9yaWdpblwiICwgXCJyb3RhdGVPcmlnaW4sIGxpbmVXaWR0aFwiIF07XG5cbiAgICAgICAgICAgIGlmKCBfLmluZGV4T2YoIHRyYW5zRm9ybVByb3BzICwgbmFtZSApID49IDAgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kb3duZXIuX3VwZGF0ZVRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYoIHRoaXMuJG93bmVyLl9ub3RXYXRjaCApe1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmKCB0aGlzLiRvd25lci4kd2F0Y2ggKXtcbiAgICAgICAgICAgICAgICB0aGlzLiRvd25lci4kd2F0Y2goIG5hbWUgLCB2YWx1ZSAsIHByZVZhbHVlICk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLiRvd25lci5oZWFydEJlYXQoIHtcbiAgICAgICAgICAgICAgICBjb252ZXJ0VHlwZTpcImNvbnRleHRcIixcbiAgICAgICAgICAgICAgICBzaGFwZSAgICAgIDogdGhpcy4kb3duZXIsXG4gICAgICAgICAgICAgICAgbmFtZSAgICAgICA6IG5hbWUsXG4gICAgICAgICAgICAgICAgdmFsdWUgICAgICA6IHZhbHVlLFxuICAgICAgICAgICAgICAgIHByZVZhbHVlICAgOiBwcmVWYWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgfTtcblxuICAgICAgICAvL+aJp+ihjGluaXTkuYvliY3vvIzlupTor6XlsLHmoLnmja7lj4LmlbDvvIzmiopjb250ZXh057uE57uH5aW957q/XG4gICAgICAgIHNlbGYuY29udGV4dCA9IE9ic2VydmUoIF9jb250ZXh0QVRUUlMgKTtcbiAgICB9LFxuICAgIC8qIEBteXNlbGYg5piv5ZCm55Sf5oiQ6Ieq5bex55qE6ZWc5YOPIFxuICAgICAqIOWFi+mahuWPiOS4pOenje+8jOS4gOenjeaYr+mVnOWDj++8jOWPpuWkluS4gOenjeaYr+e7neWvueaEj+S5ieS4iumdoueahOaWsOS4quS9k1xuICAgICAqIOm7mOiupOS4uue7neWvueaEj+S5ieS4iumdoueahOaWsOS4quS9k++8jOaWsOWvueixoWlk5LiN6IO955u45ZCMXG4gICAgICog6ZWc5YOP5Z+65pys5LiK5piv5qGG5p625YaF6YOo5Zyo5a6e546wICDplZzlg4/nmoRpZOebuOWQjCDkuLvopoHnlKjmnaXmioroh6rlt7HnlLvliLDlj6blpJbnmoRzdGFnZemHjOmdou+8jOavlOWmglxuICAgICAqIG1vdXNlb3ZlcuWSjG1vdXNlb3V055qE5pe25YCZ6LCD55SoKi9cbiAgICBjbG9uZSA6IGZ1bmN0aW9uKCBteXNlbGYgKXtcbiAgICAgICAgdmFyIGNvbmYgICA9IHtcbiAgICAgICAgICAgIGlkICAgICAgOiB0aGlzLmlkLFxuICAgICAgICAgICAgY29udGV4dCA6IF8uY2xvbmUodGhpcy5jb250ZXh0LiRtb2RlbClcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgbmV3T2JqO1xuICAgICAgICBpZiggdGhpcy50eXBlID09ICd0ZXh0JyApe1xuICAgICAgICAgICAgbmV3T2JqID0gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMudGV4dCAsIGNvbmYgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld09iaiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKCBjb25mICk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXdPYmouaWQgPSBjb25mLmlkO1xuXG4gICAgICAgIGlmKCB0aGlzLmNoaWxkcmVuICl7XG4gICAgICAgICAgICBuZXdPYmouY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFteXNlbGYpe1xuICAgICAgICAgICAgbmV3T2JqLmlkID0gVXRpbHMuY3JlYXRlSWQobmV3T2JqLnR5cGUpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3T2JqO1xuICAgIH0sXG4gICAgaGVhcnRCZWF0IDogZnVuY3Rpb24ob3B0KXtcbiAgICAgICAgLy9zdGFnZeWtmOWcqO+8jOaJjeivtHNlbGbku6PooajnmoRkaXNwbGF55bey57uP6KKr5re75Yqg5Yiw5LqGZGlzcGxheUxpc3TkuK3vvIznu5jlm77lvJXmk47pnIDopoHnn6XpgZPlhbbmlLnlj5jlkI5cbiAgICAgICAgLy/nmoTlsZ7mgKfvvIzmiYDku6XvvIzpgJrnn6XliLBzdGFnZS5kaXNwbGF5QXR0ckhhc0NoYW5nZVxuICAgICAgICB2YXIgc3RhZ2UgPSB0aGlzLmdldFN0YWdlKCk7XG4gICAgICAgIGlmKCBzdGFnZSApe1xuICAgICAgICAgICAgdGhpcy5faGVhcnRCZWF0TnVtICsrO1xuICAgICAgICAgICAgc3RhZ2UuaGVhcnRCZWF0ICYmIHN0YWdlLmhlYXJ0QmVhdCggb3B0ICk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGdldEN1cnJlbnRXaWR0aCA6IGZ1bmN0aW9uKCl7XG4gICAgICAgcmV0dXJuIE1hdGguYWJzKHRoaXMuY29udGV4dC53aWR0aCAqIHRoaXMuY29udGV4dC5zY2FsZVgpO1xuICAgIH0sXG4gICAgZ2V0Q3VycmVudEhlaWdodCA6IGZ1bmN0aW9uKCl7XG4gICAgICAgcmV0dXJuIE1hdGguYWJzKHRoaXMuY29udGV4dC5oZWlnaHQgKiB0aGlzLmNvbnRleHQuc2NhbGVZKTtcbiAgICB9LFxuICAgIGdldFN0YWdlIDogZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoIHRoaXMuc3RhZ2UgKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFnZTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHAgPSB0aGlzO1xuICAgICAgICBpZiAocC50eXBlICE9IFwic3RhZ2VcIil7XG4gICAgICAgICAgd2hpbGUocC5wYXJlbnQpIHtcbiAgICAgICAgICAgIHAgPSBwLnBhcmVudDtcbiAgICAgICAgICAgIGlmIChwLnR5cGUgPT0gXCJzdGFnZVwiKXtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAocC50eXBlICE9PSBcInN0YWdlXCIpIHtcbiAgICAgICAgICAgIC8v5aaC5p6c5b6X5Yiw55qE6aG254K5ZGlzcGxheSDnmoR0eXBl5LiN5pivU3RhZ2Us5Lmf5bCx5piv6K+05LiN5pivc3RhZ2XlhYPntKBcbiAgICAgICAgICAgIC8v6YKj5LmI5Y+q6IO96K+05piO6L+Z5LiqcOaJgOS7o+ihqOeahOmhtuerr2Rpc3BsYXkg6L+Y5rKh5pyJ5re75Yqg5YiwZGlzcGxheUxpc3TkuK3vvIzkuZ/lsLHmmK/msqHmnInmsqHmt7vliqDliLBcbiAgICAgICAgICAgIC8vc3RhZ2XoiJ7lj7DnmoRjaGlsZGVu6Zif5YiX5Lit77yM5LiN5Zyo5byV5pOO5riy5p+T6IyD5Zu05YaFXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IFxuICAgICAgICAvL+S4gOebtOWbnua6r+WIsOmhtuWxgm9iamVjdO+8jCDljbPmmK9zdGFnZe+8jCBzdGFnZeeahHBhcmVudOS4um51bGxcbiAgICAgICAgdGhpcy5zdGFnZSA9IHA7XG4gICAgICAgIHJldHVybiBwO1xuICAgIH0sXG4gICAgbG9jYWxUb0dsb2JhbCA6IGZ1bmN0aW9uKCBwb2ludCAsIGNvbnRhaW5lciApe1xuICAgICAgICAhcG9pbnQgJiYgKCBwb2ludCA9IG5ldyBQb2ludCggMCAsIDAgKSApO1xuICAgICAgICB2YXIgY20gPSB0aGlzLmdldENvbmNhdGVuYXRlZE1hdHJpeCggY29udGFpbmVyICk7XG5cbiAgICAgICAgaWYgKGNtID09IG51bGwpIHJldHVybiBQb2ludCggMCAsIDAgKTtcbiAgICAgICAgdmFyIG0gPSBuZXcgTWF0cml4KDEsIDAsIDAsIDEsIHBvaW50LnggLCBwb2ludC55KTtcbiAgICAgICAgbS5jb25jYXQoY20pO1xuICAgICAgICByZXR1cm4gbmV3IFBvaW50KCBtLnR4ICwgbS50eSApOyAvL3t4Om0udHgsIHk6bS50eX07XG4gICAgfSxcbiAgICBnbG9iYWxUb0xvY2FsIDogZnVuY3Rpb24oIHBvaW50ICwgY29udGFpbmVyKSB7XG4gICAgICAgICFwb2ludCAmJiAoIHBvaW50ID0gbmV3IFBvaW50KCAwICwgMCApICk7XG5cbiAgICAgICAgaWYoIHRoaXMudHlwZSA9PSBcInN0YWdlXCIgKXtcbiAgICAgICAgICAgIHJldHVybiBwb2ludDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY20gPSB0aGlzLmdldENvbmNhdGVuYXRlZE1hdHJpeCggY29udGFpbmVyICk7XG5cbiAgICAgICAgaWYgKGNtID09IG51bGwpIHJldHVybiBuZXcgUG9pbnQoIDAgLCAwICk7IC8ve3g6MCwgeTowfTtcbiAgICAgICAgY20uaW52ZXJ0KCk7XG4gICAgICAgIHZhciBtID0gbmV3IE1hdHJpeCgxLCAwLCAwLCAxLCBwb2ludC54ICwgcG9pbnQueSk7XG4gICAgICAgIG0uY29uY2F0KGNtKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludCggbS50eCAsIG0udHkgKTsgLy97eDptLnR4LCB5Om0udHl9O1xuICAgIH0sXG4gICAgbG9jYWxUb1RhcmdldCA6IGZ1bmN0aW9uKCBwb2ludCAsIHRhcmdldCl7XG4gICAgICAgIHZhciBwID0gbG9jYWxUb0dsb2JhbCggcG9pbnQgKTtcbiAgICAgICAgcmV0dXJuIHRhcmdldC5nbG9iYWxUb0xvY2FsKCBwICk7XG4gICAgfSxcbiAgICBnZXRDb25jYXRlbmF0ZWRNYXRyaXggOiBmdW5jdGlvbiggY29udGFpbmVyICl7XG4gICAgICAgIHZhciBjbSA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgZm9yICh2YXIgbyA9IHRoaXM7IG8gIT0gbnVsbDsgbyA9IG8ucGFyZW50KSB7XG4gICAgICAgICAgICBjbS5jb25jYXQoIG8uX3RyYW5zZm9ybSApO1xuICAgICAgICAgICAgaWYoICFvLnBhcmVudCB8fCAoIGNvbnRhaW5lciAmJiBvLnBhcmVudCAmJiBvLnBhcmVudCA9PSBjb250YWluZXIgKSB8fCAoIG8ucGFyZW50ICYmIG8ucGFyZW50LnR5cGU9PVwic3RhZ2VcIiApICkge1xuICAgICAgICAgICAgLy9pZiggby50eXBlID09IFwic3RhZ2VcIiB8fCAoby5wYXJlbnQgJiYgY29udGFpbmVyICYmIG8ucGFyZW50LnR5cGUgPT0gY29udGFpbmVyLnR5cGUgKSApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY207Ly9icmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY207XG4gICAgfSxcbiAgICAvKlxuICAgICAq6K6+572u5YWD57Sg55qE5piv5ZCm5ZON5bqU5LqL5Lu25qOA5rWLXG4gICAgICpAYm9vbCAgQm9vbGVhbiDnsbvlnotcbiAgICAgKi9cbiAgICBzZXRFdmVudEVuYWJsZSA6IGZ1bmN0aW9uKCBib29sICl7XG4gICAgICAgIGlmKF8uaXNCb29sZWFuKGJvb2wpKXtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50RW5hYmxlZCA9IGJvb2xcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICAvKlxuICAgICAq5p+l6K+i6Ieq5bex5ZyocGFyZW5055qE6Zif5YiX5Lit55qE5L2N572uXG4gICAgICovXG4gICAgZ2V0SW5kZXggICA6IGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKCF0aGlzLnBhcmVudCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF8uaW5kZXhPZih0aGlzLnBhcmVudC5jaGlsZHJlbiAsIHRoaXMpXG4gICAgfSxcbiAgICAvKlxuICAgICAq5YWD57Sg5Zyoeui9tOaWueWQkeWQkeS4i+enu+WKqFxuICAgICAqQG51bSDnp7vliqjnmoTlsYLnuqdcbiAgICAgKi9cbiAgICB0b0JhY2sgOiBmdW5jdGlvbiggbnVtICl7XG4gICAgICAgIGlmKCF0aGlzLnBhcmVudCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZnJvbUluZGV4ID0gdGhpcy5nZXRJbmRleCgpO1xuICAgICAgICB2YXIgdG9JbmRleCA9IDA7XG4gICAgICAgIFxuICAgICAgICBpZihfLmlzTnVtYmVyKCBudW0gKSl7XG4gICAgICAgICAgaWYoIG51bSA9PSAwICl7XG4gICAgICAgICAgICAgLy/ljp/lnLDkuI3liqhcbiAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfTtcbiAgICAgICAgICB0b0luZGV4ID0gZnJvbUluZGV4IC0gbnVtO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtZSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLnNwbGljZSggZnJvbUluZGV4ICwgMSApWzBdO1xuICAgICAgICBpZiggdG9JbmRleCA8IDAgKXtcbiAgICAgICAgICAgIHRvSW5kZXggPSAwO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnBhcmVudC5hZGRDaGlsZEF0KCBtZSAsIHRvSW5kZXggKTtcbiAgICB9LFxuICAgIC8qXG4gICAgICrlhYPntKDlnKh66L205pa55ZCR5ZCR5LiK56e75YqoXG4gICAgICpAbnVtIOenu+WKqOeahOWxguaVsOmHjyDpu5jorqTliLDpobbnq69cbiAgICAgKi9cbiAgICB0b0Zyb250IDogZnVuY3Rpb24oIG51bSApe1xuICAgICAgICBpZighdGhpcy5wYXJlbnQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZyb21JbmRleCA9IHRoaXMuZ2V0SW5kZXgoKTtcbiAgICAgICAgdmFyIHBjbCA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgdmFyIHRvSW5kZXggPSBwY2w7XG4gICAgICAgIFxuICAgICAgICBpZihfLmlzTnVtYmVyKCBudW0gKSl7XG4gICAgICAgICAgaWYoIG51bSA9PSAwICl7XG4gICAgICAgICAgICAgLy/ljp/lnLDkuI3liqhcbiAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHRvSW5kZXggPSBmcm9tSW5kZXggKyBudW0gKyAxO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtZSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLnNwbGljZSggZnJvbUluZGV4ICwgMSApWzBdO1xuICAgICAgICBpZih0b0luZGV4ID4gcGNsKXtcbiAgICAgICAgICAgIHRvSW5kZXggPSBwY2w7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJlbnQuYWRkQ2hpbGRBdCggbWUgLCB0b0luZGV4LTEgKTtcbiAgICB9LFxuICAgIF91cGRhdGVUcmFuc2Zvcm0gOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF90cmFuc2Zvcm0gPSBuZXcgTWF0cml4KCk7XG4gICAgICAgIF90cmFuc2Zvcm0uaWRlbnRpdHkoKTtcbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG4gICAgICAgIC8v5piv5ZCm6ZyA6KaBVHJhbnNmb3JtXG4gICAgICAgIGlmKGNvbnRleHQuc2NhbGVYICE9PSAxIHx8IGNvbnRleHQuc2NhbGVZICE9PTEgKXtcbiAgICAgICAgICAgIC8v5aaC5p6c5pyJ57yp5pS+XG4gICAgICAgICAgICAvL+e8qeaUvueahOWOn+eCueWdkOagh1xuICAgICAgICAgICAgdmFyIG9yaWdpbiA9IG5ldyBQb2ludChjb250ZXh0LnNjYWxlT3JpZ2luKTtcbiAgICAgICAgICAgIGlmKCBvcmlnaW4ueCB8fCBvcmlnaW4ueSApe1xuICAgICAgICAgICAgICAgIF90cmFuc2Zvcm0udHJhbnNsYXRlKCAtb3JpZ2luLnggLCAtb3JpZ2luLnkgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90cmFuc2Zvcm0uc2NhbGUoIGNvbnRleHQuc2NhbGVYICwgY29udGV4dC5zY2FsZVkgKTtcbiAgICAgICAgICAgIGlmKCBvcmlnaW4ueCB8fCBvcmlnaW4ueSApe1xuICAgICAgICAgICAgICAgIF90cmFuc2Zvcm0udHJhbnNsYXRlKCBvcmlnaW4ueCAsIG9yaWdpbi55ICk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciByb3RhdGlvbiA9IGNvbnRleHQucm90YXRpb247XG4gICAgICAgIGlmKCByb3RhdGlvbiApe1xuICAgICAgICAgICAgLy/lpoLmnpzmnInml4vovaxcbiAgICAgICAgICAgIC8v5peL6L2s55qE5Y6f54K55Z2Q5qCHXG4gICAgICAgICAgICB2YXIgb3JpZ2luID0gbmV3IFBvaW50KGNvbnRleHQucm90YXRlT3JpZ2luKTtcbiAgICAgICAgICAgIGlmKCBvcmlnaW4ueCB8fCBvcmlnaW4ueSApe1xuICAgICAgICAgICAgICAgIF90cmFuc2Zvcm0udHJhbnNsYXRlKCAtb3JpZ2luLnggLCAtb3JpZ2luLnkgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90cmFuc2Zvcm0ucm90YXRlKCByb3RhdGlvbiAlIDM2MCAqIE1hdGguUEkvMTgwICk7XG4gICAgICAgICAgICBpZiggb3JpZ2luLnggfHwgb3JpZ2luLnkgKXtcbiAgICAgICAgICAgICAgICBfdHJhbnNmb3JtLnRyYW5zbGF0ZSggb3JpZ2luLnggLCBvcmlnaW4ueSApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8v5aaC5p6c5pyJ5L2N56e7XG4gICAgICAgIHZhciB4LHk7XG4gICAgICAgIGlmKCB0aGlzLnh5VG9JbnQgJiYgIXRoaXMubW92ZWluZyApe1xuICAgICAgICAgICAgLy/lvZPov5nkuKrlhYPntKDlnKjlgZrovajov7nov5DliqjnmoTml7blgJnvvIzmr5TlpoJkcmFn77yMYW5pbWF0aW9u5aaC5p6c5a6e5pe255qE6LCD5pW06L+Z5LiqeCDvvIwgeVxuICAgICAgICAgICAgLy/pgqPkuYjor6XlhYPntKDnmoTovajov7nkvJrmnInot7Pot4PnmoTmg4XlhrXlj5HnlJ/jgILmiYDku6XliqDkuKrmnaHku7bov4fmu6TvvIxcbiAgICAgICAgICAgIHZhciB4ID0gcGFyc2VJbnQoIGNvbnRleHQueCApO1xuICAgICAgICAgICAgdmFyIHkgPSBwYXJzZUludCggY29udGV4dC55ICk7XG5cbiAgICAgICAgICAgIGlmKCBwYXJzZUludChjb250ZXh0LmxpbmVXaWR0aCAsIDEwKSAlIDIgPT0gMSAmJiBjb250ZXh0LnN0cm9rZVN0eWxlICl7XG4gICAgICAgICAgICAgICAgeCArPSAwLjU7XG4gICAgICAgICAgICAgICAgeSArPSAwLjU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB4ID0gY29udGV4dC54O1xuICAgICAgICAgICAgeSA9IGNvbnRleHQueTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiggeCAhPSAwIHx8IHkgIT0gMCApe1xuICAgICAgICAgICAgX3RyYW5zZm9ybS50cmFuc2xhdGUoIHggLCB5ICk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3RyYW5zZm9ybSA9IF90cmFuc2Zvcm07XG4gICAgICAgIHJldHVybiBfdHJhbnNmb3JtO1xuICAgIH0sXG4gICAgLy/mmL7npLrlr7nosaHnmoTpgInlj5bmo4DmtYvlpITnkIblh73mlbBcbiAgICBnZXRDaGlsZEluUG9pbnQgOiBmdW5jdGlvbiggcG9pbnQgKXtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gZmFsc2U7IC8v5qOA5rWL55qE57uT5p6cXG5cbiAgICAgICAgLy/nrKzkuIDmraXvvIzlkKdnbG9i55qEcG9pbnTovazmjaLliLDlr7nlupTnmoRvYmrnmoTlsYLnuqflhoXnmoTlnZDmoIfns7vnu59cbiAgICAgICAgaWYoIHRoaXMudHlwZSAhPSBcInN0YWdlXCIgJiYgdGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQudHlwZSAhPSBcInN0YWdlXCIgKSB7XG4gICAgICAgICAgICBwb2ludCA9IHRoaXMucGFyZW50Lmdsb2JhbFRvTG9jYWwoIHBvaW50ICk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHggPSBwb2ludC54O1xuICAgICAgICB2YXIgeSA9IHBvaW50Lnk7XG4gICAgXG4gICAgICAgIC8v5a+56byg5qCH55qE5Z2Q5qCH5Lmf5YGa55u45ZCM55qE5Y+Y5o2iXG4gICAgICAgIGlmKCB0aGlzLl90cmFuc2Zvcm0gKXtcbiAgICAgICAgICAgIHZhciBpbnZlcnNlTWF0cml4ID0gdGhpcy5fdHJhbnNmb3JtLmNsb25lKCkuaW52ZXJ0KCk7XG4gICAgICAgICAgICB2YXIgb3JpZ2luUG9zID0gW3gsIHldO1xuICAgICAgICAgICAgb3JpZ2luUG9zID0gaW52ZXJzZU1hdHJpeC5tdWxWZWN0b3IoIG9yaWdpblBvcyApO1xuXG4gICAgICAgICAgICB4ID0gb3JpZ2luUG9zWzBdO1xuICAgICAgICAgICAgeSA9IG9yaWdpblBvc1sxXTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiggdGhpcy5ncmFwaGljcyApe1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5ncmFwaGljcy5jb250YWluc1BvaW50KCB7eDogeCAsIHk6IHl9ICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgLypcbiAgICAqIGFuaW1hdGVcbiAgICAqIEBwYXJhbSB0b0NvbnRlbnQg6KaB5Yqo55S75Y+Y5b2i5Yiw55qE5bGe5oCn6ZuG5ZCIXG4gICAgKiBAcGFyYW0gb3B0aW9ucyB0d2VlbiDliqjnlLvlj4LmlbBcbiAgICAqL1xuICAgIGFuaW1hdGUgOiBmdW5jdGlvbiggdG9Db250ZW50ICwgb3B0aW9ucyApe1xuICAgICAgICB2YXIgdG8gPSB0b0NvbnRlbnQ7XG4gICAgICAgIHZhciBmcm9tID0ge307XG4gICAgICAgIGZvciggdmFyIHAgaW4gdG8gKXtcbiAgICAgICAgICAgIGZyb21bIHAgXSA9IHRoaXMuY29udGV4dFtwXTtcbiAgICAgICAgfTtcbiAgICAgICAgIW9wdGlvbnMgJiYgKG9wdGlvbnMgPSB7fSk7XG4gICAgICAgIG9wdGlvbnMuZnJvbSA9IGZyb207XG4gICAgICAgIG9wdGlvbnMudG8gPSB0bztcblxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciB1cEZ1biA9IGZ1bmN0aW9uKCl7fTtcbiAgICAgICAgaWYoIG9wdGlvbnMub25VcGRhdGUgKXtcbiAgICAgICAgICAgIHVwRnVuID0gb3B0aW9ucy5vblVwZGF0ZTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHR3ZWVuO1xuICAgICAgICBvcHRpb25zLm9uVXBkYXRlID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIC8v5aaC5p6cY29udGV4dOS4jeWtmOWcqOivtOaYjuivpW9iauW3sue7j+iiq2Rlc3Ryb3nkuobvvIzpgqPkuYjopoHmiorku5bnmoR0d2Vlbue7mWRlc3Ryb3lcbiAgICAgICAgICAgIGlmICghc2VsZi5jb250ZXh0ICYmIHR3ZWVuKSB7XG4gICAgICAgICAgICAgICAgQW5pbWF0aW9uRnJhbWUuZGVzdHJveVR3ZWVuKHR3ZWVuKTtcbiAgICAgICAgICAgICAgICB0d2VlbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciggdmFyIHAgaW4gdGhpcyApe1xuICAgICAgICAgICAgICAgIHNlbGYuY29udGV4dFtwXSA9IHRoaXNbcF07XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdXBGdW4uYXBwbHkoc2VsZiAsIFt0aGlzXSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBjb21wRnVuID0gZnVuY3Rpb24oKXt9O1xuICAgICAgICBpZiggb3B0aW9ucy5vbkNvbXBsZXRlICl7XG4gICAgICAgICAgICBjb21wRnVuID0gb3B0aW9ucy5vbkNvbXBsZXRlO1xuICAgICAgICB9O1xuICAgICAgICBvcHRpb25zLm9uQ29tcGxldGUgPSBmdW5jdGlvbiggb3B0ICl7XG4gICAgICAgICAgICBjb21wRnVuLmFwcGx5KHNlbGYgLCBhcmd1bWVudHMpXG4gICAgICAgIH07XG4gICAgICAgIHR3ZWVuID0gQW5pbWF0aW9uRnJhbWUucmVnaXN0VHdlZW4oIG9wdGlvbnMgKTtcbiAgICAgICAgcmV0dXJuIHR3ZWVuO1xuICAgIH0sXG5cblxuICAgIC8v5riy5p+T55u45YWz6YOo5YiG77yM6L+B56e75YiwcmVuZGVyZXJz5Lit5Y67XG4gICAgX3JlbmRlciA6IGZ1bmN0aW9uKCBjdHggKXtcdFxuICAgICAgICBpZiggIXRoaXMuY29udGV4dC52aXNpYmxlIHx8IHRoaXMuY29udGV4dC5nbG9iYWxBbHBoYSA8PSAwICl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgXG5cbiAgICAgICAgdmFyIHRyYW5zRm9ybSA9IHRoaXMuX3RyYW5zZm9ybTtcbiAgICAgICAgaWYoICF0cmFuc0Zvcm0gKSB7XG4gICAgICAgICAgICB0cmFuc0Zvcm0gPSB0aGlzLl91cGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy/ov5DnlKjnn6npmLXlvIDlp4vlj5jlvaJcbiAgICAgICAgY3R4LnRyYW5zZm9ybS5hcHBseSggY3R4ICwgdHJhbnNGb3JtLnRvQXJyYXkoKSApO1xuXG4gICAgICAgIC8v6K6+572u5qC35byP77yM5paH5pys5pyJ6Ieq5bex55qE6K6+572u5qC35byP5pa55byPXG4gICAgICAgIGlmKCB0aGlzLnR5cGUgIT0gXCJ0ZXh0XCIgKSB7XG4gICAgICAgICAgICB2YXIgc3R5bGUgPSB0aGlzLmNvbnRleHQuJG1vZGVsO1xuICAgICAgICAgICAgZm9yKHZhciBwIGluIHN0eWxlKXtcbiAgICAgICAgICAgICAgICBpZiggcCAhPSBcInRleHRCYXNlbGluZVwiICYmICggcCBpbiBjdHggKSApe1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHN0eWxlW3BdIHx8IF8uaXNOdW1iZXIoIHN0eWxlW3BdICkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggcCA9PSBcImdsb2JhbEFscGhhXCIgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+mAj+aYjuW6puimgeS7jueItuiKgueCuee7p+aJv1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eFtwXSAqPSBzdHlsZVtwXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4W3BdID0gc3R5bGVbcF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW5kZXIoIGN0eCApO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH0sXG4gICAgcmVuZGVyIDogZnVuY3Rpb24oIGN0eCApIHtcbiAgICAgICAgLy/ln7rnsbvkuI3mj5DkvptyZW5kZXLnmoTlhbfkvZPlrp7njrDvvIznlLHlkI7nu63lhbfkvZPnmoTmtL7nlJ/nsbvlkIToh6rlrp7njrBcbiAgICB9LFxuICAgIC8v5LuO5qCR5Lit5Yig6ZmkXG4gICAgcmVtb3ZlIDogZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoIHRoaXMucGFyZW50ICl7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy/lhYPntKDnmoToh6rmiJHplIDmr4FcbiAgICBkZXN0cm95IDogZnVuY3Rpb24oKXtcbiAgICAgICAgdGhpcy5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5maXJlKFwiZGVzdHJveVwiKTtcbiAgICAgICAgLy/mioroh6rlt7Hku47niLboioLngrnkuK3liKDpmaTkuoblkI7lgZroh6rmiJHmuIXpmaTvvIzph4rmlL7lhoXlrZhcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gbnVsbDtcbiAgICAgICAgZGVsZXRlIHRoaXMuY29udGV4dDtcbiAgICB9XG59ICk7XG5cbmV4cG9ydCBkZWZhdWx0IERpc3BsYXlPYmplY3Q7XG5cbiIsIi8qKlxuICogQ2FudmF4XG4gKlxuICogQGF1dGhvciDph4rliZEgKOadjua2mywgbGl0YW8ubHRAYWxpYmFiYS1pbmMuY29tKVxuICpcbiAqIOaooeaLn2FzM+eahERpc3BsYXlMaXN0IOS4reeahOWuueWZqOexu1xuICovXG5pbXBvcnQgXyBmcm9tIFwiLi4vdXRpbHMvdW5kZXJzY29yZVwiO1xuaW1wb3J0IFV0aWxzIGZyb20gXCIuLi91dGlscy9pbmRleFwiO1xuaW1wb3J0IERpc3BsYXlPYmplY3QgZnJvbSBcIi4vRGlzcGxheU9iamVjdFwiO1xuaW1wb3J0IFBvaW50IGZyb20gXCIuL1BvaW50XCI7XG5cbnZhciBEaXNwbGF5T2JqZWN0Q29udGFpbmVyID0gZnVuY3Rpb24ob3B0KXtcbiAgIHZhciBzZWxmID0gdGhpcztcbiAgIHNlbGYuY2hpbGRyZW4gPSBbXTtcbiAgIHNlbGYubW91c2VDaGlsZHJlbiA9IFtdO1xuICAgRGlzcGxheU9iamVjdENvbnRhaW5lci5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgIC8v5omA5pyJ55qE5a655Zmo6buY6K6k5pSv5oyBZXZlbnQg5qOA5rWL77yM5Zug5Li6IOWPr+iDveaciemHjOmdoueahHNoYXBl5pivZXZlbnRFbmFibGXmmK90cnVl55qEXG4gICAvL+WmguaenOeUqOaIt+acieW8uuWItueahOmcgOaxguiuqeWuueWZqOS4i+eahOaJgOacieWFg+e0oOmDvSDkuI3lj6/mo4DmtYvvvIzlj6/ku6XosIPnlKhcbiAgIC8vRGlzcGxheU9iamVjdENvbnRhaW5lcueahCBzZXRFdmVudEVuYWJsZSgpIOaWueazlVxuICAgc2VsZi5fZXZlbnRFbmFibGVkID0gdHJ1ZTtcbn07XG5cblV0aWxzLmNyZWF0Q2xhc3MoIERpc3BsYXlPYmplY3RDb250YWluZXIgLCBEaXNwbGF5T2JqZWN0ICwge1xuICAgIGFkZENoaWxkIDogZnVuY3Rpb24oY2hpbGQpe1xuICAgICAgICBpZiggIWNoaWxkICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9O1xuICAgICAgICBpZih0aGlzLmdldENoaWxkSW5kZXgoY2hpbGQpICE9IC0xKSB7XG4gICAgICAgICAgICBjaGlsZC5wYXJlbnQgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgICB9O1xuICAgICAgICAvL+WmguaenOS7luWcqOWIq+eahOWtkOWFg+e0oOS4re+8jOmCo+S5iOWwseS7juWIq+S6uumCo+mHjOWIoOmZpOS6hlxuICAgICAgICBpZihjaGlsZC5wYXJlbnQpIHtcbiAgICAgICAgICAgIGNoaWxkLnBhcmVudC5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaCggY2hpbGQgKTtcbiAgICAgICAgY2hpbGQucGFyZW50ID0gdGhpcztcbiAgICAgICAgaWYodGhpcy5oZWFydEJlYXQpe1xuICAgICAgICAgICB0aGlzLmhlYXJ0QmVhdCh7XG4gICAgICAgICAgICAgY29udmVydFR5cGUgOiBcImNoaWxkcmVuXCIsXG4gICAgICAgICAgICAgdGFyZ2V0ICAgICAgOiBjaGlsZCxcbiAgICAgICAgICAgICBzcmMgICAgICAgICA6IHRoaXNcbiAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYodGhpcy5fYWZ0ZXJBZGRDaGlsZCl7XG4gICAgICAgICAgIHRoaXMuX2FmdGVyQWRkQ2hpbGQoY2hpbGQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9LFxuICAgIGFkZENoaWxkQXQgOiBmdW5jdGlvbihjaGlsZCwgaW5kZXgpIHtcbiAgICAgICAgaWYodGhpcy5nZXRDaGlsZEluZGV4KGNoaWxkKSAhPSAtMSkge1xuICAgICAgICAgICAgY2hpbGQucGFyZW50ID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgfTtcbiAgICAgICAgaWYoY2hpbGQucGFyZW50KSB7XG4gICAgICAgICAgICBjaGlsZC5wYXJlbnQucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnNwbGljZShpbmRleCwgMCwgY2hpbGQpO1xuICAgICAgICBjaGlsZC5wYXJlbnQgPSB0aGlzO1xuICAgICAgICBcbiAgICAgICAgLy/kuIrmiqVjaGlsZHJlbuW/g+i3s1xuICAgICAgICBpZih0aGlzLmhlYXJ0QmVhdCl7XG4gICAgICAgICAgIHRoaXMuaGVhcnRCZWF0KHtcbiAgICAgICAgICAgICBjb252ZXJ0VHlwZSA6IFwiY2hpbGRyZW5cIixcbiAgICAgICAgICAgICB0YXJnZXQgICAgICAgOiBjaGlsZCxcbiAgICAgICAgICAgICBzcmMgICAgICA6IHRoaXNcbiAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBpZih0aGlzLl9hZnRlckFkZENoaWxkKXtcbiAgICAgICAgICAgdGhpcy5fYWZ0ZXJBZGRDaGlsZChjaGlsZCxpbmRleCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgIH0sXG4gICAgcmVtb3ZlQ2hpbGQgOiBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVDaGlsZEF0KF8uaW5kZXhPZiggdGhpcy5jaGlsZHJlbiAsIGNoaWxkICkpO1xuICAgIH0sXG4gICAgcmVtb3ZlQ2hpbGRBdCA6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiB0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlbltpbmRleF07XG4gICAgICAgIGlmIChjaGlsZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjaGlsZC5wYXJlbnQgPSBudWxsO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIFxuICAgICAgICBpZih0aGlzLmhlYXJ0QmVhdCl7XG4gICAgICAgICAgIHRoaXMuaGVhcnRCZWF0KHtcbiAgICAgICAgICAgICBjb252ZXJ0VHlwZSA6IFwiY2hpbGRyZW5cIixcbiAgICAgICAgICAgICB0YXJnZXQgICAgICAgOiBjaGlsZCxcbiAgICAgICAgICAgICBzcmMgICAgICA6IHRoaXNcbiAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBpZih0aGlzLl9hZnRlckRlbENoaWxkKXtcbiAgICAgICAgICAgdGhpcy5fYWZ0ZXJEZWxDaGlsZChjaGlsZCAsIGluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9LFxuICAgIHJlbW92ZUNoaWxkQnlJZCA6IGZ1bmN0aW9uKCBpZCApIHtcdFxuICAgICAgICBmb3IodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZih0aGlzLmNoaWxkcmVuW2ldLmlkID09IGlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlQ2hpbGRBdChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICByZW1vdmVBbGxDaGlsZHJlbiA6IGZ1bmN0aW9uKCkge1xuICAgICAgICB3aGlsZSh0aGlzLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQ2hpbGRBdCgwKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy/pm4blkIjnsbvnmoToh6rmiJHplIDmr4FcbiAgICBkZXN0cm95IDogZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoIHRoaXMucGFyZW50ICl7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5maXJlKFwiZGVzdHJveVwiKTtcbiAgICAgICAgLy/kvp3mrKHplIDmr4HmiYDmnInlrZDlhYPntKBcbiAgICAgICAgZm9yICh2YXIgaT0wLGw9dGhpcy5jaGlsZHJlbi5sZW5ndGggOyBpPGwgOyBpKyspe1xuICAgICAgICAgICAgdGhpcy5nZXRDaGlsZEF0KGkpLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgIGwtLTtcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIC8qXG4gICAgICpAaWQg5YWD57Sg55qEaWRcbiAgICAgKkBib29sZW4g5piv5ZCm5rex5bqm5p+l6K+i77yM6buY6K6k5bCx5Zyo56ys5LiA5bGC5a2Q5YWD57Sg5Lit5p+l6K+iXG4gICAgICoqL1xuICAgIGdldENoaWxkQnlJZCA6IGZ1bmN0aW9uKGlkICwgYm9vbGVuKXtcbiAgICAgICAgaWYoIWJvb2xlbikge1xuICAgICAgICAgICAgZm9yKHZhciBpID0gMCwgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5jaGlsZHJlbltpXS5pZCA9PSBpZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL+a3seW6puafpeivolxuICAgICAgICAgICAgLy9UT0RPOuaaguaXtuacquWunueOsFxuICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIGdldENoaWxkQXQgOiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxKSByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5baW5kZXhdO1xuICAgIH0sXG4gICAgZ2V0Q2hpbGRJbmRleCA6IGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBfLmluZGV4T2YoIHRoaXMuY2hpbGRyZW4gLCBjaGlsZCApO1xuICAgIH0sXG4gICAgc2V0Q2hpbGRJbmRleCA6IGZ1bmN0aW9uKGNoaWxkLCBpbmRleCl7XG4gICAgICAgIGlmKGNoaWxkLnBhcmVudCAhPSB0aGlzKSByZXR1cm47XG4gICAgICAgIHZhciBvbGRJbmRleCA9IF8uaW5kZXhPZiggdGhpcy5jaGlsZHJlbiAsIGNoaWxkICk7XG4gICAgICAgIGlmKGluZGV4ID09IG9sZEluZGV4KSByZXR1cm47XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKG9sZEluZGV4LCAxKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDAsIGNoaWxkKTtcbiAgICB9LFxuICAgIGdldE51bUNoaWxkcmVuIDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLmxlbmd0aDtcbiAgICB9LFxuICAgIC8v6I635Y+WeCx554K55LiK55qE5omA5pyJb2JqZWN0ICBudW0g6ZyA6KaB6L+U5Zue55qEb2Jq5pWw6YePXG4gICAgZ2V0T2JqZWN0c1VuZGVyUG9pbnQgOiBmdW5jdGlvbiggcG9pbnQgLCBudW0pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICBcbiAgICAgICAgZm9yKHZhciBpID0gdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXTtcblxuICAgICAgICAgICAgaWYoIGNoaWxkID09IG51bGwgfHxcbiAgICAgICAgICAgICAgICAoIWNoaWxkLl9ldmVudEVuYWJsZWQgJiYgIWNoaWxkLmRyYWdFbmFibGVkKSB8fCBcbiAgICAgICAgICAgICAgICAhY2hpbGQuY29udGV4dC52aXNpYmxlIFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiggY2hpbGQgaW5zdGFuY2VvZiBEaXNwbGF5T2JqZWN0Q29udGFpbmVyICkge1xuICAgICAgICAgICAgICAgIC8v5piv6ZuG5ZCIXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLm1vdXNlQ2hpbGRyZW4gJiYgY2hpbGQuZ2V0TnVtQ2hpbGRyZW4oKSA+IDApe1xuICAgICAgICAgICAgICAgICAgIHZhciBvYmpzID0gY2hpbGQuZ2V0T2JqZWN0c1VuZGVyUG9pbnQoIHBvaW50ICk7XG4gICAgICAgICAgICAgICAgICAgaWYgKG9ianMubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdCggb2JqcyApO1xuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XHRcdFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvL+mdnumbhuWQiO+8jOWPr+S7peW8gOWni+WBmmdldENoaWxkSW5Qb2ludOS6hlxuICAgICAgICAgICAgICAgIGlmIChjaGlsZC5nZXRDaGlsZEluUG9pbnQoIHBvaW50ICkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobnVtICE9IHVuZGVmaW5lZCAmJiAhaXNOYU4obnVtKSl7XG4gICAgICAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdC5sZW5ndGggPT0gbnVtKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufSk7XG5leHBvcnQgZGVmYXVsdCBEaXNwbGF5T2JqZWN0Q29udGFpbmVyO1xuIiwiLyoqXG4gKiBDYW52YXhcbiAqXG4gKiBAYXV0aG9yIOmHiuWJkSAo5p2O5rabLCBsaXRhby5sdEBhbGliYWJhLWluYy5jb20pXG4gKlxuICogc3RhZ2Ug57G777yMIOWGjWFzM+S4re+8jHN0YWdl5YiZ5Luj6KGo5pW05Liq6Iie5Y+w44CC5piv5ZSv5LiA55qE5qC56IqC54K5XG4gKiDkvYbmmK/lho1jYW52YXjkuK3vvIzlm6DkuLrliIblsYLorr7orqHnmoTpnIDopoHjgIJzdGFnZSDoiJ7lj7Ag5ZCM5qC35Luj6KGo5LiA5LiqY2FudmFz5YWD57Sg77yM5L2G5piv5LiN5piv5YaN5pW05Liq5byV5pOO6K6+6K6hXG4gKiDph4zpnaLvvIwg5LiN5piv5ZSv5LiA55qE5qC56IqC54K544CC6ICM5piv5Lya5Lqk55SxY2FudmF457G75p2l57uf5LiA566h55CG5YW25bGC57qnXG4gKi9cbmltcG9ydCBEaXNwbGF5T2JqZWN0Q29udGFpbmVyIGZyb20gXCIuL0Rpc3BsYXlPYmplY3RDb250YWluZXJcIjtcbmltcG9ydCBVdGlscyBmcm9tIFwiLi4vdXRpbHMvaW5kZXhcIjtcblxudmFyIFN0YWdlID0gZnVuY3Rpb24oICl7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNlbGYudHlwZSA9IFwic3RhZ2VcIjtcbiAgICBzZWxmLmNhbnZhcyA9IG51bGw7XG4gICAgc2VsZi5jdHggPSBudWxsOyAvL+a4suafk+eahOaXtuWAmeeUsXJlbmRlcmVy5Yaz5a6aLOi/memHjOS4jeWBmuWIneWni+WAvFxuICAgIC8vc3RhZ2XmraPlnKjmuLLmn5PkuK1cbiAgICBzZWxmLnN0YWdlUmVuZGluZyA9IGZhbHNlO1xuICAgIHNlbGYuX2lzUmVhZHkgPSBmYWxzZTtcbiAgICBTdGFnZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuVXRpbHMuY3JlYXRDbGFzcyggU3RhZ2UgLCBEaXNwbGF5T2JqZWN0Q29udGFpbmVyICwge1xuICAgIGluaXQgOiBmdW5jdGlvbigpe30sXG4gICAgLy/nlLFjYW52YXjnmoRhZnRlckFkZENoaWxkIOWbnuiwg1xuICAgIGluaXRTdGFnZSA6IGZ1bmN0aW9uKCBjYW52YXMgLCB3aWR0aCAsIGhlaWdodCApe1xuICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICBzZWxmLmNhbnZhcyA9IGNhbnZhcztcbiAgICAgICBzZWxmLmNvbnRleHQud2lkdGggID0gd2lkdGg7XG4gICAgICAgc2VsZi5jb250ZXh0LmhlaWdodCA9IGhlaWdodDtcbiAgICAgICBzZWxmLmNvbnRleHQuc2NhbGVYID0gVXRpbHMuX2RldmljZVBpeGVsUmF0aW87XG4gICAgICAgc2VsZi5jb250ZXh0LnNjYWxlWSA9IFV0aWxzLl9kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgIHNlbGYuX2lzUmVhZHkgPSB0cnVlO1xuICAgIH0sXG4gICAgaGVhcnRCZWF0IDogZnVuY3Rpb24oIG9wdCApe1xuICAgICAgICAvL3NoYXBlICwgbmFtZSAsIHZhbHVlICwgcHJlVmFsdWUgXG4gICAgICAgIC8vZGlzcGxheUxpc3TkuK3mn5DkuKrlsZ7mgKfmlLnlj5jkuoZcbiAgICAgICAgaWYgKCF0aGlzLl9pc1JlYWR5KSB7XG4gICAgICAgICAgIC8v5Zyoc3RhZ2Xov5jmsqHliJ3lp4vljJblrozmr5XnmoTmg4XlhrXkuIvvvIzml6DpnIDlgZrku7vkvZXlpITnkIZcbiAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9O1xuICAgICAgICBvcHQgfHwgKCBvcHQgPSB7fSApOyAvL+WmguaenG9wdOS4uuepuu+8jOivtOaYjuWwseaYr+aXoOadoeS7tuWIt+aWsFxuICAgICAgICBvcHQuc3RhZ2UgICA9IHRoaXM7XG5cbiAgICAgICAgLy9UT0RP5Li05pe25YWI6L+Z5LmI5aSE55CGXG4gICAgICAgIHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LmhlYXJ0QmVhdChvcHQpO1xuICAgIH1cbn0pO1xuZXhwb3J0IGRlZmF1bHQgU3RhZ2U7IiwiaW1wb3J0IHsgUkVOREVSRVJfVFlQRSB9IGZyb20gJy4uL2NvbnN0JztcbmltcG9ydCBzZXR0aW5ncyBmcm9tICcuLi9zZXR0aW5ncyc7XG5pbXBvcnQgQW5pbWF0aW9uRnJhbWUgZnJvbSBcIi4uL2FuaW1hdGlvbi9BbmltYXRpb25GcmFtZVwiO1xuaW1wb3J0IFV0aWxzIGZyb20gXCIuLi91dGlscy9pbmRleFwiO1xuaW1wb3J0IF8gZnJvbSBcIi4uL3V0aWxzL3VuZGVyc2NvcmVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3lzdGVtUmVuZGVyZXIgXG57XG4gICAgY29uc3RydWN0b3IoIHR5cGU9UkVOREVSRVJfVFlQRS5VTktOT1dOICwgYXBwICwgb3B0aW9ucyApXG4gICAge1xuICAgIFx0dGhpcy50eXBlID0gdHlwZTsgLy8yY2FudmFzLDF3ZWJnbFxuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcblxuICAgICAgICAvLyBwcmVwYXJlIG9wdGlvbnNcbiAgICAgICAgaWYgKG9wdGlvbnMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaSBpbiBzZXR0aW5ncy5SRU5ERVJfT1BUSU9OUylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnNbaV0gPT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1tpXSA9IHNldHRpbmdzLlJFTkRFUl9PUFRJT05TW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBzZXR0aW5ncy5SRU5ERVJfT1BUSU9OUztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIFxuXG4gICAgICAgIHRoaXMucmVxdWVzdEFpZCA9IG51bGw7XG5cblx0XHR0aGlzLl9oZWFydEJlYXQgPSBmYWxzZTsvL+W/g+i3s++8jOm7mOiupOS4umZhbHNl77yM5Y2zZmFsc2XnmoTml7blgJnlvJXmk47lpITkuo7pnZnpu5jnirbmgIEgdHJ1ZeWImeWQr+WKqOa4suafk1xuXG5cdFx0dGhpcy5fcHJlUmVuZGVyVGltZSA9IDA7XG4gICAgfVxuXG4gICAgLy/lpoLmnpzlvJXmk47lpITkuo7pnZnpu5jnirbmgIHnmoTor53vvIzlsLHkvJrlkK/liqhcbiAgICBzdGFydEVudGVyKClcbiAgICB7XG4gICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgIGlmKCAhc2VsZi5yZXF1ZXN0QWlkICl7XG4gICAgICAgICAgIHNlbGYucmVxdWVzdEFpZCA9IEFuaW1hdGlvbkZyYW1lLnJlZ2lzdEZyYW1lKCB7XG4gICAgICAgICAgICAgICBpZCA6IFwiZW50ZXJGcmFtZVwiLCAvL+WQjOaXtuiCr+WumuWPquacieS4gOS4qmVudGVyRnJhbWXnmoR0YXNrXG4gICAgICAgICAgICAgICB0YXNrIDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5lbnRlckZyYW1lLmFwcGx5KHNlbGYpO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICB9ICk7XG4gICAgICAgfVxuICAgIH1cblxuICAgIGVudGVyRnJhbWUoKVxuICAgIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAvL+S4jeeuoeaAjuS5iOagt++8jGVudGVyRnJhbWXmiafooYzkuoblsLHopoHmiopcbiAgICAgICAgLy9yZXF1ZXN0QWlkIG51bGwg5o6JXG4gICAgICAgIHNlbGYucmVxdWVzdEFpZCA9IG51bGw7XG4gICAgICAgIFV0aWxzLm5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICBpZiggc2VsZi5faGVhcnRCZWF0ICl7XG5cbiAgICAgICAgICAgIHNlbGYucmVuZGVyKCB0aGlzLmFwcCApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBzZWxmLl9oZWFydEJlYXQgPSBmYWxzZTtcbiAgICAgICAgICAgIC8v5riy5p+T5a6M5LqG77yM5omT5LiK5pyA5paw5pe26Ze05oyrXG4gICAgICAgICAgICBzZWxmLl9wcmVSZW5kZXJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgX2NvbnZlcnRDYW52YXgob3B0KVxuICAgIHtcbiAgICAgICAgdmFyIG1lID0gdGhpcztcbiAgICAgICAgXy5lYWNoKCBtZS5hcHAuY2hpbGRyZW4gLCBmdW5jdGlvbihzdGFnZSl7XG4gICAgICAgICAgICBzdGFnZS5jb250ZXh0W29wdC5uYW1lXSA9IG9wdC52YWx1ZTsgXG4gICAgICAgIH0gKTsgIFxuICAgIH1cblxuICAgIGhlYXJ0QmVhdCggb3B0IClcbiAgICB7XG4gICAgICAgIC8vZGlzcGxheUxpc3TkuK3mn5DkuKrlsZ7mgKfmlLnlj5jkuoZcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBpZiggb3B0ICl7XG4gICAgICAgICAgICAvL+W/g+i3s+WMheacieS4pOenje+8jOS4gOenjeaYr+afkOWFg+e0oOeahOWPr+inhuWxnuaAp+aUueWPmOS6huOAguS4gOenjeaYr2NoaWxkcmVu5pyJ5Y+Y5YqoXG4gICAgICAgICAgICAvL+WIhuWIq+WvueW6lGNvbnZlcnRUeXBlICDkuLogY29udGV4dCAgYW5kIGNoaWxkcmVuXG4gICAgICAgICAgICBpZiAob3B0LmNvbnZlcnRUeXBlID09IFwiY29udGV4dFwiKXtcbiAgICAgICAgICAgICAgICB2YXIgc3RhZ2UgICA9IG9wdC5zdGFnZTtcbiAgICAgICAgICAgICAgICB2YXIgc2hhcGUgICA9IG9wdC5zaGFwZTtcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSAgICA9IG9wdC5uYW1lO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSAgID0gb3B0LnZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBwcmVWYWx1ZT0gb3B0LnByZVZhbHVlO1xuXG4gICAgICAgICAgICAgICAgaWYoIHNoYXBlLnR5cGUgPT0gXCJjYW52YXhcIiApe1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9jb252ZXJ0Q2FudmF4KG9wdClcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZighc2VsZi5hcHAuY29udmVydFN0YWdlc1tzdGFnZS5pZF0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hcHAuY29udmVydFN0YWdlc1tzdGFnZS5pZF09e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWdlIDogc3RhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydFNoYXBlcyA6IHt9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlmKHNoYXBlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5hcHAuY29udmVydFN0YWdlc1sgc3RhZ2UuaWQgXS5jb252ZXJ0U2hhcGVzWyBzaGFwZS5pZCBdKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFwcC5jb252ZXJ0U3RhZ2VzWyBzdGFnZS5pZCBdLmNvbnZlcnRTaGFwZXNbIHNoYXBlLmlkIF09e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFwZSA6IHNoYXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0VHlwZSA6IG9wdC5jb252ZXJ0VHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/lpoLmnpzlt7Lnu4/kuIrmiqXkuobor6Ugc2hhcGUg55qE5b+D6Lez44CCXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChvcHQuY29udmVydFR5cGUgPT0gXCJjaGlsZHJlblwiKXtcbiAgICAgICAgICAgICAgICAvL+WFg+e0oOe7k+aehOWPmOWMlu+8jOavlOWmgmFkZGNoaWxkIHJlbW92ZUNoaWxk562JXG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IG9wdC50YXJnZXQ7XG4gICAgICAgICAgICAgICAgdmFyIHN0YWdlID0gb3B0LnNyYy5nZXRTdGFnZSgpO1xuICAgICAgICAgICAgICAgIGlmKCBzdGFnZSB8fCAodGFyZ2V0LnR5cGU9PVwic3RhZ2VcIikgKXtcbiAgICAgICAgICAgICAgICAgICAgLy/lpoLmnpzmk43kvZznmoTnm67moIflhYPntKDmmK9TdGFnZVxuICAgICAgICAgICAgICAgICAgICBzdGFnZSA9IHN0YWdlIHx8IHRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgaWYoIXNlbGYuYXBwLmNvbnZlcnRTdGFnZXNbc3RhZ2UuaWRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFwcC5jb252ZXJ0U3RhZ2VzW3N0YWdlLmlkXT17XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhZ2UgOiBzdGFnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0U2hhcGVzIDoge31cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoIW9wdC5jb252ZXJ0VHlwZSl7XG4gICAgICAgICAgICAgICAgLy/ml6DmnaHku7bopoHmsYLliLfmlrBcbiAgICAgICAgICAgICAgICB2YXIgc3RhZ2UgPSBvcHQuc3RhZ2U7XG4gICAgICAgICAgICAgICAgaWYoIXNlbGYuYXBwLmNvbnZlcnRTdGFnZXNbc3RhZ2UuaWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYXBwLmNvbnZlcnRTdGFnZXNbc3RhZ2UuaWRdPXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YWdlIDogc3RhZ2UgLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydFNoYXBlcyA6IHt9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL+aXoOadoeS7tuimgeaxguWFqOmDqOWIt+aWsO+8jOS4gOiIrOeUqOWcqHJlc2l6ZeetieOAglxuICAgICAgICAgICAgXy5lYWNoKCBzZWxmLmFwcC5jaGlsZHJlbiAsIGZ1bmN0aW9uKCBzdGFnZSAsIGkgKXtcbiAgICAgICAgICAgICAgICBzZWxmLmFwcC5jb252ZXJ0U3RhZ2VzWyBzdGFnZS5pZCBdID0ge1xuICAgICAgICAgICAgICAgICAgICBzdGFnZSA6IHN0YWdlLFxuICAgICAgICAgICAgICAgICAgICBjb252ZXJ0U2hhcGVzIDoge31cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ICk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICghc2VsZi5faGVhcnRCZWF0KXtcbiAgICAgICAgICAgLy/lpoLmnpzlj5HnjrDlvJXmk47lnKjpnZnpu5jnirbmgIHvvIzpgqPkuYjlsLHllKTphpLlvJXmk45cbiAgICAgICAgICAgc2VsZi5faGVhcnRCZWF0ID0gdHJ1ZTtcbiAgICAgICAgICAgc2VsZi5zdGFydEVudGVyKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgIC8v5ZCm5YiZ5pm65oWn57un57ut56Gu6K6k5b+D6LezXG4gICAgICAgICAgIHNlbGYuX2hlYXJ0QmVhdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBTSEFQRVMgfSBmcm9tICcuLi8uLi9jb25zdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbnZhc0dyYXBoaWNzUmVuZGVyZXJcbntcbiAgIFxuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyKVxuICAgIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIH1cbiAgICBcbiAgICAgLyoqXG4gICAgICogQHBhcmFtIGRpc3BsYXlPYmplY3RcbiAgICAgKiBAc3RhZ2Ug5Lmf5Y+v5LulZGlzcGxheU9iamVjdC5nZXRTdGFnZSgp6I635Y+W44CCXG4gICAgICovXG4gICAgcmVuZGVyKGRpc3BsYXlPYmplY3QgLCBzdGFnZSlcbiAgICB7XG5cbiAgICAgICAgY29uc3QgZ3JhcGhpY3MgPSBkaXNwbGF5T2JqZWN0LmdyYXBoaWNzO1xuICAgICAgICBjb25zdCByZW5kZXJlciA9IHRoaXMucmVuZGVyZXI7XG4gICAgICAgIGNvbnN0IGN0eCA9IHN0YWdlLmN0eDtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGRpc3BsYXlPYmplY3QuY29udGV4dDtcblxuICAgICAgICBpZiggZGlzcGxheU9iamVjdC5wYXJlbnQgKXtcbiAgICAgICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgKj0gZGlzcGxheU9iamVjdC5wYXJlbnQuY29udGV4dC5nbG9iYWxBbHBoYTtcbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyYXBoaWNzLmdyYXBoaWNzRGF0YS5sZW5ndGg7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGdyYXBoaWNzLmdyYXBoaWNzRGF0YVtpXTtcbiAgICAgICAgICAgIGNvbnN0IHNoYXBlID0gZGF0YS5zaGFwZTtcblxuICAgICAgICAgICAgY29uc3QgZmlsbFN0eWxlID0gZGF0YS5maWxsU3R5bGU7XG4gICAgICAgICAgICBjb25zdCBzdHJva2VTdHlsZSA9IGRhdGEuc3Ryb2tlU3R5bGU7XG5cbiAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBkYXRhLmxpbmVXaWR0aDtcblxuICAgICAgICAgICAgaWYgKGRhdGEudHlwZSA9PT0gU0hBUEVTLlBPTFkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJQb2x5Z29uKHNoYXBlLnBvaW50cywgc2hhcGUuY2xvc2VkLCBjdHgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuaGFzRmlsbCgpKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gZGF0YS5maWxsQWxwaGE7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBmaWxsU3R5bGU7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmhhc0xpbmUoKSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IGRhdGEubGluZUFscGhhO1xuICAgICAgICAgICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBzdHJva2VTdHlsZTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEudHlwZSA9PT0gU0hBUEVTLlJFQ1QpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKCBkYXRhLmhhc0ZpbGwoKSApXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSBkYXRhLmZpbGxBbHBoYTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGZpbGxTdHlsZTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHNoYXBlLngsIHNoYXBlLnksIHNoYXBlLndpZHRoLCBzaGFwZS5oZWlnaHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5oYXNMaW5lKCkpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSBkYXRhLmxpbmVBbHBoYTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gc3Ryb2tlU3R5bGU7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2VSZWN0KHNoYXBlLngsIHNoYXBlLnksIHNoYXBlLndpZHRoLCBzaGFwZS5oZWlnaHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEudHlwZSA9PT0gU0hBUEVTLkNJUkMpXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICAvLyBUT0RPIC0gbmVlZCB0byBiZSBVbmRlZmluZWQhXG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGN0eC5hcmMoc2hhcGUueCwgc2hhcGUueSwgc2hhcGUucmFkaXVzLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuaGFzRmlsbCgpKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gZGF0YS5maWxsQWxwaGE7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBmaWxsU3R5bGU7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmhhc0xpbmUoKSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IGRhdGEubGluZUFscGhhO1xuICAgICAgICAgICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBzdHJva2VTdHlsZTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEudHlwZSA9PT0gU0hBUEVTLkVMSVApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29uc3QgdyA9IHNoYXBlLndpZHRoICogMjtcbiAgICAgICAgICAgICAgICBjb25zdCBoID0gc2hhcGUuaGVpZ2h0ICogMjtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHggPSBzaGFwZS54IC0gKHcgLyAyKTtcbiAgICAgICAgICAgICAgICBjb25zdCB5ID0gc2hhcGUueSAtIChoIC8gMik7XG5cbiAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBrYXBwYSA9IDAuNTUyMjg0ODtcbiAgICAgICAgICAgICAgICBjb25zdCBveCA9ICh3IC8gMikgKiBrYXBwYTsgLy8gY29udHJvbCBwb2ludCBvZmZzZXQgaG9yaXpvbnRhbFxuICAgICAgICAgICAgICAgIGNvbnN0IG95ID0gKGggLyAyKSAqIGthcHBhOyAvLyBjb250cm9sIHBvaW50IG9mZnNldCB2ZXJ0aWNhbFxuICAgICAgICAgICAgICAgIGNvbnN0IHhlID0geCArIHc7ICAgICAgICAgICAvLyB4LWVuZFxuICAgICAgICAgICAgICAgIGNvbnN0IHllID0geSArIGg7ICAgICAgICAgICAvLyB5LWVuZFxuICAgICAgICAgICAgICAgIGNvbnN0IHhtID0geCArICh3IC8gMik7ICAgICAgIC8vIHgtbWlkZGxlXG4gICAgICAgICAgICAgICAgY29uc3QgeW0gPSB5ICsgKGggLyAyKTsgICAgICAgLy8geS1taWRkbGVcblxuICAgICAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCwgeW0pO1xuICAgICAgICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHgsIHltIC0gb3ksIHhtIC0gb3gsIHksIHhtLCB5KTtcbiAgICAgICAgICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyh4bSArIG94LCB5LCB4ZSwgeW0gLSBveSwgeGUsIHltKTtcbiAgICAgICAgICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyh4ZSwgeW0gKyBveSwgeG0gKyBveCwgeWUsIHhtLCB5ZSk7XG4gICAgICAgICAgICAgICAgY3R4LmJlemllckN1cnZlVG8oeG0gLSBveCwgeWUsIHgsIHltICsgb3ksIHgsIHltKTtcblxuICAgICAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcblxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmhhc0ZpbGwoKSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IGRhdGEuZmlsbEFscGhhO1xuICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gZmlsbFN0eWxlO1xuICAgICAgICAgICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5oYXNMaW5lKCkpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSBkYXRhLmxpbmVBbHBoYTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gc3Ryb2tlU3R5bGU7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXJQb2x5Z29uKHBvaW50cywgY2xvc2UsIGN0eClcbiAgICB7XG4gICAgICAgIGN0eC5tb3ZlVG8ocG9pbnRzWzBdLCBwb2ludHNbMV0pO1xuXG4gICAgICAgIGZvciAobGV0IGogPSAxOyBqIDwgcG9pbnRzLmxlbmd0aCAvIDI7ICsrailcbiAgICAgICAge1xuICAgICAgICAgICAgY3R4LmxpbmVUbyhwb2ludHNbaiAqIDJdLCBwb2ludHNbKGogKiAyKSArIDFdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbG9zZSlcbiAgICAgICAge1xuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICB9XG4gICAgfVxuXG59IiwiaW1wb3J0IFN5c3RlbVJlbmRlcmVyIGZyb20gJy4uL1N5c3RlbVJlbmRlcmVyJztcbmltcG9ydCB7IFJFTkRFUkVSX1RZUEUgfSBmcm9tICcuLi8uLi9jb25zdCc7XG5pbXBvcnQgU2V0dGluZ3MgZnJvbSAnLi4vLi4vc2V0dGluZ3MnO1xuaW1wb3J0IENHUiBmcm9tIFwiLi4vLi4vZ3JhcGhpY3MvY2FudmFzL0dyYXBoaWNzUmVuZGVyZXJcIjtcbmltcG9ydCBfIGZyb20gXCIuLi8uLi91dGlscy91bmRlcnNjb3JlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbnZhc1JlbmRlcmVyIGV4dGVuZHMgU3lzdGVtUmVuZGVyZXJcbntcbiAgICBjb25zdHJ1Y3RvcihhcHAsIG9wdGlvbnM9e30pXG4gICAge1xuICAgICAgICBzdXBlcihSRU5ERVJFUl9UWVBFLkNBTlZBUywgYXBwLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5DR1IgPSBuZXcgQ0dSKHRoaXMpO1xuICAgIH1cblxuICAgIHJlbmRlciggYXBwIClcbiAgICB7XG4gICAgXHR2YXIgbWUgPSB0aGlzO1xuICAgICAgICBtZS5hcHAgPSBhcHA7XG4gICAgXHRfLmVhY2goXy52YWx1ZXMoIGFwcC5jb252ZXJ0U3RhZ2VzICkgLCBmdW5jdGlvbihjb252ZXJ0U3RhZ2Upe1xuICAgICAgICAgICAgbWUucmVuZGVyU3RhZ2UoIGNvbnZlcnRTdGFnZS5zdGFnZSApO1xuICAgICAgICB9KTtcbiAgICAgICAgYXBwLmNvbnZlcnRTdGFnZXMgPSB7fTtcbiAgICB9XG5cbiAgICByZW5kZXJTdGFnZSggc3RhZ2UgKVxuICAgIHtcbiAgICAgICAgaWYoIXN0YWdlLmN0eCl7XG4gICAgICAgICAgICBzdGFnZS5jdHggPSBzdGFnZS5jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHN0YWdlLnN0YWdlUmVuZGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuX2NsZWFyKCBzdGFnZSApO1xuICAgICAgICB0aGlzLl9yZW5kZXIoIHN0YWdlICk7XG4gICAgICAgIHN0YWdlLnN0YWdlUmVuZGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIF9yZW5kZXIoIHN0YWdlICwgZGlzcGxheU9iamVjdCApXG4gICAge1xuICAgICAgICBpZiggIWRpc3BsYXlPYmplY3QgKXtcbiAgICAgICAgICAgIGRpc3BsYXlPYmplY3QgPSBzdGFnZTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiggIWRpc3BsYXlPYmplY3QuY29udGV4dC52aXNpYmxlIHx8IGRpc3BsYXlPYmplY3QuY29udGV4dC5nbG9iYWxBbHBoYSA8PSAwICl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGN0eCA9IHN0YWdlLmN0eDtcblxuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBcbiAgICAgICAgdmFyIHRyYW5zRm9ybSA9IGRpc3BsYXlPYmplY3QuX3RyYW5zZm9ybTtcbiAgICAgICAgaWYoICF0cmFuc0Zvcm0gKSB7XG4gICAgICAgICAgICB0cmFuc0Zvcm0gPSBkaXNwbGF5T2JqZWN0Ll91cGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy/ov5DnlKjnn6npmLXlvIDlp4vlj5jlvaJcbiAgICAgICAgY3R4LnRyYW5zZm9ybS5hcHBseSggY3R4ICwgdHJhbnNGb3JtLnRvQXJyYXkoKSApO1xuXG5cbiAgICAgICAgaWYoIGRpc3BsYXlPYmplY3QuZ3JhcGhpY3MgKXtcbiAgICAgICAgICAgIHRoaXMuQ0dSLnJlbmRlciggZGlzcGxheU9iamVjdCAsIHN0YWdlICk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYoIGRpc3BsYXlPYmplY3QuY2hpbGRyZW4gKXtcblx0ICAgICAgICBmb3IodmFyIGkgPSAwLCBsZW4gPSBkaXNwbGF5T2JqZWN0LmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICAgICAgXHR0aGlzLl9yZW5kZXIoIHN0YWdlICwgZGlzcGxheU9iamVjdC5jaGlsZHJlbltpXSApO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG5cbiAgICBfY2xlYXIoIHN0YWdlIClcbiAgICB7XG4gICAgICAgIC8vVE9ETzrov5nph4zmnInngrkg5aWH5oCq77yMIOS5i+WJjeeahOeJiOacrGNsZWFyUmVjdOeahOaXtuWAme+8jOS4jemcgOimgSAqUkVTT0xVVElPTu+8iOWIhui+qOeOh++8iVxuICAgICAgICBzdGFnZS5jdHguY2xlYXJSZWN0KCAwLCAwLCB0aGlzLmFwcC53aWR0aCpTZXR0aW5ncy5SRVNPTFVUSU9OICwgdGhpcy5hcHAuaGVpZ2h0KlNldHRpbmdzLlJFU09MVVRJT04gKTtcbiAgICB9XG59XG5cbiIsIi8qKlxuICogVGhlIFBvaW50IG9iamVjdCByZXByZXNlbnRzIGEgbG9jYXRpb24gaW4gYSB0d28tZGltZW5zaW9uYWwgY29vcmRpbmF0ZSBzeXN0ZW0sIHdoZXJlIHggcmVwcmVzZW50c1xuICogdGhlIGhvcml6b250YWwgYXhpcyBhbmQgeSByZXByZXNlbnRzIHRoZSB2ZXJ0aWNhbCBheGlzLlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9pbnRcbntcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3g9MF0gLSBwb3NpdGlvbiBvZiB0aGUgcG9pbnQgb24gdGhlIHggYXhpc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbeT0wXSAtIHBvc2l0aW9uIG9mIHRoZSBwb2ludCBvbiB0aGUgeSBheGlzXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoeCA9IDAsIHkgPSAwKVxuICAgIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQGRlZmF1bHQgMFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy54ID0geDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGlzIHBvaW50XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQSVhJLlBvaW50fSBhIGNvcHkgb2YgdGhlIHBvaW50XG4gICAgICovXG4gICAgY2xvbmUoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLngsIHRoaXMueSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHggYW5kIHkgZnJvbSB0aGUgZ2l2ZW4gcG9pbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5Qb2ludH0gcCAtIFRoZSBwb2ludCB0byBjb3B5LlxuICAgICAqL1xuICAgIGNvcHkocClcbiAgICB7XG4gICAgICAgIHRoaXMuc2V0KHAueCwgcC55KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHBvaW50IGlzIGVxdWFsIHRvIHRoaXMgcG9pbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5Qb2ludH0gcCAtIFRoZSBwb2ludCB0byBjaGVja1xuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiBwb2ludCBlcXVhbCB0byB0aGlzIHBvaW50XG4gICAgICovXG4gICAgZXF1YWxzKHApXG4gICAge1xuICAgICAgICByZXR1cm4gKHAueCA9PT0gdGhpcy54KSAmJiAocC55ID09PSB0aGlzLnkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHBvaW50IHRvIGEgbmV3IHggYW5kIHkgcG9zaXRpb24uXG4gICAgICogSWYgeSBpcyBvbWl0dGVkLCBib3RoIHggYW5kIHkgd2lsbCBiZSBzZXQgdG8geC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbeD0wXSAtIHBvc2l0aW9uIG9mIHRoZSBwb2ludCBvbiB0aGUgeCBheGlzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt5PTBdIC0gcG9zaXRpb24gb2YgdGhlIHBvaW50IG9uIHRoZSB5IGF4aXNcbiAgICAgKi9cbiAgICBzZXQoeCwgeSlcbiAgICB7XG4gICAgICAgIHRoaXMueCA9IHggfHwgMDtcbiAgICAgICAgdGhpcy55ID0geSB8fCAoKHkgIT09IDApID8gdGhpcy54IDogMCk7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgUG9pbnQgZnJvbSAnLi9Qb2ludCc7XG5cbi8qKlxuICogVGhlIHBpeGkgTWF0cml4IGNsYXNzIGFzIGFuIG9iamVjdCwgd2hpY2ggbWFrZXMgaXQgYSBsb3QgZmFzdGVyLFxuICogaGVyZSBpcyBhIHJlcHJlc2VudGF0aW9uIG9mIGl0IDpcbiAqIHwgYSB8IGIgfCB0eHxcbiAqIHwgYyB8IGQgfCB0eXxcbiAqIHwgMCB8IDAgfCAxIHxcbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdHJpeFxue1xuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKVxuICAgIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQGRlZmF1bHQgMVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hID0gMTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmIgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYyA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQGRlZmF1bHQgMVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kID0gMTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnR4ID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnR5ID0gMDtcblxuICAgICAgICB0aGlzLmFycmF5ID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgTWF0cml4IG9iamVjdCBiYXNlZCBvbiB0aGUgZ2l2ZW4gYXJyYXkuIFRoZSBFbGVtZW50IHRvIE1hdHJpeCBtYXBwaW5nIG9yZGVyIGlzIGFzIGZvbGxvd3M6XG4gICAgICpcbiAgICAgKiBhID0gYXJyYXlbMF1cbiAgICAgKiBiID0gYXJyYXlbMV1cbiAgICAgKiBjID0gYXJyYXlbM11cbiAgICAgKiBkID0gYXJyYXlbNF1cbiAgICAgKiB0eCA9IGFycmF5WzJdXG4gICAgICogdHkgPSBhcnJheVs1XVxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gYXJyYXkgLSBUaGUgYXJyYXkgdGhhdCB0aGUgbWF0cml4IHdpbGwgYmUgcG9wdWxhdGVkIGZyb20uXG4gICAgICovXG4gICAgZnJvbUFycmF5KGFycmF5KVxuICAgIHtcbiAgICAgICAgdGhpcy5hID0gYXJyYXlbMF07XG4gICAgICAgIHRoaXMuYiA9IGFycmF5WzFdO1xuICAgICAgICB0aGlzLmMgPSBhcnJheVszXTtcbiAgICAgICAgdGhpcy5kID0gYXJyYXlbNF07XG4gICAgICAgIHRoaXMudHggPSBhcnJheVsyXTtcbiAgICAgICAgdGhpcy50eSA9IGFycmF5WzVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNldHMgdGhlIG1hdHJpeCBwcm9wZXJ0aWVzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYSAtIE1hdHJpeCBjb21wb25lbnRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYiAtIE1hdHJpeCBjb21wb25lbnRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYyAtIE1hdHJpeCBjb21wb25lbnRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZCAtIE1hdHJpeCBjb21wb25lbnRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdHggLSBNYXRyaXggY29tcG9uZW50XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHR5IC0gTWF0cml4IGNvbXBvbmVudFxuICAgICAqXG4gICAgICogQHJldHVybiB7UElYSS5NYXRyaXh9IFRoaXMgbWF0cml4LiBHb29kIGZvciBjaGFpbmluZyBtZXRob2QgY2FsbHMuXG4gICAgICovXG4gICAgc2V0KGEsIGIsIGMsIGQsIHR4LCB0eSlcbiAgICB7XG4gICAgICAgIHRoaXMuYSA9IGE7XG4gICAgICAgIHRoaXMuYiA9IGI7XG4gICAgICAgIHRoaXMuYyA9IGM7XG4gICAgICAgIHRoaXMuZCA9IGQ7XG4gICAgICAgIHRoaXMudHggPSB0eDtcbiAgICAgICAgdGhpcy50eSA9IHR5O1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgZnJvbSB0aGUgY3VycmVudCBNYXRyaXggb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtib29sZWFufSB0cmFuc3Bvc2UgLSBXaGV0aGVyIHdlIG5lZWQgdG8gdHJhbnNwb3NlIHRoZSBtYXRyaXggb3Igbm90XG4gICAgICogQHBhcmFtIHtGbG9hdDMyQXJyYXl9IFtvdXQ9bmV3IEZsb2F0MzJBcnJheSg5KV0gLSBJZiBwcm92aWRlZCB0aGUgYXJyYXkgd2lsbCBiZSBhc3NpZ25lZCB0byBvdXRcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJbXX0gdGhlIG5ld2x5IGNyZWF0ZWQgYXJyYXkgd2hpY2ggY29udGFpbnMgdGhlIG1hdHJpeFxuICAgICAqL1xuICAgIHRvQXJyYXkodHJhbnNwb3NlLCBvdXQpXG4gICAge1xuICAgICAgICBpZiAoIXRoaXMuYXJyYXkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuYXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KDkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYXJyYXkgPSBvdXQgfHwgdGhpcy5hcnJheTtcblxuICAgICAgICBpZiAodHJhbnNwb3NlKVxuICAgICAgICB7XG4gICAgICAgICAgICBhcnJheVswXSA9IHRoaXMuYTtcbiAgICAgICAgICAgIGFycmF5WzFdID0gdGhpcy5iO1xuICAgICAgICAgICAgYXJyYXlbMl0gPSAwO1xuICAgICAgICAgICAgYXJyYXlbM10gPSB0aGlzLmM7XG4gICAgICAgICAgICBhcnJheVs0XSA9IHRoaXMuZDtcbiAgICAgICAgICAgIGFycmF5WzVdID0gMDtcbiAgICAgICAgICAgIGFycmF5WzZdID0gdGhpcy50eDtcbiAgICAgICAgICAgIGFycmF5WzddID0gdGhpcy50eTtcbiAgICAgICAgICAgIGFycmF5WzhdID0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFycmF5WzBdID0gdGhpcy5hO1xuICAgICAgICAgICAgYXJyYXlbMV0gPSB0aGlzLmM7XG4gICAgICAgICAgICBhcnJheVsyXSA9IHRoaXMudHg7XG4gICAgICAgICAgICBhcnJheVszXSA9IHRoaXMuYjtcbiAgICAgICAgICAgIGFycmF5WzRdID0gdGhpcy5kO1xuICAgICAgICAgICAgYXJyYXlbNV0gPSB0aGlzLnR5O1xuICAgICAgICAgICAgYXJyYXlbNl0gPSAwO1xuICAgICAgICAgICAgYXJyYXlbN10gPSAwO1xuICAgICAgICAgICAgYXJyYXlbOF0gPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIG5ldyBwb3NpdGlvbiB3aXRoIHRoZSBjdXJyZW50IHRyYW5zZm9ybWF0aW9uIGFwcGxpZWQuXG4gICAgICogQ2FuIGJlIHVzZWQgdG8gZ28gZnJvbSBhIGNoaWxkJ3MgY29vcmRpbmF0ZSBzcGFjZSB0byB0aGUgd29ybGQgY29vcmRpbmF0ZSBzcGFjZS4gKGUuZy4gcmVuZGVyaW5nKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLlBvaW50fSBwb3MgLSBUaGUgb3JpZ2luXG4gICAgICogQHBhcmFtIHtQSVhJLlBvaW50fSBbbmV3UG9zXSAtIFRoZSBwb2ludCB0aGF0IHRoZSBuZXcgcG9zaXRpb24gaXMgYXNzaWduZWQgdG8gKGFsbG93ZWQgdG8gYmUgc2FtZSBhcyBpbnB1dClcbiAgICAgKiBAcmV0dXJuIHtQSVhJLlBvaW50fSBUaGUgbmV3IHBvaW50LCB0cmFuc2Zvcm1lZCB0aHJvdWdoIHRoaXMgbWF0cml4XG4gICAgICovXG4gICAgYXBwbHkocG9zLCBuZXdQb3MpXG4gICAge1xuICAgICAgICBuZXdQb3MgPSBuZXdQb3MgfHwgbmV3IFBvaW50KCk7XG5cbiAgICAgICAgY29uc3QgeCA9IHBvcy54O1xuICAgICAgICBjb25zdCB5ID0gcG9zLnk7XG5cbiAgICAgICAgbmV3UG9zLnggPSAodGhpcy5hICogeCkgKyAodGhpcy5jICogeSkgKyB0aGlzLnR4O1xuICAgICAgICBuZXdQb3MueSA9ICh0aGlzLmIgKiB4KSArICh0aGlzLmQgKiB5KSArIHRoaXMudHk7XG5cbiAgICAgICAgcmV0dXJuIG5ld1BvcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBuZXcgcG9zaXRpb24gd2l0aCB0aGUgaW52ZXJzZSBvZiB0aGUgY3VycmVudCB0cmFuc2Zvcm1hdGlvbiBhcHBsaWVkLlxuICAgICAqIENhbiBiZSB1c2VkIHRvIGdvIGZyb20gdGhlIHdvcmxkIGNvb3JkaW5hdGUgc3BhY2UgdG8gYSBjaGlsZCdzIGNvb3JkaW5hdGUgc3BhY2UuIChlLmcuIGlucHV0KVxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLlBvaW50fSBwb3MgLSBUaGUgb3JpZ2luXG4gICAgICogQHBhcmFtIHtQSVhJLlBvaW50fSBbbmV3UG9zXSAtIFRoZSBwb2ludCB0aGF0IHRoZSBuZXcgcG9zaXRpb24gaXMgYXNzaWduZWQgdG8gKGFsbG93ZWQgdG8gYmUgc2FtZSBhcyBpbnB1dClcbiAgICAgKiBAcmV0dXJuIHtQSVhJLlBvaW50fSBUaGUgbmV3IHBvaW50LCBpbnZlcnNlLXRyYW5zZm9ybWVkIHRocm91Z2ggdGhpcyBtYXRyaXhcbiAgICAgKi9cbiAgICBhcHBseUludmVyc2UocG9zLCBuZXdQb3MpXG4gICAge1xuICAgICAgICBuZXdQb3MgPSBuZXdQb3MgfHwgbmV3IFBvaW50KCk7XG5cbiAgICAgICAgY29uc3QgaWQgPSAxIC8gKCh0aGlzLmEgKiB0aGlzLmQpICsgKHRoaXMuYyAqIC10aGlzLmIpKTtcblxuICAgICAgICBjb25zdCB4ID0gcG9zLng7XG4gICAgICAgIGNvbnN0IHkgPSBwb3MueTtcblxuICAgICAgICBuZXdQb3MueCA9ICh0aGlzLmQgKiBpZCAqIHgpICsgKC10aGlzLmMgKiBpZCAqIHkpICsgKCgodGhpcy50eSAqIHRoaXMuYykgLSAodGhpcy50eCAqIHRoaXMuZCkpICogaWQpO1xuICAgICAgICBuZXdQb3MueSA9ICh0aGlzLmEgKiBpZCAqIHkpICsgKC10aGlzLmIgKiBpZCAqIHgpICsgKCgoLXRoaXMudHkgKiB0aGlzLmEpICsgKHRoaXMudHggKiB0aGlzLmIpKSAqIGlkKTtcblxuICAgICAgICByZXR1cm4gbmV3UG9zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyYW5zbGF0ZXMgdGhlIG1hdHJpeCBvbiB0aGUgeCBhbmQgeS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4IEhvdyBtdWNoIHRvIHRyYW5zbGF0ZSB4IGJ5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHkgSG93IG11Y2ggdG8gdHJhbnNsYXRlIHkgYnlcbiAgICAgKiBAcmV0dXJuIHtQSVhJLk1hdHJpeH0gVGhpcyBtYXRyaXguIEdvb2QgZm9yIGNoYWluaW5nIG1ldGhvZCBjYWxscy5cbiAgICAgKi9cbiAgICB0cmFuc2xhdGUoeCwgeSlcbiAgICB7XG4gICAgICAgIHRoaXMudHggKz0geDtcbiAgICAgICAgdGhpcy50eSArPSB5O1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgYSBzY2FsZSB0cmFuc2Zvcm1hdGlvbiB0byB0aGUgbWF0cml4LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHggVGhlIGFtb3VudCB0byBzY2FsZSBob3Jpem9udGFsbHlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geSBUaGUgYW1vdW50IHRvIHNjYWxlIHZlcnRpY2FsbHlcbiAgICAgKiBAcmV0dXJuIHtQSVhJLk1hdHJpeH0gVGhpcyBtYXRyaXguIEdvb2QgZm9yIGNoYWluaW5nIG1ldGhvZCBjYWxscy5cbiAgICAgKi9cbiAgICBzY2FsZSh4LCB5KVxuICAgIHtcbiAgICAgICAgdGhpcy5hICo9IHg7XG4gICAgICAgIHRoaXMuZCAqPSB5O1xuICAgICAgICB0aGlzLmMgKj0geDtcbiAgICAgICAgdGhpcy5iICo9IHk7XG4gICAgICAgIHRoaXMudHggKj0geDtcbiAgICAgICAgdGhpcy50eSAqPSB5O1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgYSByb3RhdGlvbiB0cmFuc2Zvcm1hdGlvbiB0byB0aGUgbWF0cml4LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIC0gVGhlIGFuZ2xlIGluIHJhZGlhbnMuXG4gICAgICogQHJldHVybiB7UElYSS5NYXRyaXh9IFRoaXMgbWF0cml4LiBHb29kIGZvciBjaGFpbmluZyBtZXRob2QgY2FsbHMuXG4gICAgICovXG4gICAgcm90YXRlKGFuZ2xlKVxuICAgIHtcbiAgICAgICAgY29uc3QgY29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICBjb25zdCBzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG5cbiAgICAgICAgY29uc3QgYTEgPSB0aGlzLmE7XG4gICAgICAgIGNvbnN0IGMxID0gdGhpcy5jO1xuICAgICAgICBjb25zdCB0eDEgPSB0aGlzLnR4O1xuXG4gICAgICAgIHRoaXMuYSA9IChhMSAqIGNvcykgLSAodGhpcy5iICogc2luKTtcbiAgICAgICAgdGhpcy5iID0gKGExICogc2luKSArICh0aGlzLmIgKiBjb3MpO1xuICAgICAgICB0aGlzLmMgPSAoYzEgKiBjb3MpIC0gKHRoaXMuZCAqIHNpbik7XG4gICAgICAgIHRoaXMuZCA9IChjMSAqIHNpbikgKyAodGhpcy5kICogY29zKTtcbiAgICAgICAgdGhpcy50eCA9ICh0eDEgKiBjb3MpIC0gKHRoaXMudHkgKiBzaW4pO1xuICAgICAgICB0aGlzLnR5ID0gKHR4MSAqIHNpbikgKyAodGhpcy50eSAqIGNvcyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXBwZW5kcyB0aGUgZ2l2ZW4gTWF0cml4IHRvIHRoaXMgTWF0cml4LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLk1hdHJpeH0gbWF0cml4IC0gVGhlIG1hdHJpeCB0byBhcHBlbmQuXG4gICAgICogQHJldHVybiB7UElYSS5NYXRyaXh9IFRoaXMgbWF0cml4LiBHb29kIGZvciBjaGFpbmluZyBtZXRob2QgY2FsbHMuXG4gICAgICovXG4gICAgYXBwZW5kKG1hdHJpeClcbiAgICB7XG4gICAgICAgIGNvbnN0IGExID0gdGhpcy5hO1xuICAgICAgICBjb25zdCBiMSA9IHRoaXMuYjtcbiAgICAgICAgY29uc3QgYzEgPSB0aGlzLmM7XG4gICAgICAgIGNvbnN0IGQxID0gdGhpcy5kO1xuXG4gICAgICAgIHRoaXMuYSA9IChtYXRyaXguYSAqIGExKSArIChtYXRyaXguYiAqIGMxKTtcbiAgICAgICAgdGhpcy5iID0gKG1hdHJpeC5hICogYjEpICsgKG1hdHJpeC5iICogZDEpO1xuICAgICAgICB0aGlzLmMgPSAobWF0cml4LmMgKiBhMSkgKyAobWF0cml4LmQgKiBjMSk7XG4gICAgICAgIHRoaXMuZCA9IChtYXRyaXguYyAqIGIxKSArIChtYXRyaXguZCAqIGQxKTtcblxuICAgICAgICB0aGlzLnR4ID0gKG1hdHJpeC50eCAqIGExKSArIChtYXRyaXgudHkgKiBjMSkgKyB0aGlzLnR4O1xuICAgICAgICB0aGlzLnR5ID0gKG1hdHJpeC50eCAqIGIxKSArIChtYXRyaXgudHkgKiBkMSkgKyB0aGlzLnR5O1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG1hdHJpeCBiYXNlZCBvbiBhbGwgdGhlIGF2YWlsYWJsZSBwcm9wZXJ0aWVzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geCAtIFBvc2l0aW9uIG9uIHRoZSB4IGF4aXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geSAtIFBvc2l0aW9uIG9uIHRoZSB5IGF4aXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGl2b3RYIC0gUGl2b3Qgb24gdGhlIHggYXhpc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwaXZvdFkgLSBQaXZvdCBvbiB0aGUgeSBheGlzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxlWCAtIFNjYWxlIG9uIHRoZSB4IGF4aXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGVZIC0gU2NhbGUgb24gdGhlIHkgYXhpc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3RhdGlvbiAtIFJvdGF0aW9uIGluIHJhZGlhbnNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2tld1ggLSBTa2V3IG9uIHRoZSB4IGF4aXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2tld1kgLSBTa2V3IG9uIHRoZSB5IGF4aXNcbiAgICAgKiBAcmV0dXJuIHtQSVhJLk1hdHJpeH0gVGhpcyBtYXRyaXguIEdvb2QgZm9yIGNoYWluaW5nIG1ldGhvZCBjYWxscy5cbiAgICAgKi9cbiAgICBzZXRUcmFuc2Zvcm0oeCwgeSwgcGl2b3RYLCBwaXZvdFksIHNjYWxlWCwgc2NhbGVZLCByb3RhdGlvbiwgc2tld1gsIHNrZXdZKVxuICAgIHtcbiAgICAgICAgY29uc3Qgc3IgPSBNYXRoLnNpbihyb3RhdGlvbik7XG4gICAgICAgIGNvbnN0IGNyID0gTWF0aC5jb3Mocm90YXRpb24pO1xuICAgICAgICBjb25zdCBjeSA9IE1hdGguY29zKHNrZXdZKTtcbiAgICAgICAgY29uc3Qgc3kgPSBNYXRoLnNpbihza2V3WSk7XG4gICAgICAgIGNvbnN0IG5zeCA9IC1NYXRoLnNpbihza2V3WCk7XG4gICAgICAgIGNvbnN0IGN4ID0gTWF0aC5jb3Moc2tld1gpO1xuXG4gICAgICAgIGNvbnN0IGEgPSBjciAqIHNjYWxlWDtcbiAgICAgICAgY29uc3QgYiA9IHNyICogc2NhbGVYO1xuICAgICAgICBjb25zdCBjID0gLXNyICogc2NhbGVZO1xuICAgICAgICBjb25zdCBkID0gY3IgKiBzY2FsZVk7XG5cbiAgICAgICAgdGhpcy5hID0gKGN5ICogYSkgKyAoc3kgKiBjKTtcbiAgICAgICAgdGhpcy5iID0gKGN5ICogYikgKyAoc3kgKiBkKTtcbiAgICAgICAgdGhpcy5jID0gKG5zeCAqIGEpICsgKGN4ICogYyk7XG4gICAgICAgIHRoaXMuZCA9IChuc3ggKiBiKSArIChjeCAqIGQpO1xuXG4gICAgICAgIHRoaXMudHggPSB4ICsgKChwaXZvdFggKiBhKSArIChwaXZvdFkgKiBjKSk7XG4gICAgICAgIHRoaXMudHkgPSB5ICsgKChwaXZvdFggKiBiKSArIChwaXZvdFkgKiBkKSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJlcGVuZHMgdGhlIGdpdmVuIE1hdHJpeCB0byB0aGlzIE1hdHJpeC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5NYXRyaXh9IG1hdHJpeCAtIFRoZSBtYXRyaXggdG8gcHJlcGVuZFxuICAgICAqIEByZXR1cm4ge1BJWEkuTWF0cml4fSBUaGlzIG1hdHJpeC4gR29vZCBmb3IgY2hhaW5pbmcgbWV0aG9kIGNhbGxzLlxuICAgICAqL1xuICAgIHByZXBlbmQobWF0cml4KVxuICAgIHtcbiAgICAgICAgY29uc3QgdHgxID0gdGhpcy50eDtcblxuICAgICAgICBpZiAobWF0cml4LmEgIT09IDEgfHwgbWF0cml4LmIgIT09IDAgfHwgbWF0cml4LmMgIT09IDAgfHwgbWF0cml4LmQgIT09IDEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IGExID0gdGhpcy5hO1xuICAgICAgICAgICAgY29uc3QgYzEgPSB0aGlzLmM7XG5cbiAgICAgICAgICAgIHRoaXMuYSA9IChhMSAqIG1hdHJpeC5hKSArICh0aGlzLmIgKiBtYXRyaXguYyk7XG4gICAgICAgICAgICB0aGlzLmIgPSAoYTEgKiBtYXRyaXguYikgKyAodGhpcy5iICogbWF0cml4LmQpO1xuICAgICAgICAgICAgdGhpcy5jID0gKGMxICogbWF0cml4LmEpICsgKHRoaXMuZCAqIG1hdHJpeC5jKTtcbiAgICAgICAgICAgIHRoaXMuZCA9IChjMSAqIG1hdHJpeC5iKSArICh0aGlzLmQgKiBtYXRyaXguZCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnR4ID0gKHR4MSAqIG1hdHJpeC5hKSArICh0aGlzLnR5ICogbWF0cml4LmMpICsgbWF0cml4LnR4O1xuICAgICAgICB0aGlzLnR5ID0gKHR4MSAqIG1hdHJpeC5iKSArICh0aGlzLnR5ICogbWF0cml4LmQpICsgbWF0cml4LnR5O1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlY29tcG9zZXMgdGhlIG1hdHJpeCAoeCwgeSwgc2NhbGVYLCBzY2FsZVksIGFuZCByb3RhdGlvbikgYW5kIHNldHMgdGhlIHByb3BlcnRpZXMgb24gdG8gYSB0cmFuc2Zvcm0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuVHJhbnNmb3JtfFBJWEkuVHJhbnNmb3JtU3RhdGljfSB0cmFuc2Zvcm0gLSBUaGUgdHJhbnNmb3JtIHRvIGFwcGx5IHRoZSBwcm9wZXJ0aWVzIHRvLlxuICAgICAqIEByZXR1cm4ge1BJWEkuVHJhbnNmb3JtfFBJWEkuVHJhbnNmb3JtU3RhdGljfSBUaGUgdHJhbnNmb3JtIHdpdGggdGhlIG5ld2x5IGFwcGxpZWQgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGRlY29tcG9zZSh0cmFuc2Zvcm0pXG4gICAge1xuICAgICAgICAvLyBzb3J0IG91dCByb3RhdGlvbiAvIHNrZXcuLlxuICAgICAgICBjb25zdCBhID0gdGhpcy5hO1xuICAgICAgICBjb25zdCBiID0gdGhpcy5iO1xuICAgICAgICBjb25zdCBjID0gdGhpcy5jO1xuICAgICAgICBjb25zdCBkID0gdGhpcy5kO1xuXG4gICAgICAgIGNvbnN0IHNrZXdYID0gLU1hdGguYXRhbjIoLWMsIGQpO1xuICAgICAgICBjb25zdCBza2V3WSA9IE1hdGguYXRhbjIoYiwgYSk7XG5cbiAgICAgICAgY29uc3QgZGVsdGEgPSBNYXRoLmFicyhza2V3WCArIHNrZXdZKTtcblxuICAgICAgICBpZiAoZGVsdGEgPCAwLjAwMDAxKVxuICAgICAgICB7XG4gICAgICAgICAgICB0cmFuc2Zvcm0ucm90YXRpb24gPSBza2V3WTtcblxuICAgICAgICAgICAgaWYgKGEgPCAwICYmIGQgPj0gMClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0ucm90YXRpb24gKz0gKHRyYW5zZm9ybS5yb3RhdGlvbiA8PSAwKSA/IE1hdGguUEkgOiAtTWF0aC5QSTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHJhbnNmb3JtLnNrZXcueCA9IHRyYW5zZm9ybS5za2V3LnkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgdHJhbnNmb3JtLnNrZXcueCA9IHNrZXdYO1xuICAgICAgICAgICAgdHJhbnNmb3JtLnNrZXcueSA9IHNrZXdZO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbmV4dCBzZXQgc2NhbGVcbiAgICAgICAgdHJhbnNmb3JtLnNjYWxlLnggPSBNYXRoLnNxcnQoKGEgKiBhKSArIChiICogYikpO1xuICAgICAgICB0cmFuc2Zvcm0uc2NhbGUueSA9IE1hdGguc3FydCgoYyAqIGMpICsgKGQgKiBkKSk7XG5cbiAgICAgICAgLy8gbmV4dCBzZXQgcG9zaXRpb25cbiAgICAgICAgdHJhbnNmb3JtLnBvc2l0aW9uLnggPSB0aGlzLnR4O1xuICAgICAgICB0cmFuc2Zvcm0ucG9zaXRpb24ueSA9IHRoaXMudHk7XG5cbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZlcnRzIHRoaXMgbWF0cml4XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQSVhJLk1hdHJpeH0gVGhpcyBtYXRyaXguIEdvb2QgZm9yIGNoYWluaW5nIG1ldGhvZCBjYWxscy5cbiAgICAgKi9cbiAgICBpbnZlcnQoKVxuICAgIHtcbiAgICAgICAgY29uc3QgYTEgPSB0aGlzLmE7XG4gICAgICAgIGNvbnN0IGIxID0gdGhpcy5iO1xuICAgICAgICBjb25zdCBjMSA9IHRoaXMuYztcbiAgICAgICAgY29uc3QgZDEgPSB0aGlzLmQ7XG4gICAgICAgIGNvbnN0IHR4MSA9IHRoaXMudHg7XG4gICAgICAgIGNvbnN0IG4gPSAoYTEgKiBkMSkgLSAoYjEgKiBjMSk7XG5cbiAgICAgICAgdGhpcy5hID0gZDEgLyBuO1xuICAgICAgICB0aGlzLmIgPSAtYjEgLyBuO1xuICAgICAgICB0aGlzLmMgPSAtYzEgLyBuO1xuICAgICAgICB0aGlzLmQgPSBhMSAvIG47XG4gICAgICAgIHRoaXMudHggPSAoKGMxICogdGhpcy50eSkgLSAoZDEgKiB0eDEpKSAvIG47XG4gICAgICAgIHRoaXMudHkgPSAtKChhMSAqIHRoaXMudHkpIC0gKGIxICogdHgxKSkgLyBuO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGlzIE1hdGl4IHRvIGFuIGlkZW50aXR5IChkZWZhdWx0KSBtYXRyaXguXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQSVhJLk1hdHJpeH0gVGhpcyBtYXRyaXguIEdvb2QgZm9yIGNoYWluaW5nIG1ldGhvZCBjYWxscy5cbiAgICAgKi9cbiAgICBpZGVudGl0eSgpXG4gICAge1xuICAgICAgICB0aGlzLmEgPSAxO1xuICAgICAgICB0aGlzLmIgPSAwO1xuICAgICAgICB0aGlzLmMgPSAwO1xuICAgICAgICB0aGlzLmQgPSAxO1xuICAgICAgICB0aGlzLnR4ID0gMDtcbiAgICAgICAgdGhpcy50eSA9IDA7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBNYXRyaXggb2JqZWN0IHdpdGggdGhlIHNhbWUgdmFsdWVzIGFzIHRoaXMgb25lLlxuICAgICAqXG4gICAgICogQHJldHVybiB7UElYSS5NYXRyaXh9IEEgY29weSBvZiB0aGlzIG1hdHJpeC4gR29vZCBmb3IgY2hhaW5pbmcgbWV0aG9kIGNhbGxzLlxuICAgICAqL1xuICAgIGNsb25lKClcbiAgICB7XG4gICAgICAgIGNvbnN0IG1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcblxuICAgICAgICBtYXRyaXguYSA9IHRoaXMuYTtcbiAgICAgICAgbWF0cml4LmIgPSB0aGlzLmI7XG4gICAgICAgIG1hdHJpeC5jID0gdGhpcy5jO1xuICAgICAgICBtYXRyaXguZCA9IHRoaXMuZDtcbiAgICAgICAgbWF0cml4LnR4ID0gdGhpcy50eDtcbiAgICAgICAgbWF0cml4LnR5ID0gdGhpcy50eTtcblxuICAgICAgICByZXR1cm4gbWF0cml4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoYW5nZXMgdGhlIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gbWF0cml4IHRvIGJlIHRoZSBzYW1lIGFzIHRoZSBvbmVzIGluIHRoaXMgbWF0cml4XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuTWF0cml4fSBtYXRyaXggLSBUaGUgbWF0cml4IHRvIGNvcHkgZnJvbS5cbiAgICAgKiBAcmV0dXJuIHtQSVhJLk1hdHJpeH0gVGhlIG1hdHJpeCBnaXZlbiBpbiBwYXJhbWV0ZXIgd2l0aCBpdHMgdmFsdWVzIHVwZGF0ZWQuXG4gICAgICovXG4gICAgY29weShtYXRyaXgpXG4gICAge1xuICAgICAgICBtYXRyaXguYSA9IHRoaXMuYTtcbiAgICAgICAgbWF0cml4LmIgPSB0aGlzLmI7XG4gICAgICAgIG1hdHJpeC5jID0gdGhpcy5jO1xuICAgICAgICBtYXRyaXguZCA9IHRoaXMuZDtcbiAgICAgICAgbWF0cml4LnR4ID0gdGhpcy50eDtcbiAgICAgICAgbWF0cml4LnR5ID0gdGhpcy50eTtcblxuICAgICAgICByZXR1cm4gbWF0cml4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgZGVmYXVsdCAoaWRlbnRpdHkpIG1hdHJpeFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBjb25zdFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgSURFTlRJVFkoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHRlbXAgbWF0cml4XG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQGNvbnN0XG4gICAgICovXG4gICAgc3RhdGljIGdldCBURU1QX01BVFJJWCgpXG4gICAge1xuICAgICAgICByZXR1cm4gbmV3IE1hdHJpeCgpO1xuICAgIH1cbn1cbiIsIi8vIFlvdXIgZnJpZW5kbHkgbmVpZ2hib3VyIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0RpaGVkcmFsX2dyb3VwIG9mIG9yZGVyIDE2XG5pbXBvcnQgTWF0cml4IGZyb20gJy4vTWF0cml4JztcblxuY29uc3QgdXggPSBbMSwgMSwgMCwgLTEsIC0xLCAtMSwgMCwgMSwgMSwgMSwgMCwgLTEsIC0xLCAtMSwgMCwgMV07XG5jb25zdCB1eSA9IFswLCAxLCAxLCAxLCAwLCAtMSwgLTEsIC0xLCAwLCAxLCAxLCAxLCAwLCAtMSwgLTEsIC0xXTtcbmNvbnN0IHZ4ID0gWzAsIC0xLCAtMSwgLTEsIDAsIDEsIDEsIDEsIDAsIDEsIDEsIDEsIDAsIC0xLCAtMSwgLTFdO1xuY29uc3QgdnkgPSBbMSwgMSwgMCwgLTEsIC0xLCAtMSwgMCwgMSwgLTEsIC0xLCAwLCAxLCAxLCAxLCAwLCAtMV07XG5jb25zdCB0ZW1wTWF0cmljZXMgPSBbXTtcblxuY29uc3QgbXVsID0gW107XG5cbmZ1bmN0aW9uIHNpZ251bSh4KVxue1xuICAgIGlmICh4IDwgMClcbiAgICB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgaWYgKHggPiAwKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIGluaXQoKVxue1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKylcbiAgICB7XG4gICAgICAgIGNvbnN0IHJvdyA9IFtdO1xuXG4gICAgICAgIG11bC5wdXNoKHJvdyk7XG5cbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAxNjsgaisrKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBfdXggPSBzaWdudW0oKHV4W2ldICogdXhbal0pICsgKHZ4W2ldICogdXlbal0pKTtcbiAgICAgICAgICAgIGNvbnN0IF91eSA9IHNpZ251bSgodXlbaV0gKiB1eFtqXSkgKyAodnlbaV0gKiB1eVtqXSkpO1xuICAgICAgICAgICAgY29uc3QgX3Z4ID0gc2lnbnVtKCh1eFtpXSAqIHZ4W2pdKSArICh2eFtpXSAqIHZ5W2pdKSk7XG4gICAgICAgICAgICBjb25zdCBfdnkgPSBzaWdudW0oKHV5W2ldICogdnhbal0pICsgKHZ5W2ldICogdnlbal0pKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCAxNjsgaysrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmICh1eFtrXSA9PT0gX3V4ICYmIHV5W2tdID09PSBfdXkgJiYgdnhba10gPT09IF92eCAmJiB2eVtrXSA9PT0gX3Z5KVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcm93LnB1c2goayk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKylcbiAgICB7XG4gICAgICAgIGNvbnN0IG1hdCA9IG5ldyBNYXRyaXgoKTtcblxuICAgICAgICBtYXQuc2V0KHV4W2ldLCB1eVtpXSwgdnhbaV0sIHZ5W2ldLCAwLCAwKTtcbiAgICAgICAgdGVtcE1hdHJpY2VzLnB1c2gobWF0KTtcbiAgICB9XG59XG5cbmluaXQoKTtcblxuLyoqXG4gKiBJbXBsZW1lbnRzIERpaGVkcmFsIEdyb3VwIERfOCwgc2VlIFtncm91cCBENF17QGxpbmsgaHR0cDovL21hdGh3b3JsZC53b2xmcmFtLmNvbS9EaWhlZHJhbEdyb3VwRDQuaHRtbH0sXG4gKiBEOCBpcyB0aGUgc2FtZSBidXQgd2l0aCBkaWFnb25hbHMuIFVzZWQgZm9yIHRleHR1cmUgcm90YXRpb25zLlxuICpcbiAqIFZlY3RvciB4WChpKSwgeFkoaSkgaXMgVS1heGlzIG9mIHNwcml0ZSB3aXRoIHJvdGF0aW9uIGlcbiAqIFZlY3RvciB5WShpKSwgeVkoaSkgaXMgVi1heGlzIG9mIHNwcml0ZSB3aXRoIHJvdGF0aW9uIGlcbiAqIFJvdGF0aW9uczogMCBncmFkICgwKSwgOTAgZ3JhZCAoMiksIDE4MCBncmFkICg0KSwgMjcwIGdyYWQgKDYpXG4gKiBNaXJyb3JzOiB2ZXJ0aWNhbCAoOCksIG1haW4gZGlhZ29uYWwgKDEwKSwgaG9yaXpvbnRhbCAoMTIpLCByZXZlcnNlIGRpYWdvbmFsICgxNClcbiAqIFRoaXMgaXMgdGhlIHNtYWxsIHBhcnQgb2YgZ2FtZW9mYm9tYnMuY29tIHBvcnRhbCBzeXN0ZW0uIEl0IHdvcmtzLlxuICpcbiAqIEBhdXRob3IgSXZhbiBAaXZhbnBvcGVseXNoZXZcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xuY29uc3QgR3JvdXBEOCA9IHtcbiAgICBFOiAwLFxuICAgIFNFOiAxLFxuICAgIFM6IDIsXG4gICAgU1c6IDMsXG4gICAgVzogNCxcbiAgICBOVzogNSxcbiAgICBOOiA2LFxuICAgIE5FOiA3LFxuICAgIE1JUlJPUl9WRVJUSUNBTDogOCxcbiAgICBNSVJST1JfSE9SSVpPTlRBTDogMTIsXG4gICAgdVg6IChpbmQpID0+IHV4W2luZF0sXG4gICAgdVk6IChpbmQpID0+IHV5W2luZF0sXG4gICAgdlg6IChpbmQpID0+IHZ4W2luZF0sXG4gICAgdlk6IChpbmQpID0+IHZ5W2luZF0sXG4gICAgaW52OiAocm90YXRpb24pID0+XG4gICAge1xuICAgICAgICBpZiAocm90YXRpb24gJiA4KVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gcm90YXRpb24gJiAxNTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoLXJvdGF0aW9uKSAmIDc7XG4gICAgfSxcbiAgICBhZGQ6IChyb3RhdGlvblNlY29uZCwgcm90YXRpb25GaXJzdCkgPT4gbXVsW3JvdGF0aW9uU2Vjb25kXVtyb3RhdGlvbkZpcnN0XSxcbiAgICBzdWI6IChyb3RhdGlvblNlY29uZCwgcm90YXRpb25GaXJzdCkgPT4gbXVsW3JvdGF0aW9uU2Vjb25kXVtHcm91cEQ4Lmludihyb3RhdGlvbkZpcnN0KV0sXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIDE4MCBkZWdyZWVzIHRvIHJvdGF0aW9uLiBDb21tdXRhdGl2ZSBvcGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5Hcm91cEQ4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJvdGF0aW9uIC0gVGhlIG51bWJlciB0byByb3RhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gcm90YXRlZCBudW1iZXJcbiAgICAgKi9cbiAgICByb3RhdGUxODA6IChyb3RhdGlvbikgPT4gcm90YXRpb24gXiA0LFxuXG4gICAgLyoqXG4gICAgICogSSBkb250IGtub3cgd2h5IHNvbWV0aW1lcyB3aWR0aCBhbmQgaGVpZ2h0cyBuZWVkcyB0byBiZSBzd2FwcGVkLiBXZSdsbCBmaXggaXQgbGF0ZXIuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5Hcm91cEQ4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJvdGF0aW9uIC0gVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIHdpZHRoL2hlaWdodCBzaG91bGQgYmUgc3dhcHBlZC5cbiAgICAgKi9cbiAgICBpc1N3YXBXaWR0aEhlaWdodDogKHJvdGF0aW9uKSA9PiAocm90YXRpb24gJiAzKSA9PT0gMixcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBQSVhJLkdyb3VwRDhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZHggLSBUT0RPXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGR5IC0gVE9ET1xuICAgICAqXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUT0RPXG4gICAgICovXG4gICAgYnlEaXJlY3Rpb246IChkeCwgZHkpID0+XG4gICAge1xuICAgICAgICBpZiAoTWF0aC5hYnMoZHgpICogMiA8PSBNYXRoLmFicyhkeSkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmIChkeSA+PSAwKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiBHcm91cEQ4LlM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBHcm91cEQ4Lk47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoTWF0aC5hYnMoZHkpICogMiA8PSBNYXRoLmFicyhkeCkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmIChkeCA+IDApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEdyb3VwRDguRTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIEdyb3VwRDguVztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkeSA+IDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmIChkeCA+IDApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEdyb3VwRDguU0U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBHcm91cEQ4LlNXO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGR4ID4gMClcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIEdyb3VwRDguTkU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gR3JvdXBEOC5OVztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSGVscHMgc3ByaXRlIHRvIGNvbXBlbnNhdGUgdGV4dHVyZSBwYWNrZXIgcm90YXRpb24uXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUElYSS5Hcm91cEQ4XG4gICAgICogQHBhcmFtIHtQSVhJLk1hdHJpeH0gbWF0cml4IC0gc3ByaXRlIHdvcmxkIG1hdHJpeFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3RhdGlvbiAtIFRoZSByb3RhdGlvbiBmYWN0b3IgdG8gdXNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0eCAtIHNwcml0ZSBhbmNob3JpbmdcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdHkgLSBzcHJpdGUgYW5jaG9yaW5nXG4gICAgICovXG4gICAgbWF0cml4QXBwZW5kUm90YXRpb25JbnY6IChtYXRyaXgsIHJvdGF0aW9uLCB0eCA9IDAsIHR5ID0gMCkgPT5cbiAgICB7XG4gICAgICAgIC8vIFBhY2tlciB1c2VkIFwicm90YXRpb25cIiwgd2UgdXNlIFwiaW52KHJvdGF0aW9uKVwiXG4gICAgICAgIGNvbnN0IG1hdCA9IHRlbXBNYXRyaWNlc1tHcm91cEQ4Lmludihyb3RhdGlvbildO1xuXG4gICAgICAgIG1hdC50eCA9IHR4O1xuICAgICAgICBtYXQudHkgPSB0eTtcbiAgICAgICAgbWF0cml4LmFwcGVuZChtYXQpO1xuICAgIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBHcm91cEQ4O1xuIiwiXG52YXIgYXJjVG9TZWdtZW50c0NhY2hlID0geyB9LFxuICAgIHNlZ21lbnRUb0JlemllckNhY2hlID0geyB9LFxuICAgIGJvdW5kc09mQ3VydmVDYWNoZSA9IHsgfSxcbiAgICBfam9pbiA9IEFycmF5LnByb3RvdHlwZS5qb2luO1xuXG4vKiBBZGFwdGVkIGZyb20gaHR0cDovL2R4ci5tb3ppbGxhLm9yZy9tb3ppbGxhLWNlbnRyYWwvc291cmNlL2NvbnRlbnQvc3ZnL2NvbnRlbnQvc3JjL25zU1ZHUGF0aERhdGFQYXJzZXIuY3BwXG4gKiBieSBBbmRyZWEgQm9nYXp6aSBjb2RlIGlzIHVuZGVyIE1QTC4gaWYgeW91IGRvbid0IGhhdmUgYSBjb3B5IG9mIHRoZSBsaWNlbnNlIHlvdSBjYW4gdGFrZSBpdCBoZXJlXG4gKiBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC9cbiAqL1xuZnVuY3Rpb24gYXJjVG9TZWdtZW50cyh0b1gsIHRvWSwgcngsIHJ5LCBsYXJnZSwgc3dlZXAsIHJvdGF0ZVgpIHtcbiAgdmFyIGFyZ3NTdHJpbmcgPSBfam9pbi5jYWxsKGFyZ3VtZW50cyk7XG4gIGlmIChhcmNUb1NlZ21lbnRzQ2FjaGVbYXJnc1N0cmluZ10pIHtcbiAgICByZXR1cm4gYXJjVG9TZWdtZW50c0NhY2hlW2FyZ3NTdHJpbmddO1xuICB9XG5cbiAgdmFyIFBJID0gTWF0aC5QSSwgdGggPSByb3RhdGVYICogUEkgLyAxODAsXG4gICAgICBzaW5UaCA9IE1hdGguc2luKHRoKSxcbiAgICAgIGNvc1RoID0gTWF0aC5jb3ModGgpLFxuICAgICAgZnJvbVggPSAwLCBmcm9tWSA9IDA7XG5cbiAgcnggPSBNYXRoLmFicyhyeCk7XG4gIHJ5ID0gTWF0aC5hYnMocnkpO1xuXG4gIHZhciBweCA9IC1jb3NUaCAqIHRvWCAqIDAuNSAtIHNpblRoICogdG9ZICogMC41LFxuICAgICAgcHkgPSAtY29zVGggKiB0b1kgKiAwLjUgKyBzaW5UaCAqIHRvWCAqIDAuNSxcbiAgICAgIHJ4MiA9IHJ4ICogcngsIHJ5MiA9IHJ5ICogcnksIHB5MiA9IHB5ICogcHksIHB4MiA9IHB4ICogcHgsXG4gICAgICBwbCA9IHJ4MiAqIHJ5MiAtIHJ4MiAqIHB5MiAtIHJ5MiAqIHB4MixcbiAgICAgIHJvb3QgPSAwO1xuXG4gIGlmIChwbCA8IDApIHtcbiAgICB2YXIgcyA9IE1hdGguc3FydCgxIC0gcGwgLyAocngyICogcnkyKSk7XG4gICAgcnggKj0gcztcbiAgICByeSAqPSBzO1xuICB9XG4gIGVsc2Uge1xuICAgIHJvb3QgPSAobGFyZ2UgPT09IHN3ZWVwID8gLTEuMCA6IDEuMCkgKlxuICAgICAgICAgICAgTWF0aC5zcXJ0KCBwbCAvIChyeDIgKiBweTIgKyByeTIgKiBweDIpKTtcbiAgfVxuXG4gIHZhciBjeCA9IHJvb3QgKiByeCAqIHB5IC8gcnksXG4gICAgICBjeSA9IC1yb290ICogcnkgKiBweCAvIHJ4LFxuICAgICAgY3gxID0gY29zVGggKiBjeCAtIHNpblRoICogY3kgKyB0b1ggKiAwLjUsXG4gICAgICBjeTEgPSBzaW5UaCAqIGN4ICsgY29zVGggKiBjeSArIHRvWSAqIDAuNSxcbiAgICAgIG1UaGV0YSA9IGNhbGNWZWN0b3JBbmdsZSgxLCAwLCAocHggLSBjeCkgLyByeCwgKHB5IC0gY3kpIC8gcnkpLFxuICAgICAgZHRoZXRhID0gY2FsY1ZlY3RvckFuZ2xlKChweCAtIGN4KSAvIHJ4LCAocHkgLSBjeSkgLyByeSwgKC1weCAtIGN4KSAvIHJ4LCAoLXB5IC0gY3kpIC8gcnkpO1xuXG4gIGlmIChzd2VlcCA9PT0gMCAmJiBkdGhldGEgPiAwKSB7XG4gICAgZHRoZXRhIC09IDIgKiBQSTtcbiAgfVxuICBlbHNlIGlmIChzd2VlcCA9PT0gMSAmJiBkdGhldGEgPCAwKSB7XG4gICAgZHRoZXRhICs9IDIgKiBQSTtcbiAgfVxuXG4gIC8vIENvbnZlcnQgaW50byBjdWJpYyBiZXppZXIgc2VnbWVudHMgPD0gOTBkZWdcbiAgdmFyIHNlZ21lbnRzID0gTWF0aC5jZWlsKE1hdGguYWJzKGR0aGV0YSAvIFBJICogMikpLFxuICAgICAgcmVzdWx0ID0gW10sIG1EZWx0YSA9IGR0aGV0YSAvIHNlZ21lbnRzLFxuICAgICAgbVQgPSA4IC8gMyAqIE1hdGguc2luKG1EZWx0YSAvIDQpICogTWF0aC5zaW4obURlbHRhIC8gNCkgLyBNYXRoLnNpbihtRGVsdGEgLyAyKSxcbiAgICAgIHRoMyA9IG1UaGV0YSArIG1EZWx0YTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnRzOyBpKyspIHtcbiAgICByZXN1bHRbaV0gPSBzZWdtZW50VG9CZXppZXIobVRoZXRhLCB0aDMsIGNvc1RoLCBzaW5UaCwgcngsIHJ5LCBjeDEsIGN5MSwgbVQsIGZyb21YLCBmcm9tWSk7XG4gICAgZnJvbVggPSByZXN1bHRbaV1bNF07XG4gICAgZnJvbVkgPSByZXN1bHRbaV1bNV07XG4gICAgbVRoZXRhID0gdGgzO1xuICAgIHRoMyArPSBtRGVsdGE7XG4gIH1cbiAgYXJjVG9TZWdtZW50c0NhY2hlW2FyZ3NTdHJpbmddID0gcmVzdWx0O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBzZWdtZW50VG9CZXppZXIodGgyLCB0aDMsIGNvc1RoLCBzaW5UaCwgcngsIHJ5LCBjeDEsIGN5MSwgbVQsIGZyb21YLCBmcm9tWSkge1xuICB2YXIgYXJnc1N0cmluZzIgPSBfam9pbi5jYWxsKGFyZ3VtZW50cyk7XG4gIGlmIChzZWdtZW50VG9CZXppZXJDYWNoZVthcmdzU3RyaW5nMl0pIHtcbiAgICByZXR1cm4gc2VnbWVudFRvQmV6aWVyQ2FjaGVbYXJnc1N0cmluZzJdO1xuICB9XG5cbiAgdmFyIGNvc3RoMiA9IE1hdGguY29zKHRoMiksXG4gICAgICBzaW50aDIgPSBNYXRoLnNpbih0aDIpLFxuICAgICAgY29zdGgzID0gTWF0aC5jb3ModGgzKSxcbiAgICAgIHNpbnRoMyA9IE1hdGguc2luKHRoMyksXG4gICAgICB0b1ggPSBjb3NUaCAqIHJ4ICogY29zdGgzIC0gc2luVGggKiByeSAqIHNpbnRoMyArIGN4MSxcbiAgICAgIHRvWSA9IHNpblRoICogcnggKiBjb3N0aDMgKyBjb3NUaCAqIHJ5ICogc2ludGgzICsgY3kxLFxuICAgICAgY3AxWCA9IGZyb21YICsgbVQgKiAoIC1jb3NUaCAqIHJ4ICogc2ludGgyIC0gc2luVGggKiByeSAqIGNvc3RoMiksXG4gICAgICBjcDFZID0gZnJvbVkgKyBtVCAqICggLXNpblRoICogcnggKiBzaW50aDIgKyBjb3NUaCAqIHJ5ICogY29zdGgyKSxcbiAgICAgIGNwMlggPSB0b1ggKyBtVCAqICggY29zVGggKiByeCAqIHNpbnRoMyArIHNpblRoICogcnkgKiBjb3N0aDMpLFxuICAgICAgY3AyWSA9IHRvWSArIG1UICogKCBzaW5UaCAqIHJ4ICogc2ludGgzIC0gY29zVGggKiByeSAqIGNvc3RoMyk7XG5cbiAgc2VnbWVudFRvQmV6aWVyQ2FjaGVbYXJnc1N0cmluZzJdID0gW1xuICAgIGNwMVgsIGNwMVksXG4gICAgY3AyWCwgY3AyWSxcbiAgICB0b1gsIHRvWVxuICBdO1xuICByZXR1cm4gc2VnbWVudFRvQmV6aWVyQ2FjaGVbYXJnc1N0cmluZzJdO1xufVxuXG4vKlxuICogUHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjYWxjVmVjdG9yQW5nbGUodXgsIHV5LCB2eCwgdnkpIHtcbiAgdmFyIHRhID0gTWF0aC5hdGFuMih1eSwgdXgpLFxuICAgICAgdGIgPSBNYXRoLmF0YW4yKHZ5LCB2eCk7XG4gIGlmICh0YiA+PSB0YSkge1xuICAgIHJldHVybiB0YiAtIHRhO1xuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiAyICogTWF0aC5QSSAtICh0YSAtIHRiKTtcbiAgfVxufVxuXG4vKipcbiAqIERyYXdzIGFyY1xuICogQHBhcmFtIHtncmFwaGljc30gZ3JhcGhpY3NcbiAqIEBwYXJhbSB7TnVtYmVyfSBmeFxuICogQHBhcmFtIHtOdW1iZXJ9IGZ5XG4gKiBAcGFyYW0ge0FycmF5fSBjb29yZHNcbiAqL1xudmFyIGRyYXdBcmMgPSBmdW5jdGlvbihncmFwaGljcyAsIGZ4LCBmeSwgY29vcmRzKSB7XG4gIHZhciByeCA9IGNvb3Jkc1swXSxcbiAgICAgIHJ5ID0gY29vcmRzWzFdLFxuICAgICAgcm90ID0gY29vcmRzWzJdLFxuICAgICAgbGFyZ2UgPSBjb29yZHNbM10sXG4gICAgICBzd2VlcCA9IGNvb3Jkc1s0XSxcbiAgICAgIHR4ID0gY29vcmRzWzVdLFxuICAgICAgdHkgPSBjb29yZHNbNl0sXG4gICAgICBzZWdzID0gW1tdLCBbXSwgW10sIFtdXSxcbiAgICAgIHNlZ3NOb3JtID0gYXJjVG9TZWdtZW50cyh0eCAtIGZ4LCB0eSAtIGZ5LCByeCwgcnksIGxhcmdlLCBzd2VlcCwgcm90KTtcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gc2Vnc05vcm0ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBzZWdzW2ldWzBdID0gc2Vnc05vcm1baV1bMF0gKyBmeDtcbiAgICBzZWdzW2ldWzFdID0gc2Vnc05vcm1baV1bMV0gKyBmeTtcbiAgICBzZWdzW2ldWzJdID0gc2Vnc05vcm1baV1bMl0gKyBmeDtcbiAgICBzZWdzW2ldWzNdID0gc2Vnc05vcm1baV1bM10gKyBmeTtcbiAgICBzZWdzW2ldWzRdID0gc2Vnc05vcm1baV1bNF0gKyBmeDtcbiAgICBzZWdzW2ldWzVdID0gc2Vnc05vcm1baV1bNV0gKyBmeTtcbiAgICBncmFwaGljcy5iZXppZXJDdXJ2ZVRvLmFwcGx5KGdyYXBoaWNzLCBzZWdzW2ldKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxjdWxhdGUgYm91bmRpbmcgYm94IG9mIGEgZWxsaXB0aWMtYXJjXG4gKiBAcGFyYW0ge051bWJlcn0gZnggc3RhcnQgcG9pbnQgb2YgYXJjXG4gKiBAcGFyYW0ge051bWJlcn0gZnlcbiAqIEBwYXJhbSB7TnVtYmVyfSByeCBob3Jpem9udGFsIHJhZGl1c1xuICogQHBhcmFtIHtOdW1iZXJ9IHJ5IHZlcnRpY2FsIHJhZGl1c1xuICogQHBhcmFtIHtOdW1iZXJ9IHJvdCBhbmdsZSBvZiBob3Jpem9udGFsIGF4ZVxuICogQHBhcmFtIHtOdW1iZXJ9IGxhcmdlIDEgb3IgMCwgd2hhdGV2ZXIgdGhlIGFyYyBpcyB0aGUgYmlnIG9yIHRoZSBzbWFsbCBvbiB0aGUgMiBwb2ludHNcbiAqIEBwYXJhbSB7TnVtYmVyfSBzd2VlcCAxIG9yIDAsIDEgY2xvY2t3aXNlIG9yIGNvdW50ZXJjbG9ja3dpc2UgZGlyZWN0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gdHggZW5kIHBvaW50IG9mIGFyY1xuICogQHBhcmFtIHtOdW1iZXJ9IHR5XG4gKi9cbnZhciBnZXRCb3VuZHNPZkFyYyA9IGZ1bmN0aW9uKGZ4LCBmeSwgcngsIHJ5LCByb3QsIGxhcmdlLCBzd2VlcCwgdHgsIHR5KSB7XG5cbiAgdmFyIGZyb21YID0gMCwgZnJvbVkgPSAwLCBib3VuZCwgYm91bmRzID0gW10sXG4gICAgICBzZWdzID0gYXJjVG9TZWdtZW50cyh0eCAtIGZ4LCB0eSAtIGZ5LCByeCwgcnksIGxhcmdlLCBzd2VlcCwgcm90KTtcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gc2Vncy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGJvdW5kID0gZ2V0Qm91bmRzT2ZDdXJ2ZShmcm9tWCwgZnJvbVksIHNlZ3NbaV1bMF0sIHNlZ3NbaV1bMV0sIHNlZ3NbaV1bMl0sIHNlZ3NbaV1bM10sIHNlZ3NbaV1bNF0sIHNlZ3NbaV1bNV0pO1xuICAgIGJvdW5kcy5wdXNoKHsgeDogYm91bmRbMF0ueCArIGZ4LCB5OiBib3VuZFswXS55ICsgZnkgfSk7XG4gICAgYm91bmRzLnB1c2goeyB4OiBib3VuZFsxXS54ICsgZngsIHk6IGJvdW5kWzFdLnkgKyBmeSB9KTtcbiAgICBmcm9tWCA9IHNlZ3NbaV1bNF07XG4gICAgZnJvbVkgPSBzZWdzW2ldWzVdO1xuICB9XG4gIHJldHVybiBib3VuZHM7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZSBib3VuZGluZyBib3ggb2YgYSBiZXppZXJjdXJ2ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHgwIHN0YXJ0aW5nIHBvaW50XG4gKiBAcGFyYW0ge051bWJlcn0geTBcbiAqIEBwYXJhbSB7TnVtYmVyfSB4MSBmaXJzdCBjb250cm9sIHBvaW50XG4gKiBAcGFyYW0ge051bWJlcn0geTFcbiAqIEBwYXJhbSB7TnVtYmVyfSB4MiBzZWNvbmRvIGNvbnRyb2wgcG9pbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5MlxuICogQHBhcmFtIHtOdW1iZXJ9IHgzIGVuZCBvZiBiZWl6ZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSB5M1xuICovXG4vLyB0YWtlbiBmcm9tIGh0dHA6Ly9qc2Jpbi5jb20vaXZvbWlxLzU2L2VkaXQgIG5vIGNyZWRpdHMgYXZhaWxhYmxlIGZvciB0aGF0LlxuZnVuY3Rpb24gZ2V0Qm91bmRzT2ZDdXJ2ZSh4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpIHtcbiAgdmFyIGFyZ3NTdHJpbmcgPSBfam9pbi5jYWxsKGFyZ3VtZW50cyk7XG4gIGlmIChib3VuZHNPZkN1cnZlQ2FjaGVbYXJnc1N0cmluZ10pIHtcbiAgICByZXR1cm4gYm91bmRzT2ZDdXJ2ZUNhY2hlW2FyZ3NTdHJpbmddO1xuICB9XG5cbiAgdmFyIHNxcnQgPSBNYXRoLnNxcnQsXG4gICAgICBtaW4gPSBNYXRoLm1pbiwgbWF4ID0gTWF0aC5tYXgsXG4gICAgICBhYnMgPSBNYXRoLmFicywgdHZhbHVlcyA9IFtdLFxuICAgICAgYm91bmRzID0gW1tdLCBbXV0sXG4gICAgICBhLCBiLCBjLCB0LCB0MSwgdDIsIGIyYWMsIHNxcnRiMmFjO1xuXG4gIGIgPSA2ICogeDAgLSAxMiAqIHgxICsgNiAqIHgyO1xuICBhID0gLTMgKiB4MCArIDkgKiB4MSAtIDkgKiB4MiArIDMgKiB4MztcbiAgYyA9IDMgKiB4MSAtIDMgKiB4MDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDI7ICsraSkge1xuICAgIGlmIChpID4gMCkge1xuICAgICAgYiA9IDYgKiB5MCAtIDEyICogeTEgKyA2ICogeTI7XG4gICAgICBhID0gLTMgKiB5MCArIDkgKiB5MSAtIDkgKiB5MiArIDMgKiB5MztcbiAgICAgIGMgPSAzICogeTEgLSAzICogeTA7XG4gICAgfVxuXG4gICAgaWYgKGFicyhhKSA8IDFlLTEyKSB7XG4gICAgICBpZiAoYWJzKGIpIDwgMWUtMTIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB0ID0gLWMgLyBiO1xuICAgICAgaWYgKDAgPCB0ICYmIHQgPCAxKSB7XG4gICAgICAgIHR2YWx1ZXMucHVzaCh0KTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBiMmFjID0gYiAqIGIgLSA0ICogYyAqIGE7XG4gICAgaWYgKGIyYWMgPCAwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgc3FydGIyYWMgPSBzcXJ0KGIyYWMpO1xuICAgIHQxID0gKC1iICsgc3FydGIyYWMpIC8gKDIgKiBhKTtcbiAgICBpZiAoMCA8IHQxICYmIHQxIDwgMSkge1xuICAgICAgdHZhbHVlcy5wdXNoKHQxKTtcbiAgICB9XG4gICAgdDIgPSAoLWIgLSBzcXJ0YjJhYykgLyAoMiAqIGEpO1xuICAgIGlmICgwIDwgdDIgJiYgdDIgPCAxKSB7XG4gICAgICB0dmFsdWVzLnB1c2godDIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciB4LCB5LCBqID0gdHZhbHVlcy5sZW5ndGgsIGpsZW4gPSBqLCBtdDtcbiAgd2hpbGUgKGotLSkge1xuICAgIHQgPSB0dmFsdWVzW2pdO1xuICAgIG10ID0gMSAtIHQ7XG4gICAgeCA9IChtdCAqIG10ICogbXQgKiB4MCkgKyAoMyAqIG10ICogbXQgKiB0ICogeDEpICsgKDMgKiBtdCAqIHQgKiB0ICogeDIpICsgKHQgKiB0ICogdCAqIHgzKTtcbiAgICBib3VuZHNbMF1bal0gPSB4O1xuXG4gICAgeSA9IChtdCAqIG10ICogbXQgKiB5MCkgKyAoMyAqIG10ICogbXQgKiB0ICogeTEpICsgKDMgKiBtdCAqIHQgKiB0ICogeTIpICsgKHQgKiB0ICogdCAqIHkzKTtcbiAgICBib3VuZHNbMV1bal0gPSB5O1xuICB9XG5cbiAgYm91bmRzWzBdW2psZW5dID0geDA7XG4gIGJvdW5kc1sxXVtqbGVuXSA9IHkwO1xuICBib3VuZHNbMF1bamxlbiArIDFdID0geDM7XG4gIGJvdW5kc1sxXVtqbGVuICsgMV0gPSB5MztcbiAgdmFyIHJlc3VsdCA9IFtcbiAgICB7XG4gICAgICB4OiBtaW4uYXBwbHkobnVsbCwgYm91bmRzWzBdKSxcbiAgICAgIHk6IG1pbi5hcHBseShudWxsLCBib3VuZHNbMV0pXG4gICAgfSxcbiAgICB7XG4gICAgICB4OiBtYXguYXBwbHkobnVsbCwgYm91bmRzWzBdKSxcbiAgICAgIHk6IG1heC5hcHBseShudWxsLCBib3VuZHNbMV0pXG4gICAgfVxuICBdO1xuICBib3VuZHNPZkN1cnZlQ2FjaGVbYXJnc1N0cmluZ10gPSByZXN1bHQ7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGRyYXdBcmM6IGRyYXdBcmMsXG4gICAgZ2V0Qm91bmRzT2ZDdXJ2ZTogZ2V0Qm91bmRzT2ZDdXJ2ZSxcbiAgICBnZXRCb3VuZHNPZkFyYzogZ2V0Qm91bmRzT2ZBcmNcbn1cblxuIiwiaW1wb3J0IHsgU0hBUEVTIH0gZnJvbSAnLi4vLi4vY29uc3QnO1xuXG4vKipcbiAqIFJlY3RhbmdsZSBvYmplY3QgaXMgYW4gYXJlYSBkZWZpbmVkIGJ5IGl0cyBwb3NpdGlvbiwgYXMgaW5kaWNhdGVkIGJ5IGl0cyB0b3AtbGVmdCBjb3JuZXJcbiAqIHBvaW50ICh4LCB5KSBhbmQgYnkgaXRzIHdpZHRoIGFuZCBpdHMgaGVpZ2h0LlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVjdGFuZ2xlXG57XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt4PTBdIC0gVGhlIFggY29vcmRpbmF0ZSBvZiB0aGUgdXBwZXItbGVmdCBjb3JuZXIgb2YgdGhlIHJlY3RhbmdsZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbeT0wXSAtIFRoZSBZIGNvb3JkaW5hdGUgb2YgdGhlIHVwcGVyLWxlZnQgY29ybmVyIG9mIHRoZSByZWN0YW5nbGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dpZHRoPTBdIC0gVGhlIG92ZXJhbGwgd2lkdGggb2YgdGhpcyByZWN0YW5nbGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodD0wXSAtIFRoZSBvdmVyYWxsIGhlaWdodCBvZiB0aGlzIHJlY3RhbmdsZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0gMCwgd2lkdGggPSAwLCBoZWlnaHQgPSAwKVxuICAgIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQGRlZmF1bHQgMFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy54ID0geDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnkgPSB5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHR5cGUgb2YgdGhlIG9iamVjdCwgbWFpbmx5IHVzZWQgdG8gYXZvaWQgYGluc3RhbmNlb2ZgIGNoZWNrc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgKiBAZGVmYXVsdCBQSVhJLlNIQVBFUy5SRUNUXG4gICAgICAgICAqIEBzZWUgUElYSS5TSEFQRVNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHlwZSA9IFNIQVBFUy5SRUNUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJldHVybnMgdGhlIGxlZnQgZWRnZSBvZiB0aGUgcmVjdGFuZ2xlXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgZ2V0IGxlZnQoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZXR1cm5zIHRoZSByaWdodCBlZGdlIG9mIHRoZSByZWN0YW5nbGVcbiAgICAgKlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgcmlnaHQoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueCArIHRoaXMud2lkdGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcmV0dXJucyB0aGUgdG9wIGVkZ2Ugb2YgdGhlIHJlY3RhbmdsZVxuICAgICAqXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIGdldCB0b3AoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZXR1cm5zIHRoZSBib3R0b20gZWRnZSBvZiB0aGUgcmVjdGFuZ2xlXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgZ2V0IGJvdHRvbSgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy55ICsgdGhpcy5oZWlnaHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBjb25zdGFudCBlbXB0eSByZWN0YW5nbGUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgc3RhdGljIGdldCBFTVBUWSgpXG4gICAge1xuICAgICAgICByZXR1cm4gbmV3IFJlY3RhbmdsZSgwLCAwLCAwLCAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhpcyBSZWN0YW5nbGVcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1BJWEkuUmVjdGFuZ2xlfSBhIGNvcHkgb2YgdGhlIHJlY3RhbmdsZVxuICAgICAqL1xuICAgIGNsb25lKClcbiAgICB7XG4gICAgICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlKHRoaXMueCwgdGhpcy55LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIGFub3RoZXIgcmVjdGFuZ2xlIHRvIHRoaXMgb25lLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLlJlY3RhbmdsZX0gcmVjdGFuZ2xlIC0gVGhlIHJlY3RhbmdsZSB0byBjb3B5LlxuICAgICAqIEByZXR1cm4ge1BJWEkuUmVjdGFuZ2xlfSBSZXR1cm5zIGl0c2VsZi5cbiAgICAgKi9cbiAgICBjb3B5KHJlY3RhbmdsZSlcbiAgICB7XG4gICAgICAgIHRoaXMueCA9IHJlY3RhbmdsZS54O1xuICAgICAgICB0aGlzLnkgPSByZWN0YW5nbGUueTtcbiAgICAgICAgdGhpcy53aWR0aCA9IHJlY3RhbmdsZS53aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSByZWN0YW5nbGUuaGVpZ2h0O1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSB4IGFuZCB5IGNvb3JkaW5hdGVzIGdpdmVuIGFyZSBjb250YWluZWQgd2l0aGluIHRoaXMgUmVjdGFuZ2xlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSBYIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50IHRvIHRlc3RcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSBZIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50IHRvIHRlc3RcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB4L3kgY29vcmRpbmF0ZXMgYXJlIHdpdGhpbiB0aGlzIFJlY3RhbmdsZVxuICAgICAqL1xuICAgIGNvbnRhaW5zKHgsIHkpXG4gICAge1xuICAgICAgICBpZiAodGhpcy53aWR0aCA8PSAwIHx8IHRoaXMuaGVpZ2h0IDw9IDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh4ID49IHRoaXMueCAmJiB4IDwgdGhpcy54ICsgdGhpcy53aWR0aClcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHkgPj0gdGhpcy55ICYmIHkgPCB0aGlzLnkgKyB0aGlzLmhlaWdodClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIHRoZSByZWN0YW5nbGUgbWFraW5nIGl0IGdyb3cgaW4gYWxsIGRpcmVjdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGFkZGluZ1ggLSBUaGUgaG9yaXpvbnRhbCBwYWRkaW5nIGFtb3VudC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGFkZGluZ1kgLSBUaGUgdmVydGljYWwgcGFkZGluZyBhbW91bnQuXG4gICAgICovXG4gICAgcGFkKHBhZGRpbmdYLCBwYWRkaW5nWSlcbiAgICB7XG4gICAgICAgIHBhZGRpbmdYID0gcGFkZGluZ1ggfHwgMDtcbiAgICAgICAgcGFkZGluZ1kgPSBwYWRkaW5nWSB8fCAoKHBhZGRpbmdZICE9PSAwKSA/IHBhZGRpbmdYIDogMCk7XG5cbiAgICAgICAgdGhpcy54IC09IHBhZGRpbmdYO1xuICAgICAgICB0aGlzLnkgLT0gcGFkZGluZ1k7XG5cbiAgICAgICAgdGhpcy53aWR0aCArPSBwYWRkaW5nWCAqIDI7XG4gICAgICAgIHRoaXMuaGVpZ2h0ICs9IHBhZGRpbmdZICogMjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaXRzIHRoaXMgcmVjdGFuZ2xlIGFyb3VuZCB0aGUgcGFzc2VkIG9uZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5SZWN0YW5nbGV9IHJlY3RhbmdsZSAtIFRoZSByZWN0YW5nbGUgdG8gZml0LlxuICAgICAqL1xuICAgIGZpdChyZWN0YW5nbGUpXG4gICAge1xuICAgICAgICBpZiAodGhpcy54IDwgcmVjdGFuZ2xlLngpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggKz0gdGhpcy54O1xuICAgICAgICAgICAgaWYgKHRoaXMud2lkdGggPCAwKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMud2lkdGggPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnggPSByZWN0YW5nbGUueDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnkgPCByZWN0YW5nbGUueSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgKz0gdGhpcy55O1xuICAgICAgICAgICAgaWYgKHRoaXMuaGVpZ2h0IDwgMClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhlaWdodCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnkgPSByZWN0YW5nbGUueTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnggKyB0aGlzLndpZHRoID4gcmVjdGFuZ2xlLnggKyByZWN0YW5nbGUud2lkdGgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSByZWN0YW5nbGUud2lkdGggLSB0aGlzLng7XG4gICAgICAgICAgICBpZiAodGhpcy53aWR0aCA8IDApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy55ICsgdGhpcy5oZWlnaHQgPiByZWN0YW5nbGUueSArIHJlY3RhbmdsZS5oZWlnaHQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gcmVjdGFuZ2xlLmhlaWdodCAtIHRoaXMueTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhlaWdodCA8IDApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5sYXJnZXMgdGhpcyByZWN0YW5nbGUgdG8gaW5jbHVkZSB0aGUgcGFzc2VkIHJlY3RhbmdsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5SZWN0YW5nbGV9IHJlY3RhbmdsZSAtIFRoZSByZWN0YW5nbGUgdG8gaW5jbHVkZS5cbiAgICAgKi9cbiAgICBlbmxhcmdlKHJlY3RhbmdsZSlcbiAgICB7XG4gICAgICAgIGNvbnN0IHgxID0gTWF0aC5taW4odGhpcy54LCByZWN0YW5nbGUueCk7XG4gICAgICAgIGNvbnN0IHgyID0gTWF0aC5tYXgodGhpcy54ICsgdGhpcy53aWR0aCwgcmVjdGFuZ2xlLnggKyByZWN0YW5nbGUud2lkdGgpO1xuICAgICAgICBjb25zdCB5MSA9IE1hdGgubWluKHRoaXMueSwgcmVjdGFuZ2xlLnkpO1xuICAgICAgICBjb25zdCB5MiA9IE1hdGgubWF4KHRoaXMueSArIHRoaXMuaGVpZ2h0LCByZWN0YW5nbGUueSArIHJlY3RhbmdsZS5oZWlnaHQpO1xuXG4gICAgICAgIHRoaXMueCA9IHgxO1xuICAgICAgICB0aGlzLndpZHRoID0geDIgLSB4MTtcbiAgICAgICAgdGhpcy55ID0geTE7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0geTIgLSB5MTtcbiAgICB9XG59XG4iLCJpbXBvcnQgUmVjdGFuZ2xlIGZyb20gJy4vUmVjdGFuZ2xlJztcbmltcG9ydCB7IFNIQVBFUyB9IGZyb20gJy4uLy4uL2NvbnN0JztcblxuLyoqXG4gKiBUaGUgQ2lyY2xlIG9iamVjdCBjYW4gYmUgdXNlZCB0byBzcGVjaWZ5IGEgaGl0IGFyZWEgZm9yIGRpc3BsYXlPYmplY3RzXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaXJjbGVcbntcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3g9MF0gLSBUaGUgWCBjb29yZGluYXRlIG9mIHRoZSBjZW50ZXIgb2YgdGhpcyBjaXJjbGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3k9MF0gLSBUaGUgWSBjb29yZGluYXRlIG9mIHRoZSBjZW50ZXIgb2YgdGhpcyBjaXJjbGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl1cz0wXSAtIFRoZSByYWRpdXMgb2YgdGhlIGNpcmNsZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0gMCwgcmFkaXVzID0gMClcbiAgICB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMueCA9IHg7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQGRlZmF1bHQgMFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy55ID0geTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cztcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHR5cGUgb2YgdGhlIG9iamVjdCwgbWFpbmx5IHVzZWQgdG8gYXZvaWQgYGluc3RhbmNlb2ZgIGNoZWNrc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgKiBAZGVmYXVsdCBQSVhJLlNIQVBFUy5DSVJDXG4gICAgICAgICAqIEBzZWUgUElYSS5TSEFQRVNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHlwZSA9IFNIQVBFUy5DSVJDO1xuXG4gICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhpcyBDaXJjbGUgaW5zdGFuY2VcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1BJWEkuQ2lyY2xlfSBhIGNvcHkgb2YgdGhlIENpcmNsZVxuICAgICAqL1xuICAgIGNsb25lKClcbiAgICB7XG4gICAgICAgIHJldHVybiBuZXcgQ2lyY2xlKHRoaXMueCwgdGhpcy55LCB0aGlzLnJhZGl1cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIHggYW5kIHkgY29vcmRpbmF0ZXMgZ2l2ZW4gYXJlIGNvbnRhaW5lZCB3aXRoaW4gdGhpcyBjaXJjbGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIFggY29vcmRpbmF0ZSBvZiB0aGUgcG9pbnQgdG8gdGVzdFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIFkgY29vcmRpbmF0ZSBvZiB0aGUgcG9pbnQgdG8gdGVzdFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHgveSBjb29yZGluYXRlcyBhcmUgd2l0aGluIHRoaXMgQ2lyY2xlXG4gICAgICovXG4gICAgY29udGFpbnMoeCwgeSlcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLnJhZGl1cyA8PSAwKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByMiA9IHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXM7XG4gICAgICAgIGxldCBkeCA9ICh0aGlzLnggLSB4KTtcbiAgICAgICAgbGV0IGR5ID0gKHRoaXMueSAtIHkpO1xuXG4gICAgICAgIGR4ICo9IGR4O1xuICAgICAgICBkeSAqPSBkeTtcblxuICAgICAgICByZXR1cm4gKGR4ICsgZHkgPD0gcjIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogUmV0dXJucyB0aGUgZnJhbWluZyByZWN0YW5nbGUgb2YgdGhlIGNpcmNsZSBhcyBhIFJlY3RhbmdsZSBvYmplY3RcbiAgICAqXG4gICAgKiBAcmV0dXJuIHtQSVhJLlJlY3RhbmdsZX0gdGhlIGZyYW1pbmcgcmVjdGFuZ2xlXG4gICAgKi9cbiAgICBnZXRCb3VuZHMoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWN0YW5nbGUodGhpcy54IC0gdGhpcy5yYWRpdXMsIHRoaXMueSAtIHRoaXMucmFkaXVzLCB0aGlzLnJhZGl1cyAqIDIsIHRoaXMucmFkaXVzICogMik7XG4gICAgfVxufVxuIiwiaW1wb3J0IFJlY3RhbmdsZSBmcm9tICcuL1JlY3RhbmdsZSc7XG5pbXBvcnQgeyBTSEFQRVMgfSBmcm9tICcuLi8uLi9jb25zdCc7XG5cbi8qKlxuICogVGhlIEVsbGlwc2Ugb2JqZWN0IGNhbiBiZSB1c2VkIHRvIHNwZWNpZnkgYSBoaXQgYXJlYSBmb3IgZGlzcGxheU9iamVjdHNcbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVsbGlwc2VcbntcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3g9MF0gLSBUaGUgWCBjb29yZGluYXRlIG9mIHRoZSBjZW50ZXIgb2YgdGhpcyBjaXJjbGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3k9MF0gLSBUaGUgWSBjb29yZGluYXRlIG9mIHRoZSBjZW50ZXIgb2YgdGhpcyBjaXJjbGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dpZHRoPTBdIC0gVGhlIGhhbGYgd2lkdGggb2YgdGhpcyBlbGxpcHNlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtoZWlnaHQ9MF0gLSBUaGUgaGFsZiBoZWlnaHQgb2YgdGhpcyBlbGxpcHNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoeCA9IDAsIHkgPSAwLCB3aWR0aCA9IDAsIGhlaWdodCA9IDApXG4gICAge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnggPSB4O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMueSA9IHk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQGRlZmF1bHQgMFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdHlwZSBvZiB0aGUgb2JqZWN0LCBtYWlubHkgdXNlZCB0byBhdm9pZCBgaW5zdGFuY2VvZmAgY2hlY2tzXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQHJlYWRPbmx5XG4gICAgICAgICAqIEBkZWZhdWx0IFBJWEkuU0hBUEVTLkVMSVBcbiAgICAgICAgICogQHNlZSBQSVhJLlNIQVBFU1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50eXBlID0gU0hBUEVTLkVMSVA7XG5cbiAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGlzIEVsbGlwc2UgaW5zdGFuY2VcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1BJWEkuRWxsaXBzZX0gYSBjb3B5IG9mIHRoZSBlbGxpcHNlXG4gICAgICovXG4gICAgY2xvbmUoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFbGxpcHNlKHRoaXMueCwgdGhpcy55LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIHggYW5kIHkgY29vcmRpbmF0ZXMgZ2l2ZW4gYXJlIGNvbnRhaW5lZCB3aXRoaW4gdGhpcyBlbGxpcHNlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSBYIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50IHRvIHRlc3RcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSBZIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50IHRvIHRlc3RcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB4L3kgY29vcmRzIGFyZSB3aXRoaW4gdGhpcyBlbGxpcHNlXG4gICAgICovXG4gICAgY29udGFpbnMoeCwgeSlcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLndpZHRoIDw9IDAgfHwgdGhpcy5oZWlnaHQgPD0gMClcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm9ybWFsaXplIHRoZSBjb29yZHMgdG8gYW4gZWxsaXBzZSB3aXRoIGNlbnRlciAwLDBcbiAgICAgICAgbGV0IG5vcm14ID0gKCh4IC0gdGhpcy54KSAvIHRoaXMud2lkdGgpO1xuICAgICAgICBsZXQgbm9ybXkgPSAoKHkgLSB0aGlzLnkpIC8gdGhpcy5oZWlnaHQpO1xuXG4gICAgICAgIG5vcm14ICo9IG5vcm14O1xuICAgICAgICBub3JteSAqPSBub3JteTtcblxuICAgICAgICByZXR1cm4gKG5vcm14ICsgbm9ybXkgPD0gMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZnJhbWluZyByZWN0YW5nbGUgb2YgdGhlIGVsbGlwc2UgYXMgYSBSZWN0YW5nbGUgb2JqZWN0XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQSVhJLlJlY3RhbmdsZX0gdGhlIGZyYW1pbmcgcmVjdGFuZ2xlXG4gICAgICovXG4gICAgZ2V0Qm91bmRzKClcbiAgICB7XG4gICAgICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlKHRoaXMueCAtIHRoaXMud2lkdGgsIHRoaXMueSAtIHRoaXMuaGVpZ2h0LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IFBvaW50IGZyb20gJy4uL1BvaW50JztcbmltcG9ydCB7IFNIQVBFUyB9IGZyb20gJy4uLy4uL2NvbnN0JztcblxuLyoqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvbHlnb25cbntcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1BJWEkuUG9pbnRbXXxudW1iZXJbXX0gcG9pbnRzIC0gVGhpcyBjYW4gYmUgYW4gYXJyYXkgb2YgUG9pbnRzXG4gICAgICogIHRoYXQgZm9ybSB0aGUgcG9seWdvbiwgYSBmbGF0IGFycmF5IG9mIG51bWJlcnMgdGhhdCB3aWxsIGJlIGludGVycHJldGVkIGFzIFt4LHksIHgseSwgLi4uXSwgb3JcbiAgICAgKiAgdGhlIGFyZ3VtZW50cyBwYXNzZWQgY2FuIGJlIGFsbCB0aGUgcG9pbnRzIG9mIHRoZSBwb2x5Z29uIGUuZy5cbiAgICAgKiAgYG5ldyBQSVhJLlBvbHlnb24obmV3IFBJWEkuUG9pbnQoKSwgbmV3IFBJWEkuUG9pbnQoKSwgLi4uKWAsIG9yIHRoZSBhcmd1bWVudHMgcGFzc2VkIGNhbiBiZSBmbGF0XG4gICAgICogIHgseSB2YWx1ZXMgZS5nLiBgbmV3IFBvbHlnb24oeCx5LCB4LHksIHgseSwgLi4uKWAgd2hlcmUgYHhgIGFuZCBgeWAgYXJlIE51bWJlcnMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoLi4ucG9pbnRzKVxuICAgIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocG9pbnRzWzBdKSlcbiAgICAgICAge1xuICAgICAgICAgICAgcG9pbnRzID0gcG9pbnRzWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgdGhpcyBpcyBhbiBhcnJheSBvZiBwb2ludHMsIGNvbnZlcnQgaXQgdG8gYSBmbGF0IGFycmF5IG9mIG51bWJlcnNcbiAgICAgICAgaWYgKHBvaW50c1swXSBpbnN0YW5jZW9mIFBvaW50KVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBwID0gW107XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHAucHVzaChwb2ludHNbaV0ueCwgcG9pbnRzW2ldLnkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwb2ludHMgPSBwO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBhcnJheSBvZiB0aGUgcG9pbnRzIG9mIHRoaXMgcG9seWdvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJbXX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucG9pbnRzID0gcG9pbnRzO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdHlwZSBvZiB0aGUgb2JqZWN0LCBtYWlubHkgdXNlZCB0byBhdm9pZCBgaW5zdGFuY2VvZmAgY2hlY2tzXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQHJlYWRPbmx5XG4gICAgICAgICAqIEBkZWZhdWx0IFBJWEkuU0hBUEVTLlBPTFlcbiAgICAgICAgICogQHNlZSBQSVhJLlNIQVBFU1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50eXBlID0gU0hBUEVTLlBPTFk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoaXMgcG9seWdvblxuICAgICAqXG4gICAgICogQHJldHVybiB7UElYSS5Qb2x5Z29ufSBhIGNvcHkgb2YgdGhlIHBvbHlnb25cbiAgICAgKi9cbiAgICBjbG9uZSgpXG4gICAge1xuICAgICAgICByZXR1cm4gbmV3IFBvbHlnb24odGhpcy5wb2ludHMuc2xpY2UoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBwb2x5Z29uLCBhZGRpbmcgcG9pbnRzIGlmIG5lY2Vzc2FyeS5cbiAgICAgKlxuICAgICAqL1xuICAgIGNsb3NlKClcbiAgICB7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzO1xuICAgICAgICBpZiAocG9pbnRzWzBdICE9PSBwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDJdIHx8IHBvaW50c1sxXSAhPT0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXSlcbiAgICAgICAge1xuICAgICAgICAgICAgcG9pbnRzLnB1c2gocG9pbnRzWzBdLCBwb2ludHNbMV0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb250YWlucyh4LCB5KVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzSW5zaWRlUG9seWdvbl9XaW5kaW5nTnVtYmVyKHgseSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDlpJrovrnlvaLljIXlkKvliKTmlq0gTm9uemVybyBXaW5kaW5nIE51bWJlciBSdWxlXG4gICAgICovXG4gICAgX2lzSW5zaWRlUG9seWdvbl9XaW5kaW5nTnVtYmVyKHgsIHkpIFxuICAgIHtcbiAgICAgICAgdmFyIHBvaW50cyA9IHRoaXMucG9pbnRzO1xuICAgICAgICB2YXIgd24gPSAwO1xuICAgICAgICBmb3IgKHZhciBzaGlmdFAsIHNoaWZ0ID0gcG9pbnRzWzFdID4geSwgaSA9IDM7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgICAgIHNoaWZ0UCA9IHNoaWZ0O1xuICAgICAgICAgICAgc2hpZnQgPSBwb2ludHNbaV0gPiB5O1xuICAgICAgICAgICAgaWYgKHNoaWZ0UCAhPSBzaGlmdCkge1xuICAgICAgICAgICAgICAgIHZhciBuID0gKHNoaWZ0UCA/IDEgOiAwKSAtIChzaGlmdCA/IDEgOiAwKTtcbiAgICAgICAgICAgICAgICBpZiAobiAqICgocG9pbnRzW2kgLSAzXSAtIHgpICogKHBvaW50c1tpIC0gMF0gLSB5KSAtIChwb2ludHNbaSAtIDJdIC0geSkgKiAocG9pbnRzW2kgLSAxXSAtIHgpKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgd24gKz0gbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gd25cbiAgICB9XG59XG4iLCIvKipcbiAqIE1hdGggY2xhc3NlcyBhbmQgdXRpbGl0aWVzIG1peGVkIGludG8gUElYSSBuYW1lc3BhY2UuXG4gKlxuICogQGxlbmRzIFBJWElcbiAqL1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQb2ludCB9IGZyb20gJy4vUG9pbnQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBNYXRyaXggfSBmcm9tICcuL01hdHJpeCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEdyb3VwRDggfSBmcm9tICcuL0dyb3VwRDgnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBBcmMgfSBmcm9tICcuL0FyYyc7XG5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgQ2lyY2xlIH0gZnJvbSAnLi9zaGFwZXMvQ2lyY2xlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRWxsaXBzZSB9IGZyb20gJy4vc2hhcGVzL0VsbGlwc2UnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQb2x5Z29uIH0gZnJvbSAnLi9zaGFwZXMvUG9seWdvbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFJlY3RhbmdsZSB9IGZyb20gJy4vc2hhcGVzL1JlY3RhbmdsZSc7XG5cblxuIiwiXG4vKipcbiAqIEhlbHBlciBjbGFzcyB0byBjcmVhdGUgYSB3ZWJHTCBDb250ZXh0XG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSS5nbENvcmVcbiAqIEBwYXJhbSBjYW52YXMge0hUTUxDYW52YXNFbGVtZW50fSB0aGUgY2FudmFzIGVsZW1lbnQgdGhhdCB3ZSB3aWxsIGdldCB0aGUgY29udGV4dCBmcm9tXG4gKiBAcGFyYW0gb3B0aW9ucyB7T2JqZWN0fSBBbiBvcHRpb25zIG9iamVjdCB0aGF0IGdldHMgcGFzc2VkIGluIHRvIHRoZSBjYW52YXMgZWxlbWVudCBjb250YWluaW5nIHRoZSBjb250ZXh0IGF0dHJpYnV0ZXMsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0hUTUxDYW52YXNFbGVtZW50L2dldENvbnRleHQgZm9yIHRoZSBvcHRpb25zIGF2YWlsYWJsZVxuICogQHJldHVybiB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSB0aGUgV2ViR0wgY29udGV4dFxuICovXG52YXIgY3JlYXRlQ29udGV4dCA9IGZ1bmN0aW9uKGNhbnZhcywgb3B0aW9ucylcbntcbiAgICB2YXIgZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnLCBvcHRpb25zKSB8fCBcbiAgICAgICAgIGNhbnZhcy5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnLCBvcHRpb25zKTtcblxuICAgIGlmICghZ2wpXG4gICAge1xuICAgICAgICAvLyBmYWlsLCBub3QgYWJsZSB0byBnZXQgYSBjb250ZXh0XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgd2ViR0wuIFRyeSB1c2luZyB0aGUgY2FudmFzIHJlbmRlcmVyJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdsO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVDb250ZXh0O1xuIiwiLy8gdmFyIEdMX01BUCA9IHt9O1xuXG4vKipcbiAqIEBwYXJhbSBnbCB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBUaGUgY3VycmVudCBXZWJHTCBjb250ZXh0XG4gKiBAcGFyYW0gYXR0cmlicyB7Kn1cbiAqIEBwYXJhbSBzdGF0ZSB7Kn1cbiAqL1xudmFyIHNldFZlcnRleEF0dHJpYkFycmF5cyA9IGZ1bmN0aW9uIChnbCwgYXR0cmlicywgc3RhdGUpXG57XG4gICAgdmFyIGk7XG4gICAgaWYoc3RhdGUpXG4gICAge1xuICAgICAgICB2YXIgdGVtcEF0dHJpYlN0YXRlID0gc3RhdGUudGVtcEF0dHJpYlN0YXRlLFxuICAgICAgICAgICAgYXR0cmliU3RhdGUgPSBzdGF0ZS5hdHRyaWJTdGF0ZTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGVtcEF0dHJpYlN0YXRlLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0ZW1wQXR0cmliU3RhdGVbaV0gPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNldCB0aGUgbmV3IGF0dHJpYnNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGF0dHJpYnMubGVuZ3RoOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRlbXBBdHRyaWJTdGF0ZVthdHRyaWJzW2ldLmF0dHJpYnV0ZS5sb2NhdGlvbl0gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGF0dHJpYlN0YXRlLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoYXR0cmliU3RhdGVbaV0gIT09IHRlbXBBdHRyaWJTdGF0ZVtpXSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJTdGF0ZVtpXSA9IHRlbXBBdHRyaWJTdGF0ZVtpXTtcblxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5hdHRyaWJTdGF0ZVtpXSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG4gICAgZWxzZVxuICAgIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGF0dHJpYnMubGVuZ3RoOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBhdHRyaWIgPSBhdHRyaWJzW2ldO1xuICAgICAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoYXR0cmliLmF0dHJpYnV0ZS5sb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFZlcnRleEF0dHJpYkFycmF5cztcbiIsInZhciBFTVBUWV9BUlJBWV9CVUZGRVIgPSBuZXcgQXJyYXlCdWZmZXIoMCk7XG5cbi8qKlxuICogSGVscGVyIGNsYXNzIHRvIGNyZWF0ZSBhIHdlYkdMIGJ1ZmZlclxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWEkuZ2xDb3JlXG4gKiBAcGFyYW0gZ2wge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gVGhlIGN1cnJlbnQgV2ViR0wgcmVuZGVyaW5nIGNvbnRleHRcbiAqIEBwYXJhbSB0eXBlIHtnbC5BUlJBWV9CVUZGRVIgfCBnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUn0gQG1hdFxuICogQHBhcmFtIGRhdGEge0FycmF5QnVmZmVyfCBTaGFyZWRBcnJheUJ1ZmZlcnxBcnJheUJ1ZmZlclZpZXd9IGFuIGFycmF5IG9mIGRhdGFcbiAqIEBwYXJhbSBkcmF3VHlwZSB7Z2wuU1RBVElDX0RSQVd8Z2wuRFlOQU1JQ19EUkFXfGdsLlNUUkVBTV9EUkFXfVxuICovXG52YXIgQnVmZmVyID0gZnVuY3Rpb24oZ2wsIHR5cGUsIGRhdGEsIGRyYXdUeXBlKVxue1xuXG5cdC8qKlxuICAgICAqIFRoZSBjdXJyZW50IFdlYkdMIHJlbmRlcmluZyBjb250ZXh0XG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9XG4gICAgICovXG5cdHRoaXMuZ2wgPSBnbDtcblxuXHQvKipcbiAgICAgKiBUaGUgV2ViR0wgYnVmZmVyLCBjcmVhdGVkIHVwb24gaW5zdGFudGlhdGlvblxuICAgICAqXG4gICAgICogQG1lbWJlciB7V2ViR0xCdWZmZXJ9XG4gICAgICovXG5cdHRoaXMuYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG5cblx0LyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIGJ1ZmZlclxuICAgICAqXG4gICAgICogQG1lbWJlciB7Z2wuQVJSQVlfQlVGRkVSfGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSfVxuICAgICAqL1xuXHR0aGlzLnR5cGUgPSB0eXBlIHx8IGdsLkFSUkFZX0JVRkZFUjtcblxuXHQvKipcbiAgICAgKiBUaGUgZHJhdyB0eXBlIG9mIHRoZSBidWZmZXJcbiAgICAgKlxuICAgICAqIEBtZW1iZXIge2dsLlNUQVRJQ19EUkFXfGdsLkRZTkFNSUNfRFJBV3xnbC5TVFJFQU1fRFJBV31cbiAgICAgKi9cblx0dGhpcy5kcmF3VHlwZSA9IGRyYXdUeXBlIHx8IGdsLlNUQVRJQ19EUkFXO1xuXG5cdC8qKlxuICAgICAqIFRoZSBkYXRhIGluIHRoZSBidWZmZXIsIGFzIGEgdHlwZWQgYXJyYXlcbiAgICAgKlxuICAgICAqIEBtZW1iZXIge0FycmF5QnVmZmVyfCBTaGFyZWRBcnJheUJ1ZmZlcnxBcnJheUJ1ZmZlclZpZXd9XG4gICAgICovXG5cdHRoaXMuZGF0YSA9IEVNUFRZX0FSUkFZX0JVRkZFUjtcblxuXHRpZihkYXRhKVxuXHR7XG5cdFx0dGhpcy51cGxvYWQoZGF0YSk7XG5cdH1cblxuXHR0aGlzLl91cGRhdGVJRCA9IDA7XG59O1xuXG4vKipcbiAqIFVwbG9hZHMgdGhlIGJ1ZmZlciB0byB0aGUgR1BVXG4gKiBAcGFyYW0gZGF0YSB7QXJyYXlCdWZmZXJ8IFNoYXJlZEFycmF5QnVmZmVyfEFycmF5QnVmZmVyVmlld30gYW4gYXJyYXkgb2YgZGF0YSB0byB1cGxvYWRcbiAqIEBwYXJhbSBvZmZzZXQge051bWJlcn0gaWYgb25seSBhIHN1YnNldCBvZiB0aGUgZGF0YSBzaG91bGQgYmUgdXBsb2FkZWQsIHRoaXMgaXMgdGhlIGFtb3VudCBvZiBkYXRhIHRvIHN1YnRyYWN0XG4gKiBAcGFyYW0gZG9udEJpbmQge0Jvb2xlYW59IHdoZXRoZXIgdG8gYmluZCB0aGUgYnVmZmVyIGJlZm9yZSB1cGxvYWRpbmcgaXRcbiAqL1xuQnVmZmVyLnByb3RvdHlwZS51cGxvYWQgPSBmdW5jdGlvbihkYXRhLCBvZmZzZXQsIGRvbnRCaW5kKVxue1xuXHQvLyB0b2RvIC0gbmVlZGVkP1xuXHRpZighZG9udEJpbmQpIHRoaXMuYmluZCgpO1xuXG5cdHZhciBnbCA9IHRoaXMuZ2w7XG5cblx0ZGF0YSA9IGRhdGEgfHwgdGhpcy5kYXRhO1xuXHRvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuXHRpZih0aGlzLmRhdGEuYnl0ZUxlbmd0aCA+PSBkYXRhLmJ5dGVMZW5ndGgpXG5cdHtcblx0XHRnbC5idWZmZXJTdWJEYXRhKHRoaXMudHlwZSwgb2Zmc2V0LCBkYXRhKTtcblx0fVxuXHRlbHNlXG5cdHtcblx0XHRnbC5idWZmZXJEYXRhKHRoaXMudHlwZSwgZGF0YSwgdGhpcy5kcmF3VHlwZSk7XG5cdH1cblxuXHR0aGlzLmRhdGEgPSBkYXRhO1xufTtcbi8qKlxuICogQmluZHMgdGhlIGJ1ZmZlclxuICpcbiAqL1xuQnVmZmVyLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24oKVxue1xuXHR2YXIgZ2wgPSB0aGlzLmdsO1xuXHRnbC5iaW5kQnVmZmVyKHRoaXMudHlwZSwgdGhpcy5idWZmZXIpO1xufTtcblxuQnVmZmVyLmNyZWF0ZVZlcnRleEJ1ZmZlciA9IGZ1bmN0aW9uKGdsLCBkYXRhLCBkcmF3VHlwZSlcbntcblx0cmV0dXJuIG5ldyBCdWZmZXIoZ2wsIGdsLkFSUkFZX0JVRkZFUiwgZGF0YSwgZHJhd1R5cGUpO1xufTtcblxuQnVmZmVyLmNyZWF0ZUluZGV4QnVmZmVyID0gZnVuY3Rpb24oZ2wsIGRhdGEsIGRyYXdUeXBlKVxue1xuXHRyZXR1cm4gbmV3IEJ1ZmZlcihnbCwgZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGRhdGEsIGRyYXdUeXBlKTtcbn07XG5cbkJ1ZmZlci5jcmVhdGUgPSBmdW5jdGlvbihnbCwgdHlwZSwgZGF0YSwgZHJhd1R5cGUpXG57XG5cdHJldHVybiBuZXcgQnVmZmVyKGdsLCB0eXBlLCBkYXRhLCBkcmF3VHlwZSk7XG59O1xuXG4vKipcbiAqIERlc3Ryb3lzIHRoZSBidWZmZXJcbiAqXG4gKi9cbkJ1ZmZlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCl7XG5cdHRoaXMuZ2wuZGVsZXRlQnVmZmVyKHRoaXMuYnVmZmVyKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQnVmZmVyO1xuIiwiXG4vKipcbiAqIEhlbHBlciBjbGFzcyB0byBjcmVhdGUgYSBXZWJHTCBUZXh0dXJlXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSS5nbENvcmVcbiAqIEBwYXJhbSBnbCB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBUaGUgY3VycmVudCBXZWJHTCBjb250ZXh0XG4gKiBAcGFyYW0gd2lkdGgge251bWJlcn0gdGhlIHdpZHRoIG9mIHRoZSB0ZXh0dXJlXG4gKiBAcGFyYW0gaGVpZ2h0IHtudW1iZXJ9IHRoZSBoZWlnaHQgb2YgdGhlIHRleHR1cmVcbiAqIEBwYXJhbSBmb3JtYXQge251bWJlcn0gdGhlIHBpeGVsIGZvcm1hdCBvZiB0aGUgdGV4dHVyZS4gZGVmYXVsdHMgdG8gZ2wuUkdCQVxuICogQHBhcmFtIHR5cGUge251bWJlcn0gdGhlIGdsIHR5cGUgb2YgdGhlIHRleHR1cmUuIGRlZmF1bHRzIHRvIGdsLlVOU0lHTkVEX0JZVEVcbiAqL1xudmFyIFRleHR1cmUgPSBmdW5jdGlvbihnbCwgd2lkdGgsIGhlaWdodCwgZm9ybWF0LCB0eXBlKVxue1xuXHQvKipcblx0ICogVGhlIGN1cnJlbnQgV2ViR0wgcmVuZGVyaW5nIGNvbnRleHRcblx0ICpcblx0ICogQG1lbWJlciB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fVxuXHQgKi9cblx0dGhpcy5nbCA9IGdsO1xuXG5cblx0LyoqXG5cdCAqIFRoZSBXZWJHTCB0ZXh0dXJlXG5cdCAqXG5cdCAqIEBtZW1iZXIge1dlYkdMVGV4dHVyZX1cblx0ICovXG5cdHRoaXMudGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcblxuXHQvKipcblx0ICogSWYgbWlwbWFwcGluZyB3YXMgdXNlZCBmb3IgdGhpcyB0ZXh0dXJlLCBlbmFibGUgYW5kIGRpc2FibGUgd2l0aCBlbmFibGVNaXBtYXAoKVxuXHQgKlxuXHQgKiBAbWVtYmVyIHtCb29sZWFufVxuXHQgKi9cblx0Ly8gc29tZSBzZXR0aW5ncy4uXG5cdHRoaXMubWlwbWFwID0gZmFsc2U7XG5cblxuXHQvKipcblx0ICogU2V0IHRvIHRydWUgdG8gZW5hYmxlIHByZS1tdWx0aXBsaWVkIGFscGhhXG5cdCAqXG5cdCAqIEBtZW1iZXIge0Jvb2xlYW59XG5cdCAqL1xuXHR0aGlzLnByZW11bHRpcGx5QWxwaGEgPSBmYWxzZTtcblxuXHQvKipcblx0ICogVGhlIHdpZHRoIG9mIHRleHR1cmVcblx0ICpcblx0ICogQG1lbWJlciB7TnVtYmVyfVxuXHQgKi9cblx0dGhpcy53aWR0aCA9IHdpZHRoIHx8IC0xO1xuXHQvKipcblx0ICogVGhlIGhlaWdodCBvZiB0ZXh0dXJlXG5cdCAqXG5cdCAqIEBtZW1iZXIge051bWJlcn1cblx0ICovXG5cdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0IHx8IC0xO1xuXG5cdC8qKlxuXHQgKiBUaGUgcGl4ZWwgZm9ybWF0IG9mIHRoZSB0ZXh0dXJlLiBkZWZhdWx0cyB0byBnbC5SR0JBXG5cdCAqXG5cdCAqIEBtZW1iZXIge051bWJlcn1cblx0ICovXG5cdHRoaXMuZm9ybWF0ID0gZm9ybWF0IHx8IGdsLlJHQkE7XG5cblx0LyoqXG5cdCAqIFRoZSBnbCB0eXBlIG9mIHRoZSB0ZXh0dXJlLiBkZWZhdWx0cyB0byBnbC5VTlNJR05FRF9CWVRFXG5cdCAqXG5cdCAqIEBtZW1iZXIge051bWJlcn1cblx0ICovXG5cdHRoaXMudHlwZSA9IHR5cGUgfHwgZ2wuVU5TSUdORURfQllURTtcblxuXG59O1xuXG4vKipcbiAqIFVwbG9hZHMgdGhpcyB0ZXh0dXJlIHRvIHRoZSBHUFVcbiAqIEBwYXJhbSBzb3VyY2Uge0hUTUxJbWFnZUVsZW1lbnR8SW1hZ2VEYXRhfEhUTUxWaWRlb0VsZW1lbnR9IHRoZSBzb3VyY2UgaW1hZ2Ugb2YgdGhlIHRleHR1cmVcbiAqL1xuVGV4dHVyZS5wcm90b3R5cGUudXBsb2FkID0gZnVuY3Rpb24oc291cmNlKVxue1xuXHR0aGlzLmJpbmQoKTtcblxuXHR2YXIgZ2wgPSB0aGlzLmdsO1xuXG5cblx0Z2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCB0aGlzLnByZW11bHRpcGx5QWxwaGEpO1xuXG5cdHZhciBuZXdXaWR0aCA9IHNvdXJjZS52aWRlb1dpZHRoIHx8IHNvdXJjZS53aWR0aDtcblx0dmFyIG5ld0hlaWdodCA9IHNvdXJjZS52aWRlb0hlaWdodCB8fCBzb3VyY2UuaGVpZ2h0O1xuXG5cdGlmKG5ld0hlaWdodCAhPT0gdGhpcy5oZWlnaHQgfHwgbmV3V2lkdGggIT09IHRoaXMud2lkdGgpXG5cdHtcblx0XHRnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIHRoaXMuZm9ybWF0LCB0aGlzLmZvcm1hdCwgdGhpcy50eXBlLCBzb3VyY2UpO1xuXHR9XG5cdGVsc2Vcblx0e1xuICAgIFx0Z2wudGV4U3ViSW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCAwLCAwLCB0aGlzLmZvcm1hdCwgdGhpcy50eXBlLCBzb3VyY2UpO1xuXHR9XG5cblx0Ly8gaWYgdGhlIHNvdXJjZSBpcyBhIHZpZGVvLCB3ZSBuZWVkIHRvIHVzZSB0aGUgdmlkZW9XaWR0aCAvIHZpZGVvSGVpZ2h0IHByb3BlcnRpZXMgYXMgd2lkdGggLyBoZWlnaHQgd2lsbCBiZSBpbmNvcnJlY3QuXG5cdHRoaXMud2lkdGggPSBuZXdXaWR0aDtcblx0dGhpcy5oZWlnaHQgPSBuZXdIZWlnaHQ7XG5cbn07XG5cbnZhciBGTE9BVElOR19QT0lOVF9BVkFJTEFCTEUgPSBmYWxzZTtcblxuLyoqXG4gKiBVc2UgYSBkYXRhIHNvdXJjZSBhbmQgdXBsb2FkcyB0aGlzIHRleHR1cmUgdG8gdGhlIEdQVVxuICogQHBhcmFtIGRhdGEge1R5cGVkQXJyYXl9IHRoZSBkYXRhIHRvIHVwbG9hZCB0byB0aGUgdGV4dHVyZVxuICogQHBhcmFtIHdpZHRoIHtudW1iZXJ9IHRoZSBuZXcgd2lkdGggb2YgdGhlIHRleHR1cmVcbiAqIEBwYXJhbSBoZWlnaHQge251bWJlcn0gdGhlIG5ldyBoZWlnaHQgb2YgdGhlIHRleHR1cmVcbiAqL1xuVGV4dHVyZS5wcm90b3R5cGUudXBsb2FkRGF0YSA9IGZ1bmN0aW9uKGRhdGEsIHdpZHRoLCBoZWlnaHQpXG57XG5cdHRoaXMuYmluZCgpO1xuXG5cdHZhciBnbCA9IHRoaXMuZ2w7XG5cblxuXHRpZihkYXRhIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5KVxuXHR7XG5cdFx0aWYoIUZMT0FUSU5HX1BPSU5UX0FWQUlMQUJMRSlcblx0XHR7XG5cdFx0XHR2YXIgZXh0ID0gZ2wuZ2V0RXh0ZW5zaW9uKFwiT0VTX3RleHR1cmVfZmxvYXRcIik7XG5cblx0XHRcdGlmKGV4dClcblx0XHRcdHtcblx0XHRcdFx0RkxPQVRJTkdfUE9JTlRfQVZBSUxBQkxFID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdmbG9hdGluZyBwb2ludCB0ZXh0dXJlcyBub3QgYXZhaWxhYmxlJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy50eXBlID0gZ2wuRkxPQVQ7XG5cdH1cblx0ZWxzZVxuXHR7XG5cdFx0Ly8gVE9ETyBzdXBwb3J0IGZvciBvdGhlciB0eXBlc1xuXHRcdHRoaXMudHlwZSA9IHRoaXMudHlwZSB8fCBnbC5VTlNJR05FRF9CWVRFO1xuXHR9XG5cblx0Ly8gd2hhdCB0eXBlIG9mIGRhdGE/XG5cdGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgdGhpcy5wcmVtdWx0aXBseUFscGhhKTtcblxuXG5cdGlmKHdpZHRoICE9PSB0aGlzLndpZHRoIHx8IGhlaWdodCAhPT0gdGhpcy5oZWlnaHQpXG5cdHtcblx0XHRnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIHRoaXMuZm9ybWF0LCAgd2lkdGgsIGhlaWdodCwgMCwgdGhpcy5mb3JtYXQsIHRoaXMudHlwZSwgZGF0YSB8fCBudWxsKTtcblx0fVxuXHRlbHNlXG5cdHtcblx0XHRnbC50ZXhTdWJJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIDAsIDAsIHdpZHRoLCBoZWlnaHQsIHRoaXMuZm9ybWF0LCB0aGlzLnR5cGUsIGRhdGEgfHwgbnVsbCk7XG5cdH1cblxuXHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cbi8vXHR0ZXhTdWJJbWFnZTJEXG59O1xuXG4vKipcbiAqIEJpbmRzIHRoZSB0ZXh0dXJlXG4gKiBAcGFyYW0gIGxvY2F0aW9uXG4gKi9cblRleHR1cmUucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbihsb2NhdGlvbilcbntcblx0dmFyIGdsID0gdGhpcy5nbDtcblxuXHRpZihsb2NhdGlvbiAhPT0gdW5kZWZpbmVkKVxuXHR7XG5cdFx0Z2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCArIGxvY2F0aW9uKTtcblx0fVxuXG5cdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMudGV4dHVyZSk7XG59O1xuXG4vKipcbiAqIFVuYmluZHMgdGhlIHRleHR1cmVcbiAqL1xuVGV4dHVyZS5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24oKVxue1xuXHR2YXIgZ2wgPSB0aGlzLmdsO1xuXHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIGxpbmVhciB7Qm9vbGVhbn0gaWYgd2Ugd2FudCB0byB1c2UgbGluZWFyIGZpbHRlcmluZyBvciBuZWFyZXN0IG5laWdoYm91ciBpbnRlcnBvbGF0aW9uXG4gKi9cblRleHR1cmUucHJvdG90eXBlLm1pbkZpbHRlciA9IGZ1bmN0aW9uKCBsaW5lYXIgKVxue1xuXHR2YXIgZ2wgPSB0aGlzLmdsO1xuXG5cdHRoaXMuYmluZCgpO1xuXG5cdGlmKHRoaXMubWlwbWFwKVxuXHR7XG5cdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGxpbmVhciA/IGdsLkxJTkVBUl9NSVBNQVBfTElORUFSIDogZ2wuTkVBUkVTVF9NSVBNQVBfTkVBUkVTVCk7XG5cdH1cblx0ZWxzZVxuXHR7XG5cdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGxpbmVhciA/IGdsLkxJTkVBUiA6IGdsLk5FQVJFU1QpO1xuXHR9XG59O1xuXG4vKipcbiAqIEBwYXJhbSBsaW5lYXIge0Jvb2xlYW59IGlmIHdlIHdhbnQgdG8gdXNlIGxpbmVhciBmaWx0ZXJpbmcgb3IgbmVhcmVzdCBuZWlnaGJvdXIgaW50ZXJwb2xhdGlvblxuICovXG5UZXh0dXJlLnByb3RvdHlwZS5tYWdGaWx0ZXIgPSBmdW5jdGlvbiggbGluZWFyIClcbntcblx0dmFyIGdsID0gdGhpcy5nbDtcblxuXHR0aGlzLmJpbmQoKTtcblxuXHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgbGluZWFyID8gZ2wuTElORUFSIDogZ2wuTkVBUkVTVCk7XG59O1xuXG4vKipcbiAqIEVuYWJsZXMgbWlwbWFwcGluZ1xuICovXG5UZXh0dXJlLnByb3RvdHlwZS5lbmFibGVNaXBtYXAgPSBmdW5jdGlvbigpXG57XG5cdHZhciBnbCA9IHRoaXMuZ2w7XG5cblx0dGhpcy5iaW5kKCk7XG5cblx0dGhpcy5taXBtYXAgPSB0cnVlO1xuXG5cdGdsLmdlbmVyYXRlTWlwbWFwKGdsLlRFWFRVUkVfMkQpO1xufTtcblxuLyoqXG4gKiBFbmFibGVzIGxpbmVhciBmaWx0ZXJpbmdcbiAqL1xuVGV4dHVyZS5wcm90b3R5cGUuZW5hYmxlTGluZWFyU2NhbGluZyA9IGZ1bmN0aW9uKClcbntcblx0dGhpcy5taW5GaWx0ZXIodHJ1ZSk7XG5cdHRoaXMubWFnRmlsdGVyKHRydWUpO1xufTtcblxuLyoqXG4gKiBFbmFibGVzIG5lYXJlc3QgbmVpZ2hib3VyIGludGVycG9sYXRpb25cbiAqL1xuVGV4dHVyZS5wcm90b3R5cGUuZW5hYmxlTmVhcmVzdFNjYWxpbmcgPSBmdW5jdGlvbigpXG57XG5cdHRoaXMubWluRmlsdGVyKGZhbHNlKTtcblx0dGhpcy5tYWdGaWx0ZXIoZmFsc2UpO1xufTtcblxuLyoqXG4gKiBFbmFibGVzIGNsYW1waW5nIG9uIHRoZSB0ZXh0dXJlIHNvIFdlYkdMIHdpbGwgbm90IHJlcGVhdCBpdFxuICovXG5UZXh0dXJlLnByb3RvdHlwZS5lbmFibGVXcmFwQ2xhbXAgPSBmdW5jdGlvbigpXG57XG5cdHZhciBnbCA9IHRoaXMuZ2w7XG5cblx0dGhpcy5iaW5kKCk7XG5cblx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XG59O1xuXG4vKipcbiAqIEVuYWJsZSB0aWxpbmcgb24gdGhlIHRleHR1cmVcbiAqL1xuVGV4dHVyZS5wcm90b3R5cGUuZW5hYmxlV3JhcFJlcGVhdCA9IGZ1bmN0aW9uKClcbntcblx0dmFyIGdsID0gdGhpcy5nbDtcblxuXHR0aGlzLmJpbmQoKTtcblxuXHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5SRVBFQVQpO1xuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLlJFUEVBVCk7XG59O1xuXG5UZXh0dXJlLnByb3RvdHlwZS5lbmFibGVXcmFwTWlycm9yUmVwZWF0ID0gZnVuY3Rpb24oKVxue1xuXHR2YXIgZ2wgPSB0aGlzLmdsO1xuXG5cdHRoaXMuYmluZCgpO1xuXG5cdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsLk1JUlJPUkVEX1JFUEVBVCk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuTUlSUk9SRURfUkVQRUFUKTtcbn07XG5cblxuLyoqXG4gKiBEZXN0cm95cyB0aGlzIHRleHR1cmVcbiAqL1xuVGV4dHVyZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKClcbntcblx0dmFyIGdsID0gdGhpcy5nbDtcblx0Ly9UT0RPXG5cdGdsLmRlbGV0ZVRleHR1cmUodGhpcy50ZXh0dXJlKTtcbn07XG5cbi8qKlxuICogQHN0YXRpY1xuICogQHBhcmFtIGdsIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IFRoZSBjdXJyZW50IFdlYkdMIGNvbnRleHRcbiAqIEBwYXJhbSBzb3VyY2Uge0hUTUxJbWFnZUVsZW1lbnR8SW1hZ2VEYXRhfSB0aGUgc291cmNlIGltYWdlIG9mIHRoZSB0ZXh0dXJlXG4gKiBAcGFyYW0gcHJlbXVsdGlwbHlBbHBoYSB7Qm9vbGVhbn0gSWYgd2Ugd2FudCB0byB1c2UgcHJlLW11bHRpcGxpZWQgYWxwaGFcbiAqL1xuVGV4dHVyZS5mcm9tU291cmNlID0gZnVuY3Rpb24oZ2wsIHNvdXJjZSwgcHJlbXVsdGlwbHlBbHBoYSlcbntcblx0dmFyIHRleHR1cmUgPSBuZXcgVGV4dHVyZShnbCk7XG5cdHRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSA9IHByZW11bHRpcGx5QWxwaGEgfHwgZmFsc2U7XG5cdHRleHR1cmUudXBsb2FkKHNvdXJjZSk7XG5cblx0cmV0dXJuIHRleHR1cmU7XG59O1xuXG4vKipcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSBnbCB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBUaGUgY3VycmVudCBXZWJHTCBjb250ZXh0XG4gKiBAcGFyYW0gZGF0YSB7VHlwZWRBcnJheX0gdGhlIGRhdGEgdG8gdXBsb2FkIHRvIHRoZSB0ZXh0dXJlXG4gKiBAcGFyYW0gd2lkdGgge251bWJlcn0gdGhlIG5ldyB3aWR0aCBvZiB0aGUgdGV4dHVyZVxuICogQHBhcmFtIGhlaWdodCB7bnVtYmVyfSB0aGUgbmV3IGhlaWdodCBvZiB0aGUgdGV4dHVyZVxuICovXG5UZXh0dXJlLmZyb21EYXRhID0gZnVuY3Rpb24oZ2wsIGRhdGEsIHdpZHRoLCBoZWlnaHQpXG57XG5cdC8vY29uc29sZS5sb2coZGF0YSwgd2lkdGgsIGhlaWdodCk7XG5cdHZhciB0ZXh0dXJlID0gbmV3IFRleHR1cmUoZ2wpO1xuXHR0ZXh0dXJlLnVwbG9hZERhdGEoZGF0YSwgd2lkdGgsIGhlaWdodCk7XG5cblx0cmV0dXJuIHRleHR1cmU7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gVGV4dHVyZTtcbiIsIlxudmFyIFRleHR1cmUgPSByZXF1aXJlKCcuL0dMVGV4dHVyZScpO1xuXG4vKipcbiAqIEhlbHBlciBjbGFzcyB0byBjcmVhdGUgYSB3ZWJHTCBGcmFtZWJ1ZmZlclxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWEkuZ2xDb3JlXG4gKiBAcGFyYW0gZ2wge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gVGhlIGN1cnJlbnQgV2ViR0wgcmVuZGVyaW5nIGNvbnRleHRcbiAqIEBwYXJhbSB3aWR0aCB7TnVtYmVyfSB0aGUgd2lkdGggb2YgdGhlIGRyYXdpbmcgYXJlYSBvZiB0aGUgZnJhbWUgYnVmZmVyXG4gKiBAcGFyYW0gaGVpZ2h0IHtOdW1iZXJ9IHRoZSBoZWlnaHQgb2YgdGhlIGRyYXdpbmcgYXJlYSBvZiB0aGUgZnJhbWUgYnVmZmVyXG4gKi9cbnZhciBGcmFtZWJ1ZmZlciA9IGZ1bmN0aW9uKGdsLCB3aWR0aCwgaGVpZ2h0KVxue1xuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IFdlYkdMIHJlbmRlcmluZyBjb250ZXh0XG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9XG4gICAgICovXG4gICAgdGhpcy5nbCA9IGdsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZyYW1lIGJ1ZmZlclxuICAgICAqXG4gICAgICogQG1lbWJlciB7V2ViR0xGcmFtZWJ1ZmZlcn1cbiAgICAgKi9cbiAgICB0aGlzLmZyYW1lYnVmZmVyID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzdGVuY2lsIGJ1ZmZlclxuICAgICAqXG4gICAgICogQG1lbWJlciB7V2ViR0xSZW5kZXJidWZmZXJ9XG4gICAgICovXG4gICAgdGhpcy5zdGVuY2lsID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzdGVuY2lsIGJ1ZmZlclxuICAgICAqXG4gICAgICogQG1lbWJlciB7UElYSS5nbENvcmUuR0xUZXh0dXJlfVxuICAgICAqL1xuICAgIHRoaXMudGV4dHVyZSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgd2lkdGggb2YgdGhlIGRyYXdpbmcgYXJlYSBvZiB0aGUgYnVmZmVyXG4gICAgICpcbiAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy53aWR0aCA9IHdpZHRoIHx8IDEwMDtcbiAgICAvKipcbiAgICAgKiBUaGUgaGVpZ2h0IG9mIHRoZSBkcmF3aW5nIGFyZWEgb2YgdGhlIGJ1ZmZlclxuICAgICAqXG4gICAgICogQG1lbWJlciB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0IHx8IDEwMDtcbn07XG5cbi8qKlxuICogQWRkcyBhIHRleHR1cmUgdG8gdGhlIGZyYW1lIGJ1ZmZlclxuICogQHBhcmFtIHRleHR1cmUge1BJWEkuZ2xDb3JlLkdMVGV4dHVyZX1cbiAqL1xuRnJhbWVidWZmZXIucHJvdG90eXBlLmVuYWJsZVRleHR1cmUgPSBmdW5jdGlvbih0ZXh0dXJlKVxue1xuICAgIHZhciBnbCA9IHRoaXMuZ2w7XG5cbiAgICB0aGlzLnRleHR1cmUgPSB0ZXh0dXJlIHx8IG5ldyBUZXh0dXJlKGdsKTtcblxuICAgIHRoaXMudGV4dHVyZS5iaW5kKCk7XG5cbiAgICAvL2dsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCAwLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBudWxsKTtcblxuICAgIHRoaXMuYmluZCgpO1xuXG4gICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbC5URVhUVVJFXzJELCB0aGlzLnRleHR1cmUudGV4dHVyZSwgMCk7XG59O1xuXG4vKipcbiAqIEluaXRpYWxpc2VzIHRoZSBzdGVuY2lsIGJ1ZmZlclxuICovXG5GcmFtZWJ1ZmZlci5wcm90b3R5cGUuZW5hYmxlU3RlbmNpbCA9IGZ1bmN0aW9uKClcbntcbiAgICBpZih0aGlzLnN0ZW5jaWwpcmV0dXJuO1xuXG4gICAgdmFyIGdsID0gdGhpcy5nbDtcblxuICAgIHRoaXMuc3RlbmNpbCA9IGdsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuXG4gICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIHRoaXMuc3RlbmNpbCk7XG5cbiAgICAvLyBUT0RPLi4gdGhpcyBpcyBkZXB0aCBBTkQgc3RlbmNpbD9cbiAgICBnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2wuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5ULCBnbC5SRU5ERVJCVUZGRVIsIHRoaXMuc3RlbmNpbCk7XG4gICAgZ2wucmVuZGVyYnVmZmVyU3RvcmFnZShnbC5SRU5ERVJCVUZGRVIsIGdsLkRFUFRIX1NURU5DSUwsICB0aGlzLndpZHRoICAsIHRoaXMuaGVpZ2h0ICk7XG5cblxufTtcblxuLyoqXG4gKiBFcmFzZXMgdGhlIGRyYXdpbmcgYXJlYSBhbmQgZmlsbHMgaXQgd2l0aCBhIGNvbG91clxuICogQHBhcmFtICByIHtOdW1iZXJ9IHRoZSByZWQgdmFsdWUgb2YgdGhlIGNsZWFyaW5nIGNvbG91clxuICogQHBhcmFtICBnIHtOdW1iZXJ9IHRoZSBncmVlbiB2YWx1ZSBvZiB0aGUgY2xlYXJpbmcgY29sb3VyXG4gKiBAcGFyYW0gIGIge051bWJlcn0gdGhlIGJsdWUgdmFsdWUgb2YgdGhlIGNsZWFyaW5nIGNvbG91clxuICogQHBhcmFtICBhIHtOdW1iZXJ9IHRoZSBhbHBoYSB2YWx1ZSBvZiB0aGUgY2xlYXJpbmcgY29sb3VyXG4gKi9cbkZyYW1lYnVmZmVyLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCByLCBnLCBiLCBhIClcbntcbiAgICB0aGlzLmJpbmQoKTtcblxuICAgIHZhciBnbCA9IHRoaXMuZ2w7XG5cbiAgICBnbC5jbGVhckNvbG9yKHIsIGcsIGIsIGEpO1xuICAgIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQgfCBnbC5ERVBUSF9CVUZGRVJfQklUKTtcbn07XG5cbi8qKlxuICogQmluZHMgdGhlIGZyYW1lIGJ1ZmZlciB0byB0aGUgV2ViR0wgY29udGV4dFxuICovXG5GcmFtZWJ1ZmZlci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uKClcbntcbiAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGhpcy5mcmFtZWJ1ZmZlciApO1xufTtcblxuLyoqXG4gKiBVbmJpbmRzIHRoZSBmcmFtZSBidWZmZXIgdG8gdGhlIFdlYkdMIGNvbnRleHRcbiAqL1xuRnJhbWVidWZmZXIucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uKClcbntcbiAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCApO1xufTtcbi8qKlxuICogUmVzaXplcyB0aGUgZHJhd2luZyBhcmVhIG9mIHRoZSBidWZmZXIgdG8gdGhlIGdpdmVuIHdpZHRoIGFuZCBoZWlnaHRcbiAqIEBwYXJhbSAgd2lkdGggIHtOdW1iZXJ9IHRoZSBuZXcgd2lkdGhcbiAqIEBwYXJhbSAgaGVpZ2h0IHtOdW1iZXJ9IHRoZSBuZXcgaGVpZ2h0XG4gKi9cbkZyYW1lYnVmZmVyLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KVxue1xuICAgIHZhciBnbCA9IHRoaXMuZ2w7XG5cbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICBpZiAoIHRoaXMudGV4dHVyZSApXG4gICAge1xuICAgICAgICB0aGlzLnRleHR1cmUudXBsb2FkRGF0YShudWxsLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG5cbiAgICBpZiAoIHRoaXMuc3RlbmNpbCApXG4gICAge1xuICAgICAgICAvLyB1cGRhdGUgdGhlIHN0ZW5jaWwgYnVmZmVyIHdpZHRoIGFuZCBoZWlnaHRcbiAgICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIHRoaXMuc3RlbmNpbCk7XG4gICAgICAgIGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoZ2wuUkVOREVSQlVGRkVSLCBnbC5ERVBUSF9TVEVOQ0lMLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG59O1xuXG4vKipcbiAqIERlc3Ryb3lzIHRoaXMgYnVmZmVyXG4gKi9cbkZyYW1lYnVmZmVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKVxue1xuICAgIHZhciBnbCA9IHRoaXMuZ2w7XG5cbiAgICAvL1RPRE9cbiAgICBpZih0aGlzLnRleHR1cmUpXG4gICAge1xuICAgICAgICB0aGlzLnRleHR1cmUuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIGdsLmRlbGV0ZUZyYW1lYnVmZmVyKHRoaXMuZnJhbWVidWZmZXIpO1xuXG4gICAgdGhpcy5nbCA9IG51bGw7XG5cbiAgICB0aGlzLnN0ZW5jaWwgPSBudWxsO1xuICAgIHRoaXMudGV4dHVyZSA9IG51bGw7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmcmFtZSBidWZmZXIgd2l0aCBhIHRleHR1cmUgY29udGFpbmluZyB0aGUgZ2l2ZW4gZGF0YVxuICogQHN0YXRpY1xuICogQHBhcmFtIGdsIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IFRoZSBjdXJyZW50IFdlYkdMIHJlbmRlcmluZyBjb250ZXh0XG4gKiBAcGFyYW0gd2lkdGgge051bWJlcn0gdGhlIHdpZHRoIG9mIHRoZSBkcmF3aW5nIGFyZWEgb2YgdGhlIGZyYW1lIGJ1ZmZlclxuICogQHBhcmFtIGhlaWdodCB7TnVtYmVyfSB0aGUgaGVpZ2h0IG9mIHRoZSBkcmF3aW5nIGFyZWEgb2YgdGhlIGZyYW1lIGJ1ZmZlclxuICogQHBhcmFtIGRhdGEge0FycmF5QnVmZmVyfCBTaGFyZWRBcnJheUJ1ZmZlcnxBcnJheUJ1ZmZlclZpZXd9IGFuIGFycmF5IG9mIGRhdGFcbiAqL1xuRnJhbWVidWZmZXIuY3JlYXRlUkdCQSA9IGZ1bmN0aW9uKGdsLCB3aWR0aCwgaGVpZ2h0LCBkYXRhKVxue1xuICAgIHZhciB0ZXh0dXJlID0gVGV4dHVyZS5mcm9tRGF0YShnbCwgbnVsbCwgd2lkdGgsIGhlaWdodCk7XG4gICAgdGV4dHVyZS5lbmFibGVOZWFyZXN0U2NhbGluZygpO1xuICAgIHRleHR1cmUuZW5hYmxlV3JhcENsYW1wKCk7XG5cbiAgICAvL25vdyBjcmVhdGUgdGhlIGZyYW1lYnVmZmVyIG9iamVjdCBhbmQgYXR0YWNoIHRoZSB0ZXh0dXJlIHRvIGl0LlxuICAgIHZhciBmYm8gPSBuZXcgRnJhbWVidWZmZXIoZ2wsIHdpZHRoLCBoZWlnaHQpO1xuICAgIGZiby5lbmFibGVUZXh0dXJlKHRleHR1cmUpO1xuXG4gICAgLy9mYm8uZW5hYmxlU3RlbmNpbCgpOyAvLyBnZXQgdGhpcyBiYWNrIG9uIHNvb24hXG5cbiAgICBmYm8udW5iaW5kKCk7XG5cbiAgICByZXR1cm4gZmJvO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnJhbWUgYnVmZmVyIHdpdGggYSB0ZXh0dXJlIGNvbnRhaW5pbmcgdGhlIGdpdmVuIGRhdGFcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSBnbCB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBUaGUgY3VycmVudCBXZWJHTCByZW5kZXJpbmcgY29udGV4dFxuICogQHBhcmFtIHdpZHRoIHtOdW1iZXJ9IHRoZSB3aWR0aCBvZiB0aGUgZHJhd2luZyBhcmVhIG9mIHRoZSBmcmFtZSBidWZmZXJcbiAqIEBwYXJhbSBoZWlnaHQge051bWJlcn0gdGhlIGhlaWdodCBvZiB0aGUgZHJhd2luZyBhcmVhIG9mIHRoZSBmcmFtZSBidWZmZXJcbiAqIEBwYXJhbSBkYXRhIHtBcnJheUJ1ZmZlcnwgU2hhcmVkQXJyYXlCdWZmZXJ8QXJyYXlCdWZmZXJWaWV3fSBhbiBhcnJheSBvZiBkYXRhXG4gKi9cbkZyYW1lYnVmZmVyLmNyZWF0ZUZsb2F0MzIgPSBmdW5jdGlvbihnbCwgd2lkdGgsIGhlaWdodCwgZGF0YSlcbntcbiAgICAvLyBjcmVhdGUgYSBuZXcgdGV4dHVyZS4uXG4gICAgdmFyIHRleHR1cmUgPSBuZXcgVGV4dHVyZS5mcm9tRGF0YShnbCwgZGF0YSwgd2lkdGgsIGhlaWdodCk7XG4gICAgdGV4dHVyZS5lbmFibGVOZWFyZXN0U2NhbGluZygpO1xuICAgIHRleHR1cmUuZW5hYmxlV3JhcENsYW1wKCk7XG5cbiAgICAvL25vdyBjcmVhdGUgdGhlIGZyYW1lYnVmZmVyIG9iamVjdCBhbmQgYXR0YWNoIHRoZSB0ZXh0dXJlIHRvIGl0LlxuICAgIHZhciBmYm8gPSBuZXcgRnJhbWVidWZmZXIoZ2wsIHdpZHRoLCBoZWlnaHQpO1xuICAgIGZiby5lbmFibGVUZXh0dXJlKHRleHR1cmUpO1xuXG4gICAgZmJvLnVuYmluZCgpO1xuXG4gICAgcmV0dXJuIGZibztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnJhbWVidWZmZXI7XG4iLCJcbi8qKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSS5nbENvcmUuc2hhZGVyXG4gKiBAcGFyYW0gZ2wge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gVGhlIGN1cnJlbnQgV2ViR0wgY29udGV4dCB7V2ViR0xQcm9ncmFtfVxuICogQHBhcmFtIHZlcnRleFNyYyB7c3RyaW5nfHN0cmluZ1tdfSBUaGUgdmVydGV4IHNoYWRlciBzb3VyY2UgYXMgYW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqIEBwYXJhbSBmcmFnbWVudFNyYyB7c3RyaW5nfHN0cmluZ1tdfSBUaGUgZnJhZ21lbnQgc2hhZGVyIHNvdXJjZSBhcyBhbiBhcnJheSBvZiBzdHJpbmdzLlxuICogQHBhcmFtIGF0dHJpYnV0ZUxvY2F0aW9ucyB7T2JqZWN0fSBBbiBhdHRyaWJ1dGUgbG9jYXRpb24gbWFwIHRoYXQgbGV0cyB5b3UgbWFudWFsbHkgc2V0IHRoZSBhdHRyaWJ1dGUgbG9jYXRpb25zXG4gKiBAcmV0dXJuIHtXZWJHTFByb2dyYW19IHRoZSBzaGFkZXIgcHJvZ3JhbVxuICovXG52YXIgY29tcGlsZVByb2dyYW0gPSBmdW5jdGlvbihnbCwgdmVydGV4U3JjLCBmcmFnbWVudFNyYywgYXR0cmlidXRlTG9jYXRpb25zKVxue1xuICAgIHZhciBnbFZlcnRTaGFkZXIgPSBjb21waWxlU2hhZGVyKGdsLCBnbC5WRVJURVhfU0hBREVSLCB2ZXJ0ZXhTcmMpO1xuICAgIHZhciBnbEZyYWdTaGFkZXIgPSBjb21waWxlU2hhZGVyKGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIGZyYWdtZW50U3JjKTtcblxuICAgIHZhciBwcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xuXG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGdsVmVydFNoYWRlcik7XG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGdsRnJhZ1NoYWRlcik7XG5cbiAgICAvLyBvcHRpb25hbGx5LCBzZXQgdGhlIGF0dHJpYnV0ZXMgbWFudWFsbHkgZm9yIHRoZSBwcm9ncmFtIHJhdGhlciB0aGFuIGxldHRpbmcgV2ViR0wgZGVjaWRlLi5cbiAgICBpZihhdHRyaWJ1dGVMb2NhdGlvbnMpXG4gICAge1xuICAgICAgICBmb3IodmFyIGkgaW4gYXR0cmlidXRlTG9jYXRpb25zKVxuICAgICAgICB7XG4gICAgICAgICAgICBnbC5iaW5kQXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgYXR0cmlidXRlTG9jYXRpb25zW2ldLCBpKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgZ2wubGlua1Byb2dyYW0ocHJvZ3JhbSk7XG5cbiAgICAvLyBpZiBsaW5raW5nIGZhaWxzLCB0aGVuIGxvZyBhbmQgY2xlYW51cFxuICAgIGlmICghZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykpXG4gICAge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdQaXhpLmpzIEVycm9yOiBDb3VsZCBub3QgaW5pdGlhbGl6ZSBzaGFkZXIuJyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2dsLlZBTElEQVRFX1NUQVRVUycsIGdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuVkFMSURBVEVfU1RBVFVTKSk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2dsLmdldEVycm9yKCknLCBnbC5nZXRFcnJvcigpKTtcblxuICAgICAgICAvLyBpZiB0aGVyZSBpcyBhIHByb2dyYW0gaW5mbyBsb2csIGxvZyBpdFxuICAgICAgICBpZiAoZ2wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbSkgIT09ICcnKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BpeGkuanMgV2FybmluZzogZ2wuZ2V0UHJvZ3JhbUluZm9Mb2coKScsIGdsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdsLmRlbGV0ZVByb2dyYW0ocHJvZ3JhbSk7XG4gICAgICAgIHByb2dyYW0gPSBudWxsO1xuICAgIH1cblxuICAgIC8vIGNsZWFuIHVwIHNvbWUgc2hhZGVyc1xuICAgIGdsLmRlbGV0ZVNoYWRlcihnbFZlcnRTaGFkZXIpO1xuICAgIGdsLmRlbGV0ZVNoYWRlcihnbEZyYWdTaGFkZXIpO1xuXG4gICAgcmV0dXJuIHByb2dyYW07XG59O1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gZ2wge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gVGhlIGN1cnJlbnQgV2ViR0wgY29udGV4dCB7V2ViR0xQcm9ncmFtfVxuICogQHBhcmFtIHR5cGUge051bWJlcn0gdGhlIHR5cGUsIGNhbiBiZSBlaXRoZXIgVkVSVEVYX1NIQURFUiBvciBGUkFHTUVOVF9TSEFERVJcbiAqIEBwYXJhbSB2ZXJ0ZXhTcmMge3N0cmluZ3xzdHJpbmdbXX0gVGhlIHZlcnRleCBzaGFkZXIgc291cmNlIGFzIGFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKiBAcmV0dXJuIHtXZWJHTFNoYWRlcn0gdGhlIHNoYWRlclxuICovXG52YXIgY29tcGlsZVNoYWRlciA9IGZ1bmN0aW9uIChnbCwgdHlwZSwgc3JjKVxue1xuICAgIHZhciBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIodHlwZSk7XG5cbiAgICBnbC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzcmMpO1xuICAgIGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcblxuICAgIGlmICghZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpKVxuICAgIHtcbiAgICAgICAgY29uc29sZS5sb2coZ2wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNoYWRlcjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY29tcGlsZVByb2dyYW07XG4iLCJcblxudmFyIG1hcFNpemUgPSBmdW5jdGlvbihnbCwgdHlwZSkgXG57XG4gICAgaWYoIUdMX1RBQkxFKSBcbiAgICB7XG4gICAgICAgIHZhciB0eXBlTmFtZXMgPSBPYmplY3Qua2V5cyhHTF9UT19HTFNMX1RZUEVTKTtcblxuICAgICAgICBHTF9UQUJMRSA9IHt9O1xuXG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0eXBlTmFtZXMubGVuZ3RoOyArK2kpIFxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgdG4gPSB0eXBlTmFtZXNbaV07XG4gICAgICAgICAgICBHTF9UQUJMRVsgZ2xbdG5dIF0gPSBHTF9UT19HTFNMX1RZUEVTW3RuXTtcbiAgICAgICAgfVxuICAgIH1cblxuICByZXR1cm4gR0xfVEFCTEVbdHlwZV07XG59O1xuXG52YXIgR0xfVEFCTEUgPSBudWxsO1xuXG52YXIgR0xfVE9fR0xTTF9UWVBFUyA9IHtcbiAgJ0ZMT0FUJzogICAgICAgJ2Zsb2F0JyxcbiAgJ0ZMT0FUX1ZFQzInOiAgJ3ZlYzInLFxuICAnRkxPQVRfVkVDMyc6ICAndmVjMycsXG4gICdGTE9BVF9WRUM0JzogICd2ZWM0JyxcblxuICAnSU5UJzogICAgICAgICAnaW50JyxcbiAgJ0lOVF9WRUMyJzogICAgJ2l2ZWMyJyxcbiAgJ0lOVF9WRUMzJzogICAgJ2l2ZWMzJyxcbiAgJ0lOVF9WRUM0JzogICAgJ2l2ZWM0JyxcbiAgXG4gICdCT09MJzogICAgICAgICdib29sJyxcbiAgJ0JPT0xfVkVDMic6ICAgJ2J2ZWMyJyxcbiAgJ0JPT0xfVkVDMyc6ICAgJ2J2ZWMzJyxcbiAgJ0JPT0xfVkVDNCc6ICAgJ2J2ZWM0JyxcbiAgXG4gICdGTE9BVF9NQVQyJzogICdtYXQyJyxcbiAgJ0ZMT0FUX01BVDMnOiAgJ21hdDMnLFxuICAnRkxPQVRfTUFUNCc6ICAnbWF0NCcsXG4gIFxuICAnU0FNUExFUl8yRCc6ICAnc2FtcGxlcjJEJyAgXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcFNpemU7XG4iLCIvKipcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWEkuZ2xDb3JlLnNoYWRlclxuICogQHBhcmFtIHR5cGUge1N0cmluZ31cbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xudmFyIG1hcFNpemUgPSBmdW5jdGlvbih0eXBlKSBcbnsgXG4gICAgcmV0dXJuIEdMU0xfVE9fU0laRVt0eXBlXTtcbn07XG5cblxudmFyIEdMU0xfVE9fU0laRSA9IHtcbiAgICAnZmxvYXQnOiAgICAxLFxuICAgICd2ZWMyJzogICAgIDIsXG4gICAgJ3ZlYzMnOiAgICAgMyxcbiAgICAndmVjNCc6ICAgICA0LFxuXG4gICAgJ2ludCc6ICAgICAgMSxcbiAgICAnaXZlYzInOiAgICAyLFxuICAgICdpdmVjMyc6ICAgIDMsXG4gICAgJ2l2ZWM0JzogICAgNCxcblxuICAgICdib29sJzogICAgIDEsXG4gICAgJ2J2ZWMyJzogICAgMixcbiAgICAnYnZlYzMnOiAgICAzLFxuICAgICdidmVjNCc6ICAgIDQsXG5cbiAgICAnbWF0Mic6ICAgICA0LFxuICAgICdtYXQzJzogICAgIDksXG4gICAgJ21hdDQnOiAgICAgMTYsXG5cbiAgICAnc2FtcGxlcjJEJzogIDFcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwU2l6ZTtcbiIsIlxudmFyIG1hcFR5cGUgPSByZXF1aXJlKCcuL21hcFR5cGUnKTtcbnZhciBtYXBTaXplID0gcmVxdWlyZSgnLi9tYXBTaXplJyk7XG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIGF0dHJpYnV0ZXNcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWEkuZ2xDb3JlLnNoYWRlclxuICogQHBhcmFtIGdsIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IFRoZSBjdXJyZW50IFdlYkdMIHJlbmRlcmluZyBjb250ZXh0XG4gKiBAcGFyYW0gcHJvZ3JhbSB7V2ViR0xQcm9ncmFtfSBUaGUgc2hhZGVyIHByb2dyYW0gdG8gZ2V0IHRoZSBhdHRyaWJ1dGVzIGZyb21cbiAqIEByZXR1cm4gYXR0cmlidXRlcyB7T2JqZWN0fVxuICovXG52YXIgZXh0cmFjdEF0dHJpYnV0ZXMgPSBmdW5jdGlvbihnbCwgcHJvZ3JhbSlcbntcbiAgICB2YXIgYXR0cmlidXRlcyA9IHt9O1xuXG4gICAgdmFyIHRvdGFsQXR0cmlidXRlcyA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuQUNUSVZFX0FUVFJJQlVURVMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3RhbEF0dHJpYnV0ZXM7IGkrKylcbiAgICB7XG4gICAgICAgIHZhciBhdHRyaWJEYXRhID0gZ2wuZ2V0QWN0aXZlQXR0cmliKHByb2dyYW0sIGkpO1xuICAgICAgICB2YXIgdHlwZSA9IG1hcFR5cGUoZ2wsIGF0dHJpYkRhdGEudHlwZSk7XG5cbiAgICAgICAgYXR0cmlidXRlc1thdHRyaWJEYXRhLm5hbWVdID0ge1xuICAgICAgICAgICAgdHlwZTp0eXBlLFxuICAgICAgICAgICAgc2l6ZTptYXBTaXplKHR5cGUpLFxuICAgICAgICAgICAgbG9jYXRpb246Z2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgYXR0cmliRGF0YS5uYW1lKSxcbiAgICAgICAgICAgIC8vVE9ETyAtIG1ha2UgYW4gYXR0cmlidXRlIG9iamVjdFxuICAgICAgICAgICAgcG9pbnRlcjogcG9pbnRlclxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBhdHRyaWJ1dGVzO1xufTtcblxudmFyIHBvaW50ZXIgPSBmdW5jdGlvbih0eXBlLCBub3JtYWxpemVkLCBzdHJpZGUsIHN0YXJ0KXtcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmxvY2F0aW9uKVxuICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5sb2NhdGlvbix0aGlzLnNpemUsIHR5cGUgfHwgZ2wuRkxPQVQsIG5vcm1hbGl6ZWQgfHwgZmFsc2UsIHN0cmlkZSB8fCAwLCBzdGFydCB8fCAwKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXh0cmFjdEF0dHJpYnV0ZXM7XG4iLCIvKipcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWEkuZ2xDb3JlLnNoYWRlclxuICogQHBhcmFtIHR5cGUge1N0cmluZ30gVHlwZSBvZiB2YWx1ZVxuICogQHBhcmFtIHNpemUge051bWJlcn1cbiAqL1xudmFyIGRlZmF1bHRWYWx1ZSA9IGZ1bmN0aW9uKHR5cGUsIHNpemUpIFxue1xuICAgIHN3aXRjaCAodHlwZSlcbiAgICB7XG4gICAgICAgIGNhc2UgJ2Zsb2F0JzpcbiAgICAgICAgICAgIHJldHVybiAwO1xuXG4gICAgICAgIGNhc2UgJ3ZlYzInOiBcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDIgKiBzaXplKTtcblxuICAgICAgICBjYXNlICd2ZWMzJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDMgKiBzaXplKTtcblxuICAgICAgICBjYXNlICd2ZWM0JzogICAgIFxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoNCAqIHNpemUpO1xuICAgICAgICAgICAgXG4gICAgICAgIGNhc2UgJ2ludCc6XG4gICAgICAgIGNhc2UgJ3NhbXBsZXIyRCc6XG4gICAgICAgICAgICByZXR1cm4gMDtcblxuICAgICAgICBjYXNlICdpdmVjMic6ICAgXG4gICAgICAgICAgICByZXR1cm4gbmV3IEludDMyQXJyYXkoMiAqIHNpemUpO1xuXG4gICAgICAgIGNhc2UgJ2l2ZWMzJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW50MzJBcnJheSgzICogc2l6ZSk7XG5cbiAgICAgICAgY2FzZSAnaXZlYzQnOiBcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW50MzJBcnJheSg0ICogc2l6ZSk7XG5cbiAgICAgICAgY2FzZSAnYm9vbCc6ICAgICBcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICBjYXNlICdidmVjMic6XG5cbiAgICAgICAgICAgIHJldHVybiBib29sZWFuQXJyYXkoIDIgKiBzaXplKTtcblxuICAgICAgICBjYXNlICdidmVjMyc6XG4gICAgICAgICAgICByZXR1cm4gYm9vbGVhbkFycmF5KDMgKiBzaXplKTtcblxuICAgICAgICBjYXNlICdidmVjNCc6XG4gICAgICAgICAgICByZXR1cm4gYm9vbGVhbkFycmF5KDQgKiBzaXplKTtcblxuICAgICAgICBjYXNlICdtYXQyJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFsxLCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAsIDFdKTtcblxuICAgICAgICBjYXNlICdtYXQzJzogXG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbMSwgMCwgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLCAxLCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAsIDAsIDFdKTtcblxuICAgICAgICBjYXNlICdtYXQ0JzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFsxLCAwLCAwLCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAsIDEsIDAsIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMCwgMCwgMSwgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLCAwLCAwLCAxXSk7XG4gICAgfVxufTtcblxudmFyIGJvb2xlYW5BcnJheSA9IGZ1bmN0aW9uKHNpemUpXG57XG4gICAgdmFyIGFycmF5ID0gbmV3IEFycmF5KHNpemUpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgXG4gICAge1xuICAgICAgICBhcnJheVtpXSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdFZhbHVlO1xuIiwidmFyIG1hcFR5cGUgPSByZXF1aXJlKCcuL21hcFR5cGUnKTtcbnZhciBkZWZhdWx0VmFsdWUgPSByZXF1aXJlKCcuL2RlZmF1bHRWYWx1ZScpO1xuXG4vKipcbiAqIEV4dHJhY3RzIHRoZSB1bmlmb3Jtc1xuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSS5nbENvcmUuc2hhZGVyXG4gKiBAcGFyYW0gZ2wge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gVGhlIGN1cnJlbnQgV2ViR0wgcmVuZGVyaW5nIGNvbnRleHRcbiAqIEBwYXJhbSBwcm9ncmFtIHtXZWJHTFByb2dyYW19IFRoZSBzaGFkZXIgcHJvZ3JhbSB0byBnZXQgdGhlIHVuaWZvcm1zIGZyb21cbiAqIEByZXR1cm4gdW5pZm9ybXMge09iamVjdH1cbiAqL1xudmFyIGV4dHJhY3RVbmlmb3JtcyA9IGZ1bmN0aW9uKGdsLCBwcm9ncmFtKVxue1xuXHR2YXIgdW5pZm9ybXMgPSB7fTtcblxuICAgIHZhciB0b3RhbFVuaWZvcm1zID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5BQ1RJVkVfVU5JRk9STVMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3RhbFVuaWZvcm1zOyBpKyspXG4gICAge1xuICAgIFx0dmFyIHVuaWZvcm1EYXRhID0gZ2wuZ2V0QWN0aXZlVW5pZm9ybShwcm9ncmFtLCBpKTtcbiAgICBcdHZhciBuYW1lID0gdW5pZm9ybURhdGEubmFtZS5yZXBsYWNlKC9cXFsuKj9cXF0vLCBcIlwiKTtcbiAgICAgICAgdmFyIHR5cGUgPSBtYXBUeXBlKGdsLCB1bmlmb3JtRGF0YS50eXBlICk7XG5cbiAgICBcdHVuaWZvcm1zW25hbWVdID0ge1xuICAgIFx0XHR0eXBlOnR5cGUsXG4gICAgXHRcdHNpemU6dW5pZm9ybURhdGEuc2l6ZSxcbiAgICBcdFx0bG9jYXRpb246Z2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIG5hbWUpLFxuICAgIFx0XHR2YWx1ZTpkZWZhdWx0VmFsdWUodHlwZSwgdW5pZm9ybURhdGEuc2l6ZSlcbiAgICBcdH07XG4gICAgfVxuXG5cdHJldHVybiB1bmlmb3Jtcztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXh0cmFjdFVuaWZvcm1zO1xuIiwiLyoqXG4gKiBTZXRzIHRoZSBmbG9hdCBwcmVjaXNpb24gb24gdGhlIHNoYWRlci4gSWYgdGhlIHByZWNpc2lvbiBpcyBhbHJlYWR5IHByZXNlbnQgdGhpcyBmdW5jdGlvbiB3aWxsIGRvIG5vdGhpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBzcmMgICAgICAgdGhlIHNoYWRlciBzb3VyY2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcmVjaXNpb24gVGhlIGZsb2F0IHByZWNpc2lvbiBvZiB0aGUgc2hhZGVyLiBPcHRpb25zIGFyZSAnbG93cCcsICdtZWRpdW1wJyBvciAnaGlnaHAnLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gbW9kaWZpZWQgc2hhZGVyIHNvdXJjZVxuICovXG52YXIgc2V0UHJlY2lzaW9uID0gZnVuY3Rpb24oc3JjLCBwcmVjaXNpb24pXG57XG4gICAgaWYoc3JjLnN1YnN0cmluZygwLCA5KSAhPT0gJ3ByZWNpc2lvbicpXG4gICAge1xuICAgICAgICByZXR1cm4gJ3ByZWNpc2lvbiAnICsgcHJlY2lzaW9uICsgJyBmbG9hdDtcXG4nICsgc3JjO1xuICAgIH1cblxuICAgIHJldHVybiBzcmM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFByZWNpc2lvbjtcbiIsIi8qKlxuICogRXh0cmFjdHMgdGhlIGF0dHJpYnV0ZXNcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWEkuZ2xDb3JlLnNoYWRlclxuICogQHBhcmFtIGdsIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IFRoZSBjdXJyZW50IFdlYkdMIHJlbmRlcmluZyBjb250ZXh0XG4gKiBAcGFyYW0gdW5pZm9ybXMge0FycmF5fSBAbWF0ID9cbiAqIEByZXR1cm4gYXR0cmlidXRlcyB7T2JqZWN0fVxuICovXG52YXIgZ2VuZXJhdGVVbmlmb3JtQWNjZXNzT2JqZWN0ID0gZnVuY3Rpb24oZ2wsIHVuaWZvcm1EYXRhKVxue1xuICAgIC8vIHRoaXMgaXMgdGhlIG9iamVjdCB3ZSB3aWxsIGJlIHNlbmRpbmcgYmFjay5cbiAgICAvLyBhbiBvYmplY3QgaGllcmFjaHkgd2lsbCBiZSBjcmVhdGVkIGZvciBzdHJ1Y3RzXG4gICAgdmFyIHVuaWZvcm1zID0ge2RhdGE6e319O1xuXG4gICAgdW5pZm9ybXMuZ2wgPSBnbDtcblxuICAgIHZhciB1bmlmb3JtS2V5cz0gT2JqZWN0LmtleXModW5pZm9ybURhdGEpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bmlmb3JtS2V5cy5sZW5ndGg7IGkrKylcbiAgICB7XG4gICAgICAgIHZhciBmdWxsTmFtZSA9IHVuaWZvcm1LZXlzW2ldO1xuXG4gICAgICAgIHZhciBuYW1lVG9rZW5zID0gZnVsbE5hbWUuc3BsaXQoJy4nKTtcbiAgICAgICAgdmFyIG5hbWUgPSBuYW1lVG9rZW5zW25hbWVUb2tlbnMubGVuZ3RoIC0gMV07XG5cblxuICAgICAgICB2YXIgdW5pZm9ybUdyb3VwID0gZ2V0VW5pZm9ybUdyb3VwKG5hbWVUb2tlbnMsIHVuaWZvcm1zKTtcblxuICAgICAgICB2YXIgdW5pZm9ybSA9ICB1bmlmb3JtRGF0YVtmdWxsTmFtZV07XG4gICAgICAgIHVuaWZvcm1Hcm91cC5kYXRhW25hbWVdID0gdW5pZm9ybTtcblxuICAgICAgICB1bmlmb3JtR3JvdXAuZ2wgPSBnbDtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodW5pZm9ybUdyb3VwLCBuYW1lLCB7XG4gICAgICAgICAgICBnZXQ6IGdlbmVyYXRlR2V0dGVyKG5hbWUpLFxuICAgICAgICAgICAgc2V0OiBnZW5lcmF0ZVNldHRlcihuYW1lLCB1bmlmb3JtKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5pZm9ybXM7XG59O1xuXG52YXIgZ2VuZXJhdGVHZXR0ZXIgPSBmdW5jdGlvbihuYW1lKVxue1xuXHR2YXIgdGVtcGxhdGUgPSBnZXR0ZXJUZW1wbGF0ZS5yZXBsYWNlKCclJScsIG5hbWUpO1xuXHRyZXR1cm4gbmV3IEZ1bmN0aW9uKHRlbXBsYXRlKTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG59O1xuXG52YXIgZ2VuZXJhdGVTZXR0ZXIgPSBmdW5jdGlvbihuYW1lLCB1bmlmb3JtKVxue1xuICAgIHZhciB0ZW1wbGF0ZSA9IHNldHRlclRlbXBsYXRlLnJlcGxhY2UoLyUlL2csIG5hbWUpO1xuICAgIHZhciBzZXRUZW1wbGF0ZTtcblxuICAgIGlmKHVuaWZvcm0uc2l6ZSA9PT0gMSlcbiAgICB7XG4gICAgICAgIHNldFRlbXBsYXRlID0gR0xTTF9UT19TSU5HTEVfU0VUVEVSU1t1bmlmb3JtLnR5cGVdO1xuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgICBzZXRUZW1wbGF0ZSA9IEdMU0xfVE9fQVJSQVlfU0VUVEVSU1t1bmlmb3JtLnR5cGVdO1xuICAgIH1cblxuICAgIGlmKHNldFRlbXBsYXRlKVxuICAgIHtcbiAgICAgICAgdGVtcGxhdGUgKz0gXCJcXG50aGlzLmdsLlwiICsgc2V0VGVtcGxhdGUgKyBcIjtcIjtcbiAgICB9XG5cbiAgXHRyZXR1cm4gbmV3IEZ1bmN0aW9uKCd2YWx1ZScsIHRlbXBsYXRlKTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG59O1xuXG52YXIgZ2V0VW5pZm9ybUdyb3VwID0gZnVuY3Rpb24obmFtZVRva2VucywgdW5pZm9ybSlcbntcbiAgICB2YXIgY3VyID0gdW5pZm9ybTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmFtZVRva2Vucy5sZW5ndGggLSAxOyBpKyspXG4gICAge1xuICAgICAgICB2YXIgbyA9IGN1cltuYW1lVG9rZW5zW2ldXSB8fCB7ZGF0YTp7fX07XG4gICAgICAgIGN1cltuYW1lVG9rZW5zW2ldXSA9IG87XG4gICAgICAgIGN1ciA9IG87XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cjtcbn07XG5cbnZhciBnZXR0ZXJUZW1wbGF0ZSA9IFtcbiAgICAncmV0dXJuIHRoaXMuZGF0YS4lJS52YWx1ZTsnLFxuXS5qb2luKCdcXG4nKTtcblxudmFyIHNldHRlclRlbXBsYXRlID0gW1xuICAgICd0aGlzLmRhdGEuJSUudmFsdWUgPSB2YWx1ZTsnLFxuICAgICd2YXIgbG9jYXRpb24gPSB0aGlzLmRhdGEuJSUubG9jYXRpb247J1xuXS5qb2luKCdcXG4nKTtcblxuXG52YXIgR0xTTF9UT19TSU5HTEVfU0VUVEVSUyA9IHtcblxuICAgICdmbG9hdCc6ICAgICd1bmlmb3JtMWYobG9jYXRpb24sIHZhbHVlKScsXG5cbiAgICAndmVjMic6ICAgICAndW5pZm9ybTJmKGxvY2F0aW9uLCB2YWx1ZVswXSwgdmFsdWVbMV0pJyxcbiAgICAndmVjMyc6ICAgICAndW5pZm9ybTNmKGxvY2F0aW9uLCB2YWx1ZVswXSwgdmFsdWVbMV0sIHZhbHVlWzJdKScsXG4gICAgJ3ZlYzQnOiAgICAgJ3VuaWZvcm00Zihsb2NhdGlvbiwgdmFsdWVbMF0sIHZhbHVlWzFdLCB2YWx1ZVsyXSwgdmFsdWVbM10pJyxcblxuICAgICdpbnQnOiAgICAgICd1bmlmb3JtMWkobG9jYXRpb24sIHZhbHVlKScsXG4gICAgJ2l2ZWMyJzogICAgJ3VuaWZvcm0yaShsb2NhdGlvbiwgdmFsdWVbMF0sIHZhbHVlWzFdKScsXG4gICAgJ2l2ZWMzJzogICAgJ3VuaWZvcm0zaShsb2NhdGlvbiwgdmFsdWVbMF0sIHZhbHVlWzFdLCB2YWx1ZVsyXSknLFxuICAgICdpdmVjNCc6ICAgICd1bmlmb3JtNGkobG9jYXRpb24sIHZhbHVlWzBdLCB2YWx1ZVsxXSwgdmFsdWVbMl0sIHZhbHVlWzNdKScsXG5cbiAgICAnYm9vbCc6ICAgICAndW5pZm9ybTFpKGxvY2F0aW9uLCB2YWx1ZSknLFxuICAgICdidmVjMic6ICAgICd1bmlmb3JtMmkobG9jYXRpb24sIHZhbHVlWzBdLCB2YWx1ZVsxXSknLFxuICAgICdidmVjMyc6ICAgICd1bmlmb3JtM2kobG9jYXRpb24sIHZhbHVlWzBdLCB2YWx1ZVsxXSwgdmFsdWVbMl0pJyxcbiAgICAnYnZlYzQnOiAgICAndW5pZm9ybTRpKGxvY2F0aW9uLCB2YWx1ZVswXSwgdmFsdWVbMV0sIHZhbHVlWzJdLCB2YWx1ZVszXSknLFxuXG4gICAgJ21hdDInOiAgICAgJ3VuaWZvcm1NYXRyaXgyZnYobG9jYXRpb24sIGZhbHNlLCB2YWx1ZSknLFxuICAgICdtYXQzJzogICAgICd1bmlmb3JtTWF0cml4M2Z2KGxvY2F0aW9uLCBmYWxzZSwgdmFsdWUpJyxcbiAgICAnbWF0NCc6ICAgICAndW5pZm9ybU1hdHJpeDRmdihsb2NhdGlvbiwgZmFsc2UsIHZhbHVlKScsXG5cbiAgICAnc2FtcGxlcjJEJzondW5pZm9ybTFpKGxvY2F0aW9uLCB2YWx1ZSknXG59O1xuXG52YXIgR0xTTF9UT19BUlJBWV9TRVRURVJTID0ge1xuXG4gICAgJ2Zsb2F0JzogICAgJ3VuaWZvcm0xZnYobG9jYXRpb24sIHZhbHVlKScsXG5cbiAgICAndmVjMic6ICAgICAndW5pZm9ybTJmdihsb2NhdGlvbiwgdmFsdWUpJyxcbiAgICAndmVjMyc6ICAgICAndW5pZm9ybTNmdihsb2NhdGlvbiwgdmFsdWUpJyxcbiAgICAndmVjNCc6ICAgICAndW5pZm9ybTRmdihsb2NhdGlvbiwgdmFsdWUpJyxcblxuICAgICdpbnQnOiAgICAgICd1bmlmb3JtMWl2KGxvY2F0aW9uLCB2YWx1ZSknLFxuICAgICdpdmVjMic6ICAgICd1bmlmb3JtMml2KGxvY2F0aW9uLCB2YWx1ZSknLFxuICAgICdpdmVjMyc6ICAgICd1bmlmb3JtM2l2KGxvY2F0aW9uLCB2YWx1ZSknLFxuICAgICdpdmVjNCc6ICAgICd1bmlmb3JtNGl2KGxvY2F0aW9uLCB2YWx1ZSknLFxuXG4gICAgJ2Jvb2wnOiAgICAgJ3VuaWZvcm0xaXYobG9jYXRpb24sIHZhbHVlKScsXG4gICAgJ2J2ZWMyJzogICAgJ3VuaWZvcm0yaXYobG9jYXRpb24sIHZhbHVlKScsXG4gICAgJ2J2ZWMzJzogICAgJ3VuaWZvcm0zaXYobG9jYXRpb24sIHZhbHVlKScsXG4gICAgJ2J2ZWM0JzogICAgJ3VuaWZvcm00aXYobG9jYXRpb24sIHZhbHVlKScsXG5cbiAgICAnc2FtcGxlcjJEJzondW5pZm9ybTFpdihsb2NhdGlvbiwgdmFsdWUpJ1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZW5lcmF0ZVVuaWZvcm1BY2Nlc3NPYmplY3Q7XG4iLCJcbnZhciBjb21waWxlUHJvZ3JhbSA9IHJlcXVpcmUoJy4vc2hhZGVyL2NvbXBpbGVQcm9ncmFtJyksXG5cdGV4dHJhY3RBdHRyaWJ1dGVzID0gcmVxdWlyZSgnLi9zaGFkZXIvZXh0cmFjdEF0dHJpYnV0ZXMnKSxcblx0ZXh0cmFjdFVuaWZvcm1zID0gcmVxdWlyZSgnLi9zaGFkZXIvZXh0cmFjdFVuaWZvcm1zJyksXG5cdHNldFByZWNpc2lvbiA9IHJlcXVpcmUoJy4vc2hhZGVyL3NldFByZWNpc2lvbicpLFxuXHRnZW5lcmF0ZVVuaWZvcm1BY2Nlc3NPYmplY3QgPSByZXF1aXJlKCcuL3NoYWRlci9nZW5lcmF0ZVVuaWZvcm1BY2Nlc3NPYmplY3QnKTtcblxuLyoqXG4gKiBIZWxwZXIgY2xhc3MgdG8gY3JlYXRlIGEgd2ViR0wgU2hhZGVyXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUElYSS5nbENvcmVcbiAqIEBwYXJhbSBnbCB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fVxuICogQHBhcmFtIHZlcnRleFNyYyB7c3RyaW5nfHN0cmluZ1tdfSBUaGUgdmVydGV4IHNoYWRlciBzb3VyY2UgYXMgYW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqIEBwYXJhbSBmcmFnbWVudFNyYyB7c3RyaW5nfHN0cmluZ1tdfSBUaGUgZnJhZ21lbnQgc2hhZGVyIHNvdXJjZSBhcyBhbiBhcnJheSBvZiBzdHJpbmdzLlxuICogQHBhcmFtIHByZWNpc2lvbiB7cHJlY2lzaW9uXX0gVGhlIGZsb2F0IHByZWNpc2lvbiBvZiB0aGUgc2hhZGVyLiBPcHRpb25zIGFyZSAnbG93cCcsICdtZWRpdW1wJyBvciAnaGlnaHAnLlxuICogQHBhcmFtIGF0dHJpYnV0ZUxvY2F0aW9ucyB7b2JqZWN0fSBBIGtleSB2YWx1ZSBwYWlyIHNob3dpbmcgd2hpY2ggbG9jYXRpb24gZWFjdCBhdHRyaWJ1dGUgc2hvdWxkIHNpdCBlZyB7cG9zaXRpb246MCwgdXZzOjF9XG4gKi9cbnZhciBTaGFkZXIgPSBmdW5jdGlvbihnbCwgdmVydGV4U3JjLCBmcmFnbWVudFNyYywgcHJlY2lzaW9uLCBhdHRyaWJ1dGVMb2NhdGlvbnMpXG57XG5cdC8qKlxuXHQgKiBUaGUgY3VycmVudCBXZWJHTCByZW5kZXJpbmcgY29udGV4dFxuXHQgKlxuXHQgKiBAbWVtYmVyIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9XG5cdCAqL1xuXHR0aGlzLmdsID0gZ2w7XG5cblx0aWYocHJlY2lzaW9uKVxuXHR7XG5cdFx0dmVydGV4U3JjID0gc2V0UHJlY2lzaW9uKHZlcnRleFNyYywgcHJlY2lzaW9uKTtcblx0XHRmcmFnbWVudFNyYyA9IHNldFByZWNpc2lvbihmcmFnbWVudFNyYywgcHJlY2lzaW9uKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgc2hhZGVyIHByb2dyYW1cblx0ICpcblx0ICogQG1lbWJlciB7V2ViR0xQcm9ncmFtfVxuXHQgKi9cblx0Ly8gRmlyc3QgY29tcGlsZSB0aGUgcHJvZ3JhbS4uXG5cdHRoaXMucHJvZ3JhbSA9IGNvbXBpbGVQcm9ncmFtKGdsLCB2ZXJ0ZXhTcmMsIGZyYWdtZW50U3JjLCBhdHRyaWJ1dGVMb2NhdGlvbnMpO1xuXG5cdC8qKlxuXHQgKiBUaGUgYXR0cmlidXRlcyBvZiB0aGUgc2hhZGVyIGFzIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllc1xuXHQgKiB7XG5cdCAqIFx0dHlwZSxcblx0ICogXHRzaXplLFxuXHQgKiBcdGxvY2F0aW9uLFxuXHQgKiBcdHBvaW50ZXJcblx0ICogfVxuXHQgKiBAbWVtYmVyIHtPYmplY3R9XG5cdCAqL1xuXHQvLyBuZXh0IGV4dHJhY3QgdGhlIGF0dHJpYnV0ZXNcblx0dGhpcy5hdHRyaWJ1dGVzID0gZXh0cmFjdEF0dHJpYnV0ZXMoZ2wsIHRoaXMucHJvZ3JhbSk7XG5cbiAgICB0aGlzLnVuaWZvcm1EYXRhID0gZXh0cmFjdFVuaWZvcm1zKGdsLCB0aGlzLnByb2dyYW0pO1xuXG5cdC8qKlxuXHQgKiBUaGUgdW5pZm9ybXMgb2YgdGhlIHNoYWRlciBhcyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXNcblx0ICoge1xuXHQgKiBcdGdsLFxuXHQgKiBcdGRhdGFcblx0ICogfVxuXHQgKiBAbWVtYmVyIHtPYmplY3R9XG5cdCAqL1xuXHR0aGlzLnVuaWZvcm1zID0gZ2VuZXJhdGVVbmlmb3JtQWNjZXNzT2JqZWN0KCBnbCwgdGhpcy51bmlmb3JtRGF0YSApO1xuXG59O1xuLyoqXG4gKiBVc2VzIHRoaXMgc2hhZGVyXG4gKi9cblNoYWRlci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uKClcbntcblx0dGhpcy5nbC51c2VQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XG59O1xuXG4vKipcbiAqIERlc3Ryb3lzIHRoaXMgc2hhZGVyXG4gKiBUT0RPXG4gKi9cblNoYWRlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKClcbntcblx0dGhpcy5hdHRyaWJ1dGVzID0gbnVsbDtcblx0dGhpcy51bmlmb3JtRGF0YSA9IG51bGw7XG5cdHRoaXMudW5pZm9ybXMgPSBudWxsO1xuXG5cdHZhciBnbCA9IHRoaXMuZ2w7XG5cdGdsLmRlbGV0ZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBTaGFkZXI7XG4iLCJcbi8vIHN0YXRlIG9iamVjdC8vXG52YXIgc2V0VmVydGV4QXR0cmliQXJyYXlzID0gcmVxdWlyZSggJy4vc2V0VmVydGV4QXR0cmliQXJyYXlzJyApO1xuXG4vKipcbiAqIEhlbHBlciBjbGFzcyB0byB3b3JrIHdpdGggV2ViR0wgVmVydGV4QXJyYXlPYmplY3RzICh2YW9zKVxuICogT25seSB3b3JrcyBpZiBXZWJHTCBleHRlbnNpb25zIGFyZSBlbmFibGVkICh0aGV5IHVzdWFsbHkgYXJlKVxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWEkuZ2xDb3JlXG4gKiBAcGFyYW0gZ2wge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gVGhlIGN1cnJlbnQgV2ViR0wgcmVuZGVyaW5nIGNvbnRleHRcbiAqL1xuZnVuY3Rpb24gVmVydGV4QXJyYXlPYmplY3QoZ2wsIHN0YXRlKVxue1xuICAgIHRoaXMubmF0aXZlVmFvRXh0ZW5zaW9uID0gbnVsbDtcblxuICAgIGlmKCFWZXJ0ZXhBcnJheU9iamVjdC5GT1JDRV9OQVRJVkUpXG4gICAge1xuICAgICAgICB0aGlzLm5hdGl2ZVZhb0V4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbignT0VTX3ZlcnRleF9hcnJheV9vYmplY3QnKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsLmdldEV4dGVuc2lvbignTU9aX09FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0JykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbC5nZXRFeHRlbnNpb24oJ1dFQktJVF9PRVNfdmVydGV4X2FycmF5X29iamVjdCcpO1xuICAgIH1cblxuICAgIHRoaXMubmF0aXZlU3RhdGUgPSBzdGF0ZTtcblxuICAgIGlmKHRoaXMubmF0aXZlVmFvRXh0ZW5zaW9uKVxuICAgIHtcbiAgICAgICAgdGhpcy5uYXRpdmVWYW8gPSB0aGlzLm5hdGl2ZVZhb0V4dGVuc2lvbi5jcmVhdGVWZXJ0ZXhBcnJheU9FUygpO1xuXG4gICAgICAgIHZhciBtYXhBdHRyaWJzID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLk1BWF9WRVJURVhfQVRUUklCUyk7XG5cbiAgICAgICAgLy8gVkFPIC0gb3ZlcndyaXRlIHRoZSBzdGF0ZS4uXG4gICAgICAgIHRoaXMubmF0aXZlU3RhdGUgPSB7XG4gICAgICAgICAgICB0ZW1wQXR0cmliU3RhdGU6IG5ldyBBcnJheShtYXhBdHRyaWJzKSxcbiAgICAgICAgICAgIGF0dHJpYlN0YXRlOiBuZXcgQXJyYXkobWF4QXR0cmlicylcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBXZWJHTCByZW5kZXJpbmcgY29udGV4dFxuICAgICAqXG4gICAgICogQG1lbWJlciB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fVxuICAgICAqL1xuICAgIHRoaXMuZ2wgPSBnbDtcblxuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIGF0dHJpYnV0ZXNcbiAgICAgKlxuICAgICAqIEBtZW1iZXIge0FycmF5fVxuICAgICAqL1xuICAgIHRoaXMuYXR0cmlidXRlcyA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7UElYSS5nbENvcmUuR0xCdWZmZXJ9XG4gICAgICovXG4gICAgdGhpcy5pbmRleEJ1ZmZlciA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBIGJvb2xlYW4gZmxhZ1xuICAgICAqXG4gICAgICogQG1lbWJlciB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG59XG5cblZlcnRleEFycmF5T2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFZlcnRleEFycmF5T2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBWZXJ0ZXhBcnJheU9iamVjdDtcblxuLyoqXG4qIFNvbWUgZGV2aWNlcyBiZWhhdmUgYSBiaXQgZnVubnkgd2hlbiB1c2luZyB0aGUgbmV3ZXIgZXh0ZW5zaW9ucyAoaW0gbG9va2luZyBhdCB5b3UgaXBhZCAyISlcbiogSWYgeW91IGZpbmQgb24gb2xkZXIgZGV2aWNlcyB0aGF0IHRoaW5ncyBoYXZlIGdvbmUgYSBiaXQgd2VpcmQgdGhlbiBzZXQgdGhpcyB0byB0cnVlLlxuKi9cbi8qKlxuICogTGV0cyB0aGUgVkFPIGtub3cgaWYgeW91IHNob3VsZCB1c2UgdGhlIFdlYkdMIGV4dGVuc2lvbiBvciB0aGUgbmF0aXZlIG1ldGhvZHMuXG4gKiBTb21lIGRldmljZXMgYmVoYXZlIGEgYml0IGZ1bm55IHdoZW4gdXNpbmcgdGhlIG5ld2VyIGV4dGVuc2lvbnMgKGltIGxvb2tpbmcgYXQgeW91IGlwYWQgMiEpXG4gKiBJZiB5b3UgZmluZCBvbiBvbGRlciBkZXZpY2VzIHRoYXQgdGhpbmdzIGhhdmUgZ29uZSBhIGJpdCB3ZWlyZCB0aGVuIHNldCB0aGlzIHRvIHRydWUuXG4gKiBAc3RhdGljXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IEZPUkNFX05BVElWRVxuICovXG5WZXJ0ZXhBcnJheU9iamVjdC5GT1JDRV9OQVRJVkUgPSBmYWxzZTtcblxuLyoqXG4gKiBCaW5kcyB0aGUgYnVmZmVyXG4gKi9cblZlcnRleEFycmF5T2JqZWN0LnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24oKVxue1xuICAgIGlmKHRoaXMubmF0aXZlVmFvKVxuICAgIHtcbiAgICAgICAgdGhpcy5uYXRpdmVWYW9FeHRlbnNpb24uYmluZFZlcnRleEFycmF5T0VTKHRoaXMubmF0aXZlVmFvKTtcblxuICAgICAgICBpZih0aGlzLmRpcnR5KVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmFjdGl2YXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZVxuICAgIHtcblxuICAgICAgICB0aGlzLmFjdGl2YXRlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFVuYmluZHMgdGhlIGJ1ZmZlclxuICovXG5WZXJ0ZXhBcnJheU9iamVjdC5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24oKVxue1xuICAgIGlmKHRoaXMubmF0aXZlVmFvKVxuICAgIHtcbiAgICAgICAgdGhpcy5uYXRpdmVWYW9FeHRlbnNpb24uYmluZFZlcnRleEFycmF5T0VTKG51bGwpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBVc2VzIHRoaXMgdmFvXG4gKi9cblZlcnRleEFycmF5T2JqZWN0LnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uKClcbntcblxuICAgIHZhciBnbCA9IHRoaXMuZ2w7XG4gICAgdmFyIGxhc3RCdWZmZXIgPSBudWxsO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspXG4gICAge1xuICAgICAgICB2YXIgYXR0cmliID0gdGhpcy5hdHRyaWJ1dGVzW2ldO1xuXG4gICAgICAgIGlmKGxhc3RCdWZmZXIgIT09IGF0dHJpYi5idWZmZXIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYi5idWZmZXIuYmluZCgpO1xuICAgICAgICAgICAgbGFzdEJ1ZmZlciA9IGF0dHJpYi5idWZmZXI7XG4gICAgICAgIH1cblxuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGF0dHJpYi5hdHRyaWJ1dGUubG9jYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmliLmF0dHJpYnV0ZS5zaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYi50eXBlIHx8IGdsLkZMT0FULFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYi5ub3JtYWxpemVkIHx8IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYi5zdHJpZGUgfHwgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWIuc3RhcnQgfHwgMCk7XG4gICAgfVxuXG4gICAgc2V0VmVydGV4QXR0cmliQXJyYXlzKGdsLCB0aGlzLmF0dHJpYnV0ZXMsIHRoaXMubmF0aXZlU3RhdGUpO1xuXG4gICAgaWYodGhpcy5pbmRleEJ1ZmZlcilcbiAgICB7XG4gICAgICAgIHRoaXMuaW5kZXhCdWZmZXIuYmluZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIGJ1ZmZlciAgICAge1BJWEkuZ2wuR0xCdWZmZXJ9XG4gKiBAcGFyYW0gYXR0cmlidXRlICB7Kn1cbiAqIEBwYXJhbSB0eXBlICAgICAgIHtTdHJpbmd9XG4gKiBAcGFyYW0gbm9ybWFsaXplZCB7Qm9vbGVhbn1cbiAqIEBwYXJhbSBzdHJpZGUgICAgIHtOdW1iZXJ9XG4gKiBAcGFyYW0gc3RhcnQgICAgICB7TnVtYmVyfVxuICovXG5WZXJ0ZXhBcnJheU9iamVjdC5wcm90b3R5cGUuYWRkQXR0cmlidXRlID0gZnVuY3Rpb24oYnVmZmVyLCBhdHRyaWJ1dGUsIHR5cGUsIG5vcm1hbGl6ZWQsIHN0cmlkZSwgc3RhcnQpXG57XG4gICAgdGhpcy5hdHRyaWJ1dGVzLnB1c2goe1xuICAgICAgICBidWZmZXI6ICAgICBidWZmZXIsXG4gICAgICAgIGF0dHJpYnV0ZTogIGF0dHJpYnV0ZSxcblxuICAgICAgICBsb2NhdGlvbjogICBhdHRyaWJ1dGUubG9jYXRpb24sXG4gICAgICAgIHR5cGU6ICAgICAgIHR5cGUgfHwgdGhpcy5nbC5GTE9BVCxcbiAgICAgICAgbm9ybWFsaXplZDogbm9ybWFsaXplZCB8fCBmYWxzZSxcbiAgICAgICAgc3RyaWRlOiAgICAgc3RyaWRlIHx8IDAsXG4gICAgICAgIHN0YXJ0OiAgICAgIHN0YXJ0IHx8IDBcbiAgICB9KTtcblxuICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gYnVmZmVyICAge1BJWEkuZ2wuR0xCdWZmZXJ9XG4gKi9cblZlcnRleEFycmF5T2JqZWN0LnByb3RvdHlwZS5hZGRJbmRleCA9IGZ1bmN0aW9uKGJ1ZmZlci8qLCBvcHRpb25zKi8pXG57XG4gICAgdGhpcy5pbmRleEJ1ZmZlciA9IGJ1ZmZlcjtcblxuICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFVuYmluZHMgdGhpcyB2YW8gYW5kIGRpc2FibGVzIGl0XG4gKi9cblZlcnRleEFycmF5T2JqZWN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKClcbntcbiAgICAvLyB2YXIgZ2wgPSB0aGlzLmdsO1xuXG4gICAgLy8gVE9ETyAtIHNob3VsZCB0aGlzIGZ1bmN0aW9uIHVuYmluZCBhZnRlciBjbGVhcj9cbiAgICAvLyBmb3Igbm93LCBubyBidXQgbGV0cyBzZWUgd2hhdCBoYXBwZW5zIGluIHRoZSByZWFsIHdvcmxkIVxuICAgIGlmKHRoaXMubmF0aXZlVmFvKVxuICAgIHtcbiAgICAgICAgdGhpcy5uYXRpdmVWYW9FeHRlbnNpb24uYmluZFZlcnRleEFycmF5T0VTKHRoaXMubmF0aXZlVmFvKTtcbiAgICB9XG5cbiAgICB0aGlzLmF0dHJpYnV0ZXMubGVuZ3RoID0gMDtcbiAgICB0aGlzLmluZGV4QnVmZmVyID0gbnVsbDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAcGFyYW0gdHlwZSAge051bWJlcn1cbiAqIEBwYXJhbSBzaXplICB7TnVtYmVyfVxuICogQHBhcmFtIHN0YXJ0IHtOdW1iZXJ9XG4gKi9cblZlcnRleEFycmF5T2JqZWN0LnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24odHlwZSwgc2l6ZSwgc3RhcnQpXG57XG4gICAgdmFyIGdsID0gdGhpcy5nbDtcblxuICAgIGlmKHRoaXMuaW5kZXhCdWZmZXIpXG4gICAge1xuICAgICAgICBnbC5kcmF3RWxlbWVudHModHlwZSwgc2l6ZSB8fCB0aGlzLmluZGV4QnVmZmVyLmRhdGEubGVuZ3RoLCBnbC5VTlNJR05FRF9TSE9SVCwgKHN0YXJ0IHx8IDApICogMiApO1xuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgICAvLyBUT0RPIG5lZWQgYSBiZXR0ZXIgd2F5IHRvIGNhbGN1bGF0ZSBzaXplLi5cbiAgICAgICAgZ2wuZHJhd0FycmF5cyh0eXBlLCBzdGFydCwgc2l6ZSB8fCB0aGlzLmdldFNpemUoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIERlc3Ryb3kgdGhpcyB2YW9cbiAqL1xuVmVydGV4QXJyYXlPYmplY3QucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpXG57XG4gICAgLy8gbG9zZSByZWZlcmVuY2VzXG4gICAgdGhpcy5nbCA9IG51bGw7XG4gICAgdGhpcy5pbmRleEJ1ZmZlciA9IG51bGw7XG4gICAgdGhpcy5hdHRyaWJ1dGVzID0gbnVsbDtcbiAgICB0aGlzLm5hdGl2ZVN0YXRlID0gbnVsbDtcblxuICAgIGlmKHRoaXMubmF0aXZlVmFvKVxuICAgIHtcbiAgICAgICAgdGhpcy5uYXRpdmVWYW9FeHRlbnNpb24uZGVsZXRlVmVydGV4QXJyYXlPRVModGhpcy5uYXRpdmVWYW8pO1xuICAgIH1cblxuICAgIHRoaXMubmF0aXZlVmFvRXh0ZW5zaW9uID0gbnVsbDtcbiAgICB0aGlzLm5hdGl2ZVZhbyA9IG51bGw7XG59O1xuXG5WZXJ0ZXhBcnJheU9iamVjdC5wcm90b3R5cGUuZ2V0U2l6ZSA9IGZ1bmN0aW9uKClcbntcbiAgICB2YXIgYXR0cmliID0gdGhpcy5hdHRyaWJ1dGVzWzBdO1xuICAgIHJldHVybiBhdHRyaWIuYnVmZmVyLmRhdGEubGVuZ3RoIC8gKCggYXR0cmliLnN0cmlkZS80ICkgfHwgYXR0cmliLmF0dHJpYnV0ZS5zaXplKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBjb21waWxlUHJvZ3JhbTogcmVxdWlyZSgnLi9jb21waWxlUHJvZ3JhbScpLFxuICAgIGRlZmF1bHRWYWx1ZTogcmVxdWlyZSgnLi9kZWZhdWx0VmFsdWUnKSxcbiAgICBleHRyYWN0QXR0cmlidXRlczogcmVxdWlyZSgnLi9leHRyYWN0QXR0cmlidXRlcycpLFxuICAgIGV4dHJhY3RVbmlmb3JtczogcmVxdWlyZSgnLi9leHRyYWN0VW5pZm9ybXMnKSxcbiAgICBnZW5lcmF0ZVVuaWZvcm1BY2Nlc3NPYmplY3Q6IHJlcXVpcmUoJy4vZ2VuZXJhdGVVbmlmb3JtQWNjZXNzT2JqZWN0JyksXG4gICAgc2V0UHJlY2lzaW9uOiByZXF1aXJlKCcuL3NldFByZWNpc2lvbicpLFxuICAgIG1hcFNpemU6IHJlcXVpcmUoJy4vbWFwU2l6ZScpLFxuICAgIG1hcFR5cGU6IHJlcXVpcmUoJy4vbWFwVHlwZScpXG59OyIsInZhciBnbCA9IHtcbiAgICBjcmVhdGVDb250ZXh0OiAgICAgICAgICByZXF1aXJlKCcuL2NyZWF0ZUNvbnRleHQnKSxcbiAgICBzZXRWZXJ0ZXhBdHRyaWJBcnJheXM6ICByZXF1aXJlKCcuL3NldFZlcnRleEF0dHJpYkFycmF5cycpLFxuICAgIEdMQnVmZmVyOiAgICAgICAgICAgICAgIHJlcXVpcmUoJy4vR0xCdWZmZXInKSxcbiAgICBHTEZyYW1lYnVmZmVyOiAgICAgICAgICByZXF1aXJlKCcuL0dMRnJhbWVidWZmZXInKSxcbiAgICBHTFNoYWRlcjogICAgICAgICAgICAgICByZXF1aXJlKCcuL0dMU2hhZGVyJyksXG4gICAgR0xUZXh0dXJlOiAgICAgICAgICAgICAgcmVxdWlyZSgnLi9HTFRleHR1cmUnKSxcbiAgICBWZXJ0ZXhBcnJheU9iamVjdDogICAgICByZXF1aXJlKCcuL1ZlcnRleEFycmF5T2JqZWN0JyksXG4gICAgc2hhZGVyOiAgICAgICAgICAgICAgICAgcmVxdWlyZSgnLi9zaGFkZXInKVxufTtcblxuLy8gRXhwb3J0IGZvciBOb2RlLWNvbXBhdGlibGUgZW52aXJvbm1lbnRzXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpXG57XG4gICAgLy8gRXhwb3J0IHRoZSBtb2R1bGVcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGdsO1xufVxuXG4vLyBBZGQgdG8gdGhlIGJyb3dzZXIgd2luZG93IHBpeGkuZ2xcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJylcbntcbiAgICAvLyBhZGQgdGhlIHdpbmRvdyBvYmplY3RcbiAgICB3aW5kb3cuUElYSSA9IHdpbmRvdy5QSVhJIHx8IHt9O1xuICAgIHdpbmRvdy5QSVhJLmdsQ29yZSA9IGdsO1xufVxuIiwiaW1wb3J0IHsgUmVjdGFuZ2xlLCBNYXRyaXggfSBmcm9tICcuLi8uLi8uLi9tYXRoL2luZGV4JztcbmltcG9ydCB7IFNDQUxFX01PREVTIH0gZnJvbSAnLi4vLi4vLi4vY29uc3QnO1xuaW1wb3J0IHNldHRpbmdzIGZyb20gJy4uLy4uLy4uL3NldHRpbmdzJztcbmltcG9ydCBnbENvcmUgZnJvbSAncGl4aS1nbC1jb3JlJztcblxuY29uc3QgR0xGcmFtZWJ1ZmZlciA9IGdsQ29yZS5HTEZyYW1lYnVmZmVyO1xuXG4vKipcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVuZGVyVGFyZ2V0XG57XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIC0gVGhlIGN1cnJlbnQgV2ViR0wgZHJhd2luZyBjb250ZXh0XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3aWR0aD0wXSAtIHRoZSBob3Jpem9udGFsIHJhbmdlIG9mIHRoZSBmaWx0ZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodD0wXSAtIHRoZSB2ZXJ0aWNhbCByYW5nZSBvZiB0aGUgZmlsdGVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzY2FsZU1vZGU9UElYSS5zZXR0aW5ncy5TQ0FMRV9NT0RFXSAtIFNlZSB7QGxpbmsgUElYSS5TQ0FMRV9NT0RFU30gZm9yIHBvc3NpYmxlIHZhbHVlc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmVzb2x1dGlvbj0xXSAtIFRoZSBjdXJyZW50IHJlc29sdXRpb24gLyBkZXZpY2UgcGl4ZWwgcmF0aW9cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyb290PWZhbHNlXSAtIFdoZXRoZXIgdGhpcyBvYmplY3QgaXMgdGhlIHJvb3QgZWxlbWVudCBvciBub3RcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihnbCwgd2lkdGgsIGhlaWdodCwgc2NhbGVNb2RlLCByZXNvbHV0aW9uLCByb290KVxuICAgIHtcbiAgICAgICAgLy8gVE9ETyBSZXNvbHV0aW9uIGNvdWxkIGdvIGhlcmUgKCBlZyBsb3cgcmVzIGJsdXJzIClcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGN1cnJlbnQgV2ViR0wgZHJhd2luZyBjb250ZXh0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdsID0gZ2w7XG5cbiAgICAgICAgLy8gbmV4dCB0aW1lIHRvIGNyZWF0ZSBhIGZyYW1lIGJ1ZmZlciBhbmQgdGV4dHVyZVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGZyYW1lIGJ1ZmZlclxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLmdsQ29yZS5HTEZyYW1lYnVmZmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mcmFtZUJ1ZmZlciA9IG51bGw7XG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGJhY2tncm91bmQgY29sb3VyIG9mIHRoaXMgcmVuZGVyIHRhcmdldCwgYXMgYW4gYXJyYXkgb2YgW3IsZyxiLGFdIHZhbHVlc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJbXX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2xlYXJDb2xvciA9IFswLCAwLCAwLCAwXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHNpemUgb2YgdGhlIG9iamVjdCBhcyBhIHJlY3RhbmdsZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlJlY3RhbmdsZX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2l6ZSA9IG5ldyBSZWN0YW5nbGUoMCwgMCwgMSwgMSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjdXJyZW50IHJlc29sdXRpb24gLyBkZXZpY2UgcGl4ZWwgcmF0aW9cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCAxXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlc29sdXRpb24gPSByZXNvbHV0aW9uIHx8IHNldHRpbmdzLlJFU09MVVRJT047XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBwcm9qZWN0aW9uIG1hdHJpeFxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLk1hdHJpeH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucHJvamVjdGlvbk1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG9iamVjdCdzIHRyYW5zZm9ybVxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLk1hdHJpeH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHJhbnNmb3JtID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGZyYW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlJlY3RhbmdsZX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZnJhbWUgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgc3RlbmNpbCBidWZmZXIgc3RvcmVzIG1hc2tpbmcgZGF0YSBmb3IgdGhlIHJlbmRlciB0YXJnZXRcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7Z2xDb3JlLkdMQnVmZmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kZWZhdWx0RnJhbWUgPSBuZXcgUmVjdGFuZ2xlKCk7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb25GcmFtZSA9IG51bGw7XG4gICAgICAgIHRoaXMuc291cmNlRnJhbWUgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgc3RlbmNpbCBidWZmZXIgc3RvcmVzIG1hc2tpbmcgZGF0YSBmb3IgdGhlIHJlbmRlciB0YXJnZXRcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7Z2xDb3JlLkdMQnVmZmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGVuY2lsQnVmZmVyID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGRhdGEgc3RydWN0dXJlIGZvciB0aGUgc3RlbmNpbCBtYXNrc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLkdyYXBoaWNzW119XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0ZW5jaWxNYXNrU3RhY2sgPSBbXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU3RvcmVzIGZpbHRlciBkYXRhIGZvciB0aGUgcmVuZGVyIHRhcmdldFxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtvYmplY3RbXX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZmlsdGVyRGF0YSA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzY2FsZSBtb2RlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IFBJWEkuc2V0dGluZ3MuU0NBTEVfTU9ERVxuICAgICAgICAgKiBAc2VlIFBJWEkuU0NBTEVfTU9ERVNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2NhbGVNb2RlID0gc2NhbGVNb2RlIHx8IHNldHRpbmdzLlNDQUxFX01PREU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgdGhpcyBvYmplY3QgaXMgdGhlIHJvb3QgZWxlbWVudCBvciBub3RcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucm9vdCA9IHJvb3Q7XG5cbiAgICAgICAgaWYgKCF0aGlzLnJvb3QpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuZnJhbWVCdWZmZXIgPSBHTEZyYW1lYnVmZmVyLmNyZWF0ZVJHQkEoZ2wsIDEwMCwgMTAwKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc2NhbGVNb2RlID09PSBTQ0FMRV9NT0RFUy5ORUFSRVNUKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuZnJhbWVCdWZmZXIudGV4dHVyZS5lbmFibGVOZWFyZXN0U2NhbGluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuZnJhbWVCdWZmZXIudGV4dHVyZS5lbmFibGVMaW5lYXJTY2FsaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgIEEgZnJhbWUgYnVmZmVyIG5lZWRzIGEgdGFyZ2V0IHRvIHJlbmRlciB0by4uXG4gICAgICAgICAgICAgICAgY3JlYXRlIGEgdGV4dHVyZSBhbmQgYmluZCBpdCBhdHRhY2ggaXQgdG8gdGhlIGZyYW1lYnVmZmVyLi5cbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAvLyB0aGlzIGlzIHVzZWQgYnkgdGhlIGJhc2UgdGV4dHVyZVxuICAgICAgICAgICAgdGhpcy50ZXh0dXJlID0gdGhpcy5mcmFtZUJ1ZmZlci50ZXh0dXJlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gbWFrZSBpdCBhIG51bGwgZnJhbWVidWZmZXIuLlxuICAgICAgICAgICAgdGhpcy5mcmFtZUJ1ZmZlciA9IG5ldyBHTEZyYW1lYnVmZmVyKGdsLCAxMDAsIDEwMCk7XG4gICAgICAgICAgICB0aGlzLmZyYW1lQnVmZmVyLmZyYW1lYnVmZmVyID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0RnJhbWUoKTtcblxuICAgICAgICB0aGlzLnJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIGZpbHRlciB0ZXh0dXJlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gW2NsZWFyQ29sb3I9dGhpcy5jbGVhckNvbG9yXSAtIEFycmF5IG9mIFtyLGcsYixhXSB0byBjbGVhciB0aGUgZnJhbWVidWZmZXJcbiAgICAgKi9cbiAgICBjbGVhcihjbGVhckNvbG9yKVxuICAgIHtcbiAgICAgICAgY29uc3QgY2MgPSBjbGVhckNvbG9yIHx8IHRoaXMuY2xlYXJDb2xvcjtcblxuICAgICAgICB0aGlzLmZyYW1lQnVmZmVyLmNsZWFyKGNjWzBdLCBjY1sxXSwgY2NbMl0sIGNjWzNdKTsvLyByLGcsYixhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyB0aGUgc3RlbmNpbCBidWZmZXIuXG4gICAgICpcbiAgICAgKi9cbiAgICBhdHRhY2hTdGVuY2lsQnVmZmVyKClcbiAgICB7XG4gICAgICAgIC8vIFRPRE8gY2hlY2sgaWYgc3RlbmNpbCBpcyBkb25lP1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHN0ZW5jaWwgYnVmZmVyIGlzIHVzZWQgZm9yIG1hc2tpbmcgaW4gcGl4aVxuICAgICAgICAgKiBsZXRzIGNyZWF0ZSBvbmUgYW5kIHRoZW4gYWRkIGF0dGFjaCBpdCB0byB0aGUgZnJhbWVidWZmZXIuLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKCF0aGlzLnJvb3QpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuZnJhbWVCdWZmZXIuZW5hYmxlU3RlbmNpbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZnJhbWUgb2YgdGhlIHJlbmRlciB0YXJnZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlY3RhbmdsZX0gZGVzdGluYXRpb25GcmFtZSAtIFRoZSBkZXN0aW5hdGlvbiBmcmFtZS5cbiAgICAgKiBAcGFyYW0ge1JlY3RhbmdsZX0gc291cmNlRnJhbWUgLSBUaGUgc291cmNlIGZyYW1lLlxuICAgICAqL1xuICAgIHNldEZyYW1lKGRlc3RpbmF0aW9uRnJhbWUsIHNvdXJjZUZyYW1lKVxuICAgIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbkZyYW1lID0gZGVzdGluYXRpb25GcmFtZSB8fCB0aGlzLmRlc3RpbmF0aW9uRnJhbWUgfHwgdGhpcy5kZWZhdWx0RnJhbWU7XG4gICAgICAgIHRoaXMuc291cmNlRnJhbWUgPSBzb3VyY2VGcmFtZSB8fCB0aGlzLnNvdXJjZUZyYW1lIHx8IGRlc3RpbmF0aW9uRnJhbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmluZHMgdGhlIGJ1ZmZlcnMgYW5kIGluaXRpYWxpc2VzIHRoZSB2aWV3cG9ydC5cbiAgICAgKlxuICAgICAqL1xuICAgIGFjdGl2YXRlKClcbiAgICB7XG4gICAgICAgIC8vIFRPT0QgcmVmYWN0b3IgdXNhZ2Ugb2YgZnJhbWUuLlxuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG5cbiAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSB0ZXh0dXJlIGlzIHVuYm91bmQhXG4gICAgICAgIHRoaXMuZnJhbWVCdWZmZXIuYmluZCgpO1xuXG4gICAgICAgIHRoaXMuY2FsY3VsYXRlUHJvamVjdGlvbih0aGlzLmRlc3RpbmF0aW9uRnJhbWUsIHRoaXMuc291cmNlRnJhbWUpO1xuXG4gICAgICAgIGlmICh0aGlzLnRyYW5zZm9ybSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5wcm9qZWN0aW9uTWF0cml4LmFwcGVuZCh0aGlzLnRyYW5zZm9ybSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPIGFkZCBhIGNoZWNrIGFzIHRoZW0gbWF5IGJlIHRoZSBzYW1lIVxuICAgICAgICBpZiAodGhpcy5kZXN0aW5hdGlvbkZyYW1lICE9PSB0aGlzLnNvdXJjZUZyYW1lKVxuICAgICAgICB7XG4gICAgICAgICAgICBnbC5lbmFibGUoZ2wuU0NJU1NPUl9URVNUKTtcbiAgICAgICAgICAgIGdsLnNjaXNzb3IoXG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbkZyYW1lLnggfCAwLFxuICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb25GcmFtZS55IHwgMCxcbiAgICAgICAgICAgICAgICAodGhpcy5kZXN0aW5hdGlvbkZyYW1lLndpZHRoICogdGhpcy5yZXNvbHV0aW9uKSB8IDAsXG4gICAgICAgICAgICAgICAgKHRoaXMuZGVzdGluYXRpb25GcmFtZS5oZWlnaHQgKiB0aGlzLnJlc29sdXRpb24pIHwgMFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdsLmRpc2FibGUoZ2wuU0NJU1NPUl9URVNUKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRPRE8gLSBkb2VzIG5vdCBuZWVkIHRvIGJlIHVwZGF0ZWQgYWxsIHRoZSB0aW1lPz9cbiAgICAgICAgZ2wudmlld3BvcnQoXG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uRnJhbWUueCB8IDAsXG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uRnJhbWUueSB8IDAsXG4gICAgICAgICAgICAodGhpcy5kZXN0aW5hdGlvbkZyYW1lLndpZHRoICogdGhpcy5yZXNvbHV0aW9uKSB8IDAsXG4gICAgICAgICAgICAodGhpcy5kZXN0aW5hdGlvbkZyYW1lLmhlaWdodCAqIHRoaXMucmVzb2x1dGlvbikgfCAwXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgcHJvamVjdGlvbiBtYXRyaXggYmFzZWQgb24gYSBwcm9qZWN0aW9uIGZyYW1lICh3aGljaCBpcyBhIHJlY3RhbmdsZSlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVjdGFuZ2xlfSBkZXN0aW5hdGlvbkZyYW1lIC0gVGhlIGRlc3RpbmF0aW9uIGZyYW1lLlxuICAgICAqIEBwYXJhbSB7UmVjdGFuZ2xlfSBzb3VyY2VGcmFtZSAtIFRoZSBzb3VyY2UgZnJhbWUuXG4gICAgICovXG4gICAgY2FsY3VsYXRlUHJvamVjdGlvbihkZXN0aW5hdGlvbkZyYW1lLCBzb3VyY2VGcmFtZSlcbiAgICB7XG4gICAgICAgIGNvbnN0IHBtID0gdGhpcy5wcm9qZWN0aW9uTWF0cml4O1xuXG4gICAgICAgIHNvdXJjZUZyYW1lID0gc291cmNlRnJhbWUgfHwgZGVzdGluYXRpb25GcmFtZTtcblxuICAgICAgICBwbS5pZGVudGl0eSgpO1xuXG4gICAgICAgIC8vIFRPRE86IG1ha2UgZGVzdCBzY2FsZSBzb3VyY2VcbiAgICAgICAgaWYgKCF0aGlzLnJvb3QpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHBtLmEgPSAxIC8gZGVzdGluYXRpb25GcmFtZS53aWR0aCAqIDI7XG4gICAgICAgICAgICBwbS5kID0gMSAvIGRlc3RpbmF0aW9uRnJhbWUuaGVpZ2h0ICogMjtcblxuICAgICAgICAgICAgcG0udHggPSAtMSAtIChzb3VyY2VGcmFtZS54ICogcG0uYSk7XG4gICAgICAgICAgICBwbS50eSA9IC0xIC0gKHNvdXJjZUZyYW1lLnkgKiBwbS5kKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHBtLmEgPSAxIC8gZGVzdGluYXRpb25GcmFtZS53aWR0aCAqIDI7XG4gICAgICAgICAgICBwbS5kID0gLTEgLyBkZXN0aW5hdGlvbkZyYW1lLmhlaWdodCAqIDI7XG5cbiAgICAgICAgICAgIHBtLnR4ID0gLTEgLSAoc291cmNlRnJhbWUueCAqIHBtLmEpO1xuICAgICAgICAgICAgcG0udHkgPSAxIC0gKHNvdXJjZUZyYW1lLnkgKiBwbS5kKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc2l6ZXMgdGhlIHRleHR1cmUgdG8gdGhlIHNwZWNpZmllZCB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSB0aGUgbmV3IHdpZHRoIG9mIHRoZSB0ZXh0dXJlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIHRoZSBuZXcgaGVpZ2h0IG9mIHRoZSB0ZXh0dXJlXG4gICAgICovXG4gICAgcmVzaXplKHdpZHRoLCBoZWlnaHQpXG4gICAge1xuICAgICAgICB3aWR0aCA9IHdpZHRoIHwgMDtcbiAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IHwgMDtcblxuICAgICAgICBpZiAodGhpcy5zaXplLndpZHRoID09PSB3aWR0aCAmJiB0aGlzLnNpemUuaGVpZ2h0ID09PSBoZWlnaHQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2l6ZS53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLnNpemUuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICAgIHRoaXMuZGVmYXVsdEZyYW1lLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuZGVmYXVsdEZyYW1lLmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgICB0aGlzLmZyYW1lQnVmZmVyLnJlc2l6ZSh3aWR0aCAqIHRoaXMucmVzb2x1dGlvbiwgaGVpZ2h0ICogdGhpcy5yZXNvbHV0aW9uKTtcblxuICAgICAgICBjb25zdCBwcm9qZWN0aW9uRnJhbWUgPSB0aGlzLmZyYW1lIHx8IHRoaXMuc2l6ZTtcblxuICAgICAgICB0aGlzLmNhbGN1bGF0ZVByb2plY3Rpb24ocHJvamVjdGlvbkZyYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgcmVuZGVyIHRhcmdldC5cbiAgICAgKlxuICAgICAqL1xuICAgIGRlc3Ryb3koKVxuICAgIHtcbiAgICAgICAgdGhpcy5mcmFtZUJ1ZmZlci5kZXN0cm95KCk7XG5cbiAgICAgICAgdGhpcy5mcmFtZUJ1ZmZlciA9IG51bGw7XG4gICAgICAgIHRoaXMudGV4dHVyZSA9IG51bGw7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYkdMTWFuYWdlclxue1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UElYSS5XZWJHTFJlbmRlcmVyfSByZW5kZXJlciAtIFRoZSByZW5kZXJlciB0aGlzIG1hbmFnZXIgd29ya3MgZm9yLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyKVxuICAgIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSByZW5kZXJlciB0aGlzIG1hbmFnZXIgd29ya3MgZm9yLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLldlYkdMUmVuZGVyZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG5cbiAgICAgICAgLy90aGlzLnJlbmRlcmVyLm9uKCdjb250ZXh0JywgdGhpcy5vbkNvbnRleHRDaGFuZ2UsIHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyaWMgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZXJlIGlzIGEgV2ViR0wgY29udGV4dCBjaGFuZ2UuXG4gICAgICpcbiAgICAgKi9cbiAgICBvbkNvbnRleHRDaGFuZ2UoKVxuICAgIHtcbiAgICAgICAgLy8gZG8gc29tZSBjb2RlcyBpbml0IVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyaWMgZGVzdHJveSBtZXRob2RzIHRvIGJlIG92ZXJyaWRkZW4gYnkgdGhlIHN1YmNsYXNzXG4gICAgICpcbiAgICAgKi9cbiAgICBkZXN0cm95KClcbiAgICB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIub2ZmKCdjb250ZXh0JywgdGhpcy5vbkNvbnRleHRDaGFuZ2UsIHRoaXMpO1xuXG4gICAgICAgIHRoaXMucmVuZGVyZXIgPSBudWxsO1xuICAgIH1cbn1cbiIsImltcG9ydCBXZWJHTE1hbmFnZXIgZnJvbSAnLi4vbWFuYWdlcnMvV2ViR0xNYW5hZ2VyJztcblxuLyoqXG4gKiBCYXNlIGZvciBhIGNvbW1vbiBvYmplY3QgcmVuZGVyZXIgdGhhdCBjYW4gYmUgdXNlZCBhcyBhIHN5c3RlbSByZW5kZXJlciBwbHVnaW4uXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLldlYkdMTWFuYWdlclxuICogQG1lbWJlcm9mIFBJWElcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT2JqZWN0UmVuZGVyZXIgZXh0ZW5kcyBXZWJHTE1hbmFnZXJcbntcbiAgICAvKipcbiAgICAgKiBTdGFydHMgdGhlIHJlbmRlcmVyIGFuZCBzZXRzIHRoZSBzaGFkZXJcbiAgICAgKlxuICAgICAqL1xuICAgIHN0YXJ0KClcbiAgICB7XG4gICAgICAgIC8vIHNldCB0aGUgc2hhZGVyLi5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdG9wcyB0aGUgcmVuZGVyZXJcbiAgICAgKlxuICAgICAqL1xuICAgIHN0b3AoKVxuICAgIHtcbiAgICAgICAgdGhpcy5mbHVzaCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0dWIgbWV0aG9kIGZvciByZW5kZXJpbmcgY29udGVudCBhbmQgZW1wdHlpbmcgdGhlIGN1cnJlbnQgYmF0Y2guXG4gICAgICpcbiAgICAgKi9cbiAgICBmbHVzaCgpXG4gICAge1xuICAgICAgICAvLyBmbHVzaCFcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXJzIGFuIG9iamVjdFxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLkRpc3BsYXlPYmplY3R9IG9iamVjdCAtIFRoZSBvYmplY3QgdG8gcmVuZGVyLlxuICAgICAqL1xuICAgIHJlbmRlcihvYmplY3QpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB7XG4gICAgICAgIC8vIHJlbmRlciB0aGUgb2JqZWN0XG4gICAgfVxufVxuIiwiXG5jb25zdCBERVBUSF9URVNUID0gMTtcbmNvbnN0IEZST05UX0ZBQ0UgPSAyO1xuY29uc3QgQ1VMTF9GQUNFID0gMztcblxuLyoqXG4gKiBBIFdlYkdMIHN0YXRlIG1hY2hpbmVzXG4gKlxuICogQG1lbWJlcm9mIFBJWElcbiAqIEBjbGFzc1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXZWJHTFN0YXRlXG57XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIC0gVGhlIGN1cnJlbnQgV2ViR0wgcmVuZGVyaW5nIGNvbnRleHRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihnbClcbiAgICB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgY3VycmVudCBhY3RpdmUgc3RhdGVcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7VWludDhBcnJheX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYWN0aXZlU3RhdGUgPSBuZXcgVWludDhBcnJheSgxNik7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBkZWZhdWx0IHN0YXRlXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1VpbnQ4QXJyYXl9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRlZmF1bHRTdGF0ZSA9IG5ldyBVaW50OEFycmF5KDE2KTtcblxuICAgICAgICAvLyBkZWZhdWx0IGJsZW5kIG1vZGUuLlxuICAgICAgICB0aGlzLmRlZmF1bHRTdGF0ZVswXSA9IDE7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjdXJyZW50IHN0YXRlIGluZGV4IGluIHRoZSBzdGFja1xuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YWNrSW5kZXggPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgc3RhY2sgaG9sZGluZyBhbGwgdGhlIGRpZmZlcmVudCBzdGF0ZXNcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7QXJyYXk8Kj59XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YWNrID0gW107XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjdXJyZW50IFdlYkdMIHJlbmRlcmluZyBjb250ZXh0XG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1dlYkdMUmVuZGVyaW5nQ29udGV4dH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcblxuICAgICAgICB0aGlzLm1heEF0dHJpYnMgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuTUFYX1ZFUlRFWF9BVFRSSUJTKTtcblxuICAgICAgICB0aGlzLmF0dHJpYlN0YXRlID0ge1xuICAgICAgICAgICAgdGVtcEF0dHJpYlN0YXRlOiBuZXcgQXJyYXkodGhpcy5tYXhBdHRyaWJzKSxcbiAgICAgICAgICAgIGF0dHJpYlN0YXRlOiBuZXcgQXJyYXkodGhpcy5tYXhBdHRyaWJzKSxcbiAgICAgICAgfTtcblxuXG4gICAgICAgIC8vIGNoZWNrIHdlIGhhdmUgdmFvLi5cbiAgICAgICAgdGhpcy5uYXRpdmVWYW9FeHRlbnNpb24gPSAoXG4gICAgICAgICAgICBnbC5nZXRFeHRlbnNpb24oJ09FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0JylcbiAgICAgICAgICAgIHx8IGdsLmdldEV4dGVuc2lvbignTU9aX09FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0JylcbiAgICAgICAgICAgIHx8IGdsLmdldEV4dGVuc2lvbignV0VCS0lUX09FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0JylcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQdXNoZXMgYSBuZXcgYWN0aXZlIHN0YXRlXG4gICAgICovXG4gICAgcHVzaCgpXG4gICAge1xuICAgICAgICAvLyBuZXh0IHN0YXRlLi5cbiAgICAgICAgbGV0IHN0YXRlID0gdGhpcy5zdGFja1srK3RoaXMuc3RhY2tJbmRleF07XG5cbiAgICAgICAgaWYgKCFzdGF0ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgc3RhdGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2tJbmRleF0gPSBuZXcgVWludDhBcnJheSgxNik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb3B5IHN0YXRlLi5cbiAgICAgICAgLy8gc2V0IGFjdGl2ZSBzdGF0ZSBzbyB3ZSBjYW4gZm9yY2Ugb3ZlcnJpZGVzIG9mIGdsIHN0YXRlXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hY3RpdmVTdGF0ZS5sZW5ndGg7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVTdGF0ZVtpXSA9IHN0YXRlW2ldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUG9wcyBhIHN0YXRlIG91dFxuICAgICAqL1xuICAgIHBvcCgpXG4gICAge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhY2tbLS10aGlzLnN0YWNrSW5kZXhdO1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgc3RhdGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gc3RhdGUgLSBUaGUgc3RhdGUgdG8gc2V0LlxuICAgICAqL1xuICAgIHNldFN0YXRlKHN0YXRlKVxuICAgIHtcbiAgICAgICAgdGhpcy5zZXREZXB0aFRlc3Qoc3RhdGVbREVQVEhfVEVTVF0pO1xuICAgICAgICB0aGlzLnNldEZyb250RmFjZShzdGF0ZVtGUk9OVF9GQUNFXSk7XG4gICAgICAgIHRoaXMuc2V0Q3VsbEZhY2Uoc3RhdGVbQ1VMTF9GQUNFXSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHdoZXRoZXIgdG8gZW5hYmxlIG9yIGRpc2FibGUgZGVwdGggdGVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgLSBUdXJuIG9uIG9yIG9mZiB3ZWJnbCBkZXB0aCB0ZXN0aW5nLlxuICAgICAqL1xuICAgIHNldERlcHRoVGVzdCh2YWx1ZSlcbiAgICB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgPyAxIDogMDtcblxuICAgICAgICBpZiAodGhpcy5hY3RpdmVTdGF0ZVtERVBUSF9URVNUXSA9PT0gdmFsdWUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYWN0aXZlU3RhdGVbREVQVEhfVEVTVF0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5nbFt2YWx1ZSA/ICdlbmFibGUnIDogJ2Rpc2FibGUnXSh0aGlzLmdsLkRFUFRIX1RFU1QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgd2hldGhlciB0byBlbmFibGUgb3IgZGlzYWJsZSBjdWxsIGZhY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlIC0gVHVybiBvbiBvciBvZmYgd2ViZ2wgY3VsbCBmYWNlLlxuICAgICAqL1xuICAgIHNldEN1bGxGYWNlKHZhbHVlKVxuICAgIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSA/IDEgOiAwO1xuXG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZVN0YXRlW0NVTExfRkFDRV0gPT09IHZhbHVlKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFjdGl2ZVN0YXRlW0NVTExfRkFDRV0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5nbFt2YWx1ZSA/ICdlbmFibGUnIDogJ2Rpc2FibGUnXSh0aGlzLmdsLkNVTExfRkFDRSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2wgZnJvbnQgZmFjZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgLSB0cnVlIGlzIGNsb2Nrd2lzZSBhbmQgZmFsc2UgaXMgY291bnRlci1jbG9ja3dpc2VcbiAgICAgKi9cbiAgICBzZXRGcm9udEZhY2UodmFsdWUpXG4gICAge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlID8gMSA6IDA7XG5cbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlU3RhdGVbRlJPTlRfRkFDRV0gPT09IHZhbHVlKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFjdGl2ZVN0YXRlW0ZST05UX0ZBQ0VdID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZ2wuZnJvbnRGYWNlKHRoaXMuZ2xbdmFsdWUgPyAnQ1cnIDogJ0NDVyddKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlcyBhbGwgdGhlIHZhb3MgaW4gdXNlXG4gICAgICpcbiAgICAgKi9cbiAgICByZXNldEF0dHJpYnV0ZXMoKVxuICAgIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmF0dHJpYlN0YXRlLnRlbXBBdHRyaWJTdGF0ZS5sZW5ndGg7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5hdHRyaWJTdGF0ZS50ZW1wQXR0cmliU3RhdGVbaV0gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmF0dHJpYlN0YXRlLmF0dHJpYlN0YXRlLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmF0dHJpYlN0YXRlLmF0dHJpYlN0YXRlW2ldID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGltIGdvaW5nIHRvIGFzc3VtZSBvbmUgaXMgYWx3YXlzIGFjdGl2ZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy5cbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLm1heEF0dHJpYnM7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5nbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoaSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB1c2VkXG4gICAgLyoqXG4gICAgICogUmVzZXRzIGFsbCB0aGUgbG9naWMgYW5kIGRpc2FibGVzIHRoZSB2YW9zXG4gICAgICovXG4gICAgcmVzZXRUb0RlZmF1bHQoKVxuICAgIHtcbiAgICAgICAgLy8gdW5iaW5kIGFueSBWQU8gaWYgdGhleSBleGlzdC4uXG4gICAgICAgIGlmICh0aGlzLm5hdGl2ZVZhb0V4dGVuc2lvbilcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5uYXRpdmVWYW9FeHRlbnNpb24uYmluZFZlcnRleEFycmF5T0VTKG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVzZXQgYWxsIGF0dHJpYnV0ZXMuLlxuICAgICAgICB0aGlzLnJlc2V0QXR0cmlidXRlcygpO1xuXG4gICAgICAgIC8vIHNldCBhY3RpdmUgc3RhdGUgc28gd2UgY2FuIGZvcmNlIG92ZXJyaWRlcyBvZiBnbCBzdGF0ZVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYWN0aXZlU3RhdGUubGVuZ3RoOyArK2kpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlU3RhdGVbaV0gPSAzMjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2wucGl4ZWxTdG9yZWkodGhpcy5nbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCBmYWxzZSk7XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh0aGlzLmRlZmF1bHRTdGF0ZSk7XG4gICAgfVxufVxuIiwiXG5leHBvcnQgZnVuY3Rpb24gaGV4MnJnYihoZXgsIG91dCl7XG4gICAgb3V0ID0gb3V0IHx8IFtdO1xuXG4gICAgb3V0WzBdID0gKChoZXggPj4gMTYpICYgMHhGRikgLyAyNTU7XG4gICAgb3V0WzFdID0gKChoZXggPj4gOCkgJiAweEZGKSAvIDI1NTtcbiAgICBvdXRbMl0gPSAoaGV4ICYgMHhGRikgLyAyNTU7XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGV4MnN0cmluZyhoZXgpe1xuICAgICBoZXggPSBoZXgudG9TdHJpbmcoMTYpO1xuICAgICBoZXggPSAnMDAwMDAwJy5zdWJzdHIoMCwgNiAtIGhleC5sZW5ndGgpICsgaGV4O1xuXG4gICAgIHJldHVybiBgIyR7aGV4fWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2IyaGV4KHJnYil7XG5cdHJldHVybiAoKChyZ2JbMF0gKiAyNTUpIDw8IDE2KSArICgocmdiWzFdICogMjU1KSA8PCA4KSArIChyZ2JbMl0gKiAyNTUpKTtcbn0iLCJpbXBvcnQgZ2xDb3JlIGZyb20gJ3BpeGktZ2wtY29yZSc7XG5cbi8qKlxuICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgV2ViR0wgc3BlY2lmaWMgcHJvcGVydGllcyB0byBiZSB1c2VkIGJ5IHRoZSBXZWJHTCByZW5kZXJlclxuICpcbiAqIEBjbGFzc1xuICogQHByaXZhdGVcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYkdMR3JhcGhpY3NEYXRhXG57XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIC0gVGhlIGN1cnJlbnQgV2ViR0wgZHJhd2luZyBjb250ZXh0XG4gICAgICogQHBhcmFtIHtQSVhJLlNoYWRlcn0gc2hhZGVyIC0gVGhlIHNoYWRlclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBhdHRyaWJzU3RhdGUgLSBUaGUgc3RhdGUgZm9yIHRoZSBWQU9cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihnbCwgc2hhZGVyLCBhdHRyaWJzU3RhdGUpXG4gICAge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGN1cnJlbnQgV2ViR0wgZHJhd2luZyBjb250ZXh0XG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1dlYkdMUmVuZGVyaW5nQ29udGV4dH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcblxuICAgICAgICAvLyBUT0RPIGRvZXMgdGhpcyBuZWVkIHRvIGJlIHNwbGl0IGJlZm9yZSB1cGxvYWRpbmc/P1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gYXJyYXkgb2YgY29sb3IgY29tcG9uZW50cyAocixnLGIpXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcltdfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb2xvciA9IFswLCAwLCAwXTsgLy8gY29sb3Igc3BsaXQhXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGFycmF5IG9mIHBvaW50cyB0byBkcmF3XG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuUG9pbnRbXX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucG9pbnRzID0gW107XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBpbmRpY2VzIG9mIHRoZSB2ZXJ0aWNlc1xuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJbXX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW5kaWNlcyA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG1haW4gYnVmZmVyXG4gICAgICAgICAqIEBtZW1iZXIge1dlYkdMQnVmZmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5idWZmZXIgPSBnbENvcmUuR0xCdWZmZXIuY3JlYXRlVmVydGV4QnVmZmVyKGdsKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGluZGV4IGJ1ZmZlclxuICAgICAgICAgKiBAbWVtYmVyIHtXZWJHTEJ1ZmZlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW5kZXhCdWZmZXIgPSBnbENvcmUuR0xCdWZmZXIuY3JlYXRlSW5kZXhCdWZmZXIoZ2wpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIHRoaXMgZ3JhcGhpY3MgaXMgZGlydHkgb3Igbm90XG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLmdsUG9pbnRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5nbEluZGljZXMgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlNoYWRlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2hhZGVyID0gc2hhZGVyO1xuXG4gICAgICAgIHRoaXMudmFvID0gbmV3IGdsQ29yZS5WZXJ0ZXhBcnJheU9iamVjdChnbCwgYXR0cmlic1N0YXRlKVxuICAgICAgICAuYWRkSW5kZXgodGhpcy5pbmRleEJ1ZmZlcilcbiAgICAgICAgLmFkZEF0dHJpYnV0ZSh0aGlzLmJ1ZmZlciwgc2hhZGVyLmF0dHJpYnV0ZXMuYVZlcnRleFBvc2l0aW9uLCBnbC5GTE9BVCwgZmFsc2UsIDQgKiA2LCAwKVxuICAgICAgICAuYWRkQXR0cmlidXRlKHRoaXMuYnVmZmVyLCBzaGFkZXIuYXR0cmlidXRlcy5hQ29sb3IsIGdsLkZMT0FULCBmYWxzZSwgNCAqIDYsIDIgKiA0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIHZlcnRpY2VzIGFuZCB0aGUgaW5kaWNlc1xuICAgICAqL1xuICAgIHJlc2V0KClcbiAgICB7XG4gICAgICAgIHRoaXMucG9pbnRzLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuaW5kaWNlcy5sZW5ndGggPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJpbmRzIHRoZSBidWZmZXJzIGFuZCB1cGxvYWRzIHRoZSBkYXRhXG4gICAgICovXG4gICAgdXBsb2FkKClcbiAgICB7XG4gICAgICAgIHRoaXMuZ2xQb2ludHMgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMucG9pbnRzKTtcbiAgICAgICAgdGhpcy5idWZmZXIudXBsb2FkKHRoaXMuZ2xQb2ludHMpO1xuXG4gICAgICAgIHRoaXMuZ2xJbmRpY2VzID0gbmV3IFVpbnQxNkFycmF5KHRoaXMuaW5kaWNlcyk7XG4gICAgICAgIHRoaXMuaW5kZXhCdWZmZXIudXBsb2FkKHRoaXMuZ2xJbmRpY2VzKTtcblxuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW1wdGllcyBhbGwgdGhlIGRhdGFcbiAgICAgKi9cbiAgICBkZXN0cm95KClcbiAgICB7XG4gICAgICAgIHRoaXMuY29sb3IgPSBudWxsO1xuICAgICAgICB0aGlzLnBvaW50cyA9IG51bGw7XG4gICAgICAgIHRoaXMuaW5kaWNlcyA9IG51bGw7XG5cbiAgICAgICAgdGhpcy52YW8uZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmJ1ZmZlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuaW5kZXhCdWZmZXIuZGVzdHJveSgpO1xuXG4gICAgICAgIHRoaXMuZ2wgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuYnVmZmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5pbmRleEJ1ZmZlciA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5nbFBvaW50cyA9IG51bGw7XG4gICAgICAgIHRoaXMuZ2xJbmRpY2VzID0gbnVsbDtcbiAgICB9XG59XG4iLCJpbXBvcnQgZ2xDb3JlIGZyb20gJ3BpeGktZ2wtY29yZSc7XG5pbXBvcnQgc2V0dGluZ3MgZnJvbSAnLi9zZXR0aW5ncyc7XG5cbmNvbnN0IHsgUFJFQ0lTSU9OIH0gPSBzZXR0aW5ncztcbmNvbnN0IEdMU2hhZGVyID0gZ2xDb3JlLkdMU2hhZGVyXG5cbmZ1bmN0aW9uIGNoZWNrUHJlY2lzaW9uKHNyYylcbntcbiAgICBpZiAoc3JjIGluc3RhbmNlb2YgQXJyYXkpXG4gICAge1xuICAgICAgICBpZiAoc3JjWzBdLnN1YnN0cmluZygwLCA5KSAhPT0gJ3ByZWNpc2lvbicpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IGNvcHkgPSBzcmMuc2xpY2UoMCk7XG5cbiAgICAgICAgICAgIGNvcHkudW5zaGlmdChgcHJlY2lzaW9uICR7UFJFQ0lTSU9OfSBmbG9hdDtgKTtcblxuICAgICAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoc3JjLnN1YnN0cmluZygwLCA5KSAhPT0gJ3ByZWNpc2lvbicpXG4gICAge1xuICAgICAgICByZXR1cm4gYHByZWNpc2lvbiAke1BSRUNJU0lPTn0gZmxvYXQ7XFxuJHtzcmN9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gc3JjO1xufVxuXG4vKipcbiAqIFdyYXBwZXIgY2xhc3MsIHdlYkdMIFNoYWRlciBmb3IgUGl4aS5cbiAqIEFkZHMgcHJlY2lzaW9uIHN0cmluZyBpZiB2ZXJ0ZXhTcmMgb3IgZnJhZ21lbnRTcmMgaGF2ZSBubyBtZW50aW9uIG9mIGl0LlxuICpcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgR0xTaGFkZXJcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoYWRlciBleHRlbmRzIEdMU2hhZGVyXG57XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgLSBUaGUgY3VycmVudCBXZWJHTCByZW5kZXJpbmcgY29udGV4dFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSB2ZXJ0ZXhTcmMgLSBUaGUgdmVydGV4IHNoYWRlciBzb3VyY2UgYXMgYW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gZnJhZ21lbnRTcmMgLSBUaGUgZnJhZ21lbnQgc2hhZGVyIHNvdXJjZSBhcyBhbiBhcnJheSBvZiBzdHJpbmdzLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGdsLCB2ZXJ0ZXhTcmMsIGZyYWdtZW50U3JjKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZ2wsIGNoZWNrUHJlY2lzaW9uKHZlcnRleFNyYyksIGNoZWNrUHJlY2lzaW9uKGZyYWdtZW50U3JjKSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IFNoYWRlciBmcm9tICcuLi8uLi8uLi9TaGFkZXInO1xuXG4vKipcbiAqIFRoaXMgc2hhZGVyIGlzIHVzZWQgdG8gZHJhdyBzaW1wbGUgcHJpbWl0aXZlIHNoYXBlcyBmb3Ige0BsaW5rIFBJWEkuR3JhcGhpY3N9LlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqIEBleHRlbmRzIFBJWEkuU2hhZGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByaW1pdGl2ZVNoYWRlciBleHRlbmRzIFNoYWRlclxue1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCAtIFRoZSB3ZWJnbCBzaGFkZXIgbWFuYWdlciB0aGlzIHNoYWRlciB3b3JrcyBmb3IuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZ2wpXG4gICAge1xuICAgICAgICBzdXBlcihnbCxcbiAgICAgICAgICAgIC8vIHZlcnRleCBzaGFkZXJcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAnYXR0cmlidXRlIHZlYzIgYVZlcnRleFBvc2l0aW9uOycsXG4gICAgICAgICAgICAgICAgJ2F0dHJpYnV0ZSB2ZWM0IGFDb2xvcjsnLFxuXG4gICAgICAgICAgICAgICAgJ3VuaWZvcm0gbWF0MyB0cmFuc2xhdGlvbk1hdHJpeDsnLFxuICAgICAgICAgICAgICAgICd1bmlmb3JtIG1hdDMgcHJvamVjdGlvbk1hdHJpeDsnLFxuXG4gICAgICAgICAgICAgICAgJ3VuaWZvcm0gZmxvYXQgYWxwaGE7JyxcbiAgICAgICAgICAgICAgICAndW5pZm9ybSB2ZWMzIHRpbnQ7JyxcblxuICAgICAgICAgICAgICAgICd2YXJ5aW5nIHZlYzQgdkNvbG9yOycsXG5cbiAgICAgICAgICAgICAgICAndm9pZCBtYWluKHZvaWQpeycsXG4gICAgICAgICAgICAgICAgJyAgIGdsX1Bvc2l0aW9uID0gdmVjNCgocHJvamVjdGlvbk1hdHJpeCAqIHRyYW5zbGF0aW9uTWF0cml4ICogdmVjMyhhVmVydGV4UG9zaXRpb24sIDEuMCkpLnh5LCAwLjAsIDEuMCk7JyxcbiAgICAgICAgICAgICAgICAnICAgdkNvbG9yID0gYUNvbG9yICogdmVjNCh0aW50ICogYWxwaGEsIGFscGhhKTsnLFxuICAgICAgICAgICAgICAgICd9JyxcbiAgICAgICAgICAgIF0uam9pbignXFxuJyksXG4gICAgICAgICAgICAvLyBmcmFnbWVudCBzaGFkZXJcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAndmFyeWluZyB2ZWM0IHZDb2xvcjsnLFxuXG4gICAgICAgICAgICAgICAgJ3ZvaWQgbWFpbih2b2lkKXsnLFxuICAgICAgICAgICAgICAgICcgICBnbF9GcmFnQ29sb3IgPSB2Q29sb3I7JyxcbiAgICAgICAgICAgICAgICAnfScsXG4gICAgICAgICAgICBdLmpvaW4oJ1xcbicpXG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuLi8uLi8uLi9tYXRoL2luZGV4JztcbmltcG9ydCB7IGhleDJyZ2IgfSBmcm9tICcuLi8uLi8uLi91dGlscy9jb2xvcic7XG5cbi8qKlxuICogQnVpbGRzIGEgbGluZSB0byBkcmF3XG4gKlxuICogSWdub3JlZCBmcm9tIGRvY3Mgc2luY2UgaXQgaXMgbm90IGRpcmVjdGx5IGV4cG9zZWQuXG4gKlxuICogQGlnbm9yZVxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7UElYSS5XZWJHTEdyYXBoaWNzRGF0YX0gZ3JhcGhpY3NEYXRhIC0gVGhlIGdyYXBoaWNzIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgbmVjZXNzYXJ5IHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7b2JqZWN0fSB3ZWJHTERhdGEgLSBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIHdlYkdMLXNwZWNpZmljIGluZm9ybWF0aW9uIHRvIGNyZWF0ZSB0aGlzIHNoYXBlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTGluZShncmFwaGljc0RhdGEsIHdlYkdMRGF0YSlcbntcbiAgICAvLyBUT0RPIE9QVElNSVNFIVxuICAgIGxldCBwb2ludHMgPSBncmFwaGljc0RhdGEucG9pbnRzO1xuXG4gICAgaWYgKHBvaW50cy5sZW5ndGggPT09IDApXG4gICAge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGlmIHRoZSBsaW5lIHdpZHRoIGlzIGFuIG9kZCBudW1iZXIgYWRkIDAuNSB0byBhbGlnbiB0byBhIHdob2xlIHBpeGVsXG4gICAgLy8gY29tbWVudGluZyB0aGlzIG91dCBmaXhlcyAjNzExIGFuZCAjMTYyMFxuICAgIC8vIGlmIChncmFwaGljc0RhdGEubGluZVdpZHRoJTIpXG4gICAgLy8ge1xuICAgIC8vICAgICBmb3IgKGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKVxuICAgIC8vICAgICB7XG4gICAgLy8gICAgICAgICBwb2ludHNbaV0gKz0gMC41O1xuICAgIC8vICAgICB9XG4gICAgLy8gfVxuXG4gICAgLy8gZ2V0IGZpcnN0IGFuZCBsYXN0IHBvaW50Li4gZmlndXJlIG91dCB0aGUgbWlkZGxlIVxuICAgIGNvbnN0IGZpcnN0UG9pbnQgPSBuZXcgUG9pbnQocG9pbnRzWzBdLCBwb2ludHNbMV0pO1xuICAgIGxldCBsYXN0UG9pbnQgPSBuZXcgUG9pbnQocG9pbnRzW3BvaW50cy5sZW5ndGggLSAyXSwgcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXSk7XG5cbiAgICAvLyBpZiB0aGUgZmlyc3QgcG9pbnQgaXMgdGhlIGxhc3QgcG9pbnQgLSBnb25uYSBoYXZlIGlzc3VlcyA6KVxuICAgIGlmIChmaXJzdFBvaW50LnggPT09IGxhc3RQb2ludC54ICYmIGZpcnN0UG9pbnQueSA9PT0gbGFzdFBvaW50LnkpXG4gICAge1xuICAgICAgICAvLyBuZWVkIHRvIGNsb25lIGFzIHdlIGFyZSBnb2luZyB0byBzbGlnaHRseSBtb2RpZnkgdGhlIHNoYXBlLi5cbiAgICAgICAgcG9pbnRzID0gcG9pbnRzLnNsaWNlKCk7XG5cbiAgICAgICAgcG9pbnRzLnBvcCgpO1xuICAgICAgICBwb2ludHMucG9wKCk7XG5cbiAgICAgICAgbGFzdFBvaW50ID0gbmV3IFBvaW50KHBvaW50c1twb2ludHMubGVuZ3RoIC0gMl0sIHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV0pO1xuXG4gICAgICAgIGNvbnN0IG1pZFBvaW50WCA9IGxhc3RQb2ludC54ICsgKChmaXJzdFBvaW50LnggLSBsYXN0UG9pbnQueCkgKiAwLjUpO1xuICAgICAgICBjb25zdCBtaWRQb2ludFkgPSBsYXN0UG9pbnQueSArICgoZmlyc3RQb2ludC55IC0gbGFzdFBvaW50LnkpICogMC41KTtcblxuICAgICAgICBwb2ludHMudW5zaGlmdChtaWRQb2ludFgsIG1pZFBvaW50WSk7XG4gICAgICAgIHBvaW50cy5wdXNoKG1pZFBvaW50WCwgbWlkUG9pbnRZKTtcbiAgICB9XG5cbiAgICBjb25zdCB2ZXJ0cyA9IHdlYkdMRGF0YS5wb2ludHM7XG4gICAgY29uc3QgaW5kaWNlcyA9IHdlYkdMRGF0YS5pbmRpY2VzO1xuICAgIGNvbnN0IGxlbmd0aCA9IHBvaW50cy5sZW5ndGggLyAyO1xuICAgIGxldCBpbmRleENvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICBsZXQgaW5kZXhTdGFydCA9IHZlcnRzLmxlbmd0aCAvIDY7XG5cbiAgICAvLyBEUkFXIHRoZSBMaW5lXG4gICAgY29uc3Qgd2lkdGggPSBncmFwaGljc0RhdGEubGluZVdpZHRoIC8gMjtcblxuICAgIC8vIHNvcnQgY29sb3JcbiAgICBjb25zdCBjb2xvciA9IGhleDJyZ2IoZ3JhcGhpY3NEYXRhLnN0cm9rZVN0eWxlKTtcbiAgICBjb25zdCBhbHBoYSA9IGdyYXBoaWNzRGF0YS5saW5lQWxwaGE7XG4gICAgY29uc3QgciA9IGNvbG9yWzBdICogYWxwaGE7XG4gICAgY29uc3QgZyA9IGNvbG9yWzFdICogYWxwaGE7XG4gICAgY29uc3QgYiA9IGNvbG9yWzJdICogYWxwaGE7XG5cbiAgICBsZXQgcDF4ID0gcG9pbnRzWzBdO1xuICAgIGxldCBwMXkgPSBwb2ludHNbMV07XG4gICAgbGV0IHAyeCA9IHBvaW50c1syXTtcbiAgICBsZXQgcDJ5ID0gcG9pbnRzWzNdO1xuICAgIGxldCBwM3ggPSAwO1xuICAgIGxldCBwM3kgPSAwO1xuXG4gICAgbGV0IHBlcnB4ID0gLShwMXkgLSBwMnkpO1xuICAgIGxldCBwZXJweSA9IHAxeCAtIHAyeDtcbiAgICBsZXQgcGVycDJ4ID0gMDtcbiAgICBsZXQgcGVycDJ5ID0gMDtcbiAgICBsZXQgcGVycDN4ID0gMDtcbiAgICBsZXQgcGVycDN5ID0gMDtcblxuICAgIGxldCBkaXN0ID0gTWF0aC5zcXJ0KChwZXJweCAqIHBlcnB4KSArIChwZXJweSAqIHBlcnB5KSk7XG5cbiAgICBwZXJweCAvPSBkaXN0O1xuICAgIHBlcnB5IC89IGRpc3Q7XG4gICAgcGVycHggKj0gd2lkdGg7XG4gICAgcGVycHkgKj0gd2lkdGg7XG5cbiAgICAvLyBzdGFydFxuICAgIHZlcnRzLnB1c2goXG4gICAgICAgIHAxeCAtIHBlcnB4LFxuICAgICAgICBwMXkgLSBwZXJweSxcbiAgICAgICAgciwgZywgYiwgYWxwaGFcbiAgICApO1xuXG4gICAgdmVydHMucHVzaChcbiAgICAgICAgcDF4ICsgcGVycHgsXG4gICAgICAgIHAxeSArIHBlcnB5LFxuICAgICAgICByLCBnLCBiLCBhbHBoYVxuICAgICk7XG5cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxlbmd0aCAtIDE7ICsraSlcbiAgICB7XG4gICAgICAgIHAxeCA9IHBvaW50c1soaSAtIDEpICogMl07XG4gICAgICAgIHAxeSA9IHBvaW50c1soKGkgLSAxKSAqIDIpICsgMV07XG5cbiAgICAgICAgcDJ4ID0gcG9pbnRzW2kgKiAyXTtcbiAgICAgICAgcDJ5ID0gcG9pbnRzWyhpICogMikgKyAxXTtcblxuICAgICAgICBwM3ggPSBwb2ludHNbKGkgKyAxKSAqIDJdO1xuICAgICAgICBwM3kgPSBwb2ludHNbKChpICsgMSkgKiAyKSArIDFdO1xuXG4gICAgICAgIHBlcnB4ID0gLShwMXkgLSBwMnkpO1xuICAgICAgICBwZXJweSA9IHAxeCAtIHAyeDtcblxuICAgICAgICBkaXN0ID0gTWF0aC5zcXJ0KChwZXJweCAqIHBlcnB4KSArIChwZXJweSAqIHBlcnB5KSk7XG4gICAgICAgIHBlcnB4IC89IGRpc3Q7XG4gICAgICAgIHBlcnB5IC89IGRpc3Q7XG4gICAgICAgIHBlcnB4ICo9IHdpZHRoO1xuICAgICAgICBwZXJweSAqPSB3aWR0aDtcblxuICAgICAgICBwZXJwMnggPSAtKHAyeSAtIHAzeSk7XG4gICAgICAgIHBlcnAyeSA9IHAyeCAtIHAzeDtcblxuICAgICAgICBkaXN0ID0gTWF0aC5zcXJ0KChwZXJwMnggKiBwZXJwMngpICsgKHBlcnAyeSAqIHBlcnAyeSkpO1xuICAgICAgICBwZXJwMnggLz0gZGlzdDtcbiAgICAgICAgcGVycDJ5IC89IGRpc3Q7XG4gICAgICAgIHBlcnAyeCAqPSB3aWR0aDtcbiAgICAgICAgcGVycDJ5ICo9IHdpZHRoO1xuXG4gICAgICAgIGNvbnN0IGExID0gKC1wZXJweSArIHAxeSkgLSAoLXBlcnB5ICsgcDJ5KTtcbiAgICAgICAgY29uc3QgYjEgPSAoLXBlcnB4ICsgcDJ4KSAtICgtcGVycHggKyBwMXgpO1xuICAgICAgICBjb25zdCBjMSA9ICgoLXBlcnB4ICsgcDF4KSAqICgtcGVycHkgKyBwMnkpKSAtICgoLXBlcnB4ICsgcDJ4KSAqICgtcGVycHkgKyBwMXkpKTtcbiAgICAgICAgY29uc3QgYTIgPSAoLXBlcnAyeSArIHAzeSkgLSAoLXBlcnAyeSArIHAyeSk7XG4gICAgICAgIGNvbnN0IGIyID0gKC1wZXJwMnggKyBwMngpIC0gKC1wZXJwMnggKyBwM3gpO1xuICAgICAgICBjb25zdCBjMiA9ICgoLXBlcnAyeCArIHAzeCkgKiAoLXBlcnAyeSArIHAyeSkpIC0gKCgtcGVycDJ4ICsgcDJ4KSAqICgtcGVycDJ5ICsgcDN5KSk7XG5cbiAgICAgICAgbGV0IGRlbm9tID0gKGExICogYjIpIC0gKGEyICogYjEpO1xuXG4gICAgICAgIGlmIChNYXRoLmFicyhkZW5vbSkgPCAwLjEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlbm9tICs9IDEwLjE7XG4gICAgICAgICAgICB2ZXJ0cy5wdXNoKFxuICAgICAgICAgICAgICAgIHAyeCAtIHBlcnB4LFxuICAgICAgICAgICAgICAgIHAyeSAtIHBlcnB5LFxuICAgICAgICAgICAgICAgIHIsIGcsIGIsIGFscGhhXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB2ZXJ0cy5wdXNoKFxuICAgICAgICAgICAgICAgIHAyeCArIHBlcnB4LFxuICAgICAgICAgICAgICAgIHAyeSArIHBlcnB5LFxuICAgICAgICAgICAgICAgIHIsIGcsIGIsIGFscGhhXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHB4ID0gKChiMSAqIGMyKSAtIChiMiAqIGMxKSkgLyBkZW5vbTtcbiAgICAgICAgY29uc3QgcHkgPSAoKGEyICogYzEpIC0gKGExICogYzIpKSAvIGRlbm9tO1xuICAgICAgICBjb25zdCBwZGlzdCA9ICgocHggLSBwMngpICogKHB4IC0gcDJ4KSkgKyAoKHB5IC0gcDJ5KSAqIChweSAtIHAyeSkpO1xuXG4gICAgICAgIGlmIChwZGlzdCA+ICgxOTYgKiB3aWR0aCAqIHdpZHRoKSlcbiAgICAgICAge1xuICAgICAgICAgICAgcGVycDN4ID0gcGVycHggLSBwZXJwMng7XG4gICAgICAgICAgICBwZXJwM3kgPSBwZXJweSAtIHBlcnAyeTtcblxuICAgICAgICAgICAgZGlzdCA9IE1hdGguc3FydCgocGVycDN4ICogcGVycDN4KSArIChwZXJwM3kgKiBwZXJwM3kpKTtcbiAgICAgICAgICAgIHBlcnAzeCAvPSBkaXN0O1xuICAgICAgICAgICAgcGVycDN5IC89IGRpc3Q7XG4gICAgICAgICAgICBwZXJwM3ggKj0gd2lkdGg7XG4gICAgICAgICAgICBwZXJwM3kgKj0gd2lkdGg7XG5cbiAgICAgICAgICAgIHZlcnRzLnB1c2gocDJ4IC0gcGVycDN4LCBwMnkgLSBwZXJwM3kpO1xuICAgICAgICAgICAgdmVydHMucHVzaChyLCBnLCBiLCBhbHBoYSk7XG5cbiAgICAgICAgICAgIHZlcnRzLnB1c2gocDJ4ICsgcGVycDN4LCBwMnkgKyBwZXJwM3kpO1xuICAgICAgICAgICAgdmVydHMucHVzaChyLCBnLCBiLCBhbHBoYSk7XG5cbiAgICAgICAgICAgIHZlcnRzLnB1c2gocDJ4IC0gcGVycDN4LCBwMnkgLSBwZXJwM3kpO1xuICAgICAgICAgICAgdmVydHMucHVzaChyLCBnLCBiLCBhbHBoYSk7XG5cbiAgICAgICAgICAgIGluZGV4Q291bnQrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZlcnRzLnB1c2gocHgsIHB5KTtcbiAgICAgICAgICAgIHZlcnRzLnB1c2gociwgZywgYiwgYWxwaGEpO1xuXG4gICAgICAgICAgICB2ZXJ0cy5wdXNoKHAyeCAtIChweCAtIHAyeCksIHAyeSAtIChweSAtIHAyeSkpO1xuICAgICAgICAgICAgdmVydHMucHVzaChyLCBnLCBiLCBhbHBoYSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwMXggPSBwb2ludHNbKGxlbmd0aCAtIDIpICogMl07XG4gICAgcDF5ID0gcG9pbnRzWygobGVuZ3RoIC0gMikgKiAyKSArIDFdO1xuXG4gICAgcDJ4ID0gcG9pbnRzWyhsZW5ndGggLSAxKSAqIDJdO1xuICAgIHAyeSA9IHBvaW50c1soKGxlbmd0aCAtIDEpICogMikgKyAxXTtcblxuICAgIHBlcnB4ID0gLShwMXkgLSBwMnkpO1xuICAgIHBlcnB5ID0gcDF4IC0gcDJ4O1xuXG4gICAgZGlzdCA9IE1hdGguc3FydCgocGVycHggKiBwZXJweCkgKyAocGVycHkgKiBwZXJweSkpO1xuICAgIHBlcnB4IC89IGRpc3Q7XG4gICAgcGVycHkgLz0gZGlzdDtcbiAgICBwZXJweCAqPSB3aWR0aDtcbiAgICBwZXJweSAqPSB3aWR0aDtcblxuICAgIHZlcnRzLnB1c2gocDJ4IC0gcGVycHgsIHAyeSAtIHBlcnB5KTtcbiAgICB2ZXJ0cy5wdXNoKHIsIGcsIGIsIGFscGhhKTtcblxuICAgIHZlcnRzLnB1c2gocDJ4ICsgcGVycHgsIHAyeSArIHBlcnB5KTtcbiAgICB2ZXJ0cy5wdXNoKHIsIGcsIGIsIGFscGhhKTtcblxuICAgIGluZGljZXMucHVzaChpbmRleFN0YXJ0KTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5kZXhDb3VudDsgKytpKVxuICAgIHtcbiAgICAgICAgaW5kaWNlcy5wdXNoKGluZGV4U3RhcnQrKyk7XG4gICAgfVxuXG4gICAgaW5kaWNlcy5wdXNoKGluZGV4U3RhcnQgLSAxKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBlYXJjdXQ7XG5cbmZ1bmN0aW9uIGVhcmN1dChkYXRhLCBob2xlSW5kaWNlcywgZGltKSB7XG5cbiAgICBkaW0gPSBkaW0gfHwgMjtcblxuICAgIHZhciBoYXNIb2xlcyA9IGhvbGVJbmRpY2VzICYmIGhvbGVJbmRpY2VzLmxlbmd0aCxcbiAgICAgICAgb3V0ZXJMZW4gPSBoYXNIb2xlcyA/IGhvbGVJbmRpY2VzWzBdICogZGltIDogZGF0YS5sZW5ndGgsXG4gICAgICAgIG91dGVyTm9kZSA9IGxpbmtlZExpc3QoZGF0YSwgMCwgb3V0ZXJMZW4sIGRpbSwgdHJ1ZSksXG4gICAgICAgIHRyaWFuZ2xlcyA9IFtdO1xuXG4gICAgaWYgKCFvdXRlck5vZGUpIHJldHVybiB0cmlhbmdsZXM7XG5cbiAgICB2YXIgbWluWCwgbWluWSwgbWF4WCwgbWF4WSwgeCwgeSwgc2l6ZTtcblxuICAgIGlmIChoYXNIb2xlcykgb3V0ZXJOb2RlID0gZWxpbWluYXRlSG9sZXMoZGF0YSwgaG9sZUluZGljZXMsIG91dGVyTm9kZSwgZGltKTtcblxuICAgIC8vIGlmIHRoZSBzaGFwZSBpcyBub3QgdG9vIHNpbXBsZSwgd2UnbGwgdXNlIHotb3JkZXIgY3VydmUgaGFzaCBsYXRlcjsgY2FsY3VsYXRlIHBvbHlnb24gYmJveFxuICAgIGlmIChkYXRhLmxlbmd0aCA+IDgwICogZGltKSB7XG4gICAgICAgIG1pblggPSBtYXhYID0gZGF0YVswXTtcbiAgICAgICAgbWluWSA9IG1heFkgPSBkYXRhWzFdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSBkaW07IGkgPCBvdXRlckxlbjsgaSArPSBkaW0pIHtcbiAgICAgICAgICAgIHggPSBkYXRhW2ldO1xuICAgICAgICAgICAgeSA9IGRhdGFbaSArIDFdO1xuICAgICAgICAgICAgaWYgKHggPCBtaW5YKSBtaW5YID0geDtcbiAgICAgICAgICAgIGlmICh5IDwgbWluWSkgbWluWSA9IHk7XG4gICAgICAgICAgICBpZiAoeCA+IG1heFgpIG1heFggPSB4O1xuICAgICAgICAgICAgaWYgKHkgPiBtYXhZKSBtYXhZID0geTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1pblgsIG1pblkgYW5kIHNpemUgYXJlIGxhdGVyIHVzZWQgdG8gdHJhbnNmb3JtIGNvb3JkcyBpbnRvIGludGVnZXJzIGZvciB6LW9yZGVyIGNhbGN1bGF0aW9uXG4gICAgICAgIHNpemUgPSBNYXRoLm1heChtYXhYIC0gbWluWCwgbWF4WSAtIG1pblkpO1xuICAgIH1cblxuICAgIGVhcmN1dExpbmtlZChvdXRlck5vZGUsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBzaXplKTtcblxuICAgIHJldHVybiB0cmlhbmdsZXM7XG59XG5cbi8vIGNyZWF0ZSBhIGNpcmN1bGFyIGRvdWJseSBsaW5rZWQgbGlzdCBmcm9tIHBvbHlnb24gcG9pbnRzIGluIHRoZSBzcGVjaWZpZWQgd2luZGluZyBvcmRlclxuZnVuY3Rpb24gbGlua2VkTGlzdChkYXRhLCBzdGFydCwgZW5kLCBkaW0sIGNsb2Nrd2lzZSkge1xuICAgIHZhciBpLCBsYXN0O1xuXG4gICAgaWYgKGNsb2Nrd2lzZSA9PT0gKHNpZ25lZEFyZWEoZGF0YSwgc3RhcnQsIGVuZCwgZGltKSA+IDApKSB7XG4gICAgICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IGRpbSkgbGFzdCA9IGluc2VydE5vZGUoaSwgZGF0YVtpXSwgZGF0YVtpICsgMV0sIGxhc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSA9IGVuZCAtIGRpbTsgaSA+PSBzdGFydDsgaSAtPSBkaW0pIGxhc3QgPSBpbnNlcnROb2RlKGksIGRhdGFbaV0sIGRhdGFbaSArIDFdLCBsYXN0KTtcbiAgICB9XG5cbiAgICBpZiAobGFzdCAmJiBlcXVhbHMobGFzdCwgbGFzdC5uZXh0KSkge1xuICAgICAgICByZW1vdmVOb2RlKGxhc3QpO1xuICAgICAgICBsYXN0ID0gbGFzdC5uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBsYXN0O1xufVxuXG4vLyBlbGltaW5hdGUgY29saW5lYXIgb3IgZHVwbGljYXRlIHBvaW50c1xuZnVuY3Rpb24gZmlsdGVyUG9pbnRzKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoIXN0YXJ0KSByZXR1cm4gc3RhcnQ7XG4gICAgaWYgKCFlbmQpIGVuZCA9IHN0YXJ0O1xuXG4gICAgdmFyIHAgPSBzdGFydCxcbiAgICAgICAgYWdhaW47XG4gICAgZG8ge1xuICAgICAgICBhZ2FpbiA9IGZhbHNlO1xuXG4gICAgICAgIGlmICghcC5zdGVpbmVyICYmIChlcXVhbHMocCwgcC5uZXh0KSB8fCBhcmVhKHAucHJldiwgcCwgcC5uZXh0KSA9PT0gMCkpIHtcbiAgICAgICAgICAgIHJlbW92ZU5vZGUocCk7XG4gICAgICAgICAgICBwID0gZW5kID0gcC5wcmV2O1xuICAgICAgICAgICAgaWYgKHAgPT09IHAubmV4dCkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBhZ2FpbiA9IHRydWU7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHAgPSBwLm5leHQ7XG4gICAgICAgIH1cbiAgICB9IHdoaWxlIChhZ2FpbiB8fCBwICE9PSBlbmQpO1xuXG4gICAgcmV0dXJuIGVuZDtcbn1cblxuLy8gbWFpbiBlYXIgc2xpY2luZyBsb29wIHdoaWNoIHRyaWFuZ3VsYXRlcyBhIHBvbHlnb24gKGdpdmVuIGFzIGEgbGlua2VkIGxpc3QpXG5mdW5jdGlvbiBlYXJjdXRMaW5rZWQoZWFyLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgc2l6ZSwgcGFzcykge1xuICAgIGlmICghZWFyKSByZXR1cm47XG5cbiAgICAvLyBpbnRlcmxpbmsgcG9seWdvbiBub2RlcyBpbiB6LW9yZGVyXG4gICAgaWYgKCFwYXNzICYmIHNpemUpIGluZGV4Q3VydmUoZWFyLCBtaW5YLCBtaW5ZLCBzaXplKTtcblxuICAgIHZhciBzdG9wID0gZWFyLFxuICAgICAgICBwcmV2LCBuZXh0O1xuXG4gICAgLy8gaXRlcmF0ZSB0aHJvdWdoIGVhcnMsIHNsaWNpbmcgdGhlbSBvbmUgYnkgb25lXG4gICAgd2hpbGUgKGVhci5wcmV2ICE9PSBlYXIubmV4dCkge1xuICAgICAgICBwcmV2ID0gZWFyLnByZXY7XG4gICAgICAgIG5leHQgPSBlYXIubmV4dDtcblxuICAgICAgICBpZiAoc2l6ZSA/IGlzRWFySGFzaGVkKGVhciwgbWluWCwgbWluWSwgc2l6ZSkgOiBpc0VhcihlYXIpKSB7XG4gICAgICAgICAgICAvLyBjdXQgb2ZmIHRoZSB0cmlhbmdsZVxuICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2gocHJldi5pIC8gZGltKTtcbiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGVhci5pIC8gZGltKTtcbiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKG5leHQuaSAvIGRpbSk7XG5cbiAgICAgICAgICAgIHJlbW92ZU5vZGUoZWFyKTtcblxuICAgICAgICAgICAgLy8gc2tpcHBpbmcgdGhlIG5leHQgdmVydGljZSBsZWFkcyB0byBsZXNzIHNsaXZlciB0cmlhbmdsZXNcbiAgICAgICAgICAgIGVhciA9IG5leHQubmV4dDtcbiAgICAgICAgICAgIHN0b3AgPSBuZXh0Lm5leHQ7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZWFyID0gbmV4dDtcblxuICAgICAgICAvLyBpZiB3ZSBsb29wZWQgdGhyb3VnaCB0aGUgd2hvbGUgcmVtYWluaW5nIHBvbHlnb24gYW5kIGNhbid0IGZpbmQgYW55IG1vcmUgZWFyc1xuICAgICAgICBpZiAoZWFyID09PSBzdG9wKSB7XG4gICAgICAgICAgICAvLyB0cnkgZmlsdGVyaW5nIHBvaW50cyBhbmQgc2xpY2luZyBhZ2FpblxuICAgICAgICAgICAgaWYgKCFwYXNzKSB7XG4gICAgICAgICAgICAgICAgZWFyY3V0TGlua2VkKGZpbHRlclBvaW50cyhlYXIpLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgc2l6ZSwgMSk7XG5cbiAgICAgICAgICAgIC8vIGlmIHRoaXMgZGlkbid0IHdvcmssIHRyeSBjdXJpbmcgYWxsIHNtYWxsIHNlbGYtaW50ZXJzZWN0aW9ucyBsb2NhbGx5XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhc3MgPT09IDEpIHtcbiAgICAgICAgICAgICAgICBlYXIgPSBjdXJlTG9jYWxJbnRlcnNlY3Rpb25zKGVhciwgdHJpYW5nbGVzLCBkaW0pO1xuICAgICAgICAgICAgICAgIGVhcmN1dExpbmtlZChlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBzaXplLCAyKTtcblxuICAgICAgICAgICAgLy8gYXMgYSBsYXN0IHJlc29ydCwgdHJ5IHNwbGl0dGluZyB0aGUgcmVtYWluaW5nIHBvbHlnb24gaW50byB0d29cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFzcyA9PT0gMikge1xuICAgICAgICAgICAgICAgIHNwbGl0RWFyY3V0KGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIHNpemUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gY2hlY2sgd2hldGhlciBhIHBvbHlnb24gbm9kZSBmb3JtcyBhIHZhbGlkIGVhciB3aXRoIGFkamFjZW50IG5vZGVzXG5mdW5jdGlvbiBpc0VhcihlYXIpIHtcbiAgICB2YXIgYSA9IGVhci5wcmV2LFxuICAgICAgICBiID0gZWFyLFxuICAgICAgICBjID0gZWFyLm5leHQ7XG5cbiAgICBpZiAoYXJlYShhLCBiLCBjKSA+PSAwKSByZXR1cm4gZmFsc2U7IC8vIHJlZmxleCwgY2FuJ3QgYmUgYW4gZWFyXG5cbiAgICAvLyBub3cgbWFrZSBzdXJlIHdlIGRvbid0IGhhdmUgb3RoZXIgcG9pbnRzIGluc2lkZSB0aGUgcG90ZW50aWFsIGVhclxuICAgIHZhciBwID0gZWFyLm5leHQubmV4dDtcblxuICAgIHdoaWxlIChwICE9PSBlYXIucHJldikge1xuICAgICAgICBpZiAocG9pbnRJblRyaWFuZ2xlKGEueCwgYS55LCBiLngsIGIueSwgYy54LCBjLnksIHAueCwgcC55KSAmJlxuICAgICAgICAgICAgYXJlYShwLnByZXYsIHAsIHAubmV4dCkgPj0gMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBpc0Vhckhhc2hlZChlYXIsIG1pblgsIG1pblksIHNpemUpIHtcbiAgICB2YXIgYSA9IGVhci5wcmV2LFxuICAgICAgICBiID0gZWFyLFxuICAgICAgICBjID0gZWFyLm5leHQ7XG5cbiAgICBpZiAoYXJlYShhLCBiLCBjKSA+PSAwKSByZXR1cm4gZmFsc2U7IC8vIHJlZmxleCwgY2FuJ3QgYmUgYW4gZWFyXG5cbiAgICAvLyB0cmlhbmdsZSBiYm94OyBtaW4gJiBtYXggYXJlIGNhbGN1bGF0ZWQgbGlrZSB0aGlzIGZvciBzcGVlZFxuICAgIHZhciBtaW5UWCA9IGEueCA8IGIueCA/IChhLnggPCBjLnggPyBhLnggOiBjLngpIDogKGIueCA8IGMueCA/IGIueCA6IGMueCksXG4gICAgICAgIG1pblRZID0gYS55IDwgYi55ID8gKGEueSA8IGMueSA/IGEueSA6IGMueSkgOiAoYi55IDwgYy55ID8gYi55IDogYy55KSxcbiAgICAgICAgbWF4VFggPSBhLnggPiBiLnggPyAoYS54ID4gYy54ID8gYS54IDogYy54KSA6IChiLnggPiBjLnggPyBiLnggOiBjLngpLFxuICAgICAgICBtYXhUWSA9IGEueSA+IGIueSA/IChhLnkgPiBjLnkgPyBhLnkgOiBjLnkpIDogKGIueSA+IGMueSA/IGIueSA6IGMueSk7XG5cbiAgICAvLyB6LW9yZGVyIHJhbmdlIGZvciB0aGUgY3VycmVudCB0cmlhbmdsZSBiYm94O1xuICAgIHZhciBtaW5aID0gek9yZGVyKG1pblRYLCBtaW5UWSwgbWluWCwgbWluWSwgc2l6ZSksXG4gICAgICAgIG1heFogPSB6T3JkZXIobWF4VFgsIG1heFRZLCBtaW5YLCBtaW5ZLCBzaXplKTtcblxuICAgIC8vIGZpcnN0IGxvb2sgZm9yIHBvaW50cyBpbnNpZGUgdGhlIHRyaWFuZ2xlIGluIGluY3JlYXNpbmcgei1vcmRlclxuICAgIHZhciBwID0gZWFyLm5leHRaO1xuXG4gICAgd2hpbGUgKHAgJiYgcC56IDw9IG1heFopIHtcbiAgICAgICAgaWYgKHAgIT09IGVhci5wcmV2ICYmIHAgIT09IGVhci5uZXh0ICYmXG4gICAgICAgICAgICBwb2ludEluVHJpYW5nbGUoYS54LCBhLnksIGIueCwgYi55LCBjLngsIGMueSwgcC54LCBwLnkpICYmXG4gICAgICAgICAgICBhcmVhKHAucHJldiwgcCwgcC5uZXh0KSA+PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHAgPSBwLm5leHRaO1xuICAgIH1cblxuICAgIC8vIHRoZW4gbG9vayBmb3IgcG9pbnRzIGluIGRlY3JlYXNpbmcgei1vcmRlclxuICAgIHAgPSBlYXIucHJldlo7XG5cbiAgICB3aGlsZSAocCAmJiBwLnogPj0gbWluWikge1xuICAgICAgICBpZiAocCAhPT0gZWFyLnByZXYgJiYgcCAhPT0gZWFyLm5leHQgJiZcbiAgICAgICAgICAgIHBvaW50SW5UcmlhbmdsZShhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSkgJiZcbiAgICAgICAgICAgIGFyZWEocC5wcmV2LCBwLCBwLm5leHQpID49IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgcCA9IHAucHJldlo7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG59XG5cbi8vIGdvIHRocm91Z2ggYWxsIHBvbHlnb24gbm9kZXMgYW5kIGN1cmUgc21hbGwgbG9jYWwgc2VsZi1pbnRlcnNlY3Rpb25zXG5mdW5jdGlvbiBjdXJlTG9jYWxJbnRlcnNlY3Rpb25zKHN0YXJ0LCB0cmlhbmdsZXMsIGRpbSkge1xuICAgIHZhciBwID0gc3RhcnQ7XG4gICAgZG8ge1xuICAgICAgICB2YXIgYSA9IHAucHJldixcbiAgICAgICAgICAgIGIgPSBwLm5leHQubmV4dDtcblxuICAgICAgICBpZiAoIWVxdWFscyhhLCBiKSAmJiBpbnRlcnNlY3RzKGEsIHAsIHAubmV4dCwgYikgJiYgbG9jYWxseUluc2lkZShhLCBiKSAmJiBsb2NhbGx5SW5zaWRlKGIsIGEpKSB7XG5cbiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGEuaSAvIGRpbSk7XG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaChwLmkgLyBkaW0pO1xuICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2goYi5pIC8gZGltKTtcblxuICAgICAgICAgICAgLy8gcmVtb3ZlIHR3byBub2RlcyBpbnZvbHZlZFxuICAgICAgICAgICAgcmVtb3ZlTm9kZShwKTtcbiAgICAgICAgICAgIHJlbW92ZU5vZGUocC5uZXh0KTtcblxuICAgICAgICAgICAgcCA9IHN0YXJ0ID0gYjtcbiAgICAgICAgfVxuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IHN0YXJ0KTtcblxuICAgIHJldHVybiBwO1xufVxuXG4vLyB0cnkgc3BsaXR0aW5nIHBvbHlnb24gaW50byB0d28gYW5kIHRyaWFuZ3VsYXRlIHRoZW0gaW5kZXBlbmRlbnRseVxuZnVuY3Rpb24gc3BsaXRFYXJjdXQoc3RhcnQsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBzaXplKSB7XG4gICAgLy8gbG9vayBmb3IgYSB2YWxpZCBkaWFnb25hbCB0aGF0IGRpdmlkZXMgdGhlIHBvbHlnb24gaW50byB0d29cbiAgICB2YXIgYSA9IHN0YXJ0O1xuICAgIGRvIHtcbiAgICAgICAgdmFyIGIgPSBhLm5leHQubmV4dDtcbiAgICAgICAgd2hpbGUgKGIgIT09IGEucHJldikge1xuICAgICAgICAgICAgaWYgKGEuaSAhPT0gYi5pICYmIGlzVmFsaWREaWFnb25hbChhLCBiKSkge1xuICAgICAgICAgICAgICAgIC8vIHNwbGl0IHRoZSBwb2x5Z29uIGluIHR3byBieSB0aGUgZGlhZ29uYWxcbiAgICAgICAgICAgICAgICB2YXIgYyA9IHNwbGl0UG9seWdvbihhLCBiKTtcblxuICAgICAgICAgICAgICAgIC8vIGZpbHRlciBjb2xpbmVhciBwb2ludHMgYXJvdW5kIHRoZSBjdXRzXG4gICAgICAgICAgICAgICAgYSA9IGZpbHRlclBvaW50cyhhLCBhLm5leHQpO1xuICAgICAgICAgICAgICAgIGMgPSBmaWx0ZXJQb2ludHMoYywgYy5uZXh0KTtcblxuICAgICAgICAgICAgICAgIC8vIHJ1biBlYXJjdXQgb24gZWFjaCBoYWxmXG4gICAgICAgICAgICAgICAgZWFyY3V0TGlua2VkKGEsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBzaXplKTtcbiAgICAgICAgICAgICAgICBlYXJjdXRMaW5rZWQoYywgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIHNpemUpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGIgPSBiLm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgYSA9IGEubmV4dDtcbiAgICB9IHdoaWxlIChhICE9PSBzdGFydCk7XG59XG5cbi8vIGxpbmsgZXZlcnkgaG9sZSBpbnRvIHRoZSBvdXRlciBsb29wLCBwcm9kdWNpbmcgYSBzaW5nbGUtcmluZyBwb2x5Z29uIHdpdGhvdXQgaG9sZXNcbmZ1bmN0aW9uIGVsaW1pbmF0ZUhvbGVzKGRhdGEsIGhvbGVJbmRpY2VzLCBvdXRlck5vZGUsIGRpbSkge1xuICAgIHZhciBxdWV1ZSA9IFtdLFxuICAgICAgICBpLCBsZW4sIHN0YXJ0LCBlbmQsIGxpc3Q7XG5cbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBob2xlSW5kaWNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBzdGFydCA9IGhvbGVJbmRpY2VzW2ldICogZGltO1xuICAgICAgICBlbmQgPSBpIDwgbGVuIC0gMSA/IGhvbGVJbmRpY2VzW2kgKyAxXSAqIGRpbSA6IGRhdGEubGVuZ3RoO1xuICAgICAgICBsaXN0ID0gbGlua2VkTGlzdChkYXRhLCBzdGFydCwgZW5kLCBkaW0sIGZhbHNlKTtcbiAgICAgICAgaWYgKGxpc3QgPT09IGxpc3QubmV4dCkgbGlzdC5zdGVpbmVyID0gdHJ1ZTtcbiAgICAgICAgcXVldWUucHVzaChnZXRMZWZ0bW9zdChsaXN0KSk7XG4gICAgfVxuXG4gICAgcXVldWUuc29ydChjb21wYXJlWCk7XG5cbiAgICAvLyBwcm9jZXNzIGhvbGVzIGZyb20gbGVmdCB0byByaWdodFxuICAgIGZvciAoaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBlbGltaW5hdGVIb2xlKHF1ZXVlW2ldLCBvdXRlck5vZGUpO1xuICAgICAgICBvdXRlck5vZGUgPSBmaWx0ZXJQb2ludHMob3V0ZXJOb2RlLCBvdXRlck5vZGUubmV4dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dGVyTm9kZTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZVgoYSwgYikge1xuICAgIHJldHVybiBhLnggLSBiLng7XG59XG5cbi8vIGZpbmQgYSBicmlkZ2UgYmV0d2VlbiB2ZXJ0aWNlcyB0aGF0IGNvbm5lY3RzIGhvbGUgd2l0aCBhbiBvdXRlciByaW5nIGFuZCBhbmQgbGluayBpdFxuZnVuY3Rpb24gZWxpbWluYXRlSG9sZShob2xlLCBvdXRlck5vZGUpIHtcbiAgICBvdXRlck5vZGUgPSBmaW5kSG9sZUJyaWRnZShob2xlLCBvdXRlck5vZGUpO1xuICAgIGlmIChvdXRlck5vZGUpIHtcbiAgICAgICAgdmFyIGIgPSBzcGxpdFBvbHlnb24ob3V0ZXJOb2RlLCBob2xlKTtcbiAgICAgICAgZmlsdGVyUG9pbnRzKGIsIGIubmV4dCk7XG4gICAgfVxufVxuXG4vLyBEYXZpZCBFYmVybHkncyBhbGdvcml0aG0gZm9yIGZpbmRpbmcgYSBicmlkZ2UgYmV0d2VlbiBob2xlIGFuZCBvdXRlciBwb2x5Z29uXG5mdW5jdGlvbiBmaW5kSG9sZUJyaWRnZShob2xlLCBvdXRlck5vZGUpIHtcbiAgICB2YXIgcCA9IG91dGVyTm9kZSxcbiAgICAgICAgaHggPSBob2xlLngsXG4gICAgICAgIGh5ID0gaG9sZS55LFxuICAgICAgICBxeCA9IC1JbmZpbml0eSxcbiAgICAgICAgbTtcblxuICAgIC8vIGZpbmQgYSBzZWdtZW50IGludGVyc2VjdGVkIGJ5IGEgcmF5IGZyb20gdGhlIGhvbGUncyBsZWZ0bW9zdCBwb2ludCB0byB0aGUgbGVmdDtcbiAgICAvLyBzZWdtZW50J3MgZW5kcG9pbnQgd2l0aCBsZXNzZXIgeCB3aWxsIGJlIHBvdGVudGlhbCBjb25uZWN0aW9uIHBvaW50XG4gICAgZG8ge1xuICAgICAgICBpZiAoaHkgPD0gcC55ICYmIGh5ID49IHAubmV4dC55KSB7XG4gICAgICAgICAgICB2YXIgeCA9IHAueCArIChoeSAtIHAueSkgKiAocC5uZXh0LnggLSBwLngpIC8gKHAubmV4dC55IC0gcC55KTtcbiAgICAgICAgICAgIGlmICh4IDw9IGh4ICYmIHggPiBxeCkge1xuICAgICAgICAgICAgICAgIHF4ID0geDtcbiAgICAgICAgICAgICAgICBpZiAoeCA9PT0gaHgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGh5ID09PSBwLnkpIHJldHVybiBwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaHkgPT09IHAubmV4dC55KSByZXR1cm4gcC5uZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtID0gcC54IDwgcC5uZXh0LnggPyBwIDogcC5uZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHAgPSBwLm5leHQ7XG4gICAgfSB3aGlsZSAocCAhPT0gb3V0ZXJOb2RlKTtcblxuICAgIGlmICghbSkgcmV0dXJuIG51bGw7XG5cbiAgICBpZiAoaHggPT09IHF4KSByZXR1cm4gbS5wcmV2OyAvLyBob2xlIHRvdWNoZXMgb3V0ZXIgc2VnbWVudDsgcGljayBsb3dlciBlbmRwb2ludFxuXG4gICAgLy8gbG9vayBmb3IgcG9pbnRzIGluc2lkZSB0aGUgdHJpYW5nbGUgb2YgaG9sZSBwb2ludCwgc2VnbWVudCBpbnRlcnNlY3Rpb24gYW5kIGVuZHBvaW50O1xuICAgIC8vIGlmIHRoZXJlIGFyZSBubyBwb2ludHMgZm91bmQsIHdlIGhhdmUgYSB2YWxpZCBjb25uZWN0aW9uO1xuICAgIC8vIG90aGVyd2lzZSBjaG9vc2UgdGhlIHBvaW50IG9mIHRoZSBtaW5pbXVtIGFuZ2xlIHdpdGggdGhlIHJheSBhcyBjb25uZWN0aW9uIHBvaW50XG5cbiAgICB2YXIgc3RvcCA9IG0sXG4gICAgICAgIG14ID0gbS54LFxuICAgICAgICBteSA9IG0ueSxcbiAgICAgICAgdGFuTWluID0gSW5maW5pdHksXG4gICAgICAgIHRhbjtcblxuICAgIHAgPSBtLm5leHQ7XG5cbiAgICB3aGlsZSAocCAhPT0gc3RvcCkge1xuICAgICAgICBpZiAoaHggPj0gcC54ICYmIHAueCA+PSBteCAmJlxuICAgICAgICAgICAgICAgIHBvaW50SW5UcmlhbmdsZShoeSA8IG15ID8gaHggOiBxeCwgaHksIG14LCBteSwgaHkgPCBteSA/IHF4IDogaHgsIGh5LCBwLngsIHAueSkpIHtcblxuICAgICAgICAgICAgdGFuID0gTWF0aC5hYnMoaHkgLSBwLnkpIC8gKGh4IC0gcC54KTsgLy8gdGFuZ2VudGlhbFxuXG4gICAgICAgICAgICBpZiAoKHRhbiA8IHRhbk1pbiB8fCAodGFuID09PSB0YW5NaW4gJiYgcC54ID4gbS54KSkgJiYgbG9jYWxseUluc2lkZShwLCBob2xlKSkge1xuICAgICAgICAgICAgICAgIG0gPSBwO1xuICAgICAgICAgICAgICAgIHRhbk1pbiA9IHRhbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHAgPSBwLm5leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG07XG59XG5cbi8vIGludGVybGluayBwb2x5Z29uIG5vZGVzIGluIHotb3JkZXJcbmZ1bmN0aW9uIGluZGV4Q3VydmUoc3RhcnQsIG1pblgsIG1pblksIHNpemUpIHtcbiAgICB2YXIgcCA9IHN0YXJ0O1xuICAgIGRvIHtcbiAgICAgICAgaWYgKHAueiA9PT0gbnVsbCkgcC56ID0gek9yZGVyKHAueCwgcC55LCBtaW5YLCBtaW5ZLCBzaXplKTtcbiAgICAgICAgcC5wcmV2WiA9IHAucHJldjtcbiAgICAgICAgcC5uZXh0WiA9IHAubmV4dDtcbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9IHdoaWxlIChwICE9PSBzdGFydCk7XG5cbiAgICBwLnByZXZaLm5leHRaID0gbnVsbDtcbiAgICBwLnByZXZaID0gbnVsbDtcblxuICAgIHNvcnRMaW5rZWQocCk7XG59XG5cbi8vIFNpbW9uIFRhdGhhbSdzIGxpbmtlZCBsaXN0IG1lcmdlIHNvcnQgYWxnb3JpdGhtXG4vLyBodHRwOi8vd3d3LmNoaWFyay5ncmVlbmVuZC5vcmcudWsvfnNndGF0aGFtL2FsZ29yaXRobXMvbGlzdHNvcnQuaHRtbFxuZnVuY3Rpb24gc29ydExpbmtlZChsaXN0KSB7XG4gICAgdmFyIGksIHAsIHEsIGUsIHRhaWwsIG51bU1lcmdlcywgcFNpemUsIHFTaXplLFxuICAgICAgICBpblNpemUgPSAxO1xuXG4gICAgZG8ge1xuICAgICAgICBwID0gbGlzdDtcbiAgICAgICAgbGlzdCA9IG51bGw7XG4gICAgICAgIHRhaWwgPSBudWxsO1xuICAgICAgICBudW1NZXJnZXMgPSAwO1xuXG4gICAgICAgIHdoaWxlIChwKSB7XG4gICAgICAgICAgICBudW1NZXJnZXMrKztcbiAgICAgICAgICAgIHEgPSBwO1xuICAgICAgICAgICAgcFNpemUgPSAwO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGluU2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcFNpemUrKztcbiAgICAgICAgICAgICAgICBxID0gcS5uZXh0WjtcbiAgICAgICAgICAgICAgICBpZiAoIXEpIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBxU2l6ZSA9IGluU2l6ZTtcblxuICAgICAgICAgICAgd2hpbGUgKHBTaXplID4gMCB8fCAocVNpemUgPiAwICYmIHEpKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAocFNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZSA9IHE7XG4gICAgICAgICAgICAgICAgICAgIHEgPSBxLm5leHRaO1xuICAgICAgICAgICAgICAgICAgICBxU2l6ZS0tO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocVNpemUgPT09IDAgfHwgIXEpIHtcbiAgICAgICAgICAgICAgICAgICAgZSA9IHA7XG4gICAgICAgICAgICAgICAgICAgIHAgPSBwLm5leHRaO1xuICAgICAgICAgICAgICAgICAgICBwU2l6ZS0tO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocC56IDw9IHEueikge1xuICAgICAgICAgICAgICAgICAgICBlID0gcDtcbiAgICAgICAgICAgICAgICAgICAgcCA9IHAubmV4dFo7XG4gICAgICAgICAgICAgICAgICAgIHBTaXplLS07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZSA9IHE7XG4gICAgICAgICAgICAgICAgICAgIHEgPSBxLm5leHRaO1xuICAgICAgICAgICAgICAgICAgICBxU2l6ZS0tO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0YWlsKSB0YWlsLm5leHRaID0gZTtcbiAgICAgICAgICAgICAgICBlbHNlIGxpc3QgPSBlO1xuXG4gICAgICAgICAgICAgICAgZS5wcmV2WiA9IHRhaWw7XG4gICAgICAgICAgICAgICAgdGFpbCA9IGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHAgPSBxO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFpbC5uZXh0WiA9IG51bGw7XG4gICAgICAgIGluU2l6ZSAqPSAyO1xuXG4gICAgfSB3aGlsZSAobnVtTWVyZ2VzID4gMSk7XG5cbiAgICByZXR1cm4gbGlzdDtcbn1cblxuLy8gei1vcmRlciBvZiBhIHBvaW50IGdpdmVuIGNvb3JkcyBhbmQgc2l6ZSBvZiB0aGUgZGF0YSBib3VuZGluZyBib3hcbmZ1bmN0aW9uIHpPcmRlcih4LCB5LCBtaW5YLCBtaW5ZLCBzaXplKSB7XG4gICAgLy8gY29vcmRzIGFyZSB0cmFuc2Zvcm1lZCBpbnRvIG5vbi1uZWdhdGl2ZSAxNS1iaXQgaW50ZWdlciByYW5nZVxuICAgIHggPSAzMjc2NyAqICh4IC0gbWluWCkgLyBzaXplO1xuICAgIHkgPSAzMjc2NyAqICh5IC0gbWluWSkgLyBzaXplO1xuXG4gICAgeCA9ICh4IHwgKHggPDwgOCkpICYgMHgwMEZGMDBGRjtcbiAgICB4ID0gKHggfCAoeCA8PCA0KSkgJiAweDBGMEYwRjBGO1xuICAgIHggPSAoeCB8ICh4IDw8IDIpKSAmIDB4MzMzMzMzMzM7XG4gICAgeCA9ICh4IHwgKHggPDwgMSkpICYgMHg1NTU1NTU1NTtcblxuICAgIHkgPSAoeSB8ICh5IDw8IDgpKSAmIDB4MDBGRjAwRkY7XG4gICAgeSA9ICh5IHwgKHkgPDwgNCkpICYgMHgwRjBGMEYwRjtcbiAgICB5ID0gKHkgfCAoeSA8PCAyKSkgJiAweDMzMzMzMzMzO1xuICAgIHkgPSAoeSB8ICh5IDw8IDEpKSAmIDB4NTU1NTU1NTU7XG5cbiAgICByZXR1cm4geCB8ICh5IDw8IDEpO1xufVxuXG4vLyBmaW5kIHRoZSBsZWZ0bW9zdCBub2RlIG9mIGEgcG9seWdvbiByaW5nXG5mdW5jdGlvbiBnZXRMZWZ0bW9zdChzdGFydCkge1xuICAgIHZhciBwID0gc3RhcnQsXG4gICAgICAgIGxlZnRtb3N0ID0gc3RhcnQ7XG4gICAgZG8ge1xuICAgICAgICBpZiAocC54IDwgbGVmdG1vc3QueCkgbGVmdG1vc3QgPSBwO1xuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IHN0YXJ0KTtcblxuICAgIHJldHVybiBsZWZ0bW9zdDtcbn1cblxuLy8gY2hlY2sgaWYgYSBwb2ludCBsaWVzIHdpdGhpbiBhIGNvbnZleCB0cmlhbmdsZVxuZnVuY3Rpb24gcG9pbnRJblRyaWFuZ2xlKGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIHB4LCBweSkge1xuICAgIHJldHVybiAoY3ggLSBweCkgKiAoYXkgLSBweSkgLSAoYXggLSBweCkgKiAoY3kgLSBweSkgPj0gMCAmJlxuICAgICAgICAgICAoYXggLSBweCkgKiAoYnkgLSBweSkgLSAoYnggLSBweCkgKiAoYXkgLSBweSkgPj0gMCAmJlxuICAgICAgICAgICAoYnggLSBweCkgKiAoY3kgLSBweSkgLSAoY3ggLSBweCkgKiAoYnkgLSBweSkgPj0gMDtcbn1cblxuLy8gY2hlY2sgaWYgYSBkaWFnb25hbCBiZXR3ZWVuIHR3byBwb2x5Z29uIG5vZGVzIGlzIHZhbGlkIChsaWVzIGluIHBvbHlnb24gaW50ZXJpb3IpXG5mdW5jdGlvbiBpc1ZhbGlkRGlhZ29uYWwoYSwgYikge1xuICAgIHJldHVybiBhLm5leHQuaSAhPT0gYi5pICYmIGEucHJldi5pICE9PSBiLmkgJiYgIWludGVyc2VjdHNQb2x5Z29uKGEsIGIpICYmXG4gICAgICAgICAgIGxvY2FsbHlJbnNpZGUoYSwgYikgJiYgbG9jYWxseUluc2lkZShiLCBhKSAmJiBtaWRkbGVJbnNpZGUoYSwgYik7XG59XG5cbi8vIHNpZ25lZCBhcmVhIG9mIGEgdHJpYW5nbGVcbmZ1bmN0aW9uIGFyZWEocCwgcSwgcikge1xuICAgIHJldHVybiAocS55IC0gcC55KSAqIChyLnggLSBxLngpIC0gKHEueCAtIHAueCkgKiAoci55IC0gcS55KTtcbn1cblxuLy8gY2hlY2sgaWYgdHdvIHBvaW50cyBhcmUgZXF1YWxcbmZ1bmN0aW9uIGVxdWFscyhwMSwgcDIpIHtcbiAgICByZXR1cm4gcDEueCA9PT0gcDIueCAmJiBwMS55ID09PSBwMi55O1xufVxuXG4vLyBjaGVjayBpZiB0d28gc2VnbWVudHMgaW50ZXJzZWN0XG5mdW5jdGlvbiBpbnRlcnNlY3RzKHAxLCBxMSwgcDIsIHEyKSB7XG4gICAgaWYgKChlcXVhbHMocDEsIHExKSAmJiBlcXVhbHMocDIsIHEyKSkgfHxcbiAgICAgICAgKGVxdWFscyhwMSwgcTIpICYmIGVxdWFscyhwMiwgcTEpKSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGFyZWEocDEsIHExLCBwMikgPiAwICE9PSBhcmVhKHAxLCBxMSwgcTIpID4gMCAmJlxuICAgICAgICAgICBhcmVhKHAyLCBxMiwgcDEpID4gMCAhPT0gYXJlYShwMiwgcTIsIHExKSA+IDA7XG59XG5cbi8vIGNoZWNrIGlmIGEgcG9seWdvbiBkaWFnb25hbCBpbnRlcnNlY3RzIGFueSBwb2x5Z29uIHNlZ21lbnRzXG5mdW5jdGlvbiBpbnRlcnNlY3RzUG9seWdvbihhLCBiKSB7XG4gICAgdmFyIHAgPSBhO1xuICAgIGRvIHtcbiAgICAgICAgaWYgKHAuaSAhPT0gYS5pICYmIHAubmV4dC5pICE9PSBhLmkgJiYgcC5pICE9PSBiLmkgJiYgcC5uZXh0LmkgIT09IGIuaSAmJlxuICAgICAgICAgICAgICAgIGludGVyc2VjdHMocCwgcC5uZXh0LCBhLCBiKSkgcmV0dXJuIHRydWU7XG4gICAgICAgIHAgPSBwLm5leHQ7XG4gICAgfSB3aGlsZSAocCAhPT0gYSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIGNoZWNrIGlmIGEgcG9seWdvbiBkaWFnb25hbCBpcyBsb2NhbGx5IGluc2lkZSB0aGUgcG9seWdvblxuZnVuY3Rpb24gbG9jYWxseUluc2lkZShhLCBiKSB7XG4gICAgcmV0dXJuIGFyZWEoYS5wcmV2LCBhLCBhLm5leHQpIDwgMCA/XG4gICAgICAgIGFyZWEoYSwgYiwgYS5uZXh0KSA+PSAwICYmIGFyZWEoYSwgYS5wcmV2LCBiKSA+PSAwIDpcbiAgICAgICAgYXJlYShhLCBiLCBhLnByZXYpIDwgMCB8fCBhcmVhKGEsIGEubmV4dCwgYikgPCAwO1xufVxuXG4vLyBjaGVjayBpZiB0aGUgbWlkZGxlIHBvaW50IG9mIGEgcG9seWdvbiBkaWFnb25hbCBpcyBpbnNpZGUgdGhlIHBvbHlnb25cbmZ1bmN0aW9uIG1pZGRsZUluc2lkZShhLCBiKSB7XG4gICAgdmFyIHAgPSBhLFxuICAgICAgICBpbnNpZGUgPSBmYWxzZSxcbiAgICAgICAgcHggPSAoYS54ICsgYi54KSAvIDIsXG4gICAgICAgIHB5ID0gKGEueSArIGIueSkgLyAyO1xuICAgIGRvIHtcbiAgICAgICAgaWYgKCgocC55ID4gcHkpICE9PSAocC5uZXh0LnkgPiBweSkpICYmIChweCA8IChwLm5leHQueCAtIHAueCkgKiAocHkgLSBwLnkpIC8gKHAubmV4dC55IC0gcC55KSArIHAueCkpXG4gICAgICAgICAgICBpbnNpZGUgPSAhaW5zaWRlO1xuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IGEpO1xuXG4gICAgcmV0dXJuIGluc2lkZTtcbn1cblxuLy8gbGluayB0d28gcG9seWdvbiB2ZXJ0aWNlcyB3aXRoIGEgYnJpZGdlOyBpZiB0aGUgdmVydGljZXMgYmVsb25nIHRvIHRoZSBzYW1lIHJpbmcsIGl0IHNwbGl0cyBwb2x5Z29uIGludG8gdHdvO1xuLy8gaWYgb25lIGJlbG9uZ3MgdG8gdGhlIG91dGVyIHJpbmcgYW5kIGFub3RoZXIgdG8gYSBob2xlLCBpdCBtZXJnZXMgaXQgaW50byBhIHNpbmdsZSByaW5nXG5mdW5jdGlvbiBzcGxpdFBvbHlnb24oYSwgYikge1xuICAgIHZhciBhMiA9IG5ldyBOb2RlKGEuaSwgYS54LCBhLnkpLFxuICAgICAgICBiMiA9IG5ldyBOb2RlKGIuaSwgYi54LCBiLnkpLFxuICAgICAgICBhbiA9IGEubmV4dCxcbiAgICAgICAgYnAgPSBiLnByZXY7XG5cbiAgICBhLm5leHQgPSBiO1xuICAgIGIucHJldiA9IGE7XG5cbiAgICBhMi5uZXh0ID0gYW47XG4gICAgYW4ucHJldiA9IGEyO1xuXG4gICAgYjIubmV4dCA9IGEyO1xuICAgIGEyLnByZXYgPSBiMjtcblxuICAgIGJwLm5leHQgPSBiMjtcbiAgICBiMi5wcmV2ID0gYnA7XG5cbiAgICByZXR1cm4gYjI7XG59XG5cbi8vIGNyZWF0ZSBhIG5vZGUgYW5kIG9wdGlvbmFsbHkgbGluayBpdCB3aXRoIHByZXZpb3VzIG9uZSAoaW4gYSBjaXJjdWxhciBkb3VibHkgbGlua2VkIGxpc3QpXG5mdW5jdGlvbiBpbnNlcnROb2RlKGksIHgsIHksIGxhc3QpIHtcbiAgICB2YXIgcCA9IG5ldyBOb2RlKGksIHgsIHkpO1xuXG4gICAgaWYgKCFsYXN0KSB7XG4gICAgICAgIHAucHJldiA9IHA7XG4gICAgICAgIHAubmV4dCA9IHA7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICBwLm5leHQgPSBsYXN0Lm5leHQ7XG4gICAgICAgIHAucHJldiA9IGxhc3Q7XG4gICAgICAgIGxhc3QubmV4dC5wcmV2ID0gcDtcbiAgICAgICAgbGFzdC5uZXh0ID0gcDtcbiAgICB9XG4gICAgcmV0dXJuIHA7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU5vZGUocCkge1xuICAgIHAubmV4dC5wcmV2ID0gcC5wcmV2O1xuICAgIHAucHJldi5uZXh0ID0gcC5uZXh0O1xuXG4gICAgaWYgKHAucHJldlopIHAucHJldloubmV4dFogPSBwLm5leHRaO1xuICAgIGlmIChwLm5leHRaKSBwLm5leHRaLnByZXZaID0gcC5wcmV2Wjtcbn1cblxuZnVuY3Rpb24gTm9kZShpLCB4LCB5KSB7XG4gICAgLy8gdmVydGljZSBpbmRleCBpbiBjb29yZGluYXRlcyBhcnJheVxuICAgIHRoaXMuaSA9IGk7XG5cbiAgICAvLyB2ZXJ0ZXggY29vcmRpbmF0ZXNcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG5cbiAgICAvLyBwcmV2aW91cyBhbmQgbmV4dCB2ZXJ0aWNlIG5vZGVzIGluIGEgcG9seWdvbiByaW5nXG4gICAgdGhpcy5wcmV2ID0gbnVsbDtcbiAgICB0aGlzLm5leHQgPSBudWxsO1xuXG4gICAgLy8gei1vcmRlciBjdXJ2ZSB2YWx1ZVxuICAgIHRoaXMueiA9IG51bGw7XG5cbiAgICAvLyBwcmV2aW91cyBhbmQgbmV4dCBub2RlcyBpbiB6LW9yZGVyXG4gICAgdGhpcy5wcmV2WiA9IG51bGw7XG4gICAgdGhpcy5uZXh0WiA9IG51bGw7XG5cbiAgICAvLyBpbmRpY2F0ZXMgd2hldGhlciB0aGlzIGlzIGEgc3RlaW5lciBwb2ludFxuICAgIHRoaXMuc3RlaW5lciA9IGZhbHNlO1xufVxuXG4vLyByZXR1cm4gYSBwZXJjZW50YWdlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgcG9seWdvbiBhcmVhIGFuZCBpdHMgdHJpYW5ndWxhdGlvbiBhcmVhO1xuLy8gdXNlZCB0byB2ZXJpZnkgY29ycmVjdG5lc3Mgb2YgdHJpYW5ndWxhdGlvblxuZWFyY3V0LmRldmlhdGlvbiA9IGZ1bmN0aW9uIChkYXRhLCBob2xlSW5kaWNlcywgZGltLCB0cmlhbmdsZXMpIHtcbiAgICB2YXIgaGFzSG9sZXMgPSBob2xlSW5kaWNlcyAmJiBob2xlSW5kaWNlcy5sZW5ndGg7XG4gICAgdmFyIG91dGVyTGVuID0gaGFzSG9sZXMgPyBob2xlSW5kaWNlc1swXSAqIGRpbSA6IGRhdGEubGVuZ3RoO1xuXG4gICAgdmFyIHBvbHlnb25BcmVhID0gTWF0aC5hYnMoc2lnbmVkQXJlYShkYXRhLCAwLCBvdXRlckxlbiwgZGltKSk7XG4gICAgaWYgKGhhc0hvbGVzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBob2xlSW5kaWNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gaG9sZUluZGljZXNbaV0gKiBkaW07XG4gICAgICAgICAgICB2YXIgZW5kID0gaSA8IGxlbiAtIDEgPyBob2xlSW5kaWNlc1tpICsgMV0gKiBkaW0gOiBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIHBvbHlnb25BcmVhIC09IE1hdGguYWJzKHNpZ25lZEFyZWEoZGF0YSwgc3RhcnQsIGVuZCwgZGltKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdHJpYW5nbGVzQXJlYSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IHRyaWFuZ2xlcy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB2YXIgYSA9IHRyaWFuZ2xlc1tpXSAqIGRpbTtcbiAgICAgICAgdmFyIGIgPSB0cmlhbmdsZXNbaSArIDFdICogZGltO1xuICAgICAgICB2YXIgYyA9IHRyaWFuZ2xlc1tpICsgMl0gKiBkaW07XG4gICAgICAgIHRyaWFuZ2xlc0FyZWEgKz0gTWF0aC5hYnMoXG4gICAgICAgICAgICAoZGF0YVthXSAtIGRhdGFbY10pICogKGRhdGFbYiArIDFdIC0gZGF0YVthICsgMV0pIC1cbiAgICAgICAgICAgIChkYXRhW2FdIC0gZGF0YVtiXSkgKiAoZGF0YVtjICsgMV0gLSBkYXRhW2EgKyAxXSkpO1xuICAgIH1cblxuICAgIHJldHVybiBwb2x5Z29uQXJlYSA9PT0gMCAmJiB0cmlhbmdsZXNBcmVhID09PSAwID8gMCA6XG4gICAgICAgIE1hdGguYWJzKCh0cmlhbmdsZXNBcmVhIC0gcG9seWdvbkFyZWEpIC8gcG9seWdvbkFyZWEpO1xufTtcblxuZnVuY3Rpb24gc2lnbmVkQXJlYShkYXRhLCBzdGFydCwgZW5kLCBkaW0pIHtcbiAgICB2YXIgc3VtID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQsIGogPSBlbmQgLSBkaW07IGkgPCBlbmQ7IGkgKz0gZGltKSB7XG4gICAgICAgIHN1bSArPSAoZGF0YVtqXSAtIGRhdGFbaV0pICogKGRhdGFbaSArIDFdICsgZGF0YVtqICsgMV0pO1xuICAgICAgICBqID0gaTtcbiAgICB9XG4gICAgcmV0dXJuIHN1bTtcbn1cblxuLy8gdHVybiBhIHBvbHlnb24gaW4gYSBtdWx0aS1kaW1lbnNpb25hbCBhcnJheSBmb3JtIChlLmcuIGFzIGluIEdlb0pTT04pIGludG8gYSBmb3JtIEVhcmN1dCBhY2NlcHRzXG5lYXJjdXQuZmxhdHRlbiA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIGRpbSA9IGRhdGFbMF1bMF0ubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSB7dmVydGljZXM6IFtdLCBob2xlczogW10sIGRpbWVuc2lvbnM6IGRpbX0sXG4gICAgICAgIGhvbGVJbmRleCA9IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkYXRhW2ldLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBkID0gMDsgZCA8IGRpbTsgZCsrKSByZXN1bHQudmVydGljZXMucHVzaChkYXRhW2ldW2pdW2RdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgIGhvbGVJbmRleCArPSBkYXRhW2kgLSAxXS5sZW5ndGg7XG4gICAgICAgICAgICByZXN1bHQuaG9sZXMucHVzaChob2xlSW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuIiwiaW1wb3J0IGJ1aWxkTGluZSBmcm9tICcuL2J1aWxkTGluZSc7XG5pbXBvcnQgeyBoZXgycmdiIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvY29sb3InO1xuaW1wb3J0IGVhcmN1dCBmcm9tICdlYXJjdXQnO1xuXG4vKipcbiAqIEJ1aWxkcyBhIHBvbHlnb24gdG8gZHJhd1xuICpcbiAqIElnbm9yZWQgZnJvbSBkb2NzIHNpbmNlIGl0IGlzIG5vdCBkaXJlY3RseSBleHBvc2VkLlxuICpcbiAqIEBpZ25vcmVcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1BJWEkuV2ViR0xHcmFwaGljc0RhdGF9IGdyYXBoaWNzRGF0YSAtIFRoZSBncmFwaGljcyBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIG5lY2Vzc2FyeSBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge29iamVjdH0gd2ViR0xEYXRhIC0gYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSB3ZWJHTC1zcGVjaWZpYyBpbmZvcm1hdGlvbiB0byBjcmVhdGUgdGhpcyBzaGFwZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZFBvbHkoZ3JhcGhpY3NEYXRhLCB3ZWJHTERhdGEpXG57XG4gICAgZ3JhcGhpY3NEYXRhLnBvaW50cyA9IGdyYXBoaWNzRGF0YS5zaGFwZS5wb2ludHMuc2xpY2UoKTtcblxuICAgIGxldCBwb2ludHMgPSBncmFwaGljc0RhdGEucG9pbnRzO1xuXG4gICAgaWYgKGdyYXBoaWNzRGF0YS5maWxsICYmIHBvaW50cy5sZW5ndGggPj0gNilcbiAgICB7XG4gICAgICAgIGNvbnN0IGhvbGVBcnJheSA9IFtdO1xuICAgICAgICAvLyBQcm9jZXNzIGhvbGVzLi5cbiAgICAgICAgY29uc3QgaG9sZXMgPSBncmFwaGljc0RhdGEuaG9sZXM7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBob2xlcy5sZW5ndGg7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgaG9sZSA9IGhvbGVzW2ldO1xuXG4gICAgICAgICAgICBob2xlQXJyYXkucHVzaChwb2ludHMubGVuZ3RoIC8gMik7XG5cbiAgICAgICAgICAgIHBvaW50cyA9IHBvaW50cy5jb25jYXQoaG9sZS5wb2ludHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZ2V0IGZpcnN0IGFuZCBsYXN0IHBvaW50Li4gZmlndXJlIG91dCB0aGUgbWlkZGxlIVxuICAgICAgICBjb25zdCB2ZXJ0cyA9IHdlYkdMRGF0YS5wb2ludHM7XG4gICAgICAgIGNvbnN0IGluZGljZXMgPSB3ZWJHTERhdGEuaW5kaWNlcztcblxuICAgICAgICBjb25zdCBsZW5ndGggPSBwb2ludHMubGVuZ3RoIC8gMjtcblxuICAgICAgICAvLyBzb3J0IGNvbG9yXG4gICAgICAgIGNvbnN0IGNvbG9yID0gaGV4MnJnYihncmFwaGljc0RhdGEuZmlsbFN0eWxlKTtcbiAgICAgICAgY29uc3QgYWxwaGEgPSBncmFwaGljc0RhdGEuZmlsbEFscGhhO1xuICAgICAgICBjb25zdCByID0gY29sb3JbMF0gKiBhbHBoYTtcbiAgICAgICAgY29uc3QgZyA9IGNvbG9yWzFdICogYWxwaGE7XG4gICAgICAgIGNvbnN0IGIgPSBjb2xvclsyXSAqIGFscGhhO1xuXG4gICAgICAgIGNvbnN0IHRyaWFuZ2xlcyA9IGVhcmN1dChwb2ludHMsIGhvbGVBcnJheSwgMik7XG5cbiAgICAgICAgaWYgKCF0cmlhbmdsZXMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHZlcnRQb3MgPSB2ZXJ0cy5sZW5ndGggLyA2O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJpYW5nbGVzLmxlbmd0aDsgaSArPSAzKVxuICAgICAgICB7XG4gICAgICAgICAgICBpbmRpY2VzLnB1c2godHJpYW5nbGVzW2ldICsgdmVydFBvcyk7XG4gICAgICAgICAgICBpbmRpY2VzLnB1c2godHJpYW5nbGVzW2ldICsgdmVydFBvcyk7XG4gICAgICAgICAgICBpbmRpY2VzLnB1c2godHJpYW5nbGVzW2kgKyAxXSArIHZlcnRQb3MpO1xuICAgICAgICAgICAgaW5kaWNlcy5wdXNoKHRyaWFuZ2xlc1tpICsgMl0gKyB2ZXJ0UG9zKTtcbiAgICAgICAgICAgIGluZGljZXMucHVzaCh0cmlhbmdsZXNbaSArIDJdICsgdmVydFBvcyk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB2ZXJ0cy5wdXNoKHBvaW50c1tpICogMl0sIHBvaW50c1soaSAqIDIpICsgMV0sXG4gICAgICAgICAgICAgICAgciwgZywgYiwgYWxwaGEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGdyYXBoaWNzRGF0YS5saW5lV2lkdGggPiAwKVxuICAgIHtcbiAgICAgICAgYnVpbGRMaW5lKGdyYXBoaWNzRGF0YSwgd2ViR0xEYXRhKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgYnVpbGRMaW5lIGZyb20gJy4vYnVpbGRMaW5lJztcbmltcG9ydCB7IGhleDJyZ2IgfSBmcm9tICcuLi8uLi8uLi91dGlscy9jb2xvcic7XG5cbi8qKlxuICogQnVpbGRzIGEgcmVjdGFuZ2xlIHRvIGRyYXdcbiAqXG4gKiBJZ25vcmVkIGZyb20gZG9jcyBzaW5jZSBpdCBpcyBub3QgZGlyZWN0bHkgZXhwb3NlZC5cbiAqXG4gKiBAaWdub3JlXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtQSVhJLldlYkdMR3JhcGhpY3NEYXRhfSBncmFwaGljc0RhdGEgLSBUaGUgZ3JhcGhpY3Mgb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBuZWNlc3NhcnkgcHJvcGVydGllc1xuICogQHBhcmFtIHtvYmplY3R9IHdlYkdMRGF0YSAtIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgd2ViR0wtc3BlY2lmaWMgaW5mb3JtYXRpb24gdG8gY3JlYXRlIHRoaXMgc2hhcGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRSZWN0YW5nbGUoZ3JhcGhpY3NEYXRhLCB3ZWJHTERhdGEpXG57XG4gICAgLy8gLS0tIC8vXG4gICAgLy8gbmVlZCB0byBjb252ZXJ0IHBvaW50cyB0byBhIG5pY2UgcmVndWxhciBkYXRhXG4gICAgLy9cbiAgICBjb25zdCByZWN0RGF0YSA9IGdyYXBoaWNzRGF0YS5zaGFwZTtcbiAgICBjb25zdCB4ID0gcmVjdERhdGEueDtcbiAgICBjb25zdCB5ID0gcmVjdERhdGEueTtcbiAgICBjb25zdCB3aWR0aCA9IHJlY3REYXRhLndpZHRoO1xuICAgIGNvbnN0IGhlaWdodCA9IHJlY3REYXRhLmhlaWdodDtcblxuICAgIGlmIChncmFwaGljc0RhdGEuZmlsbClcbiAgICB7XG4gICAgICAgIGNvbnN0IGNvbG9yID0gaGV4MnJnYihncmFwaGljc0RhdGEuZmlsbFN0eWxlKTtcbiAgICAgICAgY29uc3QgYWxwaGEgPSBncmFwaGljc0RhdGEuZmlsbEFscGhhO1xuXG4gICAgICAgIGNvbnN0IHIgPSBjb2xvclswXSAqIGFscGhhO1xuICAgICAgICBjb25zdCBnID0gY29sb3JbMV0gKiBhbHBoYTtcbiAgICAgICAgY29uc3QgYiA9IGNvbG9yWzJdICogYWxwaGE7XG5cbiAgICAgICAgY29uc3QgdmVydHMgPSB3ZWJHTERhdGEucG9pbnRzO1xuICAgICAgICBjb25zdCBpbmRpY2VzID0gd2ViR0xEYXRhLmluZGljZXM7XG5cbiAgICAgICAgY29uc3QgdmVydFBvcyA9IHZlcnRzLmxlbmd0aCAvIDY7XG5cbiAgICAgICAgLy8gc3RhcnRcbiAgICAgICAgdmVydHMucHVzaCh4LCB5KTtcbiAgICAgICAgdmVydHMucHVzaChyLCBnLCBiLCBhbHBoYSk7XG5cbiAgICAgICAgdmVydHMucHVzaCh4ICsgd2lkdGgsIHkpO1xuICAgICAgICB2ZXJ0cy5wdXNoKHIsIGcsIGIsIGFscGhhKTtcblxuICAgICAgICB2ZXJ0cy5wdXNoKHgsIHkgKyBoZWlnaHQpO1xuICAgICAgICB2ZXJ0cy5wdXNoKHIsIGcsIGIsIGFscGhhKTtcblxuICAgICAgICB2ZXJ0cy5wdXNoKHggKyB3aWR0aCwgeSArIGhlaWdodCk7XG4gICAgICAgIHZlcnRzLnB1c2gociwgZywgYiwgYWxwaGEpO1xuXG4gICAgICAgIC8vIGluc2VydCAyIGRlYWQgdHJpYW5nbGVzLi5cbiAgICAgICAgaW5kaWNlcy5wdXNoKHZlcnRQb3MsIHZlcnRQb3MsIHZlcnRQb3MgKyAxLCB2ZXJ0UG9zICsgMiwgdmVydFBvcyArIDMsIHZlcnRQb3MgKyAzKTtcbiAgICB9XG5cbiAgICBpZiAoZ3JhcGhpY3NEYXRhLmxpbmVXaWR0aClcbiAgICB7XG4gICAgICAgIGNvbnN0IHRlbXBQb2ludHMgPSBncmFwaGljc0RhdGEucG9pbnRzO1xuXG4gICAgICAgIGdyYXBoaWNzRGF0YS5wb2ludHMgPSBbeCwgeSxcbiAgICAgICAgICAgIHggKyB3aWR0aCwgeSxcbiAgICAgICAgICAgIHggKyB3aWR0aCwgeSArIGhlaWdodCxcbiAgICAgICAgICAgIHgsIHkgKyBoZWlnaHQsXG4gICAgICAgICAgICB4LCB5XTtcblxuICAgICAgICBidWlsZExpbmUoZ3JhcGhpY3NEYXRhLCB3ZWJHTERhdGEpO1xuXG4gICAgICAgIGdyYXBoaWNzRGF0YS5wb2ludHMgPSB0ZW1wUG9pbnRzO1xuICAgIH1cbn1cbiIsImltcG9ydCBlYXJjdXQgZnJvbSAnZWFyY3V0JztcbmltcG9ydCBidWlsZExpbmUgZnJvbSAnLi9idWlsZExpbmUnO1xuaW1wb3J0IHsgaGV4MnJnYiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2NvbG9yJztcblxuLyoqXG4gKiBCdWlsZHMgYSByb3VuZGVkIHJlY3RhbmdsZSB0byBkcmF3XG4gKlxuICogSWdub3JlZCBmcm9tIGRvY3Mgc2luY2UgaXQgaXMgbm90IGRpcmVjdGx5IGV4cG9zZWQuXG4gKlxuICogQGlnbm9yZVxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7UElYSS5XZWJHTEdyYXBoaWNzRGF0YX0gZ3JhcGhpY3NEYXRhIC0gVGhlIGdyYXBoaWNzIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgbmVjZXNzYXJ5IHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7b2JqZWN0fSB3ZWJHTERhdGEgLSBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIHdlYkdMLXNwZWNpZmljIGluZm9ybWF0aW9uIHRvIGNyZWF0ZSB0aGlzIHNoYXBlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkUm91bmRlZFJlY3RhbmdsZShncmFwaGljc0RhdGEsIHdlYkdMRGF0YSlcbntcbiAgICBjb25zdCBycmVjdERhdGEgPSBncmFwaGljc0RhdGEuc2hhcGU7XG4gICAgY29uc3QgeCA9IHJyZWN0RGF0YS54O1xuICAgIGNvbnN0IHkgPSBycmVjdERhdGEueTtcbiAgICBjb25zdCB3aWR0aCA9IHJyZWN0RGF0YS53aWR0aDtcbiAgICBjb25zdCBoZWlnaHQgPSBycmVjdERhdGEuaGVpZ2h0O1xuXG4gICAgY29uc3QgcmFkaXVzID0gcnJlY3REYXRhLnJhZGl1cztcblxuICAgIGNvbnN0IHJlY1BvaW50cyA9IFtdO1xuXG4gICAgcmVjUG9pbnRzLnB1c2goeCwgeSArIHJhZGl1cyk7XG4gICAgcXVhZHJhdGljQmV6aWVyQ3VydmUoeCwgeSArIGhlaWdodCAtIHJhZGl1cywgeCwgeSArIGhlaWdodCwgeCArIHJhZGl1cywgeSArIGhlaWdodCwgcmVjUG9pbnRzKTtcbiAgICBxdWFkcmF0aWNCZXppZXJDdXJ2ZSh4ICsgd2lkdGggLSByYWRpdXMsIHkgKyBoZWlnaHQsIHggKyB3aWR0aCwgeSArIGhlaWdodCwgeCArIHdpZHRoLCB5ICsgaGVpZ2h0IC0gcmFkaXVzLCByZWNQb2ludHMpO1xuICAgIHF1YWRyYXRpY0JlemllckN1cnZlKHggKyB3aWR0aCwgeSArIHJhZGl1cywgeCArIHdpZHRoLCB5LCB4ICsgd2lkdGggLSByYWRpdXMsIHksIHJlY1BvaW50cyk7XG4gICAgcXVhZHJhdGljQmV6aWVyQ3VydmUoeCArIHJhZGl1cywgeSwgeCwgeSwgeCwgeSArIHJhZGl1cyArIDAuMDAwMDAwMDAwMSwgcmVjUG9pbnRzKTtcblxuICAgIC8vIHRoaXMgdGlueSBudW1iZXIgZGVhbHMgd2l0aCB0aGUgaXNzdWUgdGhhdCBvY2N1cnMgd2hlbiBwb2ludHMgb3ZlcmxhcCBhbmQgZWFyY3V0IGZhaWxzIHRvIHRyaWFuZ3VsYXRlIHRoZSBpdGVtLlxuICAgIC8vIFRPRE8gLSBmaXggdGhpcyBwcm9wZXJseSwgdGhpcyBpcyBub3QgdmVyeSBlbGVnYW50Li4gYnV0IGl0IHdvcmtzIGZvciBub3cuXG5cbiAgICBpZiAoZ3JhcGhpY3NEYXRhLmZpbGwpXG4gICAge1xuICAgICAgICBjb25zdCBjb2xvciA9IGhleDJyZ2IoZ3JhcGhpY3NEYXRhLmZpbGxTdHlsZSk7XG4gICAgICAgIGNvbnN0IGFscGhhID0gZ3JhcGhpY3NEYXRhLmZpbGxBbHBoYTtcblxuICAgICAgICBjb25zdCByID0gY29sb3JbMF0gKiBhbHBoYTtcbiAgICAgICAgY29uc3QgZyA9IGNvbG9yWzFdICogYWxwaGE7XG4gICAgICAgIGNvbnN0IGIgPSBjb2xvclsyXSAqIGFscGhhO1xuXG4gICAgICAgIGNvbnN0IHZlcnRzID0gd2ViR0xEYXRhLnBvaW50cztcbiAgICAgICAgY29uc3QgaW5kaWNlcyA9IHdlYkdMRGF0YS5pbmRpY2VzO1xuXG4gICAgICAgIGNvbnN0IHZlY1BvcyA9IHZlcnRzLmxlbmd0aCAvIDY7XG5cbiAgICAgICAgY29uc3QgdHJpYW5nbGVzID0gZWFyY3V0KHJlY1BvaW50cywgbnVsbCwgMik7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGogPSB0cmlhbmdsZXMubGVuZ3RoOyBpIDwgajsgaSArPSAzKVxuICAgICAgICB7XG4gICAgICAgICAgICBpbmRpY2VzLnB1c2godHJpYW5nbGVzW2ldICsgdmVjUG9zKTtcbiAgICAgICAgICAgIGluZGljZXMucHVzaCh0cmlhbmdsZXNbaV0gKyB2ZWNQb3MpO1xuICAgICAgICAgICAgaW5kaWNlcy5wdXNoKHRyaWFuZ2xlc1tpICsgMV0gKyB2ZWNQb3MpO1xuICAgICAgICAgICAgaW5kaWNlcy5wdXNoKHRyaWFuZ2xlc1tpICsgMl0gKyB2ZWNQb3MpO1xuICAgICAgICAgICAgaW5kaWNlcy5wdXNoKHRyaWFuZ2xlc1tpICsgMl0gKyB2ZWNQb3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGogPSByZWNQb2ludHMubGVuZ3RoOyBpIDwgajsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB2ZXJ0cy5wdXNoKHJlY1BvaW50c1tpXSwgcmVjUG9pbnRzWysraV0sIHIsIGcsIGIsIGFscGhhKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChncmFwaGljc0RhdGEubGluZVdpZHRoKVxuICAgIHtcbiAgICAgICAgY29uc3QgdGVtcFBvaW50cyA9IGdyYXBoaWNzRGF0YS5wb2ludHM7XG5cbiAgICAgICAgZ3JhcGhpY3NEYXRhLnBvaW50cyA9IHJlY1BvaW50cztcblxuICAgICAgICBidWlsZExpbmUoZ3JhcGhpY3NEYXRhLCB3ZWJHTERhdGEpO1xuXG4gICAgICAgIGdyYXBoaWNzRGF0YS5wb2ludHMgPSB0ZW1wUG9pbnRzO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHBvaW50cyBmb3IgYSBxdWFkcmF0aWMgYmV6aWVyIGN1cnZlLiAoaGVscGVyIGZ1bmN0aW9uLi4pXG4gKiBCYXNlZCBvbjogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzg1MDk3L2hvdy1kby1pLWltcGxlbWVudC1hLWJlemllci1jdXJ2ZS1pbi1jXG4gKlxuICogSWdub3JlZCBmcm9tIGRvY3Mgc2luY2UgaXQgaXMgbm90IGRpcmVjdGx5IGV4cG9zZWQuXG4gKlxuICogQGlnbm9yZVxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tWCAtIE9yaWdpbiBwb2ludCB4XG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbVkgLSBPcmlnaW4gcG9pbnQgeFxuICogQHBhcmFtIHtudW1iZXJ9IGNwWCAtIENvbnRyb2wgcG9pbnQgeFxuICogQHBhcmFtIHtudW1iZXJ9IGNwWSAtIENvbnRyb2wgcG9pbnQgeVxuICogQHBhcmFtIHtudW1iZXJ9IHRvWCAtIERlc3RpbmF0aW9uIHBvaW50IHhcbiAqIEBwYXJhbSB7bnVtYmVyfSB0b1kgLSBEZXN0aW5hdGlvbiBwb2ludCB5XG4gKiBAcGFyYW0ge251bWJlcltdfSBbb3V0PVtdXSAtIFRoZSBvdXRwdXQgYXJyYXkgdG8gYWRkIHBvaW50cyBpbnRvLiBJZiBub3QgcGFzc2VkLCBhIG5ldyBhcnJheSBpcyBjcmVhdGVkLlxuICogQHJldHVybiB7bnVtYmVyW119IGFuIGFycmF5IG9mIHBvaW50c1xuICovXG5mdW5jdGlvbiBxdWFkcmF0aWNCZXppZXJDdXJ2ZShmcm9tWCwgZnJvbVksIGNwWCwgY3BZLCB0b1gsIHRvWSwgb3V0ID0gW10pXG57XG4gICAgY29uc3QgbiA9IDIwO1xuICAgIGNvbnN0IHBvaW50cyA9IG91dDtcblxuICAgIGxldCB4YSA9IDA7XG4gICAgbGV0IHlhID0gMDtcbiAgICBsZXQgeGIgPSAwO1xuICAgIGxldCB5YiA9IDA7XG4gICAgbGV0IHggPSAwO1xuICAgIGxldCB5ID0gMDtcblxuICAgIGZ1bmN0aW9uIGdldFB0KG4xLCBuMiwgcGVyYylcbiAgICB7XG4gICAgICAgIGNvbnN0IGRpZmYgPSBuMiAtIG4xO1xuXG4gICAgICAgIHJldHVybiBuMSArIChkaWZmICogcGVyYyk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDAsIGogPSAwOyBpIDw9IG47ICsraSlcbiAgICB7XG4gICAgICAgIGogPSBpIC8gbjtcblxuICAgICAgICAvLyBUaGUgR3JlZW4gTGluZVxuICAgICAgICB4YSA9IGdldFB0KGZyb21YLCBjcFgsIGopO1xuICAgICAgICB5YSA9IGdldFB0KGZyb21ZLCBjcFksIGopO1xuICAgICAgICB4YiA9IGdldFB0KGNwWCwgdG9YLCBqKTtcbiAgICAgICAgeWIgPSBnZXRQdChjcFksIHRvWSwgaik7XG5cbiAgICAgICAgLy8gVGhlIEJsYWNrIERvdFxuICAgICAgICB4ID0gZ2V0UHQoeGEsIHhiLCBqKTtcbiAgICAgICAgeSA9IGdldFB0KHlhLCB5Yiwgaik7XG5cbiAgICAgICAgcG9pbnRzLnB1c2goeCwgeSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvaW50cztcbn1cbiIsImltcG9ydCBidWlsZExpbmUgZnJvbSAnLi9idWlsZExpbmUnO1xuaW1wb3J0IHsgU0hBUEVTIH0gZnJvbSAnLi4vLi4vLi4vY29uc3QnO1xuaW1wb3J0IHsgaGV4MnJnYiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2NvbG9yJztcblxuLyoqXG4gKiBCdWlsZHMgYSBjaXJjbGUgdG8gZHJhd1xuICpcbiAqIElnbm9yZWQgZnJvbSBkb2NzIHNpbmNlIGl0IGlzIG5vdCBkaXJlY3RseSBleHBvc2VkLlxuICpcbiAqIEBpZ25vcmVcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1BJWEkuV2ViR0xHcmFwaGljc0RhdGF9IGdyYXBoaWNzRGF0YSAtIFRoZSBncmFwaGljcyBvYmplY3QgdG8gZHJhd1xuICogQHBhcmFtIHtvYmplY3R9IHdlYkdMRGF0YSAtIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgd2ViR0wtc3BlY2lmaWMgaW5mb3JtYXRpb24gdG8gY3JlYXRlIHRoaXMgc2hhcGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRDaXJjbGUoZ3JhcGhpY3NEYXRhLCB3ZWJHTERhdGEpXG57XG4gICAgZGVidWdnZXJcbiAgICAvLyBuZWVkIHRvIGNvbnZlcnQgcG9pbnRzIHRvIGEgbmljZSByZWd1bGFyIGRhdGFcbiAgICBjb25zdCBjaXJjbGVEYXRhID0gZ3JhcGhpY3NEYXRhLnNoYXBlO1xuICAgIGNvbnN0IHggPSBjaXJjbGVEYXRhLng7XG4gICAgY29uc3QgeSA9IGNpcmNsZURhdGEueTtcbiAgICBsZXQgd2lkdGg7XG4gICAgbGV0IGhlaWdodDtcblxuICAgIC8vIFRPRE8gLSBiaXQgaGFja3k/P1xuICAgIGlmIChncmFwaGljc0RhdGEudHlwZSA9PT0gU0hBUEVTLkNJUkMpXG4gICAge1xuICAgICAgICB3aWR0aCA9IGNpcmNsZURhdGEucmFkaXVzO1xuICAgICAgICBoZWlnaHQgPSBjaXJjbGVEYXRhLnJhZGl1cztcbiAgICB9XG4gICAgZWxzZVxuICAgIHtcbiAgICAgICAgd2lkdGggPSBjaXJjbGVEYXRhLndpZHRoO1xuICAgICAgICBoZWlnaHQgPSBjaXJjbGVEYXRhLmhlaWdodDtcbiAgICB9XG5cbiAgICBjb25zdCB0b3RhbFNlZ3MgPSBNYXRoLmZsb29yKDMwICogTWF0aC5zcXJ0KGNpcmNsZURhdGEucmFkaXVzKSlcbiAgICAgICAgfHwgTWF0aC5mbG9vcigxNSAqIE1hdGguc3FydChjaXJjbGVEYXRhLndpZHRoICsgY2lyY2xlRGF0YS5oZWlnaHQpKTtcblxuICAgIGNvbnN0IHNlZyA9IChNYXRoLlBJICogMikgLyB0b3RhbFNlZ3M7XG5cbiAgICBpZiAoZ3JhcGhpY3NEYXRhLmZpbGwpXG4gICAge1xuICAgICAgICBjb25zdCBjb2xvciA9IGhleDJyZ2IoZ3JhcGhpY3NEYXRhLmZpbGxTdHlsZSk7XG4gICAgICAgIGNvbnN0IGFscGhhID0gZ3JhcGhpY3NEYXRhLmZpbGxBbHBoYTtcblxuICAgICAgICBjb25zdCByID0gY29sb3JbMF0gKiBhbHBoYTtcbiAgICAgICAgY29uc3QgZyA9IGNvbG9yWzFdICogYWxwaGE7XG4gICAgICAgIGNvbnN0IGIgPSBjb2xvclsyXSAqIGFscGhhO1xuXG4gICAgICAgIGNvbnN0IHZlcnRzID0gd2ViR0xEYXRhLnBvaW50cztcbiAgICAgICAgY29uc3QgaW5kaWNlcyA9IHdlYkdMRGF0YS5pbmRpY2VzO1xuXG4gICAgICAgIGxldCB2ZWNQb3MgPSB2ZXJ0cy5sZW5ndGggLyA2O1xuXG4gICAgICAgIGluZGljZXMucHVzaCh2ZWNQb3MpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG90YWxTZWdzICsgMTsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB2ZXJ0cy5wdXNoKHgsIHksIHIsIGcsIGIsIGFscGhhKTtcblxuICAgICAgICAgICAgdmVydHMucHVzaChcbiAgICAgICAgICAgICAgICB4ICsgKE1hdGguc2luKHNlZyAqIGkpICogd2lkdGgpLFxuICAgICAgICAgICAgICAgIHkgKyAoTWF0aC5jb3Moc2VnICogaSkgKiBoZWlnaHQpLFxuICAgICAgICAgICAgICAgIHIsIGcsIGIsIGFscGhhXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpbmRpY2VzLnB1c2godmVjUG9zKyssIHZlY1BvcysrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluZGljZXMucHVzaCh2ZWNQb3MgLSAxKTtcbiAgICB9XG5cbiAgICBpZiAoZ3JhcGhpY3NEYXRhLmxpbmVXaWR0aClcbiAgICB7XG4gICAgICAgIGNvbnN0IHRlbXBQb2ludHMgPSBncmFwaGljc0RhdGEucG9pbnRzO1xuXG4gICAgICAgIGdyYXBoaWNzRGF0YS5wb2ludHMgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsU2VncyArIDE7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgZ3JhcGhpY3NEYXRhLnBvaW50cy5wdXNoKFxuICAgICAgICAgICAgICAgIHggKyAoTWF0aC5zaW4oc2VnICogaSkgKiB3aWR0aCksXG4gICAgICAgICAgICAgICAgeSArIChNYXRoLmNvcyhzZWcgKiBpKSAqIGhlaWdodClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBidWlsZExpbmUoZ3JhcGhpY3NEYXRhLCB3ZWJHTERhdGEpO1xuXG4gICAgICAgIGdyYXBoaWNzRGF0YS5wb2ludHMgPSB0ZW1wUG9pbnRzO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGhleDJyZ2IgfSBmcm9tICcuLi8uLi91dGlscy9jb2xvcic7XG5pbXBvcnQgeyBTSEFQRVMgfSBmcm9tICcuLi8uLi9jb25zdCc7XG5pbXBvcnQgT2JqZWN0UmVuZGVyZXIgZnJvbSAnLi4vLi4vcmVuZGVyZXJzL3dlYmdsL3V0aWxzL09iamVjdFJlbmRlcmVyJztcbmltcG9ydCBXZWJHTFJlbmRlcmVyIGZyb20gJy4uLy4uL3JlbmRlcmVycy93ZWJnbC9XZWJHTFJlbmRlcmVyJztcbmltcG9ydCBXZWJHTEdyYXBoaWNzRGF0YSBmcm9tICcuL1dlYkdMR3JhcGhpY3NEYXRhJztcbmltcG9ydCBQcmltaXRpdmVTaGFkZXIgZnJvbSAnLi9zaGFkZXJzL1ByaW1pdGl2ZVNoYWRlcic7XG5cbmltcG9ydCBidWlsZFBvbHkgZnJvbSAnLi91dGlscy9idWlsZFBvbHknO1xuaW1wb3J0IGJ1aWxkUmVjdGFuZ2xlIGZyb20gJy4vdXRpbHMvYnVpbGRSZWN0YW5nbGUnO1xuaW1wb3J0IGJ1aWxkUm91bmRlZFJlY3RhbmdsZSBmcm9tICcuL3V0aWxzL2J1aWxkUm91bmRlZFJlY3RhbmdsZSc7XG5pbXBvcnQgYnVpbGRDaXJjbGUgZnJvbSAnLi91dGlscy9idWlsZENpcmNsZSc7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JhcGhpY3NSZW5kZXJlciBleHRlbmRzIE9iamVjdFJlbmRlcmVyXG57XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtQSVhJLldlYkdMUmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyIHRoaXMgb2JqZWN0IHJlbmRlcmVyIHdvcmtzIGZvci5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihyZW5kZXJlcilcbiAgICB7XG4gICAgICAgIHN1cGVyKHJlbmRlcmVyKTtcblxuICAgICAgICB0aGlzLmdyYXBoaWNzRGF0YVBvb2wgPSBbXTtcblxuICAgICAgICB0aGlzLnByaW1pdGl2ZVNoYWRlciA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5nbCA9IHJlbmRlcmVyLmdsO1xuXG4gICAgICAgIC8vIGVhc3kgYWNjZXNzIVxuICAgICAgICB0aGlzLkNPTlRFWFRfVUlEID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGVyZSBpcyBhIFdlYkdMIGNvbnRleHQgY2hhbmdlXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqXG4gICAgICovXG4gICAgb25Db250ZXh0Q2hhbmdlKClcbiAgICB7XG4gICAgICAgIHRoaXMuZ2wgPSB0aGlzLnJlbmRlcmVyLmdsO1xuICAgICAgICB0aGlzLkNPTlRFWFRfVUlEID0gdGhpcy5yZW5kZXJlci5DT05URVhUX1VJRDtcbiAgICAgICAgdGhpcy5wcmltaXRpdmVTaGFkZXIgPSBuZXcgUHJpbWl0aXZlU2hhZGVyKHRoaXMuZ2wpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoaXMgcmVuZGVyZXIuXG4gICAgICpcbiAgICAgKi9cbiAgICBkZXN0cm95KClcbiAgICB7XG4gICAgICAgIE9iamVjdFJlbmRlcmVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmdyYXBoaWNzRGF0YVBvb2wubGVuZ3RoOyArK2kpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3NEYXRhUG9vbFtpXS5kZXN0cm95KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmdyYXBoaWNzRGF0YVBvb2wgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgYSBncmFwaGljcyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuR3JhcGhpY3N9IGdyYXBoaWNzIC0gVGhlIGdyYXBoaWNzIG9iamVjdCB0byByZW5kZXIuXG4gICAgICovXG4gICAgcmVuZGVyKCBkaXNwbGF5T2JqZWN0IClcbiAgICB7XG4gICAgICAgIGNvbnN0IGdyYXBoaWNzID0gZGlzcGxheU9iamVjdC5ncmFwaGljcztcbiAgICAgICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xuICAgICAgICBjb25zdCBnbCA9IHJlbmRlcmVyLmdsO1xuXG4gICAgICAgIGxldCB3ZWJHTERhdGE7XG4gICAgICAgIGxldCB3ZWJHTCA9IGdyYXBoaWNzLl93ZWJHTFt0aGlzLkNPTlRFWFRfVUlEXTtcblxuICAgICAgICBpZiAoIXdlYkdMIHx8IGdyYXBoaWNzLmRpcnR5ICE9PSB3ZWJHTC5kaXJ0eSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVHcmFwaGljcyhncmFwaGljcyk7XG5cbiAgICAgICAgICAgIHdlYkdMID0gZ3JhcGhpY3MuX3dlYkdMW3RoaXMuQ09OVEVYVF9VSURdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhpcyAgY291bGQgYmUgc3BlZWRlZCB1cCBmb3Igc3VyZSFcbiAgICAgICAgY29uc3Qgc2hhZGVyID0gdGhpcy5wcmltaXRpdmVTaGFkZXI7XG5cbiAgICAgICAgcmVuZGVyZXIuYmluZFNoYWRlcihzaGFkZXIpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBuID0gd2ViR0wuZGF0YS5sZW5ndGg7IGkgPCBuOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHdlYkdMRGF0YSA9IHdlYkdMLmRhdGFbaV07XG4gICAgICAgICAgICBjb25zdCBzaGFkZXJUZW1wID0gd2ViR0xEYXRhLnNoYWRlcjtcblxuICAgICAgICAgICAgcmVuZGVyZXIuYmluZFNoYWRlcihzaGFkZXJUZW1wKTtcblxuICAgICAgICAgICAgdmFyIGdsb2JhbE1hdHJpeCA9IGRpc3BsYXlPYmplY3QuZ2V0Q29uY2F0ZW5hdGVkTWF0cml4KCkudG9BcnJheSh0cnVlKTtcbiAgICAgICAgICAgIHNoYWRlclRlbXAudW5pZm9ybXMudHJhbnNsYXRpb25NYXRyaXggPSBnbG9iYWxNYXRyaXg7XG4gICAgICAgICAgICBzaGFkZXJUZW1wLnVuaWZvcm1zLnRpbnQgPSBoZXgycmdiKGdyYXBoaWNzLnRpbnQpO1xuICAgICAgICAgICAgc2hhZGVyVGVtcC51bmlmb3Jtcy5hbHBoYSA9IGdyYXBoaWNzLndvcmxkQWxwaGE7XG5cbiAgICAgICAgICAgIHJlbmRlcmVyLmJpbmRWYW8od2ViR0xEYXRhLnZhbyk7XG4gICAgICAgICAgICB3ZWJHTERhdGEudmFvLmRyYXcoZ2wuVFJJQU5HTEVfU1RSSVAsIHdlYkdMRGF0YS5pbmRpY2VzLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBncmFwaGljcyBvYmplY3RcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtQSVhJLkdyYXBoaWNzfSBncmFwaGljcyAtIFRoZSBncmFwaGljcyBvYmplY3QgdG8gdXBkYXRlXG4gICAgICovXG4gICAgdXBkYXRlR3JhcGhpY3MoZ3JhcGhpY3MpXG4gICAge1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMucmVuZGVyZXIuZ2w7XG5cbiAgICAgICAgIC8vIGdldCB0aGUgY29udGV4dHMgZ3JhcGhpY3Mgb2JqZWN0XG4gICAgICAgIGxldCB3ZWJHTCA9IGdyYXBoaWNzLl93ZWJHTFt0aGlzLkNPTlRFWFRfVUlEXTtcblxuICAgICAgICAvLyBpZiB0aGUgZ3JhcGhpY3Mgb2JqZWN0IGRvZXMgbm90IGV4aXN0IGluIHRoZSB3ZWJHTCBjb250ZXh0IHRpbWUgdG8gY3JlYXRlIGl0IVxuICAgICAgICBpZiAoIXdlYkdMKVxuICAgICAgICB7XG4gICAgICAgICAgICB3ZWJHTCA9IGdyYXBoaWNzLl93ZWJHTFt0aGlzLkNPTlRFWFRfVUlEXSA9IHsgbGFzdEluZGV4OiAwLCBkYXRhOiBbXSwgZ2wsIGNsZWFyRGlydHk6IC0xLCBkaXJ0eTogLTEgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZsYWcgdGhlIGdyYXBoaWNzIGFzIG5vdCBkaXJ0eSBhcyB3ZSBhcmUgYWJvdXQgdG8gdXBkYXRlIGl0Li4uXG4gICAgICAgIHdlYkdMLmRpcnR5ID0gZ3JhcGhpY3MuZGlydHk7XG5cbiAgICAgICAgLy8gaWYgdGhlIHVzZXIgY2xlYXJlZCB0aGUgZ3JhcGhpY3Mgb2JqZWN0IHdlIHdpbGwgbmVlZCB0byBjbGVhciBldmVyeSBvYmplY3RcbiAgICAgICAgaWYgKGdyYXBoaWNzLmNsZWFyRGlydHkgIT09IHdlYkdMLmNsZWFyRGlydHkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHdlYkdMLmNsZWFyRGlydHkgPSBncmFwaGljcy5jbGVhckRpcnR5O1xuXG4gICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggYW5kIHJldHVybiBhbGwgdGhlIHdlYkdMRGF0YXMgdG8gdGhlIG9iamVjdCBwb29sIHNvIHRoYW4gY2FuIGJlIHJldXNlZCBsYXRlciBvblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3ZWJHTC5kYXRhLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3NEYXRhUG9vbC5wdXNoKHdlYkdMLmRhdGFbaV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjbGVhciB0aGUgYXJyYXkgYW5kIHJlc2V0IHRoZSBpbmRleC4uXG4gICAgICAgICAgICB3ZWJHTC5kYXRhLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICB3ZWJHTC5sYXN0SW5kZXggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHdlYkdMRGF0YTtcblxuICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIGdyYXBoaWNzIGRhdGFzIGFuZCBjb25zdHJ1Y3QgZWFjaCBvbmUuLlxuICAgICAgICAvLyBpZiB0aGUgb2JqZWN0IGlzIGEgY29tcGxleCBmaWxsIHRoZW4gdGhlIG5ldyBzdGVuY2lsIGJ1ZmZlciB0ZWNobmlxdWUgd2lsbCBiZSB1c2VkXG4gICAgICAgIC8vIG90aGVyIHdpc2UgZ3JhcGhpY3Mgb2JqZWN0cyB3aWxsIGJlIHB1c2hlZCBpbnRvIGEgYmF0Y2guLlxuICAgICAgICBmb3IgKGxldCBpID0gd2ViR0wubGFzdEluZGV4OyBpIDwgZ3JhcGhpY3MuZ3JhcGhpY3NEYXRhLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gZ3JhcGhpY3MuZ3JhcGhpY3NEYXRhW2ldO1xuXG4gICAgICAgICAgICAvLyBUT0RPIC0gdGhpcyBjYW4gYmUgc2ltcGxpZmllZFxuICAgICAgICAgICAgd2ViR0xEYXRhID0gdGhpcy5nZXRXZWJHTERhdGEod2ViR0wsIDApO1xuXG4gICAgICAgICAgICBpZiAoZGF0YS50eXBlID09PSBTSEFQRVMuUE9MWSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBidWlsZFBvbHkoZGF0YSwgd2ViR0xEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRhLnR5cGUgPT09IFNIQVBFUy5SRUNUKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJ1aWxkUmVjdGFuZ2xlKGRhdGEsIHdlYkdMRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhLnR5cGUgPT09IFNIQVBFUy5DSVJDIHx8IGRhdGEudHlwZSA9PT0gU0hBUEVTLkVMSVApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYnVpbGRDaXJjbGUoZGF0YSwgd2ViR0xEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEudHlwZSA9PT0gU0hBUEVTLlJSRUMpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYnVpbGRSb3VuZGVkUmVjdGFuZ2xlKGRhdGEsIHdlYkdMRGF0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdlYkdMLmxhc3RJbmRleCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW5kZXJlci5iaW5kVmFvKG51bGwpO1xuXG4gICAgICAgIC8vIHVwbG9hZCBhbGwgdGhlIGRpcnR5IGRhdGEuLi5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3ZWJHTC5kYXRhLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB3ZWJHTERhdGEgPSB3ZWJHTC5kYXRhW2ldO1xuXG4gICAgICAgICAgICBpZiAod2ViR0xEYXRhLmRpcnR5KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHdlYkdMRGF0YS51cGxvYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgLSB0aGUgY3VycmVudCBXZWJHTCBkcmF3aW5nIGNvbnRleHRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdHlwZSAtIFRPRE8gQEFsdmluXG4gICAgICogQHJldHVybiB7Kn0gVE9ET1xuICAgICAqL1xuICAgIGdldFdlYkdMRGF0YShnbCwgdHlwZSlcbiAgICB7XG4gICAgICAgIGxldCB3ZWJHTERhdGEgPSBnbC5kYXRhW2dsLmRhdGEubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKCF3ZWJHTERhdGEgfHwgd2ViR0xEYXRhLnBvaW50cy5sZW5ndGggPiAzMjAwMDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIHdlYkdMRGF0YSA9IHRoaXMuZ3JhcGhpY3NEYXRhUG9vbC5wb3AoKVxuICAgICAgICAgICAgICAgIHx8IG5ldyBXZWJHTEdyYXBoaWNzRGF0YSh0aGlzLnJlbmRlcmVyLmdsLCB0aGlzLnByaW1pdGl2ZVNoYWRlciwgdGhpcy5yZW5kZXJlci5zdGF0ZS5hdHRyaWJzU3RhdGUpO1xuXG4gICAgICAgICAgICB3ZWJHTERhdGEucmVzZXQodHlwZSk7XG4gICAgICAgICAgICBnbC5kYXRhLnB1c2god2ViR0xEYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdlYkdMRGF0YS5kaXJ0eSA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIHdlYkdMRGF0YTtcbiAgICB9XG59IiwiaW1wb3J0IHsgRFJBV19NT0RFUyB9IGZyb20gJy4uLy4uLy4uL2NvbnN0JztcblxuLyoqXG4gKiBHZW5lcmljIE1hc2sgU3RhY2sgZGF0YSBzdHJ1Y3R1cmUuXG4gKlxuICogQG1lbWJlcm9mIFBJWElcbiAqIEBmdW5jdGlvbiBtYXBXZWJHTERyYXdNb2Rlc1RvUGl4aVxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCAtIFRoZSBjdXJyZW50IFdlYkdMIGRyYXdpbmcgY29udGV4dFxuICogQHBhcmFtIHtvYmplY3R9IFtvYmplY3Q9e31dIC0gVGhlIG9iamVjdCB0byBtYXAgaW50b1xuICogQHJldHVybiB7b2JqZWN0fSBUaGUgbWFwcGVkIGRyYXcgbW9kZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1hcFdlYkdMRHJhd01vZGVzVG9QaXhpKGdsLCBvYmplY3QgPSB7fSlcbntcbiAgICBvYmplY3RbRFJBV19NT0RFUy5QT0lOVFNdID0gZ2wuUE9JTlRTO1xuICAgIG9iamVjdFtEUkFXX01PREVTLkxJTkVTXSA9IGdsLkxJTkVTO1xuICAgIG9iamVjdFtEUkFXX01PREVTLkxJTkVfTE9PUF0gPSBnbC5MSU5FX0xPT1A7XG4gICAgb2JqZWN0W0RSQVdfTU9ERVMuTElORV9TVFJJUF0gPSBnbC5MSU5FX1NUUklQO1xuICAgIG9iamVjdFtEUkFXX01PREVTLlRSSUFOR0xFU10gPSBnbC5UUklBTkdMRVM7XG4gICAgb2JqZWN0W0RSQVdfTU9ERVMuVFJJQU5HTEVfU1RSSVBdID0gZ2wuVFJJQU5HTEVfU1RSSVA7XG4gICAgb2JqZWN0W0RSQVdfTU9ERVMuVFJJQU5HTEVfRkFOXSA9IGdsLlRSSUFOR0xFX0ZBTjtcblxuICAgIHJldHVybiBvYmplY3Q7XG59XG4iLCJpbXBvcnQgUmVuZGVyVGFyZ2V0IGZyb20gJy4vdXRpbHMvUmVuZGVyVGFyZ2V0JztcbmltcG9ydCBPYmplY3RSZW5kZXJlciBmcm9tICcuL3V0aWxzL09iamVjdFJlbmRlcmVyJztcbmltcG9ydCBXZWJHTFN0YXRlIGZyb20gJy4vV2ViR0xTdGF0ZSc7XG5pbXBvcnQgZ2xDb3JlIGZyb20gJ3BpeGktZ2wtY29yZSc7XG5pbXBvcnQgeyBSRU5ERVJFUl9UWVBFIH0gZnJvbSAnLi4vLi4vY29uc3QnO1xuaW1wb3J0IHNldHRpbmdzIGZyb20gJy4uLy4uL3NldHRpbmdzJztcbmltcG9ydCBHcmFwaGljc1JlbmRlcmVyIGZyb20gJy4uLy4uL2dyYXBoaWNzL3dlYmdsL0dyYXBoaWNzUmVuZGVyZXInO1xuaW1wb3J0IG1hcFdlYkdMRHJhd01vZGVzVG9QaXhpIGZyb20gJy4vdXRpbHMvbWFwV2ViR0xEcmF3TW9kZXNUb1BpeGknO1xuXG5sZXQgQ09OVEVYVF9VSUQgPSAwO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYkdMU3RhZ2VSZW5kZXJlclxue1xuXG4gICAgY29uc3RydWN0b3IoIHN0YWdlICwgYXBwICwgb3B0aW9ucyA9IHt9IClcbiAgICB7XG4gICAgICAgIHRoaXMudHlwZSA9IFJFTkRFUkVSX1RZUEUuV0VCR0w7XG4gICAgICAgIHRoaXMud2lkdGggPSBhcHAud2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gYXBwLmhlaWdodDtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBzdGFnZS5jYW52YXM7XG4gICAgICAgIFxuICAgICAgICAvKlxuICAgICAgICAqIOWkhOeQhuS4iuS4i+aWh+S4ouWkseWSjOaBouWkjVxuICAgICAgICAqIOS9oOeahFdlYkdM56iL5bqP5b+F6aG75pyJ5LiA5Liq55So5LqO5aSE55CG5LiK5LiL5paH5Lii5aSx77yITG9zdCBDb250ZXh077yJ55qE5py65Yi2XG4gICAgICAgICog5a+86Ie05LiK5LiL5paH5Lii5aSx55qE5Y6f5Zug77yaXG4gICAgICAgICog56e75Yqo6K6+5aSH55S15Yqb5LiN6LazXG4gICAgICAgICog5YW25LuW5aSW5Zug5a+86Ie0R1BV6YeN572uXG4gICAgICAgICog5b2T5rWP6KeI5Zmo5qCH562+6aG15aSE5LqO5ZCO5Y+w5pe277yM5rWP6KeI5Zmo5oqb5byD5LqG5LiK5LiL5paHXG4gICAgICAgICog6ICX6LS56LWE5rqQ6L+H5aSa77yM5rWP6KeI5Zmo5oqb5byD5LqG5LiK5LiL5paHXG4gICAgICAgICovXG4gICAgICAgIHRoaXMuaGFuZGxlQ29udGV4dExvc3QgPSB0aGlzLmhhbmRsZUNvbnRleHRMb3N0LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlQ29udGV4dFJlc3RvcmVkID0gdGhpcy5oYW5kbGVDb250ZXh0UmVzdG9yZWQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignd2ViZ2xjb250ZXh0bG9zdCcsIHRoaXMuaGFuZGxlQ29udGV4dExvc3QsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignd2ViZ2xjb250ZXh0cmVzdG9yZWQnLCB0aGlzLmhhbmRsZUNvbnRleHRSZXN0b3JlZCwgZmFsc2UpO1xuXG4gXG4gICAgICAgIHRoaXMuX2JhY2tncm91bmRDb2xvciA9IDB4MDAwMDAwO1xuICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kQ29sb3JSZ2JhID0gWzAsIDAsIDAsIDBdO1xuICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kQ29sb3JTdHJpbmcgPSAnIzAwMDAwMCc7XG4gICAgICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IgfHwgdGhpcy5fYmFja2dyb3VuZENvbG9yO1xuXG4gICAgICAgIHRoaXMuX2NvbnRleHRPcHRpb25zID0ge1xuICAgICAgICAgICAgYWxwaGE6IG9wdGlvbnMudHJhbnNwYXJlbnQsXG4gICAgICAgICAgICBhbnRpYWxpYXM6IG9wdGlvbnMuYW50aWFsaWFzLFxuICAgICAgICAgICAgcHJlbXVsdGlwbGllZEFscGhhOiBvcHRpb25zLnRyYW5zcGFyZW50ICYmIG9wdGlvbnMudHJhbnNwYXJlbnQgIT09ICdub3RNdWx0aXBsaWVkJyxcbiAgICAgICAgICAgIHN0ZW5jaWw6IHRydWUsXG4gICAgICAgICAgICBwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6IG9wdGlvbnMucHJlc2VydmVEcmF3aW5nQnVmZmVyLFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuZW1wdHlSZW5kZXJlciA9IG5ldyBPYmplY3RSZW5kZXJlcih0aGlzKTtcblxuICAgICAgICB0aGlzLmN1cnJlbnRSZW5kZXJlciA9IHRoaXMuZW1wdHlSZW5kZXJlcjtcblxuICAgICAgICB0aGlzLmdsID0gb3B0aW9ucy5jb250ZXh0IHx8IGdsQ29yZS5jcmVhdGVDb250ZXh0KCB0aGlzLmNhbnZhcyAsIHRoaXMuX2NvbnRleHRPcHRpb25zKTtcblxuICAgICAgICB0aGlzLkNPTlRFWFRfVUlEID0gQ09OVEVYVF9VSUQrKztcblxuICAgICAgICB0aGlzLnN0YXRlID0gbmV3IFdlYkdMU3RhdGUodGhpcy5nbCk7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJpbmdUb1NjcmVlbiA9IHRydWU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhvbGRzIHRoZSBjdXJyZW50IHNoYWRlclxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlNoYWRlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2FjdGl2ZVNoYWRlciA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5fYWN0aXZlVmFvID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSG9sZHMgdGhlIGN1cnJlbnQgcmVuZGVyIHRhcmdldFxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLlJlbmRlclRhcmdldH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2FjdGl2ZVJlbmRlclRhcmdldCA9IG51bGw7XG5cbiAgICAgICAgXG5cbiAgICAgICAgLy8gbWFwIHNvbWUgd2ViR0wgYmxlbmQgYW5kIGRyYXdtb2Rlcy4uXG4gICAgICAgIHRoaXMuZHJhd01vZGVzID0gbWFwV2ViR0xEcmF3TW9kZXNUb1BpeGkodGhpcy5nbCk7XG5cbiAgICAgICAgdGhpcy53ZWJnbEdSID0gbmV3IEdyYXBoaWNzUmVuZGVyZXIodGhpcyk7XG5cbiAgICAgICAgdGhpcy5faW5pdENvbnRleHQoKTtcbiAgICB9XG5cbiAgIFxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIFdlYkdMIGNvbnRleHRcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2luaXRDb250ZXh0KClcbiAgICB7XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcblxuICAgICAgICAvLyByZXN0b3JlIGEgY29udGV4dCBpZiBpdCB3YXMgcHJldmlvdXNseSBsb3N0XG4gICAgICAgIGlmIChnbC5pc0NvbnRleHRMb3N0KCkgJiYgZ2wuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9sb3NlX2NvbnRleHQnKSlcbiAgICAgICAge1xuICAgICAgICAgICAgZ2wuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9sb3NlX2NvbnRleHQnKS5yZXN0b3JlQ29udGV4dCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdGF0ZS5yZXNldFRvRGVmYXVsdCgpO1xuXG4gICAgICAgIHRoaXMucm9vdFJlbmRlclRhcmdldCA9IG5ldyBSZW5kZXJUYXJnZXQoZ2wsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCBudWxsLCBzZXR0aW5ncy5SRVNPTFVUSU9OLCB0cnVlKTtcbiAgICAgICAgdGhpcy5yb290UmVuZGVyVGFyZ2V0LmNsZWFyQ29sb3IgPSB0aGlzLl9iYWNrZ3JvdW5kQ29sb3JSZ2JhO1xuXG4gICAgICAgIHRoaXMuYmluZFJlbmRlclRhcmdldCh0aGlzLnJvb3RSZW5kZXJUYXJnZXQpO1xuXG4gICAgICAgIHRoaXMud2ViZ2xHUi5vbkNvbnRleHRDaGFuZ2UoKTtcbiAgICB9XG5cblxuICAgIHJlbmRlcihkaXNwbGF5T2JqZWN0KVxuICAgIHtcbiAgICAgICAgLy8gY2FuIGJlIGhhbmR5IHRvIGtub3chXG4gICAgICAgIHRoaXMucmVuZGVyaW5nVG9TY3JlZW4gPSB0cnVlO1xuXG4gICAgICAgIGlmICghdGhpcy5nbCB8fCB0aGlzLmdsLmlzQ29udGV4dExvc3QoKSlcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jdXJyZW50UmVuZGVyZXIuc3RhcnQoKTtcblxuICAgICAgICB0aGlzLl9hY3RpdmVSZW5kZXJUYXJnZXQuY2xlYXIoKTsgICAgICAgIFxuXG4gICAgICAgIHRoaXMud2ViZ2xHUi5yZW5kZXIoIGRpc3BsYXlPYmplY3QgKTtcbiAgICAgICAgLy9kaXNwbGF5T2JqZWN0LnJlbmRlcldlYkdMKHRoaXMpO1xuXG4gICAgICAgIC8vIGFwcGx5IHRyYW5zZm9ybS4uXG4gICAgICAgIHRoaXMuY3VycmVudFJlbmRlcmVyLmZsdXNoKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB0aGUgY3VycmVudCByZW5kZXJlciB0byB0aGUgb25lIGdpdmVuIGluIHBhcmFtZXRlclxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLk9iamVjdFJlbmRlcmVyfSBvYmplY3RSZW5kZXJlciAtIFRoZSBvYmplY3QgcmVuZGVyZXIgdG8gdXNlLlxuICAgICAqL1xuICAgIHNldE9iamVjdFJlbmRlcmVyKG9iamVjdFJlbmRlcmVyKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFJlbmRlcmVyID09PSBvYmplY3RSZW5kZXJlcilcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jdXJyZW50UmVuZGVyZXIuc3RvcCgpO1xuICAgICAgICB0aGlzLmN1cnJlbnRSZW5kZXJlciA9IG9iamVjdFJlbmRlcmVyO1xuICAgICAgICB0aGlzLmN1cnJlbnRSZW5kZXJlci5zdGFydCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgc2hvdWxkIGJlIGNhbGxlZCBpZiB5b3Ugd2lzaCB0byBkbyBzb21lIGN1c3RvbSByZW5kZXJpbmdcbiAgICAgKiBJdCB3aWxsIGJhc2ljYWxseSByZW5kZXIgYW55dGhpbmcgdGhhdCBtYXkgYmUgYmF0Y2hlZCB1cCBzdWNoIGFzIHNwcml0ZXNcbiAgICAgKlxuICAgICAqL1xuICAgIGZsdXNoKClcbiAgICB7XG4gICAgICAgIHRoaXMuc2V0T2JqZWN0UmVuZGVyZXIodGhpcy5lbXB0eVJlbmRlcmVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNpemVzIHRoZSB3ZWJHTCB2aWV3IHRvIHRoZSBzcGVjaWZpZWQgd2lkdGggYW5kIGhlaWdodC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIHRoZSBuZXcgd2lkdGggb2YgdGhlIHdlYkdMIHZpZXdcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gdGhlIG5ldyBoZWlnaHQgb2YgdGhlIHdlYkdMIHZpZXdcbiAgICAgKi9cbiAgICByZXNpemUod2lkdGgsIGhlaWdodClcbiAgICB7XG4gICAgICAvLyAgaWYod2lkdGggKiB0aGlzLnJlc29sdXRpb24gPT09IHRoaXMud2lkdGggJiYgaGVpZ2h0ICogdGhpcy5yZXNvbHV0aW9uID09PSB0aGlzLmhlaWdodClyZXR1cm47XG5cbiAgICAgICAgdGhpcy5yb290UmVuZGVyVGFyZ2V0LnJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICBpZiAodGhpcy5fYWN0aXZlUmVuZGVyVGFyZ2V0ID09PSB0aGlzLnJvb3RSZW5kZXJUYXJnZXQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucm9vdFJlbmRlclRhcmdldC5hY3RpdmF0ZSgpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fYWN0aXZlU2hhZGVyKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2ZVNoYWRlci51bmlmb3Jtcy5wcm9qZWN0aW9uTWF0cml4ID0gdGhpcy5yb290UmVuZGVyVGFyZ2V0LnByb2plY3Rpb25NYXRyaXgudG9BcnJheSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogRXJhc2VzIHRoZSBhY3RpdmUgcmVuZGVyIHRhcmdldCBhbmQgZmlsbHMgdGhlIGRyYXdpbmcgYXJlYSB3aXRoIGEgY29sb3VyXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2NsZWFyQ29sb3JdIC0gVGhlIGNvbG91clxuICAgICAqL1xuICAgIGNsZWFyKGNsZWFyQ29sb3IpXG4gICAge1xuICAgICAgICB0aGlzLl9hY3RpdmVSZW5kZXJUYXJnZXQuY2xlYXIoY2xlYXJDb2xvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdHJhbnNmb3JtIG9mIHRoZSBhY3RpdmUgcmVuZGVyIHRhcmdldCB0byB0aGUgZ2l2ZW4gbWF0cml4XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuTWF0cml4fSBtYXRyaXggLSBUaGUgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAgICovXG4gICAgc2V0VHJhbnNmb3JtKG1hdHJpeClcbiAgICB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVJlbmRlclRhcmdldC50cmFuc2Zvcm0gPSBtYXRyaXg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB0aGUgY3VycmVudCByZW5kZXIgdGFyZ2V0IHRvIHRoZSBvbmUgZ2l2ZW4gaW4gcGFyYW1ldGVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVuZGVyVGFyZ2V0fSByZW5kZXJUYXJnZXQgLSB0aGUgbmV3IHJlbmRlciB0YXJnZXRcbiAgICAgKiBAcmV0dXJuIHtQSVhJLldlYkdMUmVuZGVyZXJ9IFJldHVybnMgaXRzZWxmLlxuICAgICAqL1xuICAgIGJpbmRSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0KVxuICAgIHtcbiAgICAgICAgaWYgKHJlbmRlclRhcmdldCAhPT0gdGhpcy5fYWN0aXZlUmVuZGVyVGFyZ2V0KVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmVSZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQ7XG4gICAgICAgICAgICByZW5kZXJUYXJnZXQuYWN0aXZhdGUoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVNoYWRlcilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVTaGFkZXIudW5pZm9ybXMucHJvamVjdGlvbk1hdHJpeCA9IHJlbmRlclRhcmdldC5wcm9qZWN0aW9uTWF0cml4LnRvQXJyYXkodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB0aGUgY3VycmVudCBzaGFkZXIgdG8gdGhlIG9uZSBnaXZlbiBpbiBwYXJhbWV0ZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5TaGFkZXJ9IHNoYWRlciAtIHRoZSBuZXcgc2hhZGVyXG4gICAgICogQHJldHVybiB7UElYSS5XZWJHTFJlbmRlcmVyfSBSZXR1cm5zIGl0c2VsZi5cbiAgICAgKi9cbiAgICBiaW5kU2hhZGVyKHNoYWRlcilcbiAgICB7XG4gICAgICAgIC8vIFRPRE8gY2FjaGVcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVNoYWRlciAhPT0gc2hhZGVyKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmVTaGFkZXIgPSBzaGFkZXI7XG4gICAgICAgICAgICBzaGFkZXIuYmluZCgpO1xuXG4gICAgICAgICAgICAvLyBhdXRvbWF0aWNhbGx5IHNldCB0aGUgcHJvamVjdGlvbiBtYXRyaXhcbiAgICAgICAgICAgIHNoYWRlci51bmlmb3Jtcy5wcm9qZWN0aW9uTWF0cml4ID0gdGhpcy5fYWN0aXZlUmVuZGVyVGFyZ2V0LnByb2plY3Rpb25NYXRyaXgudG9BcnJheSh0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgVkFPIGZyb20gdGhpcyByZW5kZXJlcidzIGNvbnRleHQgYW5kIHN0YXRlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7VmVydGV4QXJyYXlPYmplY3R9IFRoZSBuZXcgVkFPLlxuICAgICAqL1xuICAgIGNyZWF0ZVZhbygpXG4gICAge1xuICAgICAgICByZXR1cm4gbmV3IGdsQ29yZS5WZXJ0ZXhBcnJheU9iamVjdCh0aGlzLmdsLCB0aGlzLnN0YXRlLmF0dHJpYlN0YXRlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRoZSBjdXJyZW50IFZhbyB0byB0aGUgb25lIGdpdmVuIGluIHBhcmFtZXRlclxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLlZlcnRleEFycmF5T2JqZWN0fSB2YW8gLSB0aGUgbmV3IFZhb1xuICAgICAqIEByZXR1cm4ge1BJWEkuV2ViR0xSZW5kZXJlcn0gUmV0dXJucyBpdHNlbGYuXG4gICAgICovXG4gICAgYmluZFZhbyh2YW8pXG4gICAge1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlVmFvID09PSB2YW8pXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbylcbiAgICAgICAge1xuICAgICAgICAgICAgdmFvLmJpbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9hY3RpdmVWYW8pXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIFRPRE8gdGhpcyBzaG91bGQgYWx3YXlzIGJlIHRydWUgaSB0aGluaz9cbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZVZhby51bmJpbmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2FjdGl2ZVZhbyA9IHZhbztcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIFdlYkdMIHN0YXRlIHNvIHlvdSBjYW4gcmVuZGVyIHRoaW5ncyBob3dldmVyIHlvdSBmYW5jeSFcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1BJWEkuV2ViR0xSZW5kZXJlcn0gUmV0dXJucyBpdHNlbGYuXG4gICAgICovXG4gICAgcmVzZXQoKVxuICAgIHtcbiAgICAgICAgdGhpcy5zZXRPYmplY3RSZW5kZXJlcih0aGlzLmVtcHR5UmVuZGVyZXIpO1xuXG4gICAgICAgIHRoaXMuX2FjdGl2ZVNoYWRlciA9IG51bGw7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVJlbmRlclRhcmdldCA9IHRoaXMucm9vdFJlbmRlclRhcmdldDtcblxuICAgICAgICAvLyBiaW5kIHRoZSBtYWluIGZyYW1lIGJ1ZmZlciAodGhlIHNjcmVlbik7XG4gICAgICAgIHRoaXMucm9vdFJlbmRlclRhcmdldC5hY3RpdmF0ZSgpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUucmVzZXRUb0RlZmF1bHQoKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIGEgbG9zdCB3ZWJnbCBjb250ZXh0XG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7V2ViR0xDb250ZXh0RXZlbnR9IGV2ZW50IC0gVGhlIGNvbnRleHQgbG9zdCBldmVudC5cbiAgICAgKi9cbiAgICBoYW5kbGVDb250ZXh0TG9zdChldmVudClcbiAgICB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBhIHJlc3RvcmVkIHdlYmdsIGNvbnRleHRcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaGFuZGxlQ29udGV4dFJlc3RvcmVkKClcbiAgICB7XG4gICAgICAgIHRoaXMuX2luaXRDb250ZXh0KCk7XG4gICAgICAgIHRoaXMudGV4dHVyZU1hbmFnZXIucmVtb3ZlQWxsKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBldmVyeXRoaW5nIGZyb20gdGhlIHJlbmRlcmVyIChldmVudCBsaXN0ZW5lcnMsIHNwcml0ZWJhdGNoLCBldGMuLi4pXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZW1vdmVWaWV3PWZhbHNlXSAtIFJlbW92ZXMgdGhlIENhbnZhcyBlbGVtZW50IGZyb20gdGhlIERPTS5cbiAgICAgKiAgU2VlOiBodHRwczovL2dpdGh1Yi5jb20vcGl4aWpzL3BpeGkuanMvaXNzdWVzLzIyMzNcbiAgICAgKi9cbiAgICBkZXN0cm95KHJlbW92ZVZpZXcpXG4gICAge1xuICAgICAgICB0aGlzLmRlc3Ryb3lQbHVnaW5zKCk7XG5cbiAgICAgICAgLy8gcmVtb3ZlIGxpc3RlbmVyc1xuICAgICAgICB0aGlzLnZpZXcucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2ViZ2xjb250ZXh0bG9zdCcsIHRoaXMuaGFuZGxlQ29udGV4dExvc3QpO1xuICAgICAgICB0aGlzLnZpZXcucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2ViZ2xjb250ZXh0cmVzdG9yZWQnLCB0aGlzLmhhbmRsZUNvbnRleHRSZXN0b3JlZCk7XG5cbiAgICAgICAgLy8gY2FsbCBiYXNlIGRlc3Ryb3lcbiAgICAgICAgc3VwZXIuZGVzdHJveShyZW1vdmVWaWV3KTtcblxuICAgICAgICB0aGlzLnVpZCA9IDA7XG5cbiAgICAgICAgdGhpcy5jdXJyZW50UmVuZGVyZXIgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29udGV4dExvc3QgPSBudWxsO1xuICAgICAgICB0aGlzLmhhbmRsZUNvbnRleHRSZXN0b3JlZCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5fY29udGV4dE9wdGlvbnMgPSBudWxsO1xuICAgICAgICB0aGlzLmdsLnVzZVByb2dyYW0obnVsbCk7XG5cbiAgICAgICAgaWYgKHRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9sb3NlX2NvbnRleHQnKSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5nbC5nZXRFeHRlbnNpb24oJ1dFQkdMX2xvc2VfY29udGV4dCcpLmxvc2VDb250ZXh0KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmdsID0gbnVsbDtcbiAgICB9XG59IiwiaW1wb3J0IFN5c3RlbVJlbmRlcmVyIGZyb20gJy4uL1N5c3RlbVJlbmRlcmVyJztcbmltcG9ydCB7IFJFTkRFUkVSX1RZUEUgfSBmcm9tICcuLi8uLi9jb25zdCc7XG5pbXBvcnQgU2V0dGluZ3MgZnJvbSAnLi4vLi4vc2V0dGluZ3MnO1xuaW1wb3J0IFdlYkdMU3RhZ2VSZW5kZXJlciBmcm9tIFwiLi9XZWJHTFN0YWdlUmVuZGVyZXJcIjtcbmltcG9ydCBfIGZyb20gXCIuLi8uLi91dGlscy91bmRlcnNjb3JlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYkdMUmVuZGVyZXIgZXh0ZW5kcyBTeXN0ZW1SZW5kZXJlclxue1xuICAgIGNvbnN0cnVjdG9yKGFwcCAsIG9wdGlvbnMgPSB7fSlcbiAgICB7XG4gICAgICAgIHN1cGVyKFJFTkRFUkVSX1RZUEUuQ0FOVkFTLCBhcHAsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJlbmRlciggYXBwICwgb3B0aW9ucyA9IHt9IClcbiAgICB7XG4gICAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICAgIFxuICAgICAgICBtZS5hcHAgPSBhcHA7XG4gICAgICAgIF8uZXh0ZW5kKCB0aGlzLm9wdGlvbnMgLCBvcHRpb25zICk7XG5cbiAgICAgICAgXy5lYWNoKF8udmFsdWVzKCBhcHAuY29udmVydFN0YWdlcyApICwgZnVuY3Rpb24oY29udmVydFN0YWdlKXtcbiAgICAgICAgICAgIG1lLnJlbmRlclN0YWdlKCBjb252ZXJ0U3RhZ2Uuc3RhZ2UgKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXBwLmNvbnZlcnRTdGFnZXMgPSB7fTtcbiAgICB9XG5cbiAgICByZW5kZXJTdGFnZSggc3RhZ2UgKVxuICAgIHtcbiAgICAgICAgaWYoIXN0YWdlLndlYkdMU3RhZ2VSZW5kZXJlcil7XG4gICAgICAgICAgICBzdGFnZS53ZWJHTFN0YWdlUmVuZGVyZXIgPSBuZXcgV2ViR0xTdGFnZVJlbmRlcmVyKCBzdGFnZSAsIGFwcCAsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIH07XG4gICAgICAgIHN0YWdlLnN0YWdlUmVuZGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuX2NsZWFyKCBzdGFnZSApO1xuICAgICAgICB0aGlzLl9yZW5kZXIoIHN0YWdlICk7XG4gICAgICAgIHN0YWdlLnN0YWdlUmVuZGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIF9yZW5kZXIoIHN0YWdlICwgZGlzcGxheU9iamVjdCApXG4gICAge1xuICAgICAgICBpZiggIWRpc3BsYXlPYmplY3QgKXtcbiAgICAgICAgICAgIGRpc3BsYXlPYmplY3QgPSBzdGFnZTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiggIWRpc3BsYXlPYmplY3QuY29udGV4dC52aXNpYmxlIHx8IGRpc3BsYXlPYmplY3QuY29udGV4dC5nbG9iYWxBbHBoYSA8PSAwICl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH07XG5cbiAgICAgICAgLy9pZiggZGlzcGxheU9iamVjdC5ncmFwaGljcyApe1xuICAgICAgICAvLyAgICBzdGFnZS53ZWJHTFJlbmRlcmVyLnJlbmRlciggZGlzcGxheU9iamVjdCApO1xuICAgICAgICAvL307XG4gICAgICAgIGlmKCBkaXNwbGF5T2JqZWN0LmdyYXBoaWNzICl7XG4gICAgICAgICAgICBzdGFnZS53ZWJHTFN0YWdlUmVuZGVyZXIucmVuZGVyKCBkaXNwbGF5T2JqZWN0ICk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYoIGRpc3BsYXlPYmplY3QuY2hpbGRyZW4gKXtcbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDAsIGxlbiA9IGRpc3BsYXlPYmplY3QuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXIoIHN0YWdlICwgZGlzcGxheU9iamVjdC5jaGlsZHJlbltpXSApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIF9jbGVhciggc3RhZ2UgKVxuICAgIHtcbiAgICAgICAgLy9UT0RPOui/memHjOacieeCuSDlpYfmgKrvvIwg5LmL5YmN55qE54mI5pysY2xlYXJSZWN055qE5pe25YCZ77yM5LiN6ZyA6KaBICpSRVNPTFVUSU9O77yI5YiG6L6o546H77yJXG4gICAgICAgIHN0YWdlLndlYkdMU3RhZ2VSZW5kZXJlci5jbGVhcigpO1xuICAgIH1cbn1cblxuIiwiaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzL2luZGV4JztcbmltcG9ydCBDYW52YXNSZW5kZXJlciBmcm9tICcuL2NhbnZhcy9DYW52YXNSZW5kZXJlcic7XG5pbXBvcnQgV2ViR0xSZW5kZXJlciBmcm9tICcuL3dlYmdsL1dlYkdMUmVuZGVyZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhdXRvUmVuZGVyZXIoIGFwcCAsIG9wdGlvbnMpXG57XG4gICAgaWYgKCFhcHAubm9XZWJHTCAmJiB1dGlscy5pc1dlYkdMU3VwcG9ydGVkKCkpXG4gICAge1xuICAgICAgICByZXR1cm4gbmV3IFdlYkdMUmVuZGVyZXIoIGFwcCAsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQ2FudmFzUmVuZGVyZXIoIGFwcCAsIG9wdGlvbnMpO1xufVxuIiwiLyoqXG4gKiBBcHBsaWNhdGlvbiB7e1BLR19WRVJTSU9OfX1cbiAqXG4gKiBAYXV0aG9yIOmHiuWJkSAo5p2O5rabLCBsaXRhby5sdEBhbGliYWJhLWluYy5jb20pXG4gKlxuICog5Li75byV5pOOIOexu1xuICpcbiAqIOi0n+i0o+aJgOaciWNhbnZhc+eahOWxgue6p+euoeeQhu+8jOWSjOW/g+i3s+acuuWItueahOWunueOsCzmjZXojrfliLDlv4Pot7PljIXlkI4gXG4gKiDliIblj5HliLDlr7nlupTnmoRzdGFnZShjYW52YXMp5p2l57uY5Yi25a+55bqU55qE5pS55YqoXG4gKiDnhLblkI4g6buY6K6k5pyJ5a6e546w5LqGc2hhcGXnmoQgbW91c2VvdmVyICBtb3VzZW91dCAgZHJhZyDkuovku7ZcbiAqXG4gKiovXG5cbmltcG9ydCBVdGlscyBmcm9tIFwiLi91dGlscy9pbmRleFwiO1xuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tIFwiLi9ldmVudC9FdmVudEhhbmRsZXJcIjtcbmltcG9ydCBEaXNwbGF5T2JqZWN0Q29udGFpbmVyIGZyb20gXCIuL2Rpc3BsYXkvRGlzcGxheU9iamVjdENvbnRhaW5lclwiO1xuaW1wb3J0IFN0YWdlIGZyb20gXCIuL2Rpc3BsYXkvU3RhZ2VcIjtcbmltcG9ydCBhdXRvUmVuZGVyZXIgZnJvbSBcIi4vcmVuZGVyZXJzL2F1dG9SZW5kZXJlclwiO1xuXG5cbi8vdXRpbHNcbmltcG9ydCBfIGZyb20gXCIuL3V0aWxzL3VuZGVyc2NvcmVcIjtcbmltcG9ydCAkIGZyb20gXCIuL3V0aWxzL2RvbVwiO1xuXG5cbnZhciBBcHBsaWNhdGlvbiA9IGZ1bmN0aW9uKCBvcHQgLCBvcHRpb25zID0ge30pe1xuICAgIHRoaXMudHlwZSA9IFwiY2FudmF4XCI7XG4gICAgdGhpcy5fY2lkID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyBcIl9cIiArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSoxMDApOyBcbiAgICBcbiAgICB0aGlzLmVsID0gJC5xdWVyeShvcHQuZWwpO1xuXG4gICAgdGhpcy53aWR0aCA9IHBhcnNlSW50KFwid2lkdGhcIiAgaW4gb3B0IHx8IHRoaXMuZWwub2Zmc2V0V2lkdGggICwgMTApOyBcbiAgICB0aGlzLmhlaWdodCA9IHBhcnNlSW50KFwiaGVpZ2h0XCIgaW4gb3B0IHx8IHRoaXMuZWwub2Zmc2V0SGVpZ2h0ICwgMTApOyBcblxuICAgIHZhciB2aWV3T2JqID0gJC5jcmVhdGVWaWV3KHRoaXMud2lkdGggLCB0aGlzLmhlaWdodCwgdGhpcy5fY2lkKTtcbiAgICB0aGlzLnZpZXcgPSB2aWV3T2JqLnZpZXc7XG4gICAgdGhpcy5zdGFnZV9jID0gdmlld09iai5zdGFnZV9jO1xuICAgIHRoaXMuZG9tX2MgPSB2aWV3T2JqLmRvbV9jO1xuICAgIFxuICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gXCJcIjtcbiAgICB0aGlzLmVsLmFwcGVuZENoaWxkKCB0aGlzLnZpZXcgKTtcblxuICAgIHRoaXMudmlld09mZnNldCA9ICQub2Zmc2V0KHRoaXMudmlldyk7XG4gICAgdGhpcy5sYXN0R2V0Uk8gPSAwOy8v5pyA5ZCO5LiA5qyh6I635Y+WIHZpZXdPZmZzZXQg55qE5pe26Ze0XG5cbiAgICB0aGlzLm5vV2ViR0wgID0gb3B0Lm5vV2ViR0w7XG4gICAgdGhpcy5yZW5kZXJlciA9IGF1dG9SZW5kZXJlcih0aGlzICwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLmV2ZW50ID0gbnVsbDtcblxuICAgIHRoaXMuX2J1ZmZlclN0YWdlID0gbnVsbDtcblxuICAgIC8v5piv5ZCm6Zi75q2i5rWP6KeI5Zmo6buY6K6k5LqL5Lu255qE5omn6KGMXG4gICAgdGhpcy5wcmV2ZW50RGVmYXVsdCA9IHRydWU7XG4gICAgaWYoIG9wdC5wcmV2ZW50RGVmYXVsdCA9PT0gZmFsc2UgKXtcbiAgICAgICAgdGhpcy5wcmV2ZW50RGVmYXVsdCA9IGZhbHNlXG4gICAgfTtcblxuICAgIC8v6K+l5bGe5oCn5Zyoc3lzdGVuUmVuZGVy6YeM6Z2i5pON5L2c77yM5q+P5bin55Sx5b+D6Lez5LiK5oql55qEIOmcgOimgemHjee7mOeahHN0YWdlcyDliJfooahcbiAgICB0aGlzLmNvbnZlcnRTdGFnZXMgPSB7fTtcblxuICAgIEFwcGxpY2F0aW9uLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5cblV0aWxzLmNyZWF0Q2xhc3MoQXBwbGljYXRpb24gLCBEaXNwbGF5T2JqZWN0Q29udGFpbmVyICwge1xuICAgIGluaXQgOiBmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLmNvbnRleHQud2lkdGggID0gdGhpcy53aWR0aDtcbiAgICAgICAgdGhpcy5jb250ZXh0LmhlaWdodCA9IHRoaXMuaGVpZ2h0OyBcblxuICAgICAgICAvL+eEtuWQjuWIm+W7uuS4gOS4queUqOS6jue7mOWItua/gOa0uyBzaGFwZSDnmoQgc3RhZ2Ug5YiwYWN0aXZhdGlvblxuICAgICAgICB0aGlzLl9jcmVhdEhvdmVyU3RhZ2UoKTtcblxuICAgICAgICAvL+WIm+W7uuS4gOS4quWmguaenOimgeeUqOWDj+e0oOajgOa1i+eahOaXtuWAmeeahOWuueWZqFxuICAgICAgICB0aGlzLl9jcmVhdGVQaXhlbENvbnRleHQoKTtcbiAgICAgICAgXG4gICAgfSxcbiAgICByZWdpc3RFdmVudCA6IGZ1bmN0aW9uKG9wdCl7XG4gICAgICAgIC8v5Yid5aeL5YyW5LqL5Lu25aeU5omY5Yiwcm9vdOWFg+e0oOS4iumdolxuICAgICAgICB0aGlzLmV2ZW50ID0gbmV3IEV2ZW50SGFuZGxlciggdGhpcyAsIG9wdCk7O1xuICAgICAgICB0aGlzLmV2ZW50LmluaXQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnQ7XG4gICAgfSxcbiAgICByZXNpemUgOiBmdW5jdGlvbiggb3B0ICl7XG4gICAgICAgIC8v6YeN5paw6K6+572u5Z2Q5qCH57O757ufIOmrmOWuvSDnrYnjgIJcbiAgICAgICAgdGhpcy53aWR0aCAgICAgID0gcGFyc2VJbnQoKG9wdCAmJiBcIndpZHRoXCIgaW4gb3B0KSB8fCB0aGlzLmVsLm9mZnNldFdpZHRoICAsIDEwKTsgXG4gICAgICAgIHRoaXMuaGVpZ2h0ICAgICA9IHBhcnNlSW50KChvcHQgJiYgXCJoZWlnaHRcIiBpbiBvcHQpIHx8IHRoaXMuZWwub2Zmc2V0SGVpZ2h0ICwgMTApOyBcblxuICAgICAgICB0aGlzLnZpZXcuc3R5bGUud2lkdGggID0gdGhpcy53aWR0aCArXCJweFwiO1xuICAgICAgICB0aGlzLnZpZXcuc3R5bGUuaGVpZ2h0ID0gdGhpcy5oZWlnaHQrXCJweFwiO1xuXG4gICAgICAgIHRoaXMudmlld09mZnNldCAgICAgPSAkLm9mZnNldCh0aGlzLnZpZXcpO1xuICAgICAgICB0aGlzLl9ub3RXYXRjaCAgICAgID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jb250ZXh0LndpZHRoICA9IHRoaXMud2lkdGg7XG4gICAgICAgIHRoaXMuY29udGV4dC5oZWlnaHQgPSB0aGlzLmhlaWdodDtcbiAgICAgICAgdGhpcy5fbm90V2F0Y2ggICAgICA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICAgIHZhciByZVNpemVDYW52YXMgICAgPSBmdW5jdGlvbihjdHgpe1xuICAgICAgICAgICAgdmFyIGNhbnZhcyA9IGN0eC5jYW52YXM7XG4gICAgICAgICAgICBjYW52YXMuc3R5bGUud2lkdGggPSBtZS53aWR0aCArIFwicHhcIjtcbiAgICAgICAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQ9IG1lLmhlaWdodCsgXCJweFwiO1xuICAgICAgICAgICAgY2FudmFzLnNldEF0dHJpYnV0ZShcIndpZHRoXCIgICwgbWUud2lkdGggKiBVdGlscy5fZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgICAgICAgICBjYW52YXMuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIgLCBtZS5oZWlnaHQqIFV0aWxzLl9kZXZpY2VQaXhlbFJhdGlvKTtcblxuICAgICAgICAgICAgLy/lpoLmnpzmmK9zd2bnmoTor53lsLHov5jopoHosIPnlKjov5nkuKrmlrnms5XjgIJcbiAgICAgICAgICAgIGlmIChjdHgucmVzaXplKSB7XG4gICAgICAgICAgICAgICAgY3R4LnJlc2l6ZShtZS53aWR0aCAsIG1lLmhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07IFxuICAgICAgICBfLmVhY2godGhpcy5jaGlsZHJlbiAsIGZ1bmN0aW9uKHMgLCBpKXtcbiAgICAgICAgICAgIHMuX25vdFdhdGNoICAgICA9IHRydWU7XG4gICAgICAgICAgICBzLmNvbnRleHQud2lkdGggPSBtZS53aWR0aDtcbiAgICAgICAgICAgIHMuY29udGV4dC5oZWlnaHQ9IG1lLmhlaWdodDtcbiAgICAgICAgICAgIHJlU2l6ZUNhbnZhcyhzLmNhbnZhcyk7XG4gICAgICAgICAgICBzLl9ub3RXYXRjaCAgICAgPSBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5kb21fYy5zdHlsZS53aWR0aCAgPSB0aGlzLndpZHRoICArIFwicHhcIjtcbiAgICAgICAgdGhpcy5kb21fYy5zdHlsZS5oZWlnaHQgPSB0aGlzLmhlaWdodCArIFwicHhcIjtcblxuICAgICAgICB0aGlzLmhlYXJ0QmVhdCgpO1xuXG4gICAgfSxcbiAgICBnZXRIb3ZlclN0YWdlIDogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1ZmZlclN0YWdlO1xuICAgIH0sXG4gICAgX2NyZWF0SG92ZXJTdGFnZSA6IGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vVE9ETzrliJvlu7pzdGFnZeeahOaXtuWAmeS4gOWumuimgeS8oOWFpXdpZHRoIGhlaWdodCAg5Lik5Liq5Y+C5pWwXG4gICAgICAgIHRoaXMuX2J1ZmZlclN0YWdlID0gbmV3IFN0YWdlKCB7XG4gICAgICAgICAgICBpZCA6IFwiYWN0aXZDYW52YXNcIisobmV3IERhdGUoKSkuZ2V0VGltZSgpLFxuICAgICAgICAgICAgY29udGV4dCA6IHtcbiAgICAgICAgICAgICAgICB3aWR0aCA6IHRoaXMuY29udGV4dC53aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuY29udGV4dC5oZWlnaHRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSApO1xuICAgICAgICAvL+ivpXN0YWdl5LiN5Y+C5LiO5LqL5Lu25qOA5rWLXG4gICAgICAgIHRoaXMuX2J1ZmZlclN0YWdlLl9ldmVudEVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZCggdGhpcy5fYnVmZmVyU3RhZ2UgKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOeUqOadpeajgOa1i+aWh+acrHdpZHRoIGhlaWdodCBcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IOS4iuS4i+aWh1xuICAgICovXG4gICAgX2NyZWF0ZVBpeGVsQ29udGV4dCA6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX3BpeGVsQ2FudmFzID0gJC5xdWVyeShcIl9waXhlbENhbnZhc1wiKTtcbiAgICAgICAgaWYoIV9waXhlbENhbnZhcyl7XG4gICAgICAgICAgICBfcGl4ZWxDYW52YXMgPSAkLmNyZWF0ZUNhbnZhcygwLCAwLCBcIl9waXhlbENhbnZhc1wiKTsgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL+WmguaenOWPiOeahOivnSDlsLHkuI3pnIDopoHlnKjliJvlu7rkuoZcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggX3BpeGVsQ2FudmFzICk7XG4gICAgICAgIFV0aWxzLmluaXRFbGVtZW50KCBfcGl4ZWxDYW52YXMgKTtcbiAgICAgICAgaWYoIFV0aWxzLmNhbnZhc1N1cHBvcnQoKSApe1xuICAgICAgICAgICAgLy9jYW52YXPnmoTor53vvIzlk6rmgJXmmK9kaXNwbGF5Om5vbmXnmoTpobXlj6/ku6XnlKjmnaXlt6blg4/ntKDmo4DmtYvlkoxtZWFzdXJlVGV4dOaWh+acrHdpZHRo5qOA5rWLXG4gICAgICAgICAgICBfcGl4ZWxDYW52YXMuc3R5bGUuZGlzcGxheSAgICA9IFwibm9uZVwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9mbGFzaENhbnZhcyDnmoTor53vvIxzd2blpoLmnpxkaXNwbGF5Om5vbmXkuobjgILlsLHlgZrkuI3kuoZtZWFzdXJlVGV4dCDmlofmnKzlrr3luqYg5qOA5rWL5LqGXG4gICAgICAgICAgICBfcGl4ZWxDYW52YXMuc3R5bGUuekluZGV4ICAgICA9IC0xO1xuICAgICAgICAgICAgX3BpeGVsQ2FudmFzLnN0eWxlLnBvc2l0aW9uICAgPSBcImFic29sdXRlXCI7XG4gICAgICAgICAgICBfcGl4ZWxDYW52YXMuc3R5bGUubGVmdCAgICAgICA9IC10aGlzLmNvbnRleHQud2lkdGggICsgXCJweFwiO1xuICAgICAgICAgICAgX3BpeGVsQ2FudmFzLnN0eWxlLnRvcCAgICAgICAgPSAtdGhpcy5jb250ZXh0LmhlaWdodCArIFwicHhcIjtcbiAgICAgICAgICAgIF9waXhlbENhbnZhcy5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgfVxuICAgICAgICBVdGlscy5fcGl4ZWxDdHggPSBfcGl4ZWxDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB9LFxuXG4gICAgdXBkYXRlVmlld09mZnNldCA6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgaWYoIG5vdyAtIHRoaXMubGFzdEdldFJPID4gMTAwMCApe1xuICAgICAgICAgICAgdGhpcy52aWV3T2Zmc2V0ICAgICAgPSAkLm9mZnNldCh0aGlzLnZpZXcpO1xuICAgICAgICAgICAgdGhpcy5sYXN0R2V0Uk8gICAgICAgPSBub3c7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFxuICAgIF9hZnRlckFkZENoaWxkIDogZnVuY3Rpb24oIHN0YWdlICwgaW5kZXggKXtcbiAgICAgICAgdmFyIGNhbnZhcztcblxuICAgICAgICBpZighc3RhZ2UuY2FudmFzKXtcbiAgICAgICAgICAgIGNhbnZhcyA9ICQuY3JlYXRlQ2FudmFzKCB0aGlzLmNvbnRleHQud2lkdGggLCB0aGlzLmNvbnRleHQuaGVpZ2h0LCBzdGFnZS5pZCApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FudmFzID0gc3RhZ2UuY2FudmFzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYodGhpcy5jaGlsZHJlbi5sZW5ndGggPT0gMSl7XG4gICAgICAgICAgICB0aGlzLnN0YWdlX2MuYXBwZW5kQ2hpbGQoIGNhbnZhcyApO1xuICAgICAgICB9IGVsc2UgaWYodGhpcy5jaGlsZHJlbi5sZW5ndGg+MSkge1xuICAgICAgICAgICAgaWYoIGluZGV4ID09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgICAgICAvL+WmguaenOayoeacieaMh+WumuS9jee9ru+8jOmCo+S5iOWwseaUvuWIsF9idWZmZXJTdGFnZeeahOS4i+mdouOAglxuICAgICAgICAgICAgICAgIHRoaXMuc3RhZ2VfYy5pbnNlcnRCZWZvcmUoIGNhbnZhcyAsIHRoaXMuX2J1ZmZlclN0YWdlLmNhbnZhcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8v5aaC5p6c5pyJ5oyH5a6a55qE5L2N572u77yM6YKj5LmI5bCx5oyH5a6a55qE5L2N572u5p2lXG4gICAgICAgICAgICAgICAgaWYoIGluZGV4ID49IHRoaXMuY2hpbGRyZW4ubGVuZ3RoLTEgKXtcbiAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWdlX2MuYXBwZW5kQ2hpbGQoIGNhbnZhcyApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgdGhpcy5zdGFnZV9jLmluc2VydEJlZm9yZSggY2FudmFzICwgdGhpcy5jaGlsZHJlblsgaW5kZXggXS5jYW52YXMgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgVXRpbHMuaW5pdEVsZW1lbnQoIGNhbnZhcyApO1xuICAgICAgICBzdGFnZS5pbml0U3RhZ2UoIGNhbnZhcyAsIHRoaXMuY29udGV4dC53aWR0aCAsIHRoaXMuY29udGV4dC5oZWlnaHQgKTsgXG4gICAgfSxcbiAgICBfYWZ0ZXJEZWxDaGlsZCA6IGZ1bmN0aW9uKHN0YWdlKXtcbiAgICAgICAgdGhpcy5zdGFnZV9jLnJlbW92ZUNoaWxkKCBzdGFnZS5jYW52YXMgKTtcbiAgICB9LFxuICAgIFxuICAgIGhlYXJ0QmVhdCA6IGZ1bmN0aW9uKG9wdCl7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuaGVhcnRCZWF0KG9wdCk7XG4gICAgfVxufSApO1xuXG5leHBvcnQgZGVmYXVsdCBBcHBsaWNhdGlvbjsiLCIvKipcbiAqIENhbnZheFxuICpcbiAqIEBhdXRob3Ig6YeK5YmRICjmnY7mtpssIGxpdGFvLmx0QGFsaWJhYmEtaW5jLmNvbSlcbiAqXG4gKiDmqKHmi59hczMg5LitIOeahHNwcml0Zeexu++8jOebruWJjei/mOWPquaYr+S4queugOWNleeahOWuueaYk+OAglxuICovXG5pbXBvcnQgRGlzcGxheU9iamVjdENvbnRhaW5lciBmcm9tIFwiLi9EaXNwbGF5T2JqZWN0Q29udGFpbmVyXCI7XG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4uL3V0aWxzL2luZGV4XCI7XG5cbnZhciBTcHJpdGUgPSBmdW5jdGlvbigpe1xuICAgIHRoaXMudHlwZSA9IFwic3ByaXRlXCI7XG4gICAgU3ByaXRlLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5cblV0aWxzLmNyZWF0Q2xhc3MoU3ByaXRlICwgRGlzcGxheU9iamVjdENvbnRhaW5lciAsIHtcbiAgICBpbml0IDogZnVuY3Rpb24oKXtcbiAgICBcbiAgICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgU3ByaXRlO1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JhcGhpY3NEYXRhXG57XG4gICAgY29uc3RydWN0b3IobGluZVdpZHRoLCBzdHJva2VTdHlsZSwgbGluZUFscGhhLCBmaWxsU3R5bGUsIGZpbGxBbHBoYSwgc2hhcGUpXG4gICAge1xuICAgICAgICB0aGlzLmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICAgICAgdGhpcy5zdHJva2VTdHlsZSA9IHN0cm9rZVN0eWxlO1xuICAgICAgICB0aGlzLmxpbmVBbHBoYSA9IGxpbmVBbHBoYTtcblxuICAgICAgICB0aGlzLmZpbGxTdHlsZSA9IGZpbGxTdHlsZTtcbiAgICAgICAgdGhpcy5maWxsQWxwaGEgPSBmaWxsQWxwaGE7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnNoYXBlID0gc2hhcGU7XG4gICAgICAgIHRoaXMudHlwZSA9IHNoYXBlLnR5cGU7XG5cbiAgICAgICAgdGhpcy5ob2xlcyA9IFtdO1xuXG4gICAgICAgIC8v6L+Z5Lik5Liq5Y+v5Lul6KKr5ZCO57ut5L+u5pS577yMIOWFt+acieS4gOelqOWQpuWGs+adg1xuICAgICAgICAvL+avlOWmgnBvbHlnb27nmoQg6Jma57q/5o+P6L6544CC5b+F6aG75ZyoZmlsbOeahHBvbHnkuIrpnaLorr7nva5saW5l5Li6ZmFsc2VcbiAgICAgICAgdGhpcy5maWxsID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5saW5lID0gdHJ1ZTtcblxuICAgIH1cblxuICAgIGNsb25lKClcbiAgICB7XG4gICAgICAgIHJldHVybiBuZXcgR3JhcGhpY3NEYXRhKFxuICAgICAgICAgICAgdGhpcy5saW5lV2lkdGgsXG4gICAgICAgICAgICB0aGlzLnN0cm9rZVN0eWxlLFxuICAgICAgICAgICAgdGhpcy5saW5lQWxwaGEsXG4gICAgICAgICAgICB0aGlzLmZpbGxTdHlsZSxcbiAgICAgICAgICAgIHRoaXMuZmlsbEFscGhhLFxuICAgICAgICAgICAgdGhpcy5zaGFwZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGFkZEhvbGUoc2hhcGUpXG4gICAge1xuICAgICAgICB0aGlzLmhvbGVzLnB1c2goc2hhcGUpO1xuICAgIH1cblxuICAgIC8v5LuO5a6/5Li7Z3JhcGhpY3PkuK3lkIzmraXmnIDmlrDnmoRzdHlsZeWxnuaAp1xuICAgIHN5bnNTdHlsZSggZ3JhcGhpY3MgKVxuICAgIHtcbiAgICAgICAgLy/ku45zaGFwZeS4reaKiue7mOWbvumcgOimgeeahHN0eWxl5bGe5oCn5ZCM5q2l6L+H5p2lXG4gICAgICAgIHRoaXMubGluZVdpZHRoID0gZ3JhcGhpY3MubGluZVdpZHRoO1xuICAgICAgICB0aGlzLnN0cm9rZVN0eWxlID0gZ3JhcGhpY3Muc3Ryb2tlU3R5bGU7XG4gICAgICAgIHRoaXMubGluZUFscGhhID0gZ3JhcGhpY3MubGluZUFscGhhO1xuXG4gICAgICAgIHRoaXMuZmlsbFN0eWxlID0gZ3JhcGhpY3MuZmlsbFN0eWxlO1xuICAgICAgICB0aGlzLmZpbGxBbHBoYSA9IGdyYXBoaWNzLmZpbGxBbHBoYTtcblxuICAgIH1cblxuICAgIGhhc0ZpbGwoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsbFN0eWxlICYmXG4gICAgICAgICAgICAgICB0aGlzLmZpbGwgJiYgXG4gICAgICAgICAgICAgICAoIHRoaXMuc2hhcGUuY2xvc2VkICE9PSB1bmRlZmluZWQgJiYgdGhpcy5zaGFwZS5jbG9zZWQgKSAmJiBcbiAgICAgICAgICAgICAgIHRoaXMuZmlsbEFscGhhO1xuICAgIH1cblxuICAgIGhhc0xpbmUoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3Ryb2tlU3R5bGUgJiYgdGhpcy5saW5lV2lkdGggJiYgdGhpcy5saW5lQWxwaGEgJiYgdGhpcy5saW5lXG4gICAgfVxuXG4gICAgZGVzdHJveSgpXG4gICAge1xuICAgICAgICB0aGlzLnNoYXBlID0gbnVsbDtcbiAgICAgICAgdGhpcy5ob2xlcyA9IG51bGw7XG4gICAgfVxuICAgIFxufVxuIiwiLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHBvaW50cyBmb3IgYSBiZXppZXIgY3VydmUgYW5kIHRoZW4gZHJhd3MgaXQuXG4gKlxuICogSWdub3JlZCBmcm9tIGRvY3Mgc2luY2UgaXQgaXMgbm90IGRpcmVjdGx5IGV4cG9zZWQuXG4gKlxuICogQGlnbm9yZVxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21YIC0gU3RhcnRpbmcgcG9pbnQgeFxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21ZIC0gU3RhcnRpbmcgcG9pbnQgeVxuICogQHBhcmFtIHtudW1iZXJ9IGNwWCAtIENvbnRyb2wgcG9pbnQgeFxuICogQHBhcmFtIHtudW1iZXJ9IGNwWSAtIENvbnRyb2wgcG9pbnQgeVxuICogQHBhcmFtIHtudW1iZXJ9IGNwWDIgLSBTZWNvbmQgQ29udHJvbCBwb2ludCB4XG4gKiBAcGFyYW0ge251bWJlcn0gY3BZMiAtIFNlY29uZCBDb250cm9sIHBvaW50IHlcbiAqIEBwYXJhbSB7bnVtYmVyfSB0b1ggLSBEZXN0aW5hdGlvbiBwb2ludCB4XG4gKiBAcGFyYW0ge251bWJlcn0gdG9ZIC0gRGVzdGluYXRpb24gcG9pbnQgeVxuICogQHBhcmFtIHtudW1iZXJbXX0gW3BhdGg9W11dIC0gUGF0aCBhcnJheSB0byBwdXNoIHBvaW50cyBpbnRvXG4gKiBAcmV0dXJuIHtudW1iZXJbXX0gQXJyYXkgb2YgcG9pbnRzIG9mIHRoZSBjdXJ2ZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiZXppZXJDdXJ2ZVRvKGZyb21YLCBmcm9tWSwgY3BYLCBjcFksIGNwWDIsIGNwWTIsIHRvWCwgdG9ZLCBwYXRoID0gW10pXG57XG4gICAgY29uc3QgbiA9IDIwO1xuICAgIGxldCBkdCA9IDA7XG4gICAgbGV0IGR0MiA9IDA7XG4gICAgbGV0IGR0MyA9IDA7XG4gICAgbGV0IHQyID0gMDtcbiAgICBsZXQgdDMgPSAwO1xuXG4gICAgcGF0aC5wdXNoKGZyb21YLCBmcm9tWSk7XG5cbiAgICBmb3IgKGxldCBpID0gMSwgaiA9IDA7IGkgPD0gbjsgKytpKVxuICAgIHtcbiAgICAgICAgaiA9IGkgLyBuO1xuXG4gICAgICAgIGR0ID0gKDEgLSBqKTtcbiAgICAgICAgZHQyID0gZHQgKiBkdDtcbiAgICAgICAgZHQzID0gZHQyICogZHQ7XG5cbiAgICAgICAgdDIgPSBqICogajtcbiAgICAgICAgdDMgPSB0MiAqIGo7XG5cbiAgICAgICAgcGF0aC5wdXNoKFxuICAgICAgICAgICAgKGR0MyAqIGZyb21YKSArICgzICogZHQyICogaiAqIGNwWCkgKyAoMyAqIGR0ICogdDIgKiBjcFgyKSArICh0MyAqIHRvWCksXG4gICAgICAgICAgICAoZHQzICogZnJvbVkpICsgKDMgKiBkdDIgKiBqICogY3BZKSArICgzICogZHQgKiB0MiAqIGNwWTIpICsgKHQzICogdG9ZKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBwYXRoO1xufVxuIiwiXG5cbi8qKlxuICog57q/5q615YyF5ZCr5Yik5patXG4gKiBAcG9pbnRzIFswLDAsMCwwXVxuICovXG52YXIgX2lzSW5zaWRlTGluZSA9IGZ1bmN0aW9uKCBwb2ludHMsIHgsIHksIGxpbmVXaWR0aCApIFxue1xuICAgIHZhciB4MCA9IHBvaW50c1swXTtcbiAgICB2YXIgeTAgPSBwb2ludHNbMV07XG4gICAgdmFyIHgxID0gcG9pbnRzWzJdO1xuICAgIHZhciB5MSA9IHBvaW50c1szXTtcbiAgICB2YXIgX2wgPSBNYXRoLm1heChsaW5lV2lkdGggLCAzKTtcbiAgICB2YXIgX2EgPSAwO1xuICAgIHZhciBfYiA9IHgwO1xuXG4gICAgaWYoXG4gICAgICAgICh5ID4geTAgKyBfbCAmJiB5ID4geTEgKyBfbCkgXG4gICAgICAgIHx8ICh5IDwgeTAgLSBfbCAmJiB5IDwgeTEgLSBfbCkgXG4gICAgICAgIHx8ICh4ID4geDAgKyBfbCAmJiB4ID4geDEgKyBfbCkgXG4gICAgICAgIHx8ICh4IDwgeDAgLSBfbCAmJiB4IDwgeDEgLSBfbCkgXG4gICAgKXtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh4MCAhPT0geDEpIHtcbiAgICAgICAgX2EgPSAoeTAgLSB5MSkgLyAoeDAgLSB4MSk7XG4gICAgICAgIF9iID0gKHgwICogeTEgLSB4MSAqIHkwKSAvICh4MCAtIHgxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gTWF0aC5hYnMoeCAtIHgwKSA8PSBfbCAvIDI7XG4gICAgfVxuXG4gICAgdmFyIF9zID0gKF9hICogeCAtIHkgKyBfYikgKiAoX2EgKiB4IC0geSArIF9iKSAvIChfYSAqIF9hICsgMSk7XG4gICAgcmV0dXJuIF9zIDw9IF9sIC8gMiAqIF9sIC8gMjtcbn0gXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluc2lkZUxpbmUoZGF0YSwgeCwgeSwgbGluZSkgXG57ICAgXG4gICAgdmFyIHBvaW50cyA9IGRhdGEuc2hhcGUucG9pbnRzO1xuICAgIHZhciBsaW5lV2lkdGggPSBkYXRhLmxpbmVXaWR0aDtcbiAgICB2YXIgaW5zaWRlQ2F0Y2ggPSBmYWxzZTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgKytpKXtcbiAgICAgICAgaW5zaWRlQ2F0Y2ggPSBfaXNJbnNpZGVMaW5lKCBwb2ludHMuc2xpY2UoaSAsIGkrNCkgLCB4ICwgeSAsIGxpbmVXaWR0aCApO1xuICAgICAgICBpZiggaW5zaWRlQ2F0Y2ggKXtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9O1xuICAgICAgICBpICs9IDFcbiAgICB9O1xuICAgIHJldHVybiBpbnNpZGVDYXRjaDtcbn0iLCIvKlxuKiBHcmFwaGljc+e7mOWbvuazleWImVxuKiDljZXkuKpncmFoaWNz5a6e5L6L6YeM55qEZmlsbCBsaW5lIOagt+W8j+WxnuaAp++8jOmDveS7juWvueW6lHNoYXBlLmNvbnRleHTkuK3ojrflj5ZcbiogXG4qL1xuXG5pbXBvcnQgR3JhcGhpY3NEYXRhIGZyb20gJy4vR3JhcGhpY3NEYXRhJztcbmltcG9ydCB7IFJlY3RhbmdsZSwgRWxsaXBzZSwgUG9seWdvbiwgQ2lyY2xlIH0gZnJvbSAnLi4vbWF0aC9pbmRleCc7XG5pbXBvcnQgeyBTSEFQRVMgfSBmcm9tICcuLi9jb25zdCc7XG5pbXBvcnQgYmV6aWVyQ3VydmVUbyBmcm9tICcuL3V0aWxzL2JlemllckN1cnZlVG8nO1xuaW1wb3J0IF8gZnJvbSBcIi4uL3V0aWxzL3VuZGVyc2NvcmVcIjtcbmltcG9ydCBJbnNpZGVMaW5lIGZyb20gJy4uL2dlb20vSW5zaWRlTGluZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JhcGhpY3MgXG57XG4gICAgY29uc3RydWN0b3IoIHNoYXBlIClcbiAgICB7XG4gICAgICAgIHRoaXMuc2hhcGUgPSBzaGFwZTtcblxuICAgICAgICB0aGlzLmxpbmVXaWR0aCA9IDE7XG4gICAgICAgIHRoaXMuc3Ryb2tlU3R5bGUgPSBudWxsO1xuICAgICAgICB0aGlzLmxpbmVBbHBoYSA9IDE7XG4gICAgICAgIHRoaXMuZmlsbFN0eWxlID0gbnVsbDtcbiAgICAgICAgdGhpcy5maWxsQWxwaGEgPSAxO1xuXG4gICAgICAgIHRoaXMuZ3JhcGhpY3NEYXRhID0gW107XG4gICAgICAgIHRoaXMuY3VycmVudFBhdGggPSBudWxsO1xuXG4gICAgICAgIHRoaXMuc3luc1N0eWxlKCk7XG5cbiAgICAgICAgdGhpcy5kaXJ0eSA9IDA7IC8v6ISP5pWw5o2uXG4gICAgICAgIHRoaXMuX3dlYkdMID0ge307XG4gICAgICAgIHRoaXMud29ybGRBbHBoYSA9IDE7XG4gICAgICAgIHRoaXMudGludCA9IDB4RkZGRkZGOyAvL+ebruagh+WvueixoemZhOWKoOminOiJslxuICAgIH1cblxuICAgIHN5bnNTdHlsZSgpXG4gICAge1xuICAgICAgICAvL+S7jnNoYXBl5Lit5oqK57uY5Zu+6ZyA6KaB55qEc3R5bGXlsZ7mgKflkIzmraXov4fmnaVcbiAgICAgICAgdmFyIHNjdHggPSB0aGlzLnNoYXBlLmNvbnRleHQ7XG4gICAgICAgIHRoaXMubGluZVdpZHRoID0gc2N0eC5saW5lV2lkdGg7XG4gICAgICAgIHRoaXMuc3Ryb2tlU3R5bGUgPSBzY3R4LnN0cm9rZVN0eWxlO1xuICAgICAgICB0aGlzLmxpbmVBbHBoYSA9IHNjdHgubGluZUFscGhhICogc2N0eC5nbG9iYWxBbHBoYTtcblxuICAgICAgICB0aGlzLmZpbGxTdHlsZSA9IHNjdHguZmlsbFN0eWxlO1xuICAgICAgICB0aGlzLmZpbGxBbHBoYSA9IHNjdHguZmlsbEFscGhhICogc2N0eC5nbG9iYWxBbHBoYTtcblxuXG5cblxuICAgICAgICAvL+WmguaenGdyYXBoaWNzRGF0YeacieWkmuWIhue7hOeahOaDheWGteS4i++8jOWmguaenOS7peS4unNoYXBl55qEIHN0eWxlIOWxnuaAp+aUueWPmOiwg+eUqOeahHN5bnNTdHlsZVxuICAgICAgICAvL+WImeS8muimhuebluWFqOmDqOeahCBncmFwaGljc0RhdGEg5YWD57SgXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ncmFwaGljc0RhdGEubGVuZ3RoOyArK2kpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3NEYXRhW2ldLnN5bnNTdHlsZSh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsb25lKClcbiAgICB7XG4gICAgICAgIGNvbnN0IGNsb25lID0gbmV3IEdyYXBoaWNzKCk7XG5cbiAgICAgICAgY2xvbmUuZGlydHkgPSAwO1xuXG4gICAgICAgIC8vIGNvcHkgZ3JhcGhpY3MgZGF0YVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZ3JhcGhpY3NEYXRhLmxlbmd0aDsgKytpKVxuICAgICAgICB7XG4gICAgICAgICAgICBjbG9uZS5ncmFwaGljc0RhdGEucHVzaCh0aGlzLmdyYXBoaWNzRGF0YVtpXS5jbG9uZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsb25lLmN1cnJlbnRQYXRoID0gY2xvbmUuZ3JhcGhpY3NEYXRhW2Nsb25lLmdyYXBoaWNzRGF0YS5sZW5ndGggLSAxXTtcbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH1cblxuXG4gICAgbW92ZVRvKHgsIHkpXG4gICAge1xuICAgICAgICBjb25zdCBzaGFwZSA9IG5ldyBQb2x5Z29uKFt4LCB5XSk7XG5cbiAgICAgICAgc2hhcGUuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZHJhd1NoYXBlKHNoYXBlKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgXG4gICAgbGluZVRvKHgsIHkpXG4gICAge1xuICAgICAgICBpZiggdGhpcy5jdXJyZW50UGF0aCApe1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGF0aC5zaGFwZS5wb2ludHMucHVzaCh4LCB5KTtcbiAgICAgICAgICAgIHRoaXMuZGlydHkrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubW92ZVRvKDAsMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcXVhZHJhdGljQ3VydmVUbyhjcFgsIGNwWSwgdG9YLCB0b1kpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50UGF0aClcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFBhdGguc2hhcGUucG9pbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQYXRoLnNoYXBlLnBvaW50cyA9IFswLCAwXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMubW92ZVRvKDAsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbiA9IDIwO1xuICAgICAgICBjb25zdCBwb2ludHMgPSB0aGlzLmN1cnJlbnRQYXRoLnNoYXBlLnBvaW50cztcbiAgICAgICAgbGV0IHhhID0gMDtcbiAgICAgICAgbGV0IHlhID0gMDtcblxuICAgICAgICBpZiAocG9pbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5tb3ZlVG8oMCwgMCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmcm9tWCA9IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMl07XG4gICAgICAgIGNvbnN0IGZyb21ZID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBuOyArK2kpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IGogPSBpIC8gbjtcblxuICAgICAgICAgICAgeGEgPSBmcm9tWCArICgoY3BYIC0gZnJvbVgpICogaik7XG4gICAgICAgICAgICB5YSA9IGZyb21ZICsgKChjcFkgLSBmcm9tWSkgKiBqKTtcblxuICAgICAgICAgICAgcG9pbnRzLnB1c2goeGEgKyAoKChjcFggKyAoKHRvWCAtIGNwWCkgKiBqKSkgLSB4YSkgKiBqKSxcbiAgICAgICAgICAgICAgICB5YSArICgoKGNwWSArICgodG9ZIC0gY3BZKSAqIGopKSAtIHlhKSAqIGopKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGlydHkrKztcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBiZXppZXJDdXJ2ZVRvKGNwWCwgY3BZLCBjcFgyLCBjcFkyLCB0b1gsIHRvWSlcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRQYXRoKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50UGF0aC5zaGFwZS5wb2ludHMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBhdGguc2hhcGUucG9pbnRzID0gWzAsIDBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5tb3ZlVG8oMCwgMCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwb2ludHMgPSB0aGlzLmN1cnJlbnRQYXRoLnNoYXBlLnBvaW50cztcblxuICAgICAgICBjb25zdCBmcm9tWCA9IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMl07XG4gICAgICAgIGNvbnN0IGZyb21ZID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXTtcblxuICAgICAgICBwb2ludHMubGVuZ3RoIC09IDI7XG5cbiAgICAgICAgYmV6aWVyQ3VydmVUbyhmcm9tWCwgZnJvbVksIGNwWCwgY3BZLCBjcFgyLCBjcFkyLCB0b1gsIHRvWSwgcG9pbnRzKTtcblxuICAgICAgICB0aGlzLmRpcnR5Kys7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYXJjVG8oeDEsIHkxLCB4MiwgeTIsIHJhZGl1cylcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRQYXRoKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50UGF0aC5zaGFwZS5wb2ludHMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBhdGguc2hhcGUucG9pbnRzLnB1c2goeDEsIHkxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMubW92ZVRvKHgxLCB5MSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwb2ludHMgPSB0aGlzLmN1cnJlbnRQYXRoLnNoYXBlLnBvaW50cztcbiAgICAgICAgY29uc3QgZnJvbVggPSBwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDJdO1xuICAgICAgICBjb25zdCBmcm9tWSA9IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV07XG4gICAgICAgIGNvbnN0IGExID0gZnJvbVkgLSB5MTtcbiAgICAgICAgY29uc3QgYjEgPSBmcm9tWCAtIHgxO1xuICAgICAgICBjb25zdCBhMiA9IHkyIC0geTE7XG4gICAgICAgIGNvbnN0IGIyID0geDIgLSB4MTtcbiAgICAgICAgY29uc3QgbW0gPSBNYXRoLmFicygoYTEgKiBiMikgLSAoYjEgKiBhMikpO1xuXG4gICAgICAgIGlmIChtbSA8IDEuMGUtOCB8fCByYWRpdXMgPT09IDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmIChwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDJdICE9PSB4MSB8fCBwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdICE9PSB5MSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwb2ludHMucHVzaCh4MSwgeTEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgZGQgPSAoYTEgKiBhMSkgKyAoYjEgKiBiMSk7XG4gICAgICAgICAgICBjb25zdCBjYyA9IChhMiAqIGEyKSArIChiMiAqIGIyKTtcbiAgICAgICAgICAgIGNvbnN0IHR0ID0gKGExICogYTIpICsgKGIxICogYjIpO1xuICAgICAgICAgICAgY29uc3QgazEgPSByYWRpdXMgKiBNYXRoLnNxcnQoZGQpIC8gbW07XG4gICAgICAgICAgICBjb25zdCBrMiA9IHJhZGl1cyAqIE1hdGguc3FydChjYykgLyBtbTtcbiAgICAgICAgICAgIGNvbnN0IGoxID0gazEgKiB0dCAvIGRkO1xuICAgICAgICAgICAgY29uc3QgajIgPSBrMiAqIHR0IC8gY2M7XG4gICAgICAgICAgICBjb25zdCBjeCA9IChrMSAqIGIyKSArIChrMiAqIGIxKTtcbiAgICAgICAgICAgIGNvbnN0IGN5ID0gKGsxICogYTIpICsgKGsyICogYTEpO1xuICAgICAgICAgICAgY29uc3QgcHggPSBiMSAqIChrMiArIGoxKTtcbiAgICAgICAgICAgIGNvbnN0IHB5ID0gYTEgKiAoazIgKyBqMSk7XG4gICAgICAgICAgICBjb25zdCBxeCA9IGIyICogKGsxICsgajIpO1xuICAgICAgICAgICAgY29uc3QgcXkgPSBhMiAqIChrMSArIGoyKTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSBNYXRoLmF0YW4yKHB5IC0gY3ksIHB4IC0gY3gpO1xuICAgICAgICAgICAgY29uc3QgZW5kQW5nbGUgPSBNYXRoLmF0YW4yKHF5IC0gY3ksIHF4IC0gY3gpO1xuXG4gICAgICAgICAgICB0aGlzLmFyYyhjeCArIHgxLCBjeSArIHkxLCByYWRpdXMsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBiMSAqIGEyID4gYjIgKiBhMSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRpcnR5Kys7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYXJjKGN4LCBjeSwgcmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgYW50aWNsb2Nrd2lzZSA9IGZhbHNlKVxuICAgIHtcbiAgICAgICAgaWYgKHN0YXJ0QW5nbGUgPT09IGVuZEFuZ2xlKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYW50aWNsb2Nrd2lzZSAmJiBlbmRBbmdsZSA8PSBzdGFydEFuZ2xlKVxuICAgICAgICB7XG4gICAgICAgICAgICBlbmRBbmdsZSArPSBNYXRoLlBJICogMjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhbnRpY2xvY2t3aXNlICYmIHN0YXJ0QW5nbGUgPD0gZW5kQW5nbGUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHN0YXJ0QW5nbGUgKz0gTWF0aC5QSSAqIDI7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzd2VlcCA9IGVuZEFuZ2xlIC0gc3RhcnRBbmdsZTtcbiAgICAgICAgY29uc3Qgc2VncyA9IE1hdGguY2VpbChNYXRoLmFicyhzd2VlcCkgLyAoTWF0aC5QSSAqIDIpKSAqIDQwO1xuXG4gICAgICAgIGlmIChzd2VlcCA9PT0gMClcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGFydFggPSBjeCArIChNYXRoLmNvcyhzdGFydEFuZ2xlKSAqIHJhZGl1cyk7XG4gICAgICAgIGNvbnN0IHN0YXJ0WSA9IGN5ICsgKE1hdGguc2luKHN0YXJ0QW5nbGUpICogcmFkaXVzKTtcblxuICAgICAgICAvLyBJZiB0aGUgY3VycmVudFBhdGggZXhpc3RzLCB0YWtlIGl0cyBwb2ludHMuIE90aGVyd2lzZSBjYWxsIGBtb3ZlVG9gIHRvIHN0YXJ0IGEgcGF0aC5cbiAgICAgICAgbGV0IHBvaW50cyA9IHRoaXMuY3VycmVudFBhdGggPyB0aGlzLmN1cnJlbnRQYXRoLnNoYXBlLnBvaW50cyA6IG51bGw7XG5cbiAgICAgICAgaWYgKHBvaW50cylcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHBvaW50c1twb2ludHMubGVuZ3RoIC0gMl0gIT09IHN0YXJ0WCB8fCBwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdICE9PSBzdGFydFkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goc3RhcnRYLCBzdGFydFkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5tb3ZlVG8oc3RhcnRYLCBzdGFydFkpO1xuICAgICAgICAgICAgcG9pbnRzID0gdGhpcy5jdXJyZW50UGF0aC5zaGFwZS5wb2ludHM7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0aGV0YSA9IHN3ZWVwIC8gKHNlZ3MgKiAyKTtcbiAgICAgICAgY29uc3QgdGhldGEyID0gdGhldGEgKiAyO1xuXG4gICAgICAgIGNvbnN0IGNUaGV0YSA9IE1hdGguY29zKHRoZXRhKTtcbiAgICAgICAgY29uc3Qgc1RoZXRhID0gTWF0aC5zaW4odGhldGEpO1xuXG4gICAgICAgIGNvbnN0IHNlZ01pbnVzID0gc2VncyAtIDE7XG5cbiAgICAgICAgY29uc3QgcmVtYWluZGVyID0gKHNlZ01pbnVzICUgMSkgLyBzZWdNaW51cztcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBzZWdNaW51czsgKytpKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCByZWFsID0gaSArIChyZW1haW5kZXIgKiBpKTtcblxuICAgICAgICAgICAgY29uc3QgYW5nbGUgPSAoKHRoZXRhKSArIHN0YXJ0QW5nbGUgKyAodGhldGEyICogcmVhbCkpO1xuXG4gICAgICAgICAgICBjb25zdCBjID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICAgICAgY29uc3QgcyA9IC1NYXRoLnNpbihhbmdsZSk7XG5cbiAgICAgICAgICAgIHBvaW50cy5wdXNoKFxuICAgICAgICAgICAgICAgICgoKGNUaGV0YSAqIGMpICsgKHNUaGV0YSAqIHMpKSAqIHJhZGl1cykgKyBjeCxcbiAgICAgICAgICAgICAgICAoKChjVGhldGEgKiAtcykgKyAoc1RoZXRhICogYykpICogcmFkaXVzKSArIGN5XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kaXJ0eSsrO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRyYXdSZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpXG4gICAge1xuICAgICAgICB0aGlzLmRyYXdTaGFwZShuZXcgUmVjdGFuZ2xlKHgsIHksIHdpZHRoLCBoZWlnaHQpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZHJhd0NpcmNsZSh4LCB5LCByYWRpdXMpXG4gICAge1xuICAgICAgICB0aGlzLmRyYXdTaGFwZShuZXcgQ2lyY2xlKHgsIHksIHJhZGl1cykpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRyYXdFbGxpcHNlKHgsIHksIHdpZHRoLCBoZWlnaHQpXG4gICAge1xuICAgICAgICB0aGlzLmRyYXdTaGFwZShuZXcgRWxsaXBzZSh4LCB5LCB3aWR0aCwgaGVpZ2h0KSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZHJhd1BvbHlnb24ocGF0aClcbiAgICB7XG4gICAgICAgIC8vIHByZXZlbnRzIGFuIGFyZ3VtZW50IGFzc2lnbm1lbnQgZGVvcHRcbiAgICAgICAgLy8gc2VlIHNlY3Rpb24gMy4xOiBodHRwczovL2dpdGh1Yi5jb20vcGV0a2FhbnRvbm92L2JsdWViaXJkL3dpa2kvT3B0aW1pemF0aW9uLWtpbGxlcnMjMy1tYW5hZ2luZy1hcmd1bWVudHNcbiAgICAgICAgbGV0IHBvaW50cyA9IHBhdGg7XG5cbiAgICAgICAgbGV0IGNsb3NlZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKHBvaW50cyBpbnN0YW5jZW9mIFBvbHlnb24pXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNsb3NlZCA9IHBvaW50cy5jbG9zZWQ7XG4gICAgICAgICAgICBwb2ludHMgPSBwb2ludHMucG9pbnRzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHBvaW50cykpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIHByZXZlbnRzIGFuIGFyZ3VtZW50IGxlYWsgZGVvcHRcbiAgICAgICAgICAgIC8vIHNlZSBzZWN0aW9uIDMuMjogaHR0cHM6Ly9naXRodWIuY29tL3BldGthYW50b25vdi9ibHVlYmlyZC93aWtpL09wdGltaXphdGlvbi1raWxsZXJzIzMtbWFuYWdpbmctYXJndW1lbnRzXG4gICAgICAgICAgICBwb2ludHMgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBvaW50c1tpXSA9IGFyZ3VtZW50c1tpXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNoYXBlID0gbmV3IFBvbHlnb24ocG9pbnRzKTtcblxuICAgICAgICBzaGFwZS5jbG9zZWQgPSBjbG9zZWQ7XG5cbiAgICAgICAgdGhpcy5kcmF3U2hhcGUoc2hhcGUpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNsZWFyKClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLmdyYXBoaWNzRGF0YS5sZW5ndGggPiAwKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmRpcnR5Kys7XG4gICAgICAgICAgICB0aGlzLmdyYXBoaWNzRGF0YS5sZW5ndGggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jdXJyZW50UGF0aCA9IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZHJhd1NoYXBlKHNoYXBlKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFBhdGgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRQYXRoLnNoYXBlLnBvaW50cy5sZW5ndGggPD0gMilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdyYXBoaWNzRGF0YS5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3VycmVudFBhdGggPSBudWxsO1xuXG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgR3JhcGhpY3NEYXRhKFxuICAgICAgICAgICAgdGhpcy5saW5lV2lkdGgsXG4gICAgICAgICAgICB0aGlzLnN0cm9rZVN0eWxlLFxuICAgICAgICAgICAgdGhpcy5saW5lQWxwaGEsXG4gICAgICAgICAgICB0aGlzLmZpbGxTdHlsZSxcbiAgICAgICAgICAgIHRoaXMuZmlsbEFscGhhLFxuICAgICAgICAgICAgc2hhcGVcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmdyYXBoaWNzRGF0YS5wdXNoKGRhdGEpO1xuXG4gICAgICAgIGlmIChkYXRhLnR5cGUgPT09IFNIQVBFUy5QT0xZKVxuICAgICAgICB7XG4gICAgICAgICAgICBkYXRhLnNoYXBlLmNsb3NlZCA9IGRhdGEuc2hhcGUuY2xvc2VkO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGF0aCA9IGRhdGE7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRpcnR5Kys7XG5cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG5cbiAgICBjbG9zZVBhdGgoKVxuICAgIHtcbiAgICAgICAgY29uc3QgY3VycmVudFBhdGggPSB0aGlzLmN1cnJlbnRQYXRoO1xuXG4gICAgICAgIGlmIChjdXJyZW50UGF0aCAmJiBjdXJyZW50UGF0aC5zaGFwZSlcbiAgICAgICAge1xuICAgICAgICAgICAgY3VycmVudFBhdGguc2hhcGUuY2xvc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRlc3RzIGlmIGEgcG9pbnQgaXMgaW5zaWRlIHRoaXMgZ3JhcGhpY3Mgb2JqZWN0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuUG9pbnR9IHBvaW50IC0gdGhlIHBvaW50IHRvIHRlc3RcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSB0aGUgcmVzdWx0IG9mIHRoZSB0ZXN0XG4gICAgICovXG4gICAgY29udGFpbnNQb2ludChwb2ludClcbiAgICB7XG4gICAgICAgIGNvbnN0IGdyYXBoaWNzRGF0YSA9IHRoaXMuZ3JhcGhpY3NEYXRhO1xuICAgICAgICBsZXQgaW5zaWRlID0gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JhcGhpY3NEYXRhLmxlbmd0aDsgKytpKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gZ3JhcGhpY3NEYXRhW2ldO1xuICAgICAgICAgICAgaWYgKGRhdGEuc2hhcGUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy/lhYjmo4DmtYtmaWxs77yMIGZpbGznmoTmo4DmtYvmpoLnjoflpKfkupvjgIJcbiAgICAgICAgICAgICAgICAvL+WDj2NpcmNsZSxlbGxpcHNl6L+Z5qC355qEc2hhcGUg5bCx55u05o6l5oqKbGluZVdpZHRo566X5ZyoZmlsbOmHjOmdouiuoeeul+WwseWlveS6hu+8jOaJgOS7peS7luS7rOaYr+ayoeaciWluc2lkZUxpbmXnmoRcbiAgICAgICAgICAgICAgICBpZiAoIGRhdGEuaGFzRmlsbCgpICYmIGRhdGEuc2hhcGUuY29udGFpbnMocG9pbnQueCwgcG9pbnQueSkgKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zaWRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYoIGluc2lkZSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL2NpcmNsZSxlbGxpcHNl562J5bCx5rKh5pyJcG9pbnRzXG4gICAgICAgICAgICAgICAgaWYoIGRhdGEuaGFzTGluZSgpICYmIGRhdGEuc2hhcGUucG9pbnRzIClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC8v54S25ZCO5qOA5rWL5piv5ZCm5ZKM5o+P6L6556Kw5pKeXG4gICAgICAgICAgICAgICAgICAgIGluc2lkZSA9IEluc2lkZUxpbmUoIGRhdGEgLCBwb2ludC54ICwgcG9pbnQueSApO1xuICAgICAgICAgICAgICAgICAgICBpZiggaW5zaWRlICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc2lkZTtcbiAgICB9XG5cbiAgICBcblxuICAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIGJvdW5kcyBvZiB0aGUgb2JqZWN0XG4gICAgICpcbiAgICAgKi9cbiAgICB1cGRhdGVMb2NhbEJvdW5kcygpXG4gICAge1xuICAgICAgICBsZXQgbWluWCA9IEluZmluaXR5O1xuICAgICAgICBsZXQgbWF4WCA9IC1JbmZpbml0eTtcblxuICAgICAgICBsZXQgbWluWSA9IEluZmluaXR5O1xuICAgICAgICBsZXQgbWF4WSA9IC1JbmZpbml0eTtcblxuICAgICAgICBpZiAodGhpcy5ncmFwaGljc0RhdGEubGVuZ3RoKVxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgc2hhcGUgPSAwO1xuICAgICAgICAgICAgbGV0IHggPSAwO1xuICAgICAgICAgICAgbGV0IHkgPSAwO1xuICAgICAgICAgICAgbGV0IHcgPSAwO1xuICAgICAgICAgICAgbGV0IGggPSAwO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZ3JhcGhpY3NEYXRhLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdyYXBoaWNzRGF0YVtpXTtcbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlID0gZGF0YS50eXBlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVXaWR0aCA9IGRhdGEubGluZVdpZHRoO1xuXG4gICAgICAgICAgICAgICAgc2hhcGUgPSBkYXRhLnNoYXBlO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFNIQVBFUy5SRUNUIHx8IHR5cGUgPT09IFNIQVBFUy5SUkVDKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IHNoYXBlLnggLSAobGluZVdpZHRoIC8gMik7XG4gICAgICAgICAgICAgICAgICAgIHkgPSBzaGFwZS55IC0gKGxpbmVXaWR0aCAvIDIpO1xuICAgICAgICAgICAgICAgICAgICB3ID0gc2hhcGUud2lkdGggKyBsaW5lV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIGggPSBzaGFwZS5oZWlnaHQgKyBsaW5lV2lkdGg7XG5cbiAgICAgICAgICAgICAgICAgICAgbWluWCA9IHggPCBtaW5YID8geCA6IG1pblg7XG4gICAgICAgICAgICAgICAgICAgIG1heFggPSB4ICsgdyA+IG1heFggPyB4ICsgdyA6IG1heFg7XG5cbiAgICAgICAgICAgICAgICAgICAgbWluWSA9IHkgPCBtaW5ZID8geSA6IG1pblk7XG4gICAgICAgICAgICAgICAgICAgIG1heFkgPSB5ICsgaCA+IG1heFkgPyB5ICsgaCA6IG1heFk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT09IFNIQVBFUy5DSVJDKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IHNoYXBlLng7XG4gICAgICAgICAgICAgICAgICAgIHkgPSBzaGFwZS55O1xuICAgICAgICAgICAgICAgICAgICB3ID0gc2hhcGUucmFkaXVzICsgKGxpbmVXaWR0aCAvIDIpO1xuICAgICAgICAgICAgICAgICAgICBoID0gc2hhcGUucmFkaXVzICsgKGxpbmVXaWR0aCAvIDIpO1xuXG4gICAgICAgICAgICAgICAgICAgIG1pblggPSB4IC0gdyA8IG1pblggPyB4IC0gdyA6IG1pblg7XG4gICAgICAgICAgICAgICAgICAgIG1heFggPSB4ICsgdyA+IG1heFggPyB4ICsgdyA6IG1heFg7XG5cbiAgICAgICAgICAgICAgICAgICAgbWluWSA9IHkgLSBoIDwgbWluWSA/IHkgLSBoIDogbWluWTtcbiAgICAgICAgICAgICAgICAgICAgbWF4WSA9IHkgKyBoID4gbWF4WSA/IHkgKyBoIDogbWF4WTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gU0hBUEVTLkVMSVApXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB4ID0gc2hhcGUueDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IHNoYXBlLnk7XG4gICAgICAgICAgICAgICAgICAgIHcgPSBzaGFwZS53aWR0aCArIChsaW5lV2lkdGggLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgaCA9IHNoYXBlLmhlaWdodCArIChsaW5lV2lkdGggLyAyKTtcblxuICAgICAgICAgICAgICAgICAgICBtaW5YID0geCAtIHcgPCBtaW5YID8geCAtIHcgOiBtaW5YO1xuICAgICAgICAgICAgICAgICAgICBtYXhYID0geCArIHcgPiBtYXhYID8geCArIHcgOiBtYXhYO1xuXG4gICAgICAgICAgICAgICAgICAgIG1pblkgPSB5IC0gaCA8IG1pblkgPyB5IC0gaCA6IG1pblk7XG4gICAgICAgICAgICAgICAgICAgIG1heFkgPSB5ICsgaCA+IG1heFkgPyB5ICsgaCA6IG1heFk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFBPTFlcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9pbnRzID0gc2hhcGUucG9pbnRzO1xuICAgICAgICAgICAgICAgICAgICBsZXQgeDIgPSAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgeTIgPSAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZHggPSAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZHkgPSAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcncgPSAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmggPSAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgY3ggPSAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgY3kgPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqICsgMiA8IHBvaW50cy5sZW5ndGg7IGogKz0gMilcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgeCA9IHBvaW50c1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBwb2ludHNbaiArIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgeDIgPSBwb2ludHNbaiArIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgeTIgPSBwb2ludHNbaiArIDNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZHggPSBNYXRoLmFicyh4MiAtIHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZHkgPSBNYXRoLmFicyh5MiAtIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaCA9IGxpbmVXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHcgPSBNYXRoLnNxcnQoKGR4ICogZHgpICsgKGR5ICogZHkpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHcgPCAxZS05KVxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBydyA9ICgoaCAvIHcgKiBkeSkgKyBkeCkgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmggPSAoKGggLyB3ICogZHgpICsgZHkpIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN4ID0gKHgyICsgeCkgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3kgPSAoeTIgKyB5KSAvIDI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG1pblggPSBjeCAtIHJ3IDwgbWluWCA/IGN4IC0gcncgOiBtaW5YO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4WCA9IGN4ICsgcncgPiBtYXhYID8gY3ggKyBydyA6IG1heFg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG1pblkgPSBjeSAtIHJoIDwgbWluWSA/IGN5IC0gcmggOiBtaW5ZO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4WSA9IGN5ICsgcmggPiBtYXhZID8gY3kgKyByaCA6IG1heFk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICBtaW5YID0gMDtcbiAgICAgICAgICAgIG1heFggPSAwO1xuICAgICAgICAgICAgbWluWSA9IDA7XG4gICAgICAgICAgICBtYXhZID0gMDtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgdGhpcy5Cb3VuZC5taW5YID0gbWluWCBcbiAgICAgICAgdGhpcy5Cb3VuZC5tYXhYID0gbWF4WDtcblxuICAgICAgICB0aGlzLkJvdW5kLm1pblkgPSBtaW5ZO1xuICAgICAgICB0aGlzLkJvdW5kLm1heFkgPSBtYXhZO1xuICAgIH1cblxuICAgIGRlc3Ryb3kob3B0aW9ucylcbiAgICB7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3kob3B0aW9ucyk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmdyYXBoaWNzRGF0YS5sZW5ndGg7ICsraSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5ncmFwaGljc0RhdGFbaV0uZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5fd2ViZ2wpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5fd2ViZ2xbaWRdLmRhdGEubGVuZ3RoOyArK2opXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2ViZ2xbaWRdLmRhdGFbal0uZGVzdHJveSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ncmFwaGljc0RhdGEgPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnJlbnRQYXRoID0gbnVsbDtcbiAgICAgICAgdGhpcy5fd2ViZ2wgPSBudWxsO1xuICAgIH1cblxufSIsIi8qKlxuICogQ2FudmF4XG4gKlxuICogQGF1dGhvciDph4rliZEgKOadjua2mywgbGl0YW8ubHRAYWxpYmFiYS1pbmMuY29tKVxuICpcbiAqIOaooeaLn2FzMyBEaXNwbGF5TGlzdCDkuK3nmoRzaGFwZSDnsbtcbiAqL1xuaW1wb3J0IERpc3BsYXlPYmplY3QgZnJvbSBcIi4vRGlzcGxheU9iamVjdFwiO1xuaW1wb3J0IFV0aWxzIGZyb20gXCIuLi91dGlscy9pbmRleFwiO1xuaW1wb3J0IEdyYXBoaWNzIGZyb20gXCIuLi9ncmFwaGljcy9HcmFwaGljc1wiO1xuaW1wb3J0IF8gZnJvbSBcIi4uL3V0aWxzL3VuZGVyc2NvcmVcIjtcbmltcG9ydCB7U0hBUEVfQ09OVEVYVF9ERUZBVUxUfSBmcm9tIFwiLi4vY29uc3RcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGFwZSBleHRlbmRzIERpc3BsYXlPYmplY3RcbntcbiAgICBjb25zdHJ1Y3RvcihvcHQpe1xuXG4gICAgICAgIG9wdCA9IFV0aWxzLmNoZWNrT3B0KG9wdCk7XG4gICAgICAgIHZhciBfY29udGV4dCA9IF8uZXh0ZW5kKCBfLmNsb25lKFNIQVBFX0NPTlRFWFRfREVGQVVMVCkgLCBvcHQuY29udGV4dCApO1xuICAgICAgICBvcHQuY29udGV4dCA9IF9jb250ZXh0O1xuXG4gICAgICAgIHN1cGVyKCBvcHQgKTtcblxuICAgICAgICB0aGlzLmdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKCB0aGlzICk7XG5cbiAgICAgICAgLy/lhYPntKDmmK/lkKbmnIlob3ZlcuS6i+S7tiDlkowgY2hpY2vkuovku7bvvIznlLFhZGRFdmVuZXRMaXN0ZXLlkoxyZW1pdmVFdmVudExpc3RlcuadpeinpuWPkeS/ruaUuVxuICAgICAgICB0aGlzLl9ob3ZlcmFibGUgID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2NsaWNrYWJsZSAgPSBmYWxzZTtcblxuICAgICAgICAvL292ZXLnmoTml7blgJnlpoLmnpzmnInkv67mlLnmoLflvI/vvIzlsLHkuLp0cnVlXG4gICAgICAgIHRoaXMuX2hvdmVyQ2xhc3MgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ob3ZlckNsb25lICA9IHRydWU7ICAgIC8v5piv5ZCm5byA5ZCv5ZyoaG92ZXLnmoTml7blgJljbG9uZeS4gOS7veWIsGFjdGl2ZSBzdGFnZSDkuK0gXG4gICAgICAgIHRoaXMucG9pbnRDaGtQcmlvcml0eSA9IHRydWU7IC8v5Zyo6byg5qCHbW91c2VvdmVy5Yiw6K+l6IqC54K577yM54S25ZCObW91c2Vtb3Zl55qE5pe25YCZ77yM5piv5ZCm5LyY5YWI5qOA5rWL6K+l6IqC54K5XG5cbiAgICAgICAgLy/mi5bmi71kcmFn55qE5pe25YCZ5pi+56S65ZyoYWN0aXZTaGFwZeeahOWJr+acrFxuICAgICAgICB0aGlzLl9kcmFnRHVwbGljYXRlID0gbnVsbDtcblxuICAgICAgICAvL+WFg+e0oOaYr+WQpiDlvIDlkK8gZHJhZyDmi5bliqjvvIzov5nkuKrmnInnlKjmiLforr7nva7kvKDlhaVcbiAgICAgICAgLy9zZWxmLmRyYWdnYWJsZSA9IG9wdC5kcmFnZ2FibGUgfHwgZmFsc2U7XG5cbiAgICAgICAgdGhpcy50eXBlID0gdGhpcy50eXBlIHx8IFwic2hhcGVcIiA7XG4gICAgICAgIG9wdC5kcmF3ICYmICh0aGlzLmRyYXc9b3B0LmRyYXcpO1xuICAgICAgICBcbiAgICAgICAgLy/lpITnkIbmiYDmnInnmoTlm77lvaLkuIDkupvlhbHmnInnmoTlsZ7mgKfphY3nva4s5oqK6Zmk5byAaWQsY29udGV4dOS5i+WklueahOaJgOacieWxnuaAp++8jOWFqOmDqOaMgui9veWIsHRoaXPkuIrpnaJcbiAgICAgICAgdGhpcy5pbml0Q29tcFByb3BlcnR5KG9wdCk7XG5cbiAgICAgICAgdGhpcy5fcmVjdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaW5pdCgpXG4gICAge31cblxuICAgIGRyYXcoKVxuICAgIHt9XG5cbiAgICBpbml0Q29tcFByb3BlcnR5KG9wdClcbiAgICB7XG4gICAgICAgIGZvciggdmFyIGkgaW4gb3B0ICl7XG4gICAgICAgICAgIGlmKCBpICE9IFwiaWRcIiAmJiBpICE9IFwiY29udGV4dFwiKXtcbiAgICAgICAgICAgICAgIHRoaXNbaV0gPSBvcHRbaV07XG4gICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgLypcbiAgICAqIOeUu+iZmue6v1xuICAgICovXG4gICBkYXNoZWRMaW5lVG8oIHgxLCB5MSwgeDIsIHkyLCBkYXNoTGVuZ3RoICkgXG4gICB7XG4gICAgICAgICBkYXNoTGVuZ3RoID0gdHlwZW9mIGRhc2hMZW5ndGggPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgICA/IDMgOiBkYXNoTGVuZ3RoO1xuICAgICAgICAgZGFzaExlbmd0aCA9IE1hdGgubWF4KCBkYXNoTGVuZ3RoICwgdGhpcy5jb250ZXh0LmxpbmVXaWR0aCApO1xuICAgICAgICAgdmFyIGRlbHRhWCA9IHgyIC0geDE7XG4gICAgICAgICB2YXIgZGVsdGFZID0geTIgLSB5MTtcbiAgICAgICAgIHZhciBudW1EYXNoZXMgPSBNYXRoLmZsb29yKFxuICAgICAgICAgICAgIE1hdGguc3FydChkZWx0YVggKiBkZWx0YVggKyBkZWx0YVkgKiBkZWx0YVkpIC8gZGFzaExlbmd0aFxuICAgICAgICAgKTtcbiAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtRGFzaGVzOyArK2kpIHtcbiAgICAgICAgICAgICB2YXIgeCA9IHBhcnNlSW50KHgxICsgKGRlbHRhWCAvIG51bURhc2hlcykgKiBpKTtcbiAgICAgICAgICAgICB2YXIgeSA9IHBhcnNlSW50KHkxICsgKGRlbHRhWSAvIG51bURhc2hlcykgKiBpKTtcbiAgICAgICAgICAgICB0aGlzLmdyYXBoaWNzW2kgJSAyID09PSAwID8gJ21vdmVUbycgOiAnbGluZVRvJ10oIHggLCB5ICk7XG4gICAgICAgICAgICAgaWYoIGkgPT0gKG51bURhc2hlcy0xKSAmJiBpJTIgPT09IDApe1xuICAgICAgICAgICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbyggeDIgLCB5MiApO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgIH1cblxuICAgLypcbiAgICAq5LuOY3Bs6IqC54K55Lit6I635Y+W5YiwNOS4quaWueWQkeeahOi+ueeVjOiKgueCuVxuICAgICpAcGFyYW0gIGNvbnRleHQgXG4gICAgKlxuICAgICoqL1xuICAgZ2V0UmVjdEZvcm1Qb2ludExpc3QoIGNvbnRleHQgKVxuICAge1xuICAgICAgIHZhciBtaW5YID0gIE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgdmFyIG1heFggPSAgTnVtYmVyLk1JTl9WQUxVRTtcbiAgICAgICB2YXIgbWluWSA9ICBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgIHZhciBtYXhZID0gIE51bWJlci5NSU5fVkFMVUU7XG5cbiAgICAgICB2YXIgY3BsID0gY29udGV4dC5wb2ludExpc3Q7IC8vdGhpcy5nZXRjcGwoKTtcbiAgICAgICBmb3IodmFyIGkgPSAwLCBsID0gY3BsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICBpZiAoY3BsW2ldWzBdIDwgbWluWCkge1xuICAgICAgICAgICAgICAgbWluWCA9IGNwbFtpXVswXTtcbiAgICAgICAgICAgfVxuICAgICAgICAgICBpZiAoY3BsW2ldWzBdID4gbWF4WCkge1xuICAgICAgICAgICAgICAgbWF4WCA9IGNwbFtpXVswXTtcbiAgICAgICAgICAgfVxuICAgICAgICAgICBpZiAoY3BsW2ldWzFdIDwgbWluWSkge1xuICAgICAgICAgICAgICAgbWluWSA9IGNwbFtpXVsxXTtcbiAgICAgICAgICAgfVxuICAgICAgICAgICBpZiAoY3BsW2ldWzFdID4gbWF4WSkge1xuICAgICAgICAgICAgICAgbWF4WSA9IGNwbFtpXVsxXTtcbiAgICAgICAgICAgfVxuICAgICAgIH1cblxuICAgICAgIHZhciBsaW5lV2lkdGg7XG4gICAgICAgaWYgKGNvbnRleHQuc3Ryb2tlU3R5bGUgfHwgY29udGV4dC5maWxsU3R5bGUgICkge1xuICAgICAgICAgICBsaW5lV2lkdGggPSBjb250ZXh0LmxpbmVXaWR0aCB8fCAxO1xuICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgIGxpbmVXaWR0aCA9IDA7XG4gICAgICAgfVxuICAgICAgIHJldHVybiB7XG4gICAgICAgICAgIHggICAgICA6IE1hdGgucm91bmQobWluWCAtIGxpbmVXaWR0aCAvIDIpLFxuICAgICAgICAgICB5ICAgICAgOiBNYXRoLnJvdW5kKG1pblkgLSBsaW5lV2lkdGggLyAyKSxcbiAgICAgICAgICAgd2lkdGggIDogbWF4WCAtIG1pblggKyBsaW5lV2lkdGgsXG4gICAgICAgICAgIGhlaWdodCA6IG1heFkgLSBtaW5ZICsgbGluZVdpZHRoXG4gICAgICAgfTtcbiAgIH1cbn0iLCIvKipcclxuICogQ2FudmF4LS1UZXh0XHJcbiAqXHJcbiAqIEBhdXRob3Ig6YeK5YmRICjmnY7mtpssIGxpdGFvLmx0QGFsaWJhYmEtaW5jLmNvbSlcclxuICpcclxuICog5paH5pysIOexu1xyXG4gKiovXHJcbmltcG9ydCBEaXNwbGF5T2JqZWN0IGZyb20gXCIuL0Rpc3BsYXlPYmplY3RcIjtcclxuaW1wb3J0IFV0aWxzIGZyb20gXCIuLi91dGlscy9pbmRleFwiO1xyXG5pbXBvcnQgXyBmcm9tIFwiLi4vdXRpbHMvdW5kZXJzY29yZVwiO1xyXG5cclxudmFyIFRleHQgPSBmdW5jdGlvbih0ZXh0LCBvcHQpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHNlbGYudHlwZSA9IFwidGV4dFwiO1xyXG4gICAgc2VsZi5fcmVOZXdsaW5lID0gL1xccj9cXG4vO1xyXG4gICAgc2VsZi5mb250UHJvcGVydHMgPSBbXCJmb250U3R5bGVcIiwgXCJmb250VmFyaWFudFwiLCBcImZvbnRXZWlnaHRcIiwgXCJmb250U2l6ZVwiLCBcImZvbnRGYW1pbHlcIl07XHJcblxyXG4gICAgLy/lgZrkuIDmrKHnroDljZXnmoRvcHTlj4LmlbDmoKHpqozvvIzkv53or4HlnKjnlKjmiLfkuI3kvKBvcHTnmoTml7blgJkg5oiW6ICF5Lyg5LqGb3B05L2G5piv6YeM6Z2i5rKh5pyJY29udGV4dOeahOaXtuWAmeaKpemUmVxyXG4gICAgb3B0ID0gVXRpbHMuY2hlY2tPcHQob3B0KTtcclxuXHJcbiAgICBzZWxmLl9jb250ZXh0ID0gXy5leHRlbmQoe1xyXG4gICAgICAgIGZvbnRTaXplOiAxMywgLy/lrZfkvZPlpKflsI/pu5jorqQxM1xyXG4gICAgICAgIGZvbnRXZWlnaHQ6IFwibm9ybWFsXCIsXHJcbiAgICAgICAgZm9udEZhbWlseTogXCLlvq7ova/pm4Xpu5Esc2Fucy1zZXJpZlwiLFxyXG4gICAgICAgIHRleHREZWNvcmF0aW9uOiBudWxsLFxyXG4gICAgICAgIGZpbGxTdHlsZTogJ2JsYW5rJyxcclxuICAgICAgICBzdHJva2VTdHlsZTogbnVsbCxcclxuICAgICAgICBsaW5lV2lkdGg6IDAsXHJcbiAgICAgICAgbGluZUhlaWdodDogMS4yLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogbnVsbCxcclxuICAgICAgICB0ZXh0QmFja2dyb3VuZENvbG9yOiBudWxsXHJcbiAgICB9LCBvcHQuY29udGV4dCk7XHJcblxyXG4gICAgc2VsZi5fY29udGV4dC5mb250ID0gc2VsZi5fZ2V0Rm9udERlY2xhcmF0aW9uKCk7XHJcblxyXG4gICAgc2VsZi50ZXh0ID0gdGV4dC50b1N0cmluZygpO1xyXG5cclxuICAgIFRleHQuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBbb3B0XSk7XHJcbn07XHJcblxyXG5VdGlscy5jcmVhdENsYXNzKFRleHQsIERpc3BsYXlPYmplY3QsIHtcclxuICAgICR3YXRjaDogZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByZVZhbHVlKSB7XHJcbiAgICAgICAgLy9jb250ZXh05bGe5oCn5pyJ5Y+Y5YyW55qE55uR5ZCs5Ye95pWwXHJcbiAgICAgICAgaWYgKF8uaW5kZXhPZih0aGlzLmZvbnRQcm9wZXJ0cywgbmFtZSkgPj0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0W25hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIC8v5aaC5p6c5L+u5pS555qE5pivZm9udOeahOafkOS4quWGheWuue+8jOWwsemHjeaWsOe7hOijheS4gOmBjWZvbnTnmoTlgLzvvIxcclxuICAgICAgICAgICAgLy/nhLblkI7pgJrnn6XlvJXmk47ov5nmrKHlr7ljb250ZXh055qE5L+u5pS55LiN6ZyA6KaB5LiK5oql5b+D6LezXHJcbiAgICAgICAgICAgIHRoaXMuX25vdFdhdGNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5mb250ID0gdGhpcy5fZ2V0Rm9udERlY2xhcmF0aW9uKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC53aWR0aCA9IHRoaXMuZ2V0VGV4dFdpZHRoKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5oZWlnaHQgPSB0aGlzLmdldFRleHRIZWlnaHQoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgaW5pdDogZnVuY3Rpb24odGV4dCwgb3B0KSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjID0gdGhpcy5jb250ZXh0O1xyXG4gICAgICAgIGMud2lkdGggPSB0aGlzLmdldFRleHRXaWR0aCgpO1xyXG4gICAgICAgIGMuaGVpZ2h0ID0gdGhpcy5nZXRUZXh0SGVpZ2h0KCk7XHJcbiAgICB9LFxyXG4gICAgcmVuZGVyOiBmdW5jdGlvbihjdHgpIHtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHRoaXMuY29udGV4dC4kbW9kZWwpIHtcclxuICAgICAgICAgICAgaWYgKHAgaW4gY3R4KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocCAhPSBcInRleHRCYXNlbGluZVwiICYmIHRoaXMuY29udGV4dC4kbW9kZWxbcF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjdHhbcF0gPSB0aGlzLmNvbnRleHQuJG1vZGVsW3BdO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuX3JlbmRlclRleHQoY3R4LCB0aGlzLl9nZXRUZXh0TGluZXMoKSk7XHJcbiAgICB9LFxyXG4gICAgcmVzZXRUZXh0OiBmdW5jdGlvbih0ZXh0KSB7XHJcbiAgICAgICAgdGhpcy50ZXh0ID0gdGV4dC50b1N0cmluZygpO1xyXG4gICAgICAgIHRoaXMuaGVhcnRCZWF0KCk7XHJcbiAgICB9LFxyXG4gICAgZ2V0VGV4dFdpZHRoOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgd2lkdGggPSAwO1xyXG4gICAgICAgIFV0aWxzLl9waXhlbEN0eC5zYXZlKCk7XHJcbiAgICAgICAgVXRpbHMuX3BpeGVsQ3R4LmZvbnQgPSB0aGlzLmNvbnRleHQuZm9udDtcclxuICAgICAgICB3aWR0aCA9IHRoaXMuX2dldFRleHRXaWR0aChVdGlscy5fcGl4ZWxDdHgsIHRoaXMuX2dldFRleHRMaW5lcygpKTtcclxuICAgICAgICBVdGlscy5fcGl4ZWxDdHgucmVzdG9yZSgpO1xyXG4gICAgICAgIHJldHVybiB3aWR0aDtcclxuICAgIH0sXHJcbiAgICBnZXRUZXh0SGVpZ2h0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0VGV4dEhlaWdodChVdGlscy5fcGl4ZWxDdHgsIHRoaXMuX2dldFRleHRMaW5lcygpKTtcclxuICAgIH0sXHJcbiAgICBfZ2V0VGV4dExpbmVzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50ZXh0LnNwbGl0KHRoaXMuX3JlTmV3bGluZSk7XHJcbiAgICB9LFxyXG4gICAgX3JlbmRlclRleHQ6IGZ1bmN0aW9uKGN0eCwgdGV4dExpbmVzKSB7XHJcbiAgICAgICAgY3R4LnNhdmUoKTtcclxuICAgICAgICB0aGlzLl9yZW5kZXJUZXh0U3Ryb2tlKGN0eCwgdGV4dExpbmVzKTtcclxuICAgICAgICB0aGlzLl9yZW5kZXJUZXh0RmlsbChjdHgsIHRleHRMaW5lcyk7XHJcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgIH0sXHJcbiAgICBfZ2V0Rm9udERlY2xhcmF0aW9uOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGZvbnRBcnIgPSBbXTtcclxuXHJcbiAgICAgICAgXy5lYWNoKHRoaXMuZm9udFByb3BlcnRzLCBmdW5jdGlvbihwKSB7XHJcbiAgICAgICAgICAgIHZhciBmb250UCA9IHNlbGYuX2NvbnRleHRbcF07XHJcbiAgICAgICAgICAgIGlmIChwID09IFwiZm9udFNpemVcIikge1xyXG4gICAgICAgICAgICAgICAgZm9udFAgPSBwYXJzZUZsb2F0KGZvbnRQKSArIFwicHhcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvbnRQICYmIGZvbnRBcnIucHVzaChmb250UCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBmb250QXJyLmpvaW4oJyAnKTtcclxuXHJcbiAgICB9LFxyXG4gICAgX3JlbmRlclRleHRGaWxsOiBmdW5jdGlvbihjdHgsIHRleHRMaW5lcykge1xyXG4gICAgICAgIGlmICghdGhpcy5jb250ZXh0LmZpbGxTdHlsZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLl9ib3VuZGFyaWVzID0gW107XHJcbiAgICAgICAgdmFyIGxpbmVIZWlnaHRzID0gMDtcclxuICAgICAgICBcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGV4dExpbmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBoZWlnaHRPZkxpbmUgPSB0aGlzLl9nZXRIZWlnaHRPZkxpbmUoY3R4LCBpLCB0ZXh0TGluZXMpO1xyXG4gICAgICAgICAgICBsaW5lSGVpZ2h0cyArPSBoZWlnaHRPZkxpbmU7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJUZXh0TGluZShcclxuICAgICAgICAgICAgICAgICdmaWxsVGV4dCcsXHJcbiAgICAgICAgICAgICAgICBjdHgsXHJcbiAgICAgICAgICAgICAgICB0ZXh0TGluZXNbaV0sXHJcbiAgICAgICAgICAgICAgICAwLCAvL3RoaXMuX2dldExlZnRPZmZzZXQoKSxcclxuICAgICAgICAgICAgICAgIHRoaXMuX2dldFRvcE9mZnNldCgpICsgbGluZUhlaWdodHMsXHJcbiAgICAgICAgICAgICAgICBpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9yZW5kZXJUZXh0U3Ryb2tlOiBmdW5jdGlvbihjdHgsIHRleHRMaW5lcykge1xyXG4gICAgICAgIGlmICghdGhpcy5jb250ZXh0LnN0cm9rZVN0eWxlIHx8ICF0aGlzLmNvbnRleHQubGluZVdpZHRoKSByZXR1cm47XHJcblxyXG4gICAgICAgIHZhciBsaW5lSGVpZ2h0cyA9IDA7XHJcblxyXG4gICAgICAgIGN0eC5zYXZlKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuc3Ryb2tlRGFzaEFycmF5KSB7XHJcbiAgICAgICAgICAgIGlmICgxICYgdGhpcy5zdHJva2VEYXNoQXJyYXkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0cm9rZURhc2hBcnJheS5wdXNoLmFwcGx5KHRoaXMuc3Ryb2tlRGFzaEFycmF5LCB0aGlzLnN0cm9rZURhc2hBcnJheSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3VwcG9ydHNMaW5lRGFzaCAmJiBjdHguc2V0TGluZURhc2godGhpcy5zdHJva2VEYXNoQXJyYXkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0ZXh0TGluZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGhlaWdodE9mTGluZSA9IHRoaXMuX2dldEhlaWdodE9mTGluZShjdHgsIGksIHRleHRMaW5lcyk7XHJcbiAgICAgICAgICAgIGxpbmVIZWlnaHRzICs9IGhlaWdodE9mTGluZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlclRleHRMaW5lKFxyXG4gICAgICAgICAgICAgICAgJ3N0cm9rZVRleHQnLFxyXG4gICAgICAgICAgICAgICAgY3R4LFxyXG4gICAgICAgICAgICAgICAgdGV4dExpbmVzW2ldLFxyXG4gICAgICAgICAgICAgICAgMCwgLy90aGlzLl9nZXRMZWZ0T2Zmc2V0KCksXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9nZXRUb3BPZmZzZXQoKSArIGxpbmVIZWlnaHRzLFxyXG4gICAgICAgICAgICAgICAgaVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgIH0sXHJcbiAgICBfcmVuZGVyVGV4dExpbmU6IGZ1bmN0aW9uKG1ldGhvZCwgY3R4LCBsaW5lLCBsZWZ0LCB0b3AsIGxpbmVJbmRleCkge1xyXG4gICAgICAgIHRvcCAtPSB0aGlzLl9nZXRIZWlnaHRPZkxpbmUoKSAvIDQ7XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGV4dC50ZXh0QWxpZ24gIT09ICdqdXN0aWZ5Jykge1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJDaGFycyhtZXRob2QsIGN0eCwgbGluZSwgbGVmdCwgdG9wLCBsaW5lSW5kZXgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgbGluZVdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KGxpbmUpLndpZHRoO1xyXG4gICAgICAgIHZhciB0b3RhbFdpZHRoID0gdGhpcy5jb250ZXh0LndpZHRoO1xyXG5cclxuICAgICAgICBpZiAodG90YWxXaWR0aCA+IGxpbmVXaWR0aCkge1xyXG4gICAgICAgICAgICB2YXIgd29yZHMgPSBsaW5lLnNwbGl0KC9cXHMrLyk7XHJcbiAgICAgICAgICAgIHZhciB3b3Jkc1dpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KGxpbmUucmVwbGFjZSgvXFxzKy9nLCAnJykpLndpZHRoO1xyXG4gICAgICAgICAgICB2YXIgd2lkdGhEaWZmID0gdG90YWxXaWR0aCAtIHdvcmRzV2lkdGg7XHJcbiAgICAgICAgICAgIHZhciBudW1TcGFjZXMgPSB3b3Jkcy5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICB2YXIgc3BhY2VXaWR0aCA9IHdpZHRoRGlmZiAvIG51bVNwYWNlcztcclxuXHJcbiAgICAgICAgICAgIHZhciBsZWZ0T2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHdvcmRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJDaGFycyhtZXRob2QsIGN0eCwgd29yZHNbaV0sIGxlZnQgKyBsZWZ0T2Zmc2V0LCB0b3AsIGxpbmVJbmRleCk7XHJcbiAgICAgICAgICAgICAgICBsZWZ0T2Zmc2V0ICs9IGN0eC5tZWFzdXJlVGV4dCh3b3Jkc1tpXSkud2lkdGggKyBzcGFjZVdpZHRoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyQ2hhcnMobWV0aG9kLCBjdHgsIGxpbmUsIGxlZnQsIHRvcCwgbGluZUluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX3JlbmRlckNoYXJzOiBmdW5jdGlvbihtZXRob2QsIGN0eCwgY2hhcnMsIGxlZnQsIHRvcCkge1xyXG4gICAgICAgIGN0eFttZXRob2RdKGNoYXJzLCAwLCB0b3ApO1xyXG4gICAgfSxcclxuICAgIF9nZXRIZWlnaHRPZkxpbmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuZm9udFNpemUgKiB0aGlzLmNvbnRleHQubGluZUhlaWdodDtcclxuICAgIH0sXHJcbiAgICBfZ2V0VGV4dFdpZHRoOiBmdW5jdGlvbihjdHgsIHRleHRMaW5lcykge1xyXG4gICAgICAgIHZhciBtYXhXaWR0aCA9IGN0eC5tZWFzdXJlVGV4dCh0ZXh0TGluZXNbMF0gfHwgJ3wnKS53aWR0aDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMSwgbGVuID0gdGV4dExpbmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50TGluZVdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KHRleHRMaW5lc1tpXSkud2lkdGg7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50TGluZVdpZHRoID4gbWF4V2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIG1heFdpZHRoID0gY3VycmVudExpbmVXaWR0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWF4V2lkdGg7XHJcbiAgICB9LFxyXG4gICAgX2dldFRleHRIZWlnaHQ6IGZ1bmN0aW9uKGN0eCwgdGV4dExpbmVzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5mb250U2l6ZSAqIHRleHRMaW5lcy5sZW5ndGggKiB0aGlzLmNvbnRleHQubGluZUhlaWdodDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBUb3Agb2Zmc2V0XHJcbiAgICAgKi9cclxuICAgIF9nZXRUb3BPZmZzZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB0ID0gMDtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuY29udGV4dC50ZXh0QmFzZWxpbmUpIHtcclxuICAgICAgICAgICAgY2FzZSBcInRvcFwiOlxyXG4gICAgICAgICAgICAgICAgdCA9IDA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIm1pZGRsZVwiOlxyXG4gICAgICAgICAgICAgICAgdCA9IC10aGlzLmNvbnRleHQuaGVpZ2h0IC8gMjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiYm90dG9tXCI6XHJcbiAgICAgICAgICAgICAgICB0ID0gLXRoaXMuY29udGV4dC5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9LFxyXG4gICAgZ2V0UmVjdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGMgPSB0aGlzLmNvbnRleHQ7XHJcbiAgICAgICAgdmFyIHggPSAwO1xyXG4gICAgICAgIHZhciB5ID0gMDtcclxuICAgICAgICAvL+abtOWFt3RleHRBbGlnbiDlkowgdGV4dEJhc2VsaW5lIOmHjeaWsOefq+atoyB4eVxyXG4gICAgICAgIGlmIChjLnRleHRBbGlnbiA9PSBcImNlbnRlclwiKSB7XHJcbiAgICAgICAgICAgIHggPSAtYy53aWR0aCAvIDI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoYy50ZXh0QWxpZ24gPT0gXCJyaWdodFwiKSB7XHJcbiAgICAgICAgICAgIHggPSAtYy53aWR0aDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChjLnRleHRCYXNlbGluZSA9PSBcIm1pZGRsZVwiKSB7XHJcbiAgICAgICAgICAgIHkgPSAtYy5oZWlnaHQgLyAyO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKGMudGV4dEJhc2VsaW5lID09IFwiYm90dG9tXCIpIHtcclxuICAgICAgICAgICAgeSA9IC1jLmhlaWdodDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB4OiB4LFxyXG4gICAgICAgICAgICB5OiB5LFxyXG4gICAgICAgICAgICB3aWR0aDogYy53aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiBjLmhlaWdodFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IFRleHQ7IiwiXG4vKipcbiAqIENhbnZheFxuICpcbiAqIEBhdXRob3Ig6YeK5YmRICjmnY7mtpssIGxpdGFvLmx0QGFsaWJhYmEtaW5jLmNvbSlcbiAqXG4gKiDlkJHph4/mk43kvZznsbtcbiAqICovXG5pbXBvcnQgXyBmcm9tIFwiLi4vdXRpbHMvdW5kZXJzY29yZVwiO1xuXG5mdW5jdGlvbiBWZWN0b3IoeCwgeSkge1xuICAgIHZhciB2eCA9IDAsdnkgPSAwO1xuICAgIGlmICggYXJndW1lbnRzLmxlbmd0aCA9PSAxICYmIF8uaXNPYmplY3QoIHggKSApe1xuICAgICAgICB2YXIgYXJnID0gYXJndW1lbnRzWzBdO1xuICAgICAgICBpZiggXy5pc0FycmF5KCBhcmcgKSApe1xuICAgICAgICAgICB2eCA9IGFyZ1swXTtcbiAgICAgICAgICAgdnkgPSBhcmdbMV07XG4gICAgICAgIH0gZWxzZSBpZiggYXJnLmhhc093blByb3BlcnR5KFwieFwiKSAmJiBhcmcuaGFzT3duUHJvcGVydHkoXCJ5XCIpICkge1xuICAgICAgICAgICB2eCA9IGFyZy54O1xuICAgICAgICAgICB2eSA9IGFyZy55O1xuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2F4ZXMgPSBbdngsIHZ5XTtcbn07XG5WZWN0b3IucHJvdG90eXBlID0ge1xuICAgIGRpc3RhbmNlOiBmdW5jdGlvbiAodikge1xuICAgICAgICB2YXIgeCA9IHRoaXMuX2F4ZXNbMF0gLSB2Ll9heGVzWzBdO1xuICAgICAgICB2YXIgeSA9IHRoaXMuX2F4ZXNbMV0gLSB2Ll9heGVzWzFdO1xuXG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoKHggKiB4KSArICh5ICogeSkpO1xuICAgIH1cbn07XG5leHBvcnQgZGVmYXVsdCBWZWN0b3I7IiwiLyoqXG4gKiBDYW52YXhcbiAqXG4gKiBAYXV0aG9yIOmHiuWJkSAo5p2O5rabLCBsaXRhby5sdEBhbGliYWJhLWluYy5jb20pXG4gKlxuICog5aSE55CG5Li65bmz5ruR57q/5p2hXG4gKi9cbmltcG9ydCBWZWN0b3IgZnJvbSBcIi4vVmVjdG9yXCI7XG5pbXBvcnQgXyBmcm9tIFwiLi4vdXRpbHMvdW5kZXJzY29yZVwiO1xuXG4vKipcbiAqIEBpbm5lclxuICovXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZShwMCwgcDEsIHAyLCBwMywgdCwgdDIsIHQzKSB7XG4gICAgdmFyIHYwID0gKHAyIC0gcDApICogMC4yNTtcbiAgICB2YXIgdjEgPSAocDMgLSBwMSkgKiAwLjI1O1xuICAgIHJldHVybiAoMiAqIChwMSAtIHAyKSArIHYwICsgdjEpICogdDMgXG4gICAgICAgICAgICsgKC0gMyAqIChwMSAtIHAyKSAtIDIgKiB2MCAtIHYxKSAqIHQyXG4gICAgICAgICAgICsgdjAgKiB0ICsgcDE7XG59XG4vKipcbiAqIOWkmue6v+auteW5s+a7keabsue6vyBcbiAqIG9wdCA9PT4gcG9pbnRzICwgaXNMb29wXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICggb3B0ICkge1xuICAgIHZhciBwb2ludHMgPSBvcHQucG9pbnRzO1xuICAgIHZhciBpc0xvb3AgPSBvcHQuaXNMb29wO1xuICAgIHZhciBzbW9vdGhGaWx0ZXIgPSBvcHQuc21vb3RoRmlsdGVyO1xuXG4gICAgdmFyIGxlbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgaWYoIGxlbiA9PSAxICl7XG4gICAgICAgIHJldHVybiBwb2ludHM7XG4gICAgfVxuICAgIHZhciByZXQgPSBbXTtcbiAgICB2YXIgZGlzdGFuY2UgID0gMDtcbiAgICB2YXIgcHJlVmVydG9yID0gbmV3IFZlY3RvciggcG9pbnRzWzBdICk7XG4gICAgdmFyIGlWdG9yICAgICA9IG51bGxcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlWdG9yID0gbmV3IFZlY3Rvcihwb2ludHNbaV0pO1xuICAgICAgICBkaXN0YW5jZSArPSBwcmVWZXJ0b3IuZGlzdGFuY2UoIGlWdG9yICk7XG4gICAgICAgIHByZVZlcnRvciA9IGlWdG9yO1xuICAgIH1cblxuICAgIHByZVZlcnRvciA9IG51bGw7XG4gICAgaVZ0b3IgICAgID0gbnVsbDtcblxuXG4gICAgLy/ln7rmnKzkuIrnrYnkuo7mm7LnjodcbiAgICB2YXIgc2VncyA9IGRpc3RhbmNlIC8gNjtcblxuICAgIHNlZ3MgPSBzZWdzIDwgbGVuID8gbGVuIDogc2VncztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ3M7IGkrKykge1xuICAgICAgICB2YXIgcG9zID0gaSAvIChzZWdzLTEpICogKGlzTG9vcCA/IGxlbiA6IGxlbiAtIDEpO1xuICAgICAgICB2YXIgaWR4ID0gTWF0aC5mbG9vcihwb3MpO1xuXG4gICAgICAgIHZhciB3ID0gcG9zIC0gaWR4O1xuXG4gICAgICAgIHZhciBwMDtcbiAgICAgICAgdmFyIHAxID0gcG9pbnRzW2lkeCAlIGxlbl07XG4gICAgICAgIHZhciBwMjtcbiAgICAgICAgdmFyIHAzO1xuICAgICAgICBpZiAoIWlzTG9vcCkge1xuICAgICAgICAgICAgcDAgPSBwb2ludHNbaWR4ID09PSAwID8gaWR4IDogaWR4IC0gMV07XG4gICAgICAgICAgICBwMiA9IHBvaW50c1tpZHggPiBsZW4gLSAyID8gbGVuIC0gMSA6IGlkeCArIDFdO1xuICAgICAgICAgICAgcDMgPSBwb2ludHNbaWR4ID4gbGVuIC0gMyA/IGxlbiAtIDEgOiBpZHggKyAyXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHAwID0gcG9pbnRzWyhpZHggLTEgKyBsZW4pICUgbGVuXTtcbiAgICAgICAgICAgIHAyID0gcG9pbnRzWyhpZHggKyAxKSAlIGxlbl07XG4gICAgICAgICAgICBwMyA9IHBvaW50c1soaWR4ICsgMikgJSBsZW5dO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHcyID0gdyAqIHc7XG4gICAgICAgIHZhciB3MyA9IHcgKiB3MjtcblxuICAgICAgICB2YXIgcnAgPSBbXG4gICAgICAgICAgICAgICAgaW50ZXJwb2xhdGUocDBbMF0sIHAxWzBdLCBwMlswXSwgcDNbMF0sIHcsIHcyLCB3MyksXG4gICAgICAgICAgICAgICAgaW50ZXJwb2xhdGUocDBbMV0sIHAxWzFdLCBwMlsxXSwgcDNbMV0sIHcsIHcyLCB3MylcbiAgICAgICAgICAgICAgICBdO1xuXG4gICAgICAgIF8uaXNGdW5jdGlvbihzbW9vdGhGaWx0ZXIpICYmIHNtb290aEZpbHRlciggcnAgKTtcblxuICAgICAgICByZXQucHVzaCggcnAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn07IiwiLyoqXG4gKiBDYW52YXhcbiAqXG4gKiBAYXV0aG9yIOmHiuWJkSAo5p2O5rabLCBsaXRhby5sdEBhbGliYWJhLWluYy5jb20pXG4gKlxuICog5pWw5a2mIOexu1xuICpcbiAqKi9cblxuaW1wb3J0IFNtb290aFNwbGluZSBmcm9tIFwiLi4vZ2VvbS9TbW9vdGhTcGxpbmVcIjtcblxuXG52YXIgX2NhY2hlID0ge1xuICAgIHNpbiA6IHt9LCAgICAgLy9zaW7nvJPlrZhcbiAgICBjb3MgOiB7fSAgICAgIC8vY29z57yT5a2YXG59O1xudmFyIF9yYWRpYW5zID0gTWF0aC5QSSAvIDE4MDtcblxuLyoqXG4gKiBAcGFyYW0gYW5nbGUg5byn5bqm77yI6KeS5bqm77yJ5Y+C5pWwXG4gKiBAcGFyYW0gaXNEZWdyZWVzIGFuZ2xl5Y+C5pWw5piv5ZCm5Li66KeS5bqm6K6h566X77yM6buY6K6k5Li6ZmFsc2XvvIxhbmdsZeS4uuS7peW8p+W6puiuoemHj+eahOinkuW6plxuICovXG5mdW5jdGlvbiBzaW4oYW5nbGUsIGlzRGVncmVlcykge1xuICAgIGFuZ2xlID0gKGlzRGVncmVlcyA/IGFuZ2xlICogX3JhZGlhbnMgOiBhbmdsZSkudG9GaXhlZCg0KTtcbiAgICBpZih0eXBlb2YgX2NhY2hlLnNpblthbmdsZV0gPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgX2NhY2hlLnNpblthbmdsZV0gPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgfVxuICAgIHJldHVybiBfY2FjaGUuc2luW2FuZ2xlXTtcbn1cblxuLyoqXG4gKiBAcGFyYW0gcmFkaWFucyDlvKfluqblj4LmlbBcbiAqL1xuZnVuY3Rpb24gY29zKGFuZ2xlLCBpc0RlZ3JlZXMpIHtcbiAgICBhbmdsZSA9IChpc0RlZ3JlZXMgPyBhbmdsZSAqIF9yYWRpYW5zIDogYW5nbGUpLnRvRml4ZWQoNCk7XG4gICAgaWYodHlwZW9mIF9jYWNoZS5jb3NbYW5nbGVdID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIF9jYWNoZS5jb3NbYW5nbGVdID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgIH1cbiAgICByZXR1cm4gX2NhY2hlLmNvc1thbmdsZV07XG59XG5cbi8qKlxuICog6KeS5bqm6L2s5byn5bqmXG4gKiBAcGFyYW0ge09iamVjdH0gYW5nbGVcbiAqL1xuZnVuY3Rpb24gZGVncmVlVG9SYWRpYW4oYW5nbGUpIHtcbiAgICByZXR1cm4gYW5nbGUgKiBfcmFkaWFucztcbn1cblxuLyoqXG4gKiDlvKfluqbovazop5LluqZcbiAqIEBwYXJhbSB7T2JqZWN0fSBhbmdsZVxuICovXG5mdW5jdGlvbiByYWRpYW5Ub0RlZ3JlZShhbmdsZSkge1xuICAgIHJldHVybiBhbmdsZSAvIF9yYWRpYW5zO1xufVxuXG4vKlxuICog5qCh6aqM6KeS5bqm5YiwMzYw5bqm5YaFXG4gKiBAcGFyYW0ge2FuZ2xlfSBudW1iZXJcbiAqL1xuZnVuY3Rpb24gZGVncmVlVG8zNjAoIGFuZ2xlICkge1xuICAgIHZhciByZUFuZyA9ICgzNjAgKyAgYW5nbGUgICUgMzYwKSAlIDM2MDsvL01hdGguYWJzKDM2MCArIE1hdGguY2VpbCggYW5nbGUgKSAlIDM2MCkgJSAzNjA7XG4gICAgaWYoIHJlQW5nID09IDAgJiYgYW5nbGUgIT09IDAgKXtcbiAgICAgICAgcmVBbmcgPSAzNjBcbiAgICB9XG4gICAgcmV0dXJuIHJlQW5nO1xufVxuXG5mdW5jdGlvbiBnZXRJc2dvblBvaW50TGlzdCggbiAsIHIgKXtcbiAgICB2YXIgcG9pbnRMaXN0ID0gW107XG4gICAgdmFyIGRTdGVwID0gMiAqIE1hdGguUEkgLyBuO1xuICAgIHZhciBiZWdpbkRlZyA9IC1NYXRoLlBJIC8gMjtcbiAgICB2YXIgZGVnID0gYmVnaW5EZWc7XG4gICAgZm9yICh2YXIgaSA9IDAsIGVuZCA9IG47IGkgPCBlbmQ7IGkrKykge1xuICAgICAgICBwb2ludExpc3QucHVzaChbciAqIE1hdGguY29zKGRlZyksIHIgKiBNYXRoLnNpbihkZWcpXSk7XG4gICAgICAgIGRlZyArPSBkU3RlcDtcbiAgICB9O1xuICAgIHJldHVybiBwb2ludExpc3Q7XG59XG5cbmZ1bmN0aW9uIGdldFNtb290aFBvaW50TGlzdCggcExpc3QsIHNtb290aEZpbHRlciApe1xuICAgIC8vc21vb3RoRmlsdGVyIC0tIOavlOWmguWcqOaKmOe6v+WbvuS4reOAguS8muS8oOS4gOS4qnNtb290aEZpbHRlcui/h+adpeWBmnBvaW5055qE57qg5q2j44CCXG4gICAgLy/orql55LiN6IO96LaF6L+H5bqV6YOo55qE5Y6f54K5XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgICAgcG9pbnRzOiBwTGlzdFxuICAgIH1cbiAgICBpZiAoXy5pc0Z1bmN0aW9uKHNtb290aEZpbHRlcikpIHtcbiAgICAgICAgb2JqLnNtb290aEZpbHRlciA9IHNtb290aEZpbHRlcjtcbiAgICB9XG5cbiAgICB2YXIgY3VyckwgPSBTbW9vdGhTcGxpbmUob2JqKTtcbiAgICBpZiAocExpc3QgJiYgcExpc3QubGVuZ3RoPjApIHtcbiAgICAgICAgY3VyckwucHVzaCggcExpc3RbcExpc3QubGVuZ3RoIC0gMV0gKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGN1cnJMO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgUEkgIDogTWF0aC5QSSAgLFxuICAgIHNpbiA6IHNpbiAgICAgICxcbiAgICBjb3MgOiBjb3MgICAgICAsXG4gICAgZGVncmVlVG9SYWRpYW4gOiBkZWdyZWVUb1JhZGlhbixcbiAgICByYWRpYW5Ub0RlZ3JlZSA6IHJhZGlhblRvRGVncmVlLFxuICAgIGRlZ3JlZVRvMzYwICAgIDogZGVncmVlVG8zNjAsXG4gICAgZ2V0SXNnb25Qb2ludExpc3QgOiBnZXRJc2dvblBvaW50TGlzdCxcbiAgICBnZXRTbW9vdGhQb2ludExpc3Q6IGdldFNtb290aFBvaW50TGlzdCAgIFxufTtcblxuIiwiLyoqXHJcbiAqIENhbnZheFxyXG4gKlxyXG4gKiBAYXV0aG9yIOmHiuWJkSAo5p2O5rabLCBsaXRhby5sdEBhbGliYWJhLWluYy5jb20pXHJcbiAqXHJcbiAqIOaKmOe6vyDnsbtcclxuICpcclxuICog5a+55bqUY29udGV4dOeahOWxnuaAp+aciVxyXG4gKiBAcG9pbnRMaXN0IOWQhOS4qumhtuinkuWdkOagh1xyXG4gKiovXHJcbmltcG9ydCBTaGFwZSBmcm9tIFwiLi4vZGlzcGxheS9TaGFwZVwiO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4uL3V0aWxzL2luZGV4XCI7XHJcbmltcG9ydCBfIGZyb20gXCIuLi91dGlscy91bmRlcnNjb3JlXCI7XHJcbmltcG9ydCBfTWF0aCBmcm9tIFwiLi4vZ2VvbS9NYXRoXCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyb2tlbkxpbmUgZXh0ZW5kcyBTaGFwZVxyXG57XHJcbiAgICBjb25zdHJ1Y3RvcihvcHQgLCBhdHlwZSl7XHJcbiAgICAgICAgb3B0ID0gVXRpbHMuY2hlY2tPcHQob3B0KTtcclxuICAgICAgICB2YXIgX2NvbnRleHQgPSBfLmV4dGVuZCh7XHJcbiAgICAgICAgICAgIGxpbmVUeXBlOiBudWxsLFxyXG4gICAgICAgICAgICBzbW9vdGg6IGZhbHNlLFxyXG4gICAgICAgICAgICBwb2ludExpc3Q6IFtdLCAvL3tBcnJheX0gIC8vIOW/hemhu++8jOWQhOS4qumhtuinkuWdkOagh1xyXG4gICAgICAgICAgICBzbW9vdGhGaWx0ZXI6IFV0aWxzLl9fZW1wdHlGdW5jXHJcbiAgICAgICAgfSwgb3B0LmNvbnRleHQgKTtcclxuXHJcbiAgICAgICAgaWYoIGF0eXBlICE9PSBcImNsb25lXCIgJiYgX2NvbnRleHQuc21vb3RoICl7XHJcbiAgICAgICAgICAgIF9jb250ZXh0LnBvaW50TGlzdCA9IF9NYXRoLmdldFNtb290aFBvaW50TGlzdCggX2NvbnRleHQucG9pbnRMaXN0ICk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgb3B0LmNvbnRleHQgPSBfY29udGV4dDtcclxuICAgICAgICBcclxuICAgICAgICBzdXBlcihvcHQpO1xyXG5cclxuICAgICAgICB0aGlzLnR5cGUgPSBcImJyb2tlbmxpbmVcIjtcclxuICAgICAgICB0aGlzLmlkID0gVXRpbHMuY3JlYXRlSWQodGhpcy50eXBlKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRHcmFwaGljcygpO1xyXG4gICAgfVxyXG5cclxuICAgICR3YXRjaChuYW1lLCB2YWx1ZSwgcHJlVmFsdWUpIFxyXG4gICAge1xyXG4gICAgICAgIGlmIChuYW1lID09IFwicG9pbnRMaXN0XCIgfHwgbmFtZSA9PSBcInNtb290aFwiIHx8IG5hbWUgPT0gXCJsaW5lVHlwZVwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0R3JhcGhpY3MoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHNldEdyYXBoaWNzKCkgXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5jbGVhcigpO1xyXG5cclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5jb250ZXh0O1xyXG4gICAgICAgIGNvbnN0IHBvaW50TGlzdCA9IGNvbnRleHQucG9pbnRMaXN0O1xyXG4gICAgICAgIGlmIChwb2ludExpc3QubGVuZ3RoIDwgMikge1xyXG4gICAgICAgICAgICAvL+WwkeS6jjLkuKrngrnlsLHkuI3nlLvkuoZ+XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKCFjb250ZXh0LmxpbmVUeXBlIHx8IGNvbnRleHQubGluZVR5cGUgPT0gJ3NvbGlkJykge1xyXG4gICAgICAgICAgICAvL+m7mOiupOS4uuWunue6v1xyXG4gICAgICAgICAgICAvL1RPRE8655uu5YmN5aaC5p6cIOacieiuvue9rnNtb290aCDnmoTmg4XlhrXkuIvmmK/kuI3mlK/mjIHomZrnur/nmoRcclxuICAgICAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8ocG9pbnRMaXN0WzBdWzBdLCBwb2ludExpc3RbMF1bMV0pO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMSwgbCA9IHBvaW50TGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHBvaW50TGlzdFtpXVswXSwgcG9pbnRMaXN0W2ldWzFdKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubGluZVR5cGUgPT0gJ2Rhc2hlZCcgfHwgY29udGV4dC5saW5lVHlwZSA9PSAnZG90dGVkJykge1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dC5zbW9vdGgpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHNpID0gMCwgc2wgPSBwb2ludExpc3QubGVuZ3RoOyBzaSA8IHNsOyBzaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNpID09IHNsLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyggcG9pbnRMaXN0W3NpXVswXSAsIHBvaW50TGlzdFtzaV1bMV0gKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbyggcG9pbnRMaXN0W3NpKzFdWzBdICwgcG9pbnRMaXN0W3NpKzFdWzFdICk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2krPTE7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy/nlLvomZrnur/nmoTmlrnms5UgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8ocG9pbnRMaXN0WzBdWzBdLCBwb2ludExpc3RbMF1bMV0pO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDEsIGwgPSBwb2ludExpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb21YID0gcG9pbnRMaXN0W2kgLSAxXVswXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdG9YID0gcG9pbnRMaXN0W2ldWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmcm9tWSA9IHBvaW50TGlzdFtpIC0gMV1bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvWSA9IHBvaW50TGlzdFtpXVsxXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhc2hlZExpbmVUbyhmcm9tWCwgZnJvbVksIHRvWCwgdG9ZLCA1KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxufSIsIi8qKlxyXG4gKiBDYW52YXhcclxuICpcclxuICogQGF1dGhvciDph4rliZEgKOadjua2mywgbGl0YW8ubHRAYWxpYmFiYS1pbmMuY29tKVxyXG4gKlxyXG4gKiDlnIblvaIg57G7XHJcbiAqXHJcbiAqIOWdkOagh+WOn+eCueWGjeWchuW/g1xyXG4gKlxyXG4gKiDlr7nlupRjb250ZXh055qE5bGe5oCn5pyJXHJcbiAqIEByIOWchuWNiuW+hFxyXG4gKiovXHJcbmltcG9ydCBTaGFwZSBmcm9tIFwiLi4vZGlzcGxheS9TaGFwZVwiO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4uL3V0aWxzL2luZGV4XCI7XHJcbmltcG9ydCBfIGZyb20gXCIuLi91dGlscy91bmRlcnNjb3JlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaXJjbGUgZXh0ZW5kcyBTaGFwZVxyXG57XHJcbiAgICBjb25zdHJ1Y3Rvciggb3B0IClcclxuICAgIHtcclxuICAgICAgICBvcHQgPSBVdGlscy5jaGVja09wdCggb3B0ICk7XHJcbiAgICAgICAgLy/pu5jorqTmg4XlhrXkuIvpnaLvvIxjaXJjbGXkuI3pnIDopoHmiop4eei/m+ihjHBhcmVudEludOi9rOaNolxyXG4gICAgICAgICggXCJ4eVRvSW50XCIgaW4gb3B0ICkgfHwgKCBvcHQueHlUb0ludCA9IGZhbHNlICk7XHJcbiAgICAgICAgdmFyIF9jb250ZXh0ID0gXy5leHRlbmQoe1xyXG4gICAgICAgICAgICByIDogMCAgIC8ve251bWJlcn0sICAvLyDlv4XpobvvvIzlnIbljYrlvoRcclxuICAgICAgICB9ICwgb3B0LmNvbnRleHQpO1xyXG5cclxuICAgICAgICBvcHQuY29udGV4dCA9IF9jb250ZXh0O1xyXG5cclxuICAgICAgICBzdXBlciggb3B0ICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy50eXBlID0gXCJjaXJjbGVcIjtcclxuICAgICAgICB0aGlzLmlkID0gVXRpbHMuY3JlYXRlSWQodGhpcy50eXBlKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRHcmFwaGljcygpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAkd2F0Y2gobmFtZSwgdmFsdWUsIHByZVZhbHVlKSBcclxuICAgIHtcclxuICAgICAgICBpZiAoIG5hbWUgPT0gXCJyXCIgKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0R3JhcGhpY3MoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0R3JhcGhpY3MoKSBcclxuICAgIHtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmNsZWFyKCk7XHJcbiAgICAgICAgLy90aGlzLmdyYXBoaWNzLmFyYygwICwgMCwgdGhpcy5jb250ZXh0LnIsIDAsIE1hdGguUEkgKiAyLCB0cnVlKTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmRyYXdDaXJjbGUoMCwgMCwgdGhpcy5jb250ZXh0LnIpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuIiwiLyoqXHJcbiAqIENhbnZheFxyXG4gKlxyXG4gKiBAYXV0aG9yIOmHiuWJkSAo5p2O5rabLCBsaXRhby5sdEBhbGliYWJhLWluYy5jb20pXHJcbiAqXHJcbiAqIFBhdGgg57G777yMUGF0aOS4u+imgeeUqOS6juaKinN2Z3BhdGgg5a2X56ym5Liy6L2s5o2i5Li6cG9pbnRMaXN077yM54S25ZCO5p6E5bu6Z3JhcGhpY3NEYXRhXHJcbiAqXHJcbiAqIOWvueW6lGNvbnRleHTnmoTlsZ7mgKfmnIlcclxuICogQHBhdGggcGF0aOS4slxyXG4gKiovXHJcbmltcG9ydCBTaGFwZSBmcm9tIFwiLi4vZGlzcGxheS9TaGFwZVwiO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4uL3V0aWxzL2luZGV4XCI7XHJcbmltcG9ydCBfIGZyb20gXCIuLi91dGlscy91bmRlcnNjb3JlXCI7XHJcbmltcG9ydCBNYXRyaXggZnJvbSBcIi4uL2dlb20vTWF0cml4XCI7XHJcbmltcG9ydCBCZXppZXIgZnJvbSBcIi4uL2dlb20vYmV6aWVyXCI7XHJcbmltcG9ydCB7IEFyYyB9IGZyb20gJy4uL21hdGgvaW5kZXgnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF0aCBleHRlbmRzIFNoYXBlXHJcbntcclxuICAgIGNvbnN0cnVjdG9yKG9wdCl7XHJcbiAgICAgICAgXHJcbiAgICAgICAgb3B0ID0gVXRpbHMuY2hlY2tPcHQob3B0KTtcclxuICAgICAgICB2YXIgX2NvbnRleHQgPSBfLmV4dGVuZCh7XHJcbiAgICAgICAgICAgIHBvaW50TGlzdDogW10sIC8v5LuO5LiL6Z2i55qEcGF0aOS4reiuoeeul+W+l+WIsOeahOi+ueeVjOeCueeahOmbhuWQiFxyXG4gICAgICAgICAgICBwYXRoOiBcIlwiIC8v5a2X56ym5LiyIOW/hemhu++8jOi3r+W+hOOAguS+i+WmgjpNIDAgMCBMIDAgMTAgTCAxMCAxMCBaICjkuIDkuKrkuInop5LlvaIpXHJcbiAgICAgICAgICAgICAgICAvL00gPSBtb3ZldG9cclxuICAgICAgICAgICAgICAgIC8vTCA9IGxpbmV0b1xyXG4gICAgICAgICAgICAgICAgLy9IID0gaG9yaXpvbnRhbCBsaW5ldG9cclxuICAgICAgICAgICAgICAgIC8vViA9IHZlcnRpY2FsIGxpbmV0b1xyXG4gICAgICAgICAgICAgICAgLy9DID0gY3VydmV0b1xyXG4gICAgICAgICAgICAgICAgLy9TID0gc21vb3RoIGN1cnZldG9cclxuICAgICAgICAgICAgICAgIC8vUSA9IHF1YWRyYXRpYyBCZWx6aWVyIGN1cnZlXHJcbiAgICAgICAgICAgICAgICAvL1QgPSBzbW9vdGggcXVhZHJhdGljIEJlbHppZXIgY3VydmV0b1xyXG4gICAgICAgICAgICAgICAgLy9aID0gY2xvc2VwYXRoXHJcbiAgICAgICAgfSAsIG9wdC5jb250ZXh0KTtcclxuICAgICAgICBvcHQuY29udGV4dCA9IF9jb250ZXh0O1xyXG5cclxuICAgICAgICBzdXBlciggb3B0ICk7XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChcImRyYXdUeXBlT25seVwiIGluIG9wdCkge1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdUeXBlT25seSA9IG9wdC5kcmF3VHlwZU9ubHk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5fX3BhcnNlUGF0aERhdGEgPSBudWxsO1xyXG4gICAgICAgIFxyXG5cclxuICAgICAgICB0aGlzLnR5cGUgPSBcInBhdGhcIjtcclxuICAgICAgICB0aGlzLmlkID0gVXRpbHMuY3JlYXRlSWQodGhpcy50eXBlKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRHcmFwaGljcygpO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgICR3YXRjaChuYW1lLCB2YWx1ZSwgcHJlVmFsdWUpIFxyXG4gICAge1xyXG4gICAgICAgIGlmIChuYW1lID09IFwicGF0aFwiKSB7IC8v5aaC5p6ccGF0aOacieWPmOWKqO+8jOmcgOimgeiHquWKqOiuoeeul+aWsOeahHBvaW50TGlzdFxyXG4gICAgICAgICAgICB0aGlzLnNldEdyYXBoaWNzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgX3BhcnNlUGF0aERhdGEoZGF0YSkgXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKHRoaXMuX19wYXJzZVBhdGhEYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fcGFyc2VQYXRoRGF0YTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICghZGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvL+WIhuaLhuWtkOWIhue7hFxyXG4gICAgICAgIHRoaXMuX19wYXJzZVBhdGhEYXRhID0gW107XHJcbiAgICAgICAgdmFyIHBhdGhzID0gXy5jb21wYWN0KGRhdGEucmVwbGFjZSgvW01tXS9nLCBcIlxcXFxyJCZcIikuc3BsaXQoJ1xcXFxyJykpO1xyXG4gICAgICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICAgICAgXy5lYWNoKHBhdGhzLCBmdW5jdGlvbihwYXRoU3RyKSB7XHJcbiAgICAgICAgICAgIG1lLl9fcGFyc2VQYXRoRGF0YS5wdXNoKG1lLl9wYXJzZUNoaWxkUGF0aERhdGEocGF0aFN0cikpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9fcGFyc2VQYXRoRGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBfcGFyc2VDaGlsZFBhdGhEYXRhKGRhdGEpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gY29tbWFuZCBzdHJpbmdcclxuICAgICAgICB2YXIgY3MgPSBkYXRhO1xyXG4gICAgICAgIC8vIGNvbW1hbmQgY2hhcnNcclxuICAgICAgICB2YXIgY2MgPSBbXHJcbiAgICAgICAgICAgICdtJywgJ00nLCAnbCcsICdMJywgJ3YnLCAnVicsICdoJywgJ0gnLCAneicsICdaJyxcclxuICAgICAgICAgICAgJ2MnLCAnQycsICdxJywgJ1EnLCAndCcsICdUJywgJ3MnLCAnUycsICdhJywgJ0EnXHJcbiAgICAgICAgXTtcclxuICAgICAgICBjcyA9IGNzLnJlcGxhY2UoLyAgL2csICcgJyk7XHJcbiAgICAgICAgY3MgPSBjcy5yZXBsYWNlKC8gL2csICcsJyk7XHJcbiAgICAgICAgLy9jcyA9IGNzLnJlcGxhY2UoLyguKS0vZywgXCIkMSwtXCIpO1xyXG4gICAgICAgIGNzID0gY3MucmVwbGFjZSgvKFxcZCktL2csICckMSwtJyk7XHJcbiAgICAgICAgY3MgPSBjcy5yZXBsYWNlKC8sLC9nLCAnLCcpO1xyXG4gICAgICAgIHZhciBuO1xyXG4gICAgICAgIC8vIGNyZWF0ZSBwaXBlcyBzbyB0aGF0IHdlIGNhbiBzcGxpdCB0aGUgZGF0YVxyXG4gICAgICAgIGZvciAobiA9IDA7IG4gPCBjYy5sZW5ndGg7IG4rKykge1xyXG4gICAgICAgICAgICBjcyA9IGNzLnJlcGxhY2UobmV3IFJlZ0V4cChjY1tuXSwgJ2cnKSwgJ3wnICsgY2Nbbl0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjcmVhdGUgYXJyYXlcclxuICAgICAgICB2YXIgYXJyID0gY3Muc3BsaXQoJ3wnKTtcclxuICAgICAgICB2YXIgY2EgPSBbXTtcclxuICAgICAgICAvLyBpbml0IGNvbnRleHQgcG9pbnRcclxuICAgICAgICB2YXIgY3B4ID0gMDtcclxuICAgICAgICB2YXIgY3B5ID0gMDtcclxuICAgICAgICBmb3IgKG4gPSAxOyBuIDwgYXJyLmxlbmd0aDsgbisrKSB7XHJcbiAgICAgICAgICAgIHZhciBzdHIgPSBhcnJbbl07XHJcbiAgICAgICAgICAgIHZhciBjID0gc3RyLmNoYXJBdCgwKTtcclxuICAgICAgICAgICAgc3RyID0gc3RyLnNsaWNlKDEpO1xyXG4gICAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZShuZXcgUmVnRXhwKCdlLC0nLCAnZycpLCAnZS0nKTtcclxuXHJcbiAgICAgICAgICAgIC8v5pyJ55qE5pe25YCZ77yM5q+U5aaC4oCcMjLvvIwtMjLigJ0g5pWw5o2u5Y+v6IO95Lya57uP5bi455qE6KKr5YaZ5oiQMjItMjLvvIzpgqPkuYjpnIDopoHmiYvliqjkv67mlLlcclxuICAgICAgICAgICAgLy9zdHIgPSBzdHIucmVwbGFjZShuZXcgUmVnRXhwKCctJywgJ2cnKSwgJywtJyk7XHJcbiAgICAgICAgICAgIC8vc3RyID0gc3RyLnJlcGxhY2UoLyguKS0vZywgXCIkMSwtXCIpXHJcbiAgICAgICAgICAgIHZhciBwID0gc3RyLnNwbGl0KCcsJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAocC5sZW5ndGggPiAwICYmIHBbMF0gPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICBwLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIH0gXHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHBbaV0gPSBwYXJzZUZsb2F0KHBbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHdoaWxlIChwLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc05hTihwWzBdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGNtZCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9pbnRzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGN0bFB0eDtcclxuICAgICAgICAgICAgICAgIHZhciBjdGxQdHk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJldkNtZDtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcng7XHJcbiAgICAgICAgICAgICAgICB2YXIgcnk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHNpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZhO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZzO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciB4MSA9IGNweDtcclxuICAgICAgICAgICAgICAgIHZhciB5MSA9IGNweTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IGwsIEgsIGgsIFYsIGFuZCB2IHRvIExcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoYykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2wnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcHggKz0gcC5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcHkgKz0gcC5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbWQgPSAnTCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCA9IHAuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3B5ID0gcC5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChjcHgsIGNweSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ20nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcHggKz0gcC5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcHkgKz0gcC5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbWQgPSAnTSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYyA9ICdsJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCA9IHAuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3B5ID0gcC5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbWQgPSAnTSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYyA9ICdMJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2gnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcHggKz0gcC5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbWQgPSAnTCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnSCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCA9IHAuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY21kID0gJ0wnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChjcHgsIGNweSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3YnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcHkgKz0gcC5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbWQgPSAnTCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnVic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweSA9IHAuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY21kID0gJ0wnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChjcHgsIGNweSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0MnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChwLnNoaWZ0KCksIHAuc2hpZnQoKSwgcC5zaGlmdCgpLCBwLnNoaWZ0KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcHggPSBwLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweSA9IHAuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goY3B4LCBjcHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdjJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHggKyBwLnNoaWZ0KCksIGNweSArIHAuc2hpZnQoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNweCArIHAuc2hpZnQoKSwgY3B5ICsgcC5zaGlmdCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCArPSBwLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweSArPSBwLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZCA9ICdDJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goY3B4LCBjcHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdTJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3RsUHR4ID0gY3B4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdGxQdHkgPSBjcHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZDbWQgPSBjYVtjYS5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZDbWQuY29tbWFuZCA9PT0gJ0MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdGxQdHggPSBjcHggKyAoY3B4IC0gcHJldkNtZC5wb2ludHNbMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RsUHR5ID0gY3B5ICsgKGNweSAtIHByZXZDbWQucG9pbnRzWzNdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChjdGxQdHgsIGN0bFB0eSwgcC5zaGlmdCgpLCBwLnNoaWZ0KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcHggPSBwLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweSA9IHAuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY21kID0gJ0MnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChjcHgsIGNweSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3MnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdGxQdHggPSBjcHgsIGN0bFB0eSA9IGNweTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldkNtZCA9IGNhW2NhLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldkNtZC5jb21tYW5kID09PSAnQycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0bFB0eCA9IGNweCArIChjcHggLSBwcmV2Q21kLnBvaW50c1syXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdGxQdHkgPSBjcHkgKyAoY3B5IC0gcHJldkNtZC5wb2ludHNbM10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RsUHR4LCBjdGxQdHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHggKyBwLnNoaWZ0KCksIGNweSArIHAuc2hpZnQoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcHggKz0gcC5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcHkgKz0gcC5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbWQgPSAnQyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnUSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKHAuc2hpZnQoKSwgcC5zaGlmdCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3B4ID0gcC5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcHkgPSBwLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGNweCArIHAuc2hpZnQoKSwgY3B5ICsgcC5zaGlmdCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3B4ICs9IHAuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3B5ICs9IHAuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY21kID0gJ1EnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChjcHgsIGNweSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1QnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdGxQdHggPSBjcHgsIGN0bFB0eSA9IGNweTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldkNtZCA9IGNhW2NhLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldkNtZC5jb21tYW5kID09PSAnUScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0bFB0eCA9IGNweCArIChjcHggLSBwcmV2Q21kLnBvaW50c1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdGxQdHkgPSBjcHkgKyAoY3B5IC0gcHJldkNtZC5wb2ludHNbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCA9IHAuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3B5ID0gcC5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbWQgPSAnUSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGN0bFB0eCwgY3RsUHR5LCBjcHgsIGNweSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3QnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdGxQdHggPSBjcHgsIGN0bFB0eSA9IGNweTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldkNtZCA9IGNhW2NhLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldkNtZC5jb21tYW5kID09PSAnUScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0bFB0eCA9IGNweCArIChjcHggLSBwcmV2Q21kLnBvaW50c1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdGxQdHkgPSBjcHkgKyAoY3B5IC0gcHJldkNtZC5wb2ludHNbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCArPSBwLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweSArPSBwLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZCA9ICdRJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goY3RsUHR4LCBjdGxQdHksIGNweCwgY3B5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ4ID0gcC5zaGlmdCgpOyAvL3jljYrlvoRcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnkgPSBwLnNoaWZ0KCk7IC8veeWNiuW+hFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwc2kgPSBwLnNoaWZ0KCk7IC8v5peL6L2s6KeS5bqmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhID0gcC5zaGlmdCgpOyAvL+inkuW6puWkp+WwjyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnMgPSBwLnNoaWZ0KCk7IC8v5pe26ZKI5pa55ZCRXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4MSA9IGNweCwgeTEgPSBjcHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCA9IHAuc2hpZnQoKSwgY3B5ID0gcC5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbWQgPSAnQSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IFsgcnggLCByeSAscHNpICwgZmEgLGZzICxjcHggLCBjcHkgLCB4MSAsIHkxIF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ4ID0gcC5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByeSA9IHAuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHNpID0gcC5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmYSA9IHAuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnMgPSBwLnNoaWZ0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4MSA9IGNweCwgeTEgPSBjcHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweCArPSBwLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNweSArPSBwLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZCA9ICdBJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gWyByeCAsIHJ5ICxwc2kgLCBmYSAsZnMgLGNweCAsIGNweSAsIHgxICwgeTEgXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY2EucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZDogY21kIHx8IGMsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiBwb2ludHNcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYyA9PT0gJ3onIHx8IGMgPT09ICdaJykge1xyXG4gICAgICAgICAgICAgICAgY2EucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZDogJ3onLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvaW50czogW11cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gY2E7XHJcbiAgICB9XHJcblxyXG4gICAgLy/ph43mlrDmoLnnmoRwYXRo57uY5Yi2Z3JhcGhpY3NcclxuICAgIHNldEdyYXBoaWNzKClcclxuICAgIHtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5fX3BhcnNlUGF0aERhdGEgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5wb2ludExpc3QgPSBbXTtcclxuXHJcbiAgICAgICAgdmFyIHBhdGhBcnJheSA9IHRoaXMuX3BhcnNlUGF0aERhdGEodGhpcy5jb250ZXh0LnBhdGgpO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBnID0gMCwgZ2wgPSBwYXRoQXJyYXkubGVuZ3RoOyBnIDwgZ2w7IGcrKykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHBhdGhBcnJheVtnXS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjID0gcGF0aEFycmF5W2ddW2ldLmNvbW1hbmQsIHAgPSBwYXRoQXJyYXlbZ11baV0ucG9pbnRzO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHBbMF0sIHBbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdNJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8ocFswXSwgcFsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0MnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdyYXBoaWNzLmJlemllckN1cnZlVG8ocFswXSwgcFsxXSwgcFsyXSwgcFszXSwgcFs0XSwgcFs1XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdyYXBoaWNzLnF1YWRyYXRpY0N1cnZlVG8ocFswXSwgcFsxXSwgcFsyXSwgcFszXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0EnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL+WJjemdojbkuKrlhYPntKDnlKjmnaXmlL5wYXRo55qEQSA25Liq5Y+C5pWw77yMcGF0aCBB5ZG95Luk6K+m6KeBXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEFyYy5kcmF3QXJjKCB0aGlzLmdyYXBoaWNzICwgcFs3XSAsIHBbOF0gLCBwICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3onOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdyYXBoaWNzLmNsb3NlUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG59IiwiLyoqXHJcbiAqIENhbnZheFxyXG4gKiBAYXV0aG9yIOmHiuWJkSAo5p2O5rabLCBsaXRhby5sdEBhbGliYWJhLWluYy5jb20pXHJcbiAqXHJcbiAqIOawtOa7tOW9oiDnsbtcclxuICog5rS+55Sf6IeqUGF0aOexu1xyXG4gKlxyXG4gKiDlr7nlupRjb250ZXh055qE5bGe5oCn5pyJXHJcbiAqIEBociDmsLTmu7TmqKrlrr3vvIjkuK3lv4PliLDmsLTlubPovrnnvJjmnIDlrr3lpITot53nprvvvIlcclxuICogQHZyIOawtOa7tOe6temrmO+8iOS4reW/g+WIsOWwluerr+i3neemu++8iVxyXG4gKiovXHJcbmltcG9ydCBQYXRoIGZyb20gXCIuL1BhdGhcIjtcclxuaW1wb3J0IFV0aWxzIGZyb20gXCIuLi91dGlscy9pbmRleFwiO1xyXG5pbXBvcnQgXyBmcm9tIFwiLi4vdXRpbHMvdW5kZXJzY29yZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRHJvcGxldCBleHRlbmRzIFBhdGhcclxue1xyXG4gICAgY29uc3RydWN0b3Iob3B0KVxyXG4gICAge1xyXG4gICAgICAgIG9wdCA9IFV0aWxzLmNoZWNrT3B0KCBvcHQgKTtcclxuICAgICAgICB2YXIgX2NvbnRleHQgPSBfLmV4dGVuZCh7XHJcbiAgICAgICAgICAgIGhyIDogMCwgLy97bnVtYmVyfSwgIC8vIOW/hemhu++8jOawtOa7tOaoquWuve+8iOS4reW/g+WIsOawtOW5s+i+uee8mOacgOWuveWkhOi3neemu++8iVxyXG4gICAgICAgICAgICB2ciA6IDAgICAvL3tudW1iZXJ9LCAgLy8g5b+F6aG777yM5rC05ru057q16auY77yI5Lit5b+D5Yiw5bCW56uv6Led56a777yJXHJcbiAgICAgICAgfSAsIG9wdC5jb250ZXh0KTtcclxuXHJcbiAgICAgICAgb3B0LmNvbnRleHQgPSBfY29udGV4dDtcclxuXHJcbiAgICAgICAgdmFyIG15ID0gc3VwZXIob3B0KTtcclxuXHJcbiAgICAgICAgdGhpcy50eXBlID0gXCJkcm9wbGV0XCI7XHJcbiAgICAgICAgdGhpcy5pZCA9IFV0aWxzLmNyZWF0ZUlkKHRoaXMudHlwZSk7XHJcblxyXG4gICAgICAgIHRoaXMuY29udGV4dC5wYXRoID0gdGhpcy5fY3JlYXRlUGF0aCgpO1xyXG4gICAgfVxyXG5cclxuICAgICR3YXRjaChuYW1lLCB2YWx1ZSwgcHJlVmFsdWUpIFxyXG4gICAge1xyXG4gICAgICAgIGlmICggbmFtZSA9PSBcImhyXCIgfHwgbmFtZSA9PSBcInZyXCIgKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5wYXRoID0gdGhpcy5fY3JlYXRlUGF0aCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG5hbWUgPT0gXCJwYXRoXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRHcmFwaGljcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgX2NyZWF0ZVBhdGgoKSBcclxuICAgIHtcclxuICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5jb250ZXh0O1xyXG4gICAgICAgdmFyIHBzID0gXCJNIDAgXCIrY29udGV4dC5ocitcIiBDIFwiK2NvbnRleHQuaHIrXCIgXCIrY29udGV4dC5ocitcIiBcIisoIGNvbnRleHQuaHIqMy8yICkgK1wiIFwiKygtY29udGV4dC5oci8zKStcIiAwIFwiKygtY29udGV4dC52cik7XHJcbiAgICAgICBwcyArPSBcIiBDIFwiKygtY29udGV4dC5ociAqIDMvIDIpK1wiIFwiKygtY29udGV4dC5ociAvIDMpK1wiIFwiKygtY29udGV4dC5ocikrXCIgXCIrY29udGV4dC5ocitcIiAwIFwiKyBjb250ZXh0LmhyKyBcInpcIjtcclxuICAgICAgIHJldHVybiBwcztcclxuICAgIH1cclxufSIsIlxyXG4vKipcclxuICogQ2FudmF4XHJcbiAqXHJcbiAqIEBhdXRob3Ig6YeK5YmRICjmnY7mtpssIGxpdGFvLmx0QGFsaWJhYmEtaW5jLmNvbSlcclxuICpcclxuICog5qSt5ZyG5b2iIOexu1xyXG4gKlxyXG4gKiDlr7nlupRjb250ZXh055qE5bGe5oCn5pyJIFxyXG4gKlxyXG4gKiBAaHIg5qSt5ZyG5qiq6L205Y2K5b6EXHJcbiAqIEB2ciDmpK3lnIbnurXovbTljYrlvoRcclxuICovXHJcbmltcG9ydCBTaGFwZSBmcm9tIFwiLi4vZGlzcGxheS9TaGFwZVwiO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4uL3V0aWxzL2luZGV4XCI7XHJcbmltcG9ydCBfIGZyb20gXCIuLi91dGlscy91bmRlcnNjb3JlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbGxpcHNlIGV4dGVuZHMgU2hhcGVcclxue1xyXG4gICAgY29uc3RydWN0b3Iob3B0KVxyXG4gICAge1xyXG4gICAgICAgIG9wdCA9IFV0aWxzLmNoZWNrT3B0KCBvcHQgKTtcclxuICAgICAgICB2YXIgX2NvbnRleHQgPSBfLmV4dGVuZCh7XHJcbiAgICAgICAgICAgIC8veCAgICAgICAgICAgICA6IDAgLCAvL3tudW1iZXJ9LCAgLy8g5Lii5byDXHJcbiAgICAgICAgICAgIC8veSAgICAgICAgICAgICA6IDAgLCAvL3tudW1iZXJ9LCAgLy8g5Lii5byD77yM5Y6f5Zug5ZCMY2lyY2xlXHJcbiAgICAgICAgICAgIGhyIDogMCwgIC8ve251bWJlcn0sICAvLyDlv4XpobvvvIzmpK3lnIbmqKrovbTljYrlvoRcclxuICAgICAgICAgICAgdnIgOiAwICAgLy97bnVtYmVyfSwgIC8vIOW/hemhu++8jOakreWchue6tei9tOWNiuW+hFxyXG4gICAgICAgIH0gLCBvcHQuY29udGV4dCk7XHJcblxyXG4gICAgICAgIG9wdC5jb250ZXh0ID0gX2NvbnRleHQ7XHJcblxyXG4gICAgICAgIHN1cGVyKCBvcHQgKTtcclxuXHJcbiAgICAgICAgdGhpcy50eXBlID0gXCJlbGxpcHNlXCI7XHJcbiAgICAgICAgdGhpcy5pZCA9IFV0aWxzLmNyZWF0ZUlkKHRoaXMudHlwZSk7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0R3JhcGhpY3MoKTtcclxuICAgIH1cclxuXHJcbiAgICAkd2F0Y2gobmFtZSwgdmFsdWUsIHByZVZhbHVlKSBcclxuICAgIHtcclxuICAgICAgICBpZiAoIG5hbWUgPT0gXCJoclwiIHx8IG5hbWUgPT0gXCJ2clwiICkge1xyXG4gICAgICAgICAgICB0aGlzLnNldEdyYXBoaWNzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldEdyYXBoaWNzKClcclxuICAgIHsgICAgXHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5jbGVhcigpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MuZHJhd0VsbGlwc2UoMCwwLCB0aGlzLmNvbnRleHQuaHIqMiAsIHRoaXMuY29udGV4dC52cioyKTtcclxuICAgIH1cclxufTtcclxuIiwiLyoqXHJcbiAqIENhbnZheFxyXG4gKlxyXG4gKiBAYXV0aG9yIOmHiuWJkSAo5p2O5rabLCBsaXRhby5sdEBhbGliYWJhLWluYy5jb20pXHJcbiAqXHJcbiAqIOWkmui+ueW9oiDnsbsgIO+8iOS4jeinhOWIme+8iVxyXG4gKlxyXG4gKiDlr7nlupRjb250ZXh055qE5bGe5oCn5pyJXHJcbiAqIEBwb2ludExpc3Qg5aSa6L655b2i5ZCE5Liq6aG26KeS5Z2Q5qCHXHJcbiAqKi9cclxuaW1wb3J0IFNoYXBlIGZyb20gXCIuLi9kaXNwbGF5L1NoYXBlXCI7XHJcbmltcG9ydCBVdGlscyBmcm9tIFwiLi4vdXRpbHMvaW5kZXhcIjtcclxuaW1wb3J0IF8gZnJvbSBcIi4uL3V0aWxzL3VuZGVyc2NvcmVcIjtcclxuaW1wb3J0IF9NYXRoIGZyb20gXCIuLi9nZW9tL01hdGhcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9seWdvbiBleHRlbmRzIFNoYXBlIFxyXG57XHJcbiAgICBjb25zdHJ1Y3RvcihvcHQsIGF0eXBlKVxyXG4gICAge1xyXG4gICAgICAgIG9wdCA9IFV0aWxzLmNoZWNrT3B0KG9wdCk7XHJcbiAgICAgICAgdmFyIF9jb250ZXh0ID0gXy5leHRlbmQoe1xyXG4gICAgICAgICAgICBsaW5lVHlwZTogbnVsbCxcclxuICAgICAgICAgICAgc21vb3RoOiBmYWxzZSxcclxuICAgICAgICAgICAgcG9pbnRMaXN0OiBbXSwgLy97QXJyYXl9ICAvLyDlv4XpobvvvIzlkITkuKrpobbop5LlnZDmoIdcclxuICAgICAgICAgICAgc21vb3RoRmlsdGVyOiBVdGlscy5fX2VtcHR5RnVuY1xyXG4gICAgICAgIH0sIG9wdC5jb250ZXh0ICk7XHJcblxyXG4gICAgICAgIGlmKGF0eXBlICE9PSBcImNsb25lXCIpe1xyXG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBfY29udGV4dC5wb2ludExpc3RbMF07XHJcbiAgICAgICAgICAgIHZhciBlbmQgICA9IF9jb250ZXh0LnBvaW50TGlzdC5zbGljZSggLSAxIClbMF07XHJcbiAgICAgICAgICAgIGlmKCBfY29udGV4dC5zbW9vdGggKXtcclxuICAgICAgICAgICAgICAgIF9jb250ZXh0LnBvaW50TGlzdC51bnNoaWZ0KCBlbmQgKTtcclxuICAgICAgICAgICAgICAgIF9jb250ZXh0LnBvaW50TGlzdCA9IF9NYXRoLmdldFNtb290aFBvaW50TGlzdCggX2NvbnRleHQucG9pbnRMaXN0ICk7XHJcbiAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIC8vZWxzZSB7XHJcbiAgICAgICAgICAgIC8vICAgIF9jb250ZXh0LnBvaW50TGlzdC5wdXNoKCBzdGFydCApO1xyXG4gICAgICAgICAgICAvL31cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBvcHQuY29udGV4dCA9IF9jb250ZXh0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIHN1cGVyKG9wdCwgYXR5cGUpO1xyXG5cclxuICAgICAgICB0aGlzLl9kcmF3VHlwZU9ubHkgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IFwicG9seWdvblwiO1xyXG4gICAgICAgIHRoaXMuaWQgPSBVdGlscy5jcmVhdGVJZCh0aGlzLnR5cGUpO1xyXG5cclxuICAgICAgICB0aGlzLnNldEdyYXBoaWNzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgJHdhdGNoKG5hbWUsIHZhbHVlLCBwcmVWYWx1ZSkgXHJcbiAgICB7XHJcbiAgICAgICAgLy/osIPnlKhwYXJlbnTnmoRzZXRHcmFwaGljc1xyXG4gICAgICAgIGlmIChuYW1lID09IFwicG9pbnRMaXN0XCIgfHwgbmFtZSA9PSBcInNtb290aFwiIHx8IG5hbWUgPT0gXCJsaW5lVHlwZVwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0R3JhcGhpY3MoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0R3JhcGhpY3MoKSBcclxuICAgIHtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmNsZWFyKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XHJcbiAgICAgICAgY29uc3QgcG9pbnRMaXN0ID0gY29udGV4dC5wb2ludExpc3Q7XHJcbiAgICAgICAgaWYgKHBvaW50TGlzdC5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgICAgIC8v5bCR5LqOMuS4queCueWwseS4jeeUu+S6hn5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKHBvaW50TGlzdFswXVswXSwgcG9pbnRMaXN0WzBdWzFdKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMSwgbCA9IHBvaW50TGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8ocG9pbnRMaXN0W2ldWzBdLCBwb2ludExpc3RbaV1bMV0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5jbG9zZVBhdGgoKTtcclxuXHJcbiAgICAgICAgLy/lpoLmnpzkuLromZrnur9cclxuICAgICAgICBpZiAoY29udGV4dC5saW5lVHlwZSA9PSAnZGFzaGVkJyB8fCBjb250ZXh0LmxpbmVUeXBlID09ICdkb3R0ZWQnKSB7XHJcbiAgICAgICAgICAgIC8v6aaW5YWI5oqK5YmN6Z2i55qEZHJhcGhpY3NEYXRh6K6+572u5Li6ZmlsbCBvbmx5XHJcbiAgICAgICAgICAgIC8v5Lmf5bCx5piv5oqKbGluZeW8uuWItuiuvue9ruS4umZhbHNl77yM6L+Z54K55b6I6YeN6KaB77yM5ZCm5YiZ5L2g6Jma57q/55S75LiN5Ye65p2l77yM5Lya5ZKM6L+Z5Liq5a6e546w6YeN5Y+g5LqGXHJcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3MuY3VycmVudFBhdGgubGluZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRleHQuc21vb3RoKSB7XHJcbiAgICAgICAgICAgICAgICAvL+WmguaenOaYr3Ntb290aO+8jOacrOi6q+W3sue7j+iiq+eUqOabsueOh+aJk+aVo+i/h+S6hu+8jOS4jemcgOimgemHh+eUqOmXtOmalOazlVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgc2kgPSAwLCBzbCA9IHBvaW50TGlzdC5sZW5ndGg7IHNpIDwgc2w7IHNpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2kgPT0gc2wtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKCBwb2ludExpc3Rbc2ldWzBdICwgcG9pbnRMaXN0W3NpXVsxXSApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKCBwb2ludExpc3Rbc2krMV1bMF0gLCBwb2ludExpc3Rbc2krMV1bMV0gKTtcclxuICAgICAgICAgICAgICAgICAgICBzaSs9MTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvL+eUu+iZmue6v+eahOaWueazlSAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyhwb2ludExpc3RbMF1bMF0sIHBvaW50TGlzdFswXVsxXSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMSwgbCA9IHBvaW50TGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZnJvbVggPSBwb2ludExpc3RbaSAtIDFdWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b1ggPSBwb2ludExpc3RbaV1bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb21ZID0gcG9pbnRMaXN0W2kgLSAxXVsxXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdG9ZID0gcG9pbnRMaXN0W2ldWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGFzaGVkTGluZVRvKGZyb21YLCBmcm9tWSwgdG9YLCB0b1ksIDUpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG59OyIsIi8qKlxyXG4gKiBDYW52YXhcclxuICpcclxuICogQGF1dGhvciDph4rliZEgKOadjua2mywgbGl0YW8ubHRAYWxpYmFiYS1pbmMuY29tKVxyXG4gKlxyXG4gKiDmraNu6L655b2i77yIbj49M++8iVxyXG4gKlxyXG4gKiDlr7nlupRjb250ZXh055qE5bGe5oCn5pyJIFxyXG4gKlxyXG4gKiBAciDmraNu6L655b2i5aSW5o6l5ZyG5Y2K5b6EXHJcbiAqIEByIOaMh+aYjuato+WHoOi+ueW9olxyXG4gKlxyXG4gKiBAcG9pbnRMaXN0IOengeacie+8jOS7juS4iumdoueahHLlkoxu6K6h566X5b6X5Yiw55qE6L6555WM5YC855qE6ZuG5ZCIXHJcbiAqL1xyXG5pbXBvcnQgUG9seWdvbiBmcm9tIFwiLi9Qb2x5Z29uXCI7XHJcbmltcG9ydCBVdGlscyBmcm9tIFwiLi4vdXRpbHMvaW5kZXhcIjtcclxuaW1wb3J0IF8gZnJvbSBcIi4uL3V0aWxzL3VuZGVyc2NvcmVcIjtcclxuaW1wb3J0IF9NYXRoIGZyb20gXCIuLi9nZW9tL01hdGhcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSXNvZ29uIGV4dGVuZHMgUG9seWdvblxyXG57XHJcbiAgICBjb25zdHJ1Y3RvcihvcHQpXHJcbiAgICB7XHJcbiAgICAgICAgb3B0ID0gVXRpbHMuY2hlY2tPcHQob3B0KTtcclxuICAgICAgICB2YXIgX2NvbnRleHQgPSBfLmV4dGVuZCh7XHJcbiAgICAgICAgICAgIHBvaW50TGlzdDogW10sIC8v5LuO5LiL6Z2i55qEcuWSjG7orqHnrpflvpfliLDnmoTovrnnlYzlgLznmoTpm4blkIhcclxuICAgICAgICAgICAgcjogMCwgLy97bnVtYmVyfSwgIC8vIOW/hemhu++8jOato27ovrnlvaLlpJbmjqXlnIbljYrlvoRcclxuICAgICAgICAgICAgbjogMCAvL3tudW1iZXJ9LCAgLy8g5b+F6aG777yM5oyH5piO5q2j5Yeg6L655b2iXHJcbiAgICAgICAgfSAsIG9wdC5jb250ZXh0KTtcclxuICAgICAgICBfY29udGV4dC5wb2ludExpc3QgPSBfTWF0aC5nZXRJc2dvblBvaW50TGlzdCggX2NvbnRleHQubiAsIF9jb250ZXh0LnIgKTtcclxuXHJcbiAgICAgICAgb3B0LmNvbnRleHQgPSBfY29udGV4dDtcclxuXHJcbiAgICAgICAgc3VwZXIoIG9wdCApO1xyXG5cclxuICAgICAgICB0aGlzLnR5cGUgPSBcImlzb2dvblwiO1xyXG4gICAgICAgIHRoaXMuaWQgPSBVdGlscy5jcmVhdGVJZCh0aGlzLnR5cGUpO1xyXG4gICAgfVxyXG5cclxuICAgICR3YXRjaChuYW1lLCB2YWx1ZSwgcHJlVmFsdWUpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKG5hbWUgPT0gXCJyXCIgfHwgbmFtZSA9PSBcIm5cIil7IC8v5aaC5p6ccGF0aOacieWPmOWKqO+8jOmcgOimgeiHquWKqOiuoeeul+aWsOeahHBvaW50TGlzdFxyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQucG9pbnRMaXN0ID0gX01hdGguZ2V0SXNnb25Qb2ludExpc3QoIHN0eWxlLm4gLCBzdHlsZS5yICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobmFtZSA9PSBcInBvaW50TGlzdFwiIHx8IG5hbWUgPT0gXCJzbW9vdGhcIiB8fCBuYW1lID09IFwibGluZVR5cGVcIikge1xyXG4gICAgICAgICAgICB0aGlzLnNldEdyYXBoaWNzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3MuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59OyIsIi8qKlxyXG4gKiBDYW52YXhcclxuICpcclxuICogQGF1dGhvciDph4rliZEgKOadjua2mywgbGl0YW8ubHRAYWxpYmFiYS1pbmMuY29tKVxyXG4gKlxyXG4gKiDnur/mnaEg57G7XHJcbiAqXHJcbiAqXHJcbiAqIOWvueW6lGNvbnRleHTnmoTlsZ7mgKfmnIlcclxuICogQGxpbmVUeXBlICDlj6/pgIkg6Jma57q/IOWunueOsCDnmoQg57G75Z6LXHJcbiAqIEB4U3RhcnQgICAg5b+F6aG777yM6LW354K55qiq5Z2Q5qCHXHJcbiAqIEB5U3RhcnQgICAg5b+F6aG777yM6LW354K557q15Z2Q5qCHXHJcbiAqIEB4RW5kICAgICAg5b+F6aG777yM57uI54K55qiq5Z2Q5qCHXHJcbiAqIEB5RW5kICAgICAg5b+F6aG777yM57uI54K557q15Z2Q5qCHXHJcbiAqKi9cclxuaW1wb3J0IFNoYXBlIGZyb20gXCIuLi9kaXNwbGF5L1NoYXBlXCI7XHJcbmltcG9ydCBVdGlscyBmcm9tIFwiLi4vdXRpbHMvaW5kZXhcIjtcclxuaW1wb3J0IF8gZnJvbSBcIi4uL3V0aWxzL3VuZGVyc2NvcmVcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpbmUgZXh0ZW5kcyBTaGFwZVxyXG57XHJcbiAgICBjb25zdHJ1Y3RvcihvcHQpXHJcbiAgICB7XHJcbiAgICAgICAgb3B0ID0gVXRpbHMuY2hlY2tPcHQob3B0KTtcclxuICAgICAgICB2YXIgX2NvbnRleHQgPSBfLmV4dGVuZCh7XHJcbiAgICAgICAgICAgIGxpbmVUeXBlOiBudWxsLCAvL+WPr+mAiSDomZrnur8g5a6e546wIOeahCDnsbvlnotcclxuICAgICAgICAgICAgc3RhcnQ6IHtcclxuICAgICAgICAgICAgICAgIHggOiAwLCAgICAgIC8vIOW/hemhu++8jOi1t+eCueaoquWdkOagh1xyXG4gICAgICAgICAgICAgICAgeSA6IDAgICAgICAgLy8g5b+F6aG777yM6LW354K557q15Z2Q5qCHXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVuZDoge1xyXG4gICAgICAgICAgICAgICAgeCA6IDAsICAgICAgLy8g5b+F6aG777yM57uI54K55qiq5Z2Q5qCHXHJcbiAgICAgICAgICAgICAgICB5IDogMCAgICAgICAvLyDlv4XpobvvvIznu4jngrnnurXlnZDmoIdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGFzaExlbmd0aDogMyAgICAvLyDomZrnur/pl7TpmpRcclxuICAgICAgICB9ICwgb3B0LmNvbnRleHQpO1xyXG4gICAgICAgIG9wdC5jb250ZXh0ID0gX2NvbnRleHQ7XHJcblxyXG4gICAgICAgIHN1cGVyKCBvcHQgKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRHcmFwaGljcygpO1xyXG5cclxuICAgICAgICB0aGlzLnR5cGUgPSBcImxpbmVcIjtcclxuICAgICAgICB0aGlzLmlkID0gVXRpbHMuY3JlYXRlSWQodGhpcy50eXBlKTtcclxuICAgIH1cclxuXHJcbiAgICAkd2F0Y2gobmFtZSwgdmFsdWUsIHByZVZhbHVlKVxyXG4gICAge1xyXG4gICAgICAgIC8v5bm25LiN5riF5qWa5pivc3RhcnQueCDov5jmmK9lbmQueO+8jCDlvZPnhLbvvIzov5nlubbkuI3ph43opoFcclxuICAgICAgICBpZiAobmFtZSA9PSBcInhcIiB8fCBuYW1lID09IFwieVwiKXtcclxuICAgICAgICAgICAgdGhpcy5zZXRHcmFwaGljcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRHcmFwaGljcygpIFxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MuY2xlYXIoKTtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5jb250ZXh0O1xyXG4gICAgICAgIGlmICghY29udGV4dC5saW5lVHlwZSB8fCBjb250ZXh0LmxpbmVUeXBlID09ICdzb2xpZCcpIHtcclxuICAgICAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oIGNvbnRleHQuc3RhcnQueCAsIGNvbnRleHQuc3RhcnQueSApOyBcclxuICAgICAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8oIGNvbnRleHQuZW5kLnggICAsIGNvbnRleHQuZW5kLnkgKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubGluZVR5cGUgPT0gJ2Rhc2hlZCcgfHwgY29udGV4dC5saW5lVHlwZSA9PSAnZG90dGVkJykge1xyXG4gICAgICAgICAgICB0aGlzLmRhc2hlZExpbmVUbyhcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuc3RhcnQueCwgY29udGV4dC5zdGFydC55LFxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbmQueCAgLCBjb250ZXh0LmVuZC55LCBcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kYXNoTGVuZ3RoXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiBcclxufTsiLCIvKipcclxuICogQ2FudmF4XHJcbiAqXHJcbiAqIEBhdXRob3Ig6YeK5YmRICjmnY7mtpssIGxpdGFvLmx0QGFsaWJhYmEtaW5jLmNvbSlcclxuICpcclxuICog55+p546wIOexuyAg77yI5LiN6KeE5YiZ77yJXHJcbiAqXHJcbiAqXHJcbiAqIOWvueW6lGNvbnRleHTnmoTlsZ7mgKfmnIlcclxuICogQHdpZHRoIOWuveW6plxyXG4gKiBAaGVpZ2h0IOmrmOW6plxyXG4gKiBAcmFkaXVzIOWmguaenOaYr+WchuinkueahO+8jOWImeS4uuOAkOS4iuWPs+S4i+W3puOAkemhuuW6j+eahOWchuinkuWNiuW+hOaVsOe7hFxyXG4gKiovXHJcbmltcG9ydCBTaGFwZSBmcm9tIFwiLi4vZGlzcGxheS9TaGFwZVwiO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4uL3V0aWxzL2luZGV4XCI7XHJcbmltcG9ydCBfIGZyb20gXCIuLi91dGlscy91bmRlcnNjb3JlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWN0IGV4dGVuZHMgU2hhcGVcclxue1xyXG4gICAgY29uc3RydWN0b3Iob3B0KVxyXG4gICAge1xyXG4gICAgICAgIG9wdCA9IFV0aWxzLmNoZWNrT3B0KCBvcHQgKTtcclxuICAgICAgICB2YXIgX2NvbnRleHQgPSBfLmV4dGVuZCh7XHJcbiAgICAgICAgICAgIHdpZHRoIDogMCxcclxuICAgICAgICAgICAgaGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICByYWRpdXM6IFtdLFxyXG4gICAgICAgIH0gLCBvcHQuY29udGV4dCk7XHJcbiAgICAgICAgb3B0LmNvbnRleHQgPSBfY29udGV4dDtcclxuXHJcbiAgICAgICAgc3VwZXIoIG9wdCApO1xyXG5cclxuICAgICAgICB0aGlzLnR5cGUgPSBcInJlY3RcIjtcclxuICAgICAgICB0aGlzLmlkID0gVXRpbHMuY3JlYXRlSWQodGhpcy50eXBlKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRHcmFwaGljcygpO1xyXG4gICAgfVxyXG5cclxuICAgICR3YXRjaChuYW1lLCB2YWx1ZSwgcHJlVmFsdWUpIFxyXG4gICAge1xyXG4gICAgICAgIGlmICggbmFtZSA9PSBcIndpZHRoXCIgfHwgbmFtZSA9PSBcImhlaWdodFwiIHx8IG5hbWUgPT0gXCJyYWRpdXNcIiApIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRHcmFwaGljcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOe7mOWItuWchuinkuefqeW9olxyXG4gICAgICovXHJcbiAgICBfYnVpbGRSYWRpdXNQYXRoKClcclxuICAgIHtcclxuICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMuY29udGV4dDtcclxuICAgICAgICAvL+W3puS4iuOAgeWPs+S4iuOAgeWPs+S4i+OAgeW3puS4i+inkueahOWNiuW+hOS+neasoeS4unIx44CBcjLjgIFyM+OAgXI0XHJcbiAgICAgICAgLy9y57yp5YaZ5Li6MSAgICAgICAgIOebuOW9k+S6jiBbMSwgMSwgMSwgMV1cclxuICAgICAgICAvL3LnvKnlhpnkuLpbMV0gICAgICAg55u45b2T5LqOIFsxLCAxLCAxLCAxXVxyXG4gICAgICAgIC8vcue8qeWGmeS4ulsxLCAyXSAgICDnm7jlvZPkuo4gWzEsIDIsIDEsIDJdXHJcbiAgICAgICAgLy9y57yp5YaZ5Li6WzEsIDIsIDNdIOebuOW9k+S6jiBbMSwgMiwgMywgMl1cclxuICAgICAgICB2YXIgeCA9IDA7XHJcbiAgICAgICAgdmFyIHkgPSAwO1xyXG4gICAgICAgIHZhciB3aWR0aCA9IHRoaXMuY29udGV4dC53aWR0aDtcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gdGhpcy5jb250ZXh0LmhlaWdodDtcclxuICAgIFxyXG4gICAgICAgIHZhciByID0gVXRpbHMuZ2V0Q3NzT3JkZXJBcnIoY29udGV4dC5yYWRpdXMpO1xyXG4gICAgICAgIHZhciBHID0gdGhpcy5ncmFwaGljcztcclxuICAgICBcclxuICAgICAgICBHLm1vdmVUbyggcGFyc2VJbnQoeCArIHJbMF0pLCBwYXJzZUludCh5KSk7XHJcbiAgICAgICAgRy5saW5lVG8oIHBhcnNlSW50KHggKyB3aWR0aCAtIHJbMV0pLCBwYXJzZUludCh5KSk7XHJcbiAgICAgICAgclsxXSAhPT0gMCAmJiBHLnF1YWRyYXRpY0N1cnZlVG8oXHJcbiAgICAgICAgICAgICAgICB4ICsgd2lkdGgsIHksIHggKyB3aWR0aCwgeSArIHJbMV1cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgRy5saW5lVG8oIHBhcnNlSW50KHggKyB3aWR0aCksIHBhcnNlSW50KHkgKyBoZWlnaHQgLSByWzJdKSk7XHJcbiAgICAgICAgclsyXSAhPT0gMCAmJiBHLnF1YWRyYXRpY0N1cnZlVG8oXHJcbiAgICAgICAgICAgICAgICB4ICsgd2lkdGgsIHkgKyBoZWlnaHQsIHggKyB3aWR0aCAtIHJbMl0sIHkgKyBoZWlnaHRcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgRy5saW5lVG8oIHBhcnNlSW50KHggKyByWzNdKSwgcGFyc2VJbnQoeSArIGhlaWdodCkpO1xyXG4gICAgICAgIHJbM10gIT09IDAgJiYgRy5xdWFkcmF0aWNDdXJ2ZVRvKFxyXG4gICAgICAgICAgICAgICAgeCwgeSArIGhlaWdodCwgeCwgeSArIGhlaWdodCAtIHJbM11cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgRy5saW5lVG8oIHBhcnNlSW50KHgpLCBwYXJzZUludCh5ICsgclswXSkpO1xyXG4gICAgICAgIHJbMF0gIT09IDAgJiYgRy5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHksIHggKyByWzBdLCB5KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5Yib5bu655+p5b2i6Lev5b6EXHJcbiAgICAgKiBAcGFyYW0ge0NvbnRleHQyRH0gY3R4IENhbnZhcyAyROS4iuS4i+aWh1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHQg5qC35byPXHJcbiAgICAgKi9cclxuICAgIHNldEdyYXBoaWNzKCkgXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5jbGVhcigpO1xyXG4gICAgICAgIGlmKCF0aGlzLmNvbnRleHQucmFkaXVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmdyYXBoaWNzLmRyYXdSZWN0KDAsMCx0aGlzLmNvbnRleHQud2lkdGggLCB0aGlzLmNvbnRleHQuaGVpZ2h0KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9idWlsZFJhZGl1c1BhdGgoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5jbG9zZVBhdGgoKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbn0iLCIvKipcclxuICogQ2FudmF4XHJcbiAqXHJcbiAqIEBhdXRob3Ig6YeK5YmRICjmnY7mtpssIGxpdGFvLmx0QGFsaWJhYmEtaW5jLmNvbSlcclxuICpcclxuICog5omH5b2iIOexu1xyXG4gKlxyXG4gKiDlnZDmoIfljp/ngrnlho3lnIblv4NcclxuICpcclxuICog5a+55bqUY29udGV4dOeahOWxnuaAp+aciVxyXG4gKiBAcjAg6buY6K6k5Li6MO+8jOWGheWchuWNiuW+hOaMh+WumuWQjuWwhuWHuueOsOWGheW8p++8jOWQjOaXtuaJh+i+uemVv+W6piA9IHIgLSByMFxyXG4gKiBAciAg5b+F6aG777yM5aSW5ZyG5Y2K5b6EXHJcbiAqIEBzdGFydEFuZ2xlIOi1t+Wni+inkuW6pigwLCAzNjApXHJcbiAqIEBlbmRBbmdsZSAgIOe7k+adn+inkuW6pigwLCAzNjApXHJcbiAqKi9cclxuaW1wb3J0IFNoYXBlIGZyb20gXCIuLi9kaXNwbGF5L1NoYXBlXCI7XHJcbmltcG9ydCBVdGlscyBmcm9tIFwiLi4vdXRpbHMvaW5kZXhcIjtcclxuaW1wb3J0IF8gZnJvbSBcIi4uL3V0aWxzL3VuZGVyc2NvcmVcIjtcclxuaW1wb3J0IG15TWF0aCBmcm9tIFwiLi4vZ2VvbS9NYXRoXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0b3IgZXh0ZW5kcyBTaGFwZVxyXG57XHJcbiAgICBjb25zdHJ1Y3RvcihvcHQpXHJcbiAgICB7XHJcbiAgICAgICAgb3B0ID0gVXRpbHMuY2hlY2tPcHQoIG9wdCApO1xyXG4gICAgICAgIHZhciBfY29udGV4dCA9IF8uZXh0ZW5kKHtcclxuICAgICAgICAgICAgcG9pbnRMaXN0ICA6IFtdLC8v6L6555WM54K555qE6ZuG5ZCILOengeacie+8jOS7juS4i+mdoueahOWxnuaAp+iuoeeul+eahOadpVxyXG4gICAgICAgICAgICByMCAgICAgICAgIDogMCwvLyDpu5jorqTkuLow77yM5YaF5ZyG5Y2K5b6E5oyH5a6a5ZCO5bCG5Ye6546w5YaF5byn77yM5ZCM5pe25omH6L656ZW/5bqmID0gciAtIHIwXHJcbiAgICAgICAgICAgIHIgICAgICAgICAgOiAwLC8ve251bWJlcn0sICAvLyDlv4XpobvvvIzlpJblnIbljYrlvoRcclxuICAgICAgICAgICAgc3RhcnRBbmdsZSA6IDAsLy97bnVtYmVyfSwgIC8vIOW/hemhu++8jOi1t+Wni+inkuW6plswLCAzNjApXHJcbiAgICAgICAgICAgIGVuZEFuZ2xlICAgOiAwLCAvL3tudW1iZXJ9LCAgLy8g5b+F6aG777yM57uT5p2f6KeS5bqmKDAsIDM2MF1cclxuICAgICAgICAgICAgY2xvY2t3aXNlICA6IGZhbHNlIC8v5piv5ZCm6aG65pe26ZKI77yM6buY6K6k5Li6ZmFsc2Uo6aG65pe26ZKIKVxyXG4gICAgICAgIH0gLCBvcHQuY29udGV4dCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgb3B0LmNvbnRleHQgPSBfY29udGV4dDtcclxuXHJcbiAgICAgICAgc3VwZXIob3B0KTtcclxuXHJcblxyXG4gICAgICAgIHRoaXMucmVnQW5nbGUgID0gW107XHJcbiAgICAgICAgdGhpcy5pc1JpbmcgICAgPSBmYWxzZTsvL+aYr+WQpuS4uuS4gOS4quWchueOr1xyXG4gICAgICAgIHRoaXMudHlwZSA9IFwic2VjdG9yXCI7XHJcbiAgICAgICAgdGhpcy5pZCA9IFV0aWxzLmNyZWF0ZUlkKHRoaXMudHlwZSk7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0R3JhcGhpY3MoKTtcclxuICAgIH1cclxuXHJcbiAgICAkd2F0Y2gobmFtZSwgdmFsdWUsIHByZVZhbHVlKSBcclxuICAgIHtcclxuICAgICAgICBpZiAoIG5hbWUgPT0gXCJyMFwiIHx8IG5hbWUgPT0gXCJyXCIgfHwgbmFtZSA9PSBcInN0YXJ0QW5nbGVcIiB8fCBuYW1lID09XCJlbmRBbmdsZVwiIHx8IG5hbWUgPT1cImNsb2Nrd2lzZVwiICkge1xyXG4gICAgICAgICAgICB0aGlzLnNldEdyYXBoaWNzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldEdyYXBoaWNzKCkgXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XHJcbiAgICAgICAgLy8g5b2i5YaF5Y2K5b6EWzAscilcclxuICAgICAgICB2YXIgcjAgPSB0eXBlb2YgY29udGV4dC5yMCA9PSAndW5kZWZpbmVkJyA/IDAgOiBjb250ZXh0LnIwO1xyXG4gICAgICAgIHZhciByICA9IGNvbnRleHQucjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g5omH5b2i5aSW5Y2K5b6EKDAscl1cclxuICAgICAgICB2YXIgc3RhcnRBbmdsZSA9IG15TWF0aC5kZWdyZWVUbzM2MChjb250ZXh0LnN0YXJ0QW5nbGUpOyAgICAgICAgICAvLyDotbflp4vop5LluqZbMCwzNjApXHJcbiAgICAgICAgdmFyIGVuZEFuZ2xlICAgPSBteU1hdGguZGVncmVlVG8zNjAoY29udGV4dC5lbmRBbmdsZSk7ICAgICAgICAgICAgICAvLyDnu5PmnZ/op5LluqYoMCwzNjBdXHJcblxyXG4gICAgICAgIC8vdmFyIGlzUmluZyAgICAgPSBmYWxzZTsgICAgICAgICAgICAgICAgICAgICAgIC8v5piv5ZCm5Li65ZyG546vXHJcblxyXG4gICAgICAgIC8vaWYoIHN0YXJ0QW5nbGUgIT0gZW5kQW5nbGUgJiYgTWF0aC5hYnMoc3RhcnRBbmdsZSAtIGVuZEFuZ2xlKSAlIDM2MCA9PSAwICkge1xyXG4gICAgICAgIGlmKCBzdGFydEFuZ2xlID09IGVuZEFuZ2xlICYmIGNvbnRleHQuc3RhcnRBbmdsZSAhPSBjb250ZXh0LmVuZEFuZ2xlICkge1xyXG4gICAgICAgICAgICAvL+WmguaenOS4pOS4quinkuW6puebuOetie+8jOmCo+S5iOWwseiupOS4uuaYr+S4quWchueOr+S6hlxyXG4gICAgICAgICAgICB0aGlzLmlzUmluZyAgICAgPSB0cnVlO1xyXG4gICAgICAgICAgICBzdGFydEFuZ2xlID0gMCA7XHJcbiAgICAgICAgICAgIGVuZEFuZ2xlICAgPSAzNjA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGFydEFuZ2xlID0gbXlNYXRoLmRlZ3JlZVRvUmFkaWFuKHN0YXJ0QW5nbGUpO1xyXG4gICAgICAgIGVuZEFuZ2xlICAgPSBteU1hdGguZGVncmVlVG9SYWRpYW4oZW5kQW5nbGUpO1xyXG4gICAgIFxyXG4gICAgICAgIC8v5aSE55CG5LiL5p6B5bCP5aS56KeS55qE5oOF5Ya1XHJcbiAgICAgICAgaWYoIGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSA8IDAuMDI1ICl7XHJcbiAgICAgICAgICAgIHN0YXJ0QW5nbGUgLT0gMC4wMDNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBHID0gdGhpcy5ncmFwaGljcztcclxuXHJcbiAgICAgICAgRy5hcmMoIDAgLCAwICwgciwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIHRoaXMuY29udGV4dC5jbG9ja3dpc2UpO1xyXG4gICAgICAgIGlmIChyMCAhPT0gMCkge1xyXG4gICAgICAgICAgICBpZiggdGhpcy5pc1JpbmcgKXtcclxuICAgICAgICAgICAgICAgIC8v5Yqg5LiK6L+Z5LiqaXNSaW5n55qE6YC76L6R5piv5Li65LqG5YW85a65Zmxhc2hjYW52YXPkuIvnu5jliLblnIbnjq/nmoTnmoTpl67pophcclxuICAgICAgICAgICAgICAgIC8v5LiN5Yqg6L+Z5Liq6YC76L6RZmxhc2hjYW52YXPkvJrnu5jliLbkuIDkuKrlpKflnIYg77yMIOiAjOS4jeaYr+WchueOr1xyXG4gICAgICAgICAgICAgICAgRy5tb3ZlVG8oIHIwICwgMCApO1xyXG4gICAgICAgICAgICAgICAgRy5hcmMoIDAgLCAwICwgcjAgLCBzdGFydEFuZ2xlICwgZW5kQW5nbGUgLCAhdGhpcy5jb250ZXh0LmNsb2Nrd2lzZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBHLmFyYyggMCAsIDAgLCByMCAsIGVuZEFuZ2xlICwgc3RhcnRBbmdsZSAsICF0aGlzLmNvbnRleHQuY2xvY2t3aXNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vVE9ETzrlnKhyMOS4ujDnmoTml7blgJnvvIzlpoLmnpzkuI3liqBsaW5lVG8oMCwwKeadpeaKiui3r+W+hOmXreWQiO+8jOS8muWHuueOsOacieaQnueskeeahOS4gOS4qmJ1Z1xyXG4gICAgICAgICAgICAvL+aVtOS4quWchuS8muWHuueOsOS4gOS4quS7peavj+S4quaJh+W9ouS4pOerr+S4uuiKgueCueeahOmVguepuu+8jOaIkeWPr+iDveaPj+i/sOS4jea4healmu+8jOWPjeato+i/meS4quWKoOS4iuWwseWlveS6hlxyXG4gICAgICAgICAgICBHLmxpbmVUbygwLDApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgRy5jbG9zZVBhdGgoKTtcclxuICAgICB9XHJcblxyXG4gICAgIGdldFJlZ0FuZ2xlKClcclxuICAgICB7XHJcbiAgICAgICAgIHRoaXMucmVnSW4gICAgICA9IHRydWU7ICAvL+WmguaenOWcqHN0YXJ05ZKMZW5k55qE5pWw5YC85Lit77yMZW5k5aSn5LqOc3RhcnTogIzkuJTmmK/pobrml7bpkojliJlyZWdJbuS4unRydWVcclxuICAgICAgICAgdmFyIGMgICAgICAgICAgID0gdGhpcy5jb250ZXh0O1xyXG4gICAgICAgICB2YXIgc3RhcnRBbmdsZSA9IG15TWF0aC5kZWdyZWVUbzM2MChjLnN0YXJ0QW5nbGUpOyAgICAgICAgICAvLyDotbflp4vop5LluqZbMCwzNjApXHJcbiAgICAgICAgIHZhciBlbmRBbmdsZSAgID0gbXlNYXRoLmRlZ3JlZVRvMzYwKGMuZW5kQW5nbGUpOyAgICAgICAgICAgIC8vIOe7k+adn+inkuW6pigwLDM2MF1cclxuXHJcbiAgICAgICAgIGlmICggKCBzdGFydEFuZ2xlID4gZW5kQW5nbGUgJiYgIWMuY2xvY2t3aXNlICkgfHwgKCBzdGFydEFuZ2xlIDwgZW5kQW5nbGUgJiYgYy5jbG9ja3dpc2UgKSApIHtcclxuICAgICAgICAgICAgIHRoaXMucmVnSW4gID0gZmFsc2U7IC8vb3V0XHJcbiAgICAgICAgIH07XHJcbiAgICAgICAgIC8v5bqm55qE6IyD5Zu077yM5LuO5bCP5Yiw5aSnXHJcbiAgICAgICAgIHRoaXMucmVnQW5nbGUgICA9IFsgXHJcbiAgICAgICAgICAgICBNYXRoLm1pbiggc3RhcnRBbmdsZSAsIGVuZEFuZ2xlICkgLCBcclxuICAgICAgICAgICAgIE1hdGgubWF4KCBzdGFydEFuZ2xlICwgZW5kQW5nbGUgKSBcclxuICAgICAgICAgXTtcclxuICAgICB9XHJcblxyXG4gICAgIGdldFJlY3QoY29udGV4dClcclxuICAgICB7XHJcbiAgICAgICAgIHZhciBjb250ZXh0ID0gY29udGV4dCA/IGNvbnRleHQgOiB0aGlzLmNvbnRleHQ7XHJcbiAgICAgICAgIHZhciByMCA9IHR5cGVvZiBjb250ZXh0LnIwID09ICd1bmRlZmluZWQnICAgICAvLyDlvaLlhoXljYrlvoRbMCxyKVxyXG4gICAgICAgICAgICAgPyAwIDogY29udGV4dC5yMDtcclxuICAgICAgICAgdmFyIHIgPSBjb250ZXh0LnI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOaJh+W9ouWkluWNiuW+hCgwLHJdXHJcbiAgICAgICAgIFxyXG4gICAgICAgICB0aGlzLmdldFJlZ0FuZ2xlKCk7XHJcblxyXG4gICAgICAgICB2YXIgc3RhcnRBbmdsZSA9IG15TWF0aC5kZWdyZWVUbzM2MChjb250ZXh0LnN0YXJ0QW5nbGUpOyAgICAgICAgICAvLyDotbflp4vop5LluqZbMCwzNjApXHJcbiAgICAgICAgIHZhciBlbmRBbmdsZSAgID0gbXlNYXRoLmRlZ3JlZVRvMzYwKGNvbnRleHQuZW5kQW5nbGUpOyAgICAgICAgICAgIC8vIOe7k+adn+inkuW6pigwLDM2MF1cclxuXHJcbiAgICAgICAgIHZhciBwb2ludExpc3QgID0gW107XHJcblxyXG4gICAgICAgICB2YXIgcDREaXJlY3Rpb249IHtcclxuICAgICAgICAgICAgIFwiOTBcIiA6IFsgMCAsIHIgXSxcclxuICAgICAgICAgICAgIFwiMTgwXCI6IFsgLXIsIDAgXSxcclxuICAgICAgICAgICAgIFwiMjcwXCI6IFsgMCAsIC1yXSxcclxuICAgICAgICAgICAgIFwiMzYwXCI6IFsgciAsIDAgXSBcclxuICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgIGZvciAoIHZhciBkIGluIHA0RGlyZWN0aW9uICl7XHJcbiAgICAgICAgICAgICB2YXIgaW5BbmdsZVJlZyA9IHBhcnNlSW50KGQpID4gdGhpcy5yZWdBbmdsZVswXSAmJiBwYXJzZUludChkKSA8IHRoaXMucmVnQW5nbGVbMV07XHJcbiAgICAgICAgICAgICBpZiggdGhpcy5pc1JpbmcgfHwgKGluQW5nbGVSZWcgJiYgdGhpcy5yZWdJbikgfHwgKCFpbkFuZ2xlUmVnICYmICF0aGlzLnJlZ0luKSApe1xyXG4gICAgICAgICAgICAgICAgIHBvaW50TGlzdC5wdXNoKCBwNERpcmVjdGlvblsgZCBdICk7XHJcbiAgICAgICAgICAgICB9XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgIGlmKCAhdGhpcy5pc1JpbmcgKSB7XHJcbiAgICAgICAgICAgICBzdGFydEFuZ2xlID0gbXlNYXRoLmRlZ3JlZVRvUmFkaWFuKCBzdGFydEFuZ2xlICk7XHJcbiAgICAgICAgICAgICBlbmRBbmdsZSAgID0gbXlNYXRoLmRlZ3JlZVRvUmFkaWFuKCBlbmRBbmdsZSAgICk7XHJcblxyXG4gICAgICAgICAgICAgcG9pbnRMaXN0LnB1c2goW1xyXG4gICAgICAgICAgICAgICAgICAgICBteU1hdGguY29zKHN0YXJ0QW5nbGUpICogcjAgLCBteU1hdGguc2luKHN0YXJ0QW5nbGUpICogcjBcclxuICAgICAgICAgICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgICAgICAgcG9pbnRMaXN0LnB1c2goW1xyXG4gICAgICAgICAgICAgICAgICAgICBteU1hdGguY29zKHN0YXJ0QW5nbGUpICogciAgLCBteU1hdGguc2luKHN0YXJ0QW5nbGUpICogclxyXG4gICAgICAgICAgICAgICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgICAgICBwb2ludExpc3QucHVzaChbXHJcbiAgICAgICAgICAgICAgICAgICAgIG15TWF0aC5jb3MoZW5kQW5nbGUpICAgKiByICAsICBteU1hdGguc2luKGVuZEFuZ2xlKSAgKiByXHJcbiAgICAgICAgICAgICAgICAgICAgIF0pO1xyXG5cclxuICAgICAgICAgICAgIHBvaW50TGlzdC5wdXNoKFtcclxuICAgICAgICAgICAgICAgICAgICAgbXlNYXRoLmNvcyhlbmRBbmdsZSkgICAqIHIwICwgIG15TWF0aC5zaW4oZW5kQW5nbGUpICAqIHIwXHJcbiAgICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICBjb250ZXh0LnBvaW50TGlzdCA9IHBvaW50TGlzdDtcclxuICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVjdEZvcm1Qb2ludExpc3QoIGNvbnRleHQgKTtcclxuICAgICB9XHJcbn1cclxuIiwiXG5pbXBvcnQgQXBwbGljYXRpb24gZnJvbSBcIi4vQXBwbGljYXRpb25cIjtcbmltcG9ydCBFdmVudERpc3BhdGNoZXIgZnJvbSBcIi4vZXZlbnQvRXZlbnREaXNwYXRjaGVyXCI7XG5pbXBvcnQgRXZlbnRNYW5hZ2VyIGZyb20gXCIuL2V2ZW50L0V2ZW50TWFuYWdlclwiO1xuaW1wb3J0IERpc3BsYXlPYmplY3QgZnJvbSBcIi4vZGlzcGxheS9EaXNwbGF5T2JqZWN0XCI7XG5pbXBvcnQgRGlzcGxheU9iamVjdENvbnRhaW5lciBmcm9tIFwiLi9kaXNwbGF5L0Rpc3BsYXlPYmplY3RDb250YWluZXJcIjtcbmltcG9ydCBTdGFnZSBmcm9tIFwiLi9kaXNwbGF5L1N0YWdlXCI7XG5pbXBvcnQgU3ByaXRlIGZyb20gXCIuL2Rpc3BsYXkvU3ByaXRlXCI7XG5pbXBvcnQgU2hhcGUgZnJvbSBcIi4vZGlzcGxheS9TaGFwZVwiO1xuaW1wb3J0IFBvaW50IGZyb20gXCIuL2Rpc3BsYXkvUG9pbnRcIjtcbmltcG9ydCBUZXh0IGZyb20gXCIuL2Rpc3BsYXkvVGV4dFwiO1xuXG4vL3NoYXBlc1xuaW1wb3J0IEJyb2tlbkxpbmUgZnJvbSBcIi4vc2hhcGUvQnJva2VuTGluZVwiO1xuaW1wb3J0IENpcmNsZSBmcm9tIFwiLi9zaGFwZS9DaXJjbGVcIjtcbmltcG9ydCBEcm9wbGV0IGZyb20gXCIuL3NoYXBlL0Ryb3BsZXRcIjtcbmltcG9ydCBFbGxpcHNlIGZyb20gXCIuL3NoYXBlL0VsbGlwc2VcIjtcbmltcG9ydCBJc29nb24gZnJvbSBcIi4vc2hhcGUvSXNvZ29uXCI7XG5pbXBvcnQgTGluZSBmcm9tIFwiLi9zaGFwZS9MaW5lXCI7XG5pbXBvcnQgUGF0aCBmcm9tIFwiLi9zaGFwZS9QYXRoXCI7XG5pbXBvcnQgUG9seWdvbiBmcm9tIFwiLi9zaGFwZS9Qb2x5Z29uXCI7XG5pbXBvcnQgUmVjdCBmcm9tIFwiLi9zaGFwZS9SZWN0XCI7XG5pbXBvcnQgU2VjdG9yIGZyb20gXCIuL3NoYXBlL1NlY3RvclwiO1xuXG52YXIgQ2FudmF4ID0ge1xuICAgIEFwcDogQXBwbGljYXRpb25cbn07XG5cbkNhbnZheC5EaXNwbGF5ID0ge1xuICAgIERpc3BsYXlPYmplY3QgOiBEaXNwbGF5T2JqZWN0LFxuICAgIERpc3BsYXlPYmplY3RDb250YWluZXIgOiBEaXNwbGF5T2JqZWN0Q29udGFpbmVyLFxuICAgIFN0YWdlICA6IFN0YWdlLFxuICAgIFNwcml0ZSA6IFNwcml0ZSxcbiAgICBTaGFwZSAgOiBTaGFwZSxcbiAgICBQb2ludCAgOiBQb2ludCxcbiAgICBUZXh0ICAgOiBUZXh0XG59XG5cbkNhbnZheC5TaGFwZXMgPSB7XG4gICAgQnJva2VuTGluZSA6IEJyb2tlbkxpbmUsXG4gICAgQ2lyY2xlIDogQ2lyY2xlLFxuICAgIERyb3BsZXQgOiBEcm9wbGV0LFxuICAgIEVsbGlwc2UgOiBFbGxpcHNlLFxuICAgIElzb2dvbiA6IElzb2dvbixcbiAgICBMaW5lIDogTGluZSxcbiAgICBQYXRoIDogUGF0aCxcbiAgICBQb2x5Z29uIDogUG9seWdvbixcbiAgICBSZWN0IDogUmVjdCxcbiAgICBTZWN0b3IgOiBTZWN0b3Jcbn1cblxuQ2FudmF4LkV2ZW50ID0ge1xuICAgIEV2ZW50RGlzcGF0Y2hlciA6IEV2ZW50RGlzcGF0Y2hlcixcbiAgICBFdmVudE1hbmFnZXIgICAgOiBFdmVudE1hbmFnZXJcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FudmF4OyJdLCJuYW1lcyI6WyJfIiwiYnJlYWtlciIsIkFycmF5UHJvdG8iLCJBcnJheSIsInByb3RvdHlwZSIsIk9ialByb3RvIiwiT2JqZWN0IiwidG9TdHJpbmciLCJoYXNPd25Qcm9wZXJ0eSIsIm5hdGl2ZUZvckVhY2giLCJmb3JFYWNoIiwibmF0aXZlRmlsdGVyIiwiZmlsdGVyIiwibmF0aXZlSW5kZXhPZiIsImluZGV4T2YiLCJuYXRpdmVJc0FycmF5IiwiaXNBcnJheSIsIm5hdGl2ZUtleXMiLCJrZXlzIiwidmFsdWVzIiwib2JqIiwibGVuZ3RoIiwiaSIsIlR5cGVFcnJvciIsImtleSIsImhhcyIsInB1c2giLCJjYWxsIiwiZWFjaCIsIml0ZXJhdG9yIiwiY29udGV4dCIsImNvbXBhY3QiLCJhcnJheSIsImlkZW50aXR5Iiwic2VsZWN0IiwicmVzdWx0cyIsInZhbHVlIiwiaW5kZXgiLCJsaXN0IiwibmFtZSIsImlzRnVuY3Rpb24iLCJpc0Zpbml0ZSIsImlzTmFOIiwicGFyc2VGbG9hdCIsImlzTnVtYmVyIiwiaXNCb29sZWFuIiwiaXNOdWxsIiwiaXNFbXB0eSIsImlzU3RyaW5nIiwiaXNFbGVtZW50Iiwibm9kZVR5cGUiLCJpc09iamVjdCIsIml0ZW0iLCJpc1NvcnRlZCIsIk1hdGgiLCJtYXgiLCJzb3J0ZWRJbmRleCIsImlzV2luZG93Iiwid2luZG93IiwiaXNQbGFpbk9iamVjdCIsImNvbnN0cnVjdG9yIiwiaGFzT3duIiwiZSIsInVuZGVmaW5lZCIsImV4dGVuZCIsIm9wdGlvbnMiLCJzcmMiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsInRhcmdldCIsImFyZ3VtZW50cyIsImRlZXAiLCJzbGljZSIsIlV0aWxzIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIl9VSUQiLCJjaGFyQ29kZSIsImNoYXJDb2RlQXQiLCJnZXRVSUQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJnZXRDb250ZXh0IiwicHJvdG8iLCJuZXdQcm90byIsIk9iamVjdENyZWF0ZSIsImNyZWF0ZSIsIl9fZW1wdHlGdW5jIiwiciIsInMiLCJweCIsInNwIiwicnAiLCJjcmVhdGVPYmplY3QiLCJzdXBlcmNsYXNzIiwiY2FudmFzIiwiRmxhc2hDYW52YXMiLCJpbml0RWxlbWVudCIsIm9wdCIsInIxIiwicjIiLCJyMyIsInI0IiwiY29udGV4dE9wdGlvbnMiLCJzdGVuY2lsIiwiV2ViR0xSZW5kZXJpbmdDb250ZXh0IiwiZ2wiLCJnZXRDb250ZXh0QXR0cmlidXRlcyIsIlBvaW50IiwieCIsInkiLCJiYWJlbEhlbHBlcnMudHlwZW9mIiwiYXJnIiwicCIsIkNhbnZheEV2ZW50IiwiZXZ0IiwicGFyYW1zIiwiZXZlbnRUeXBlIiwidHlwZSIsImN1cnJlbnRUYXJnZXQiLCJwb2ludCIsIl9zdG9wUHJvcGFnYXRpb24iLCJhZGRPclJtb3ZlRXZlbnRIYW5kIiwiZG9tSGFuZCIsImllSGFuZCIsImV2ZW50RG9tRm4iLCJlbCIsImZuIiwiZXZlbnRGbiIsImV2ZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJib3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJkb2MiLCJvd25lckRvY3VtZW50IiwiYm9keSIsImRvY0VsZW0iLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRUb3AiLCJjbGllbnRMZWZ0IiwiYm91bmQiLCJyaWdodCIsImxlZnQiLCJjbGllbnRXaWR0aCIsInpvb20iLCJ0b3AiLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvcCIsInBhZ2VYT2Zmc2V0Iiwic2Nyb2xsTGVmdCIsInBhZ2VYIiwiY2xpZW50WCIsInBhZ2VZIiwiY2xpZW50WSIsIl93aWR0aCIsIl9oZWlnaHQiLCJpZCIsInN0eWxlIiwicG9zaXRpb24iLCJ3aWR0aCIsImhlaWdodCIsInNldEF0dHJpYnV0ZSIsInNldHRpbmdzIiwiUkVTT0xVVElPTiIsInZpZXciLCJjbGFzc05hbWUiLCJjc3NUZXh0Iiwic3RhZ2VfYyIsImRvbV9jIiwiYXBwZW5kQ2hpbGQiLCJfbW91c2VFdmVudFR5cGVzIiwiX2hhbW1lckV2ZW50VHlwZXMiLCJFdmVudEhhbmRsZXIiLCJjYW52YXgiLCJjdXJQb2ludHMiLCJjdXJQb2ludHNUYXJnZXQiLCJfdG91Y2hpbmciLCJfZHJhZ2luZyIsIl9jdXJzb3IiLCJ0eXBlcyIsImRyYWciLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwicGFyZW50IiwiY2hpbGQiLCJtZSIsImFkZEV2ZW50IiwiX19tb3VzZUhhbmRsZXIiLCJvbiIsIl9fbGliSGFuZGxlciIsInJvb3QiLCJ1cGRhdGVWaWV3T2Zmc2V0IiwiJCIsInZpZXdPZmZzZXQiLCJjdXJNb3VzZVBvaW50IiwiY3VyTW91c2VUYXJnZXQiLCJnZXRPYmplY3RzVW5kZXJQb2ludCIsImRyYWdFbmFibGVkIiwidG9FbGVtZW50IiwicmVsYXRlZFRhcmdldCIsIl9kcmFnRW5kIiwiZmlyZSIsIl9fZ2V0Y3VyUG9pbnRzVGFyZ2V0IiwiZ2xvYmFsQWxwaGEiLCJjbG9uZU9iamVjdCIsIl9jbG9uZTJob3ZlclN0YWdlIiwiX2dsb2JhbEFscGhhIiwiX2RyYWdNb3ZlSGFuZGVyIiwiX19kaXNwYXRjaEV2ZW50SW5DaGlsZHMiLCJfY3Vyc29ySGFuZGVyIiwicHJldmVudERlZmF1bHQiLCJyZXR1cm5WYWx1ZSIsIm9sZE9iaiIsIl9ob3ZlckNsYXNzIiwicG9pbnRDaGtQcmlvcml0eSIsImdldENoaWxkSW5Qb2ludCIsImdsb2JhbFRvTG9jYWwiLCJkaXNwYXRjaEV2ZW50IiwidG9UYXJnZXQiLCJmcm9tVGFyZ2V0IiwiX3NldEN1cnNvciIsImN1cnNvciIsIl9fZ2V0Q2FudmF4UG9pbnRJblRvdWNocyIsIl9fZ2V0Q2hpbGRJblRvdWNocyIsInN0YXJ0IiwibW92ZSIsImVuZCIsImN1clRvdWNocyIsInRvdWNoIiwidG91Y2hzIiwidG91Y2hlc1RhcmdldCIsImNoaWxkcyIsImhhc0NoaWxkIiwiY2UiLCJzdGFnZVBvaW50IiwiX2RyYWdEdXBsaWNhdGUiLCJfYnVmZmVyU3RhZ2UiLCJnZXRDaGlsZEJ5SWQiLCJfdHJhbnNmb3JtIiwiZ2V0Q29uY2F0ZW5hdGVkTWF0cml4IiwiYWRkQ2hpbGRBdCIsIl9kcmFnUG9pbnQiLCJfcG9pbnQiLCJfbm90V2F0Y2giLCJfbW92ZVN0YWdlIiwibW92ZWluZyIsImhlYXJ0QmVhdCIsImRlc3Ryb3kiLCJFdmVudE1hbmFnZXIiLCJfZXZlbnRNYXAiLCJsaXN0ZW5lciIsImFkZFJlc3VsdCIsInNlbGYiLCJzcGxpdCIsIm1hcCIsIl9ldmVudEVuYWJsZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyQnlUeXBlIiwibGkiLCJzcGxpY2UiLCJfZGlzcGF0Y2hFdmVudCIsIkV2ZW50RGlzcGF0Y2hlciIsImNyZWF0Q2xhc3MiLCJfYWRkRXZlbnRMaXN0ZW5lciIsIl9yZW1vdmVFdmVudExpc3RlbmVyIiwiX3JlbW92ZUV2ZW50TGlzdGVuZXJCeVR5cGUiLCJfcmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnMiLCJsb2ciLCJlVHlwZSIsImNoaWxkcmVuIiwicHJlSGVhcnRCZWF0IiwiX2hlYXJ0QmVhdE51bSIsInByZWdBbHBoYSIsImhvdmVyQ2xvbmUiLCJnZXRTdGFnZSIsImFjdGl2U2hhcGUiLCJyZW1vdmVDaGlsZEJ5SWQiLCJfaGFzRXZlbnRMaXN0ZW5lciIsIm92ZXJGdW4iLCJvdXRGdW4iLCJvbmNlSGFuZGxlIiwiYXBwbHkiLCJ1biIsIk1hdHJpeCIsImEiLCJiIiwiYyIsImQiLCJ0eCIsInR5IiwibXR4Iiwic2NhbGVYIiwic2NhbGVZIiwicm90YXRpb24iLCJjb3MiLCJzaW4iLCJQSSIsImNvbmNhdCIsImFuZ2xlIiwic3QiLCJhYnMiLCJjdCIsInN4Iiwic3kiLCJkeCIsImR5IiwidHJhbnNwb3NlIiwib3V0IiwiRmxvYXQzMkFycmF5IiwidiIsImFhIiwiYWMiLCJhdHgiLCJhYiIsImFkIiwiYXR5IiwiVFdFRU4iLCJfdHdlZW5zIiwidHdlZW4iLCJ0aW1lIiwicHJlc2VydmUiLCJub3ciLCJfdCIsIl91cGRhdGVSZXMiLCJ1cGRhdGUiLCJwcm9jZXNzIiwiaHJ0aW1lIiwicGVyZm9ybWFuY2UiLCJiaW5kIiwiRGF0ZSIsImdldFRpbWUiLCJUd2VlbiIsIm9iamVjdCIsIl9vYmplY3QiLCJfdmFsdWVzU3RhcnQiLCJfdmFsdWVzRW5kIiwiX3ZhbHVlc1N0YXJ0UmVwZWF0IiwiX2R1cmF0aW9uIiwiX3JlcGVhdCIsIl9yZXBlYXREZWxheVRpbWUiLCJfeW95byIsIl9pc1BsYXlpbmciLCJfcmV2ZXJzZWQiLCJfZGVsYXlUaW1lIiwiX3N0YXJ0VGltZSIsIl9lYXNpbmdGdW5jdGlvbiIsIkVhc2luZyIsIkxpbmVhciIsIk5vbmUiLCJfaW50ZXJwb2xhdGlvbkZ1bmN0aW9uIiwiSW50ZXJwb2xhdGlvbiIsIl9jaGFpbmVkVHdlZW5zIiwiX29uU3RhcnRDYWxsYmFjayIsIl9vblN0YXJ0Q2FsbGJhY2tGaXJlZCIsIl9vblVwZGF0ZUNhbGxiYWNrIiwiX29uQ29tcGxldGVDYWxsYmFjayIsIl9vblN0b3BDYWxsYmFjayIsInRvIiwicHJvcGVydGllcyIsImR1cmF0aW9uIiwiYWRkIiwicHJvcGVydHkiLCJzdG9wIiwicmVtb3ZlIiwic3RvcENoYWluZWRUd2VlbnMiLCJudW1DaGFpbmVkVHdlZW5zIiwiZGVsYXkiLCJhbW91bnQiLCJyZXBlYXQiLCJ0aW1lcyIsInJlcGVhdERlbGF5IiwieW95byIsImVhc2luZyIsImludGVycG9sYXRpb24iLCJjaGFpbiIsIm9uU3RhcnQiLCJjYWxsYmFjayIsIm9uVXBkYXRlIiwib25Db21wbGV0ZSIsIm9uU3RvcCIsImVsYXBzZWQiLCJjaGFyQXQiLCJ0bXAiLCJrIiwicG93Iiwic3FydCIsIkJvdW5jZSIsIk91dCIsIkluIiwibSIsImYiLCJmbG9vciIsIm4iLCJwdyIsImJuIiwiQmVybnN0ZWluIiwiQ2F0bXVsbFJvbSIsInAwIiwicDEiLCJ0IiwiZmMiLCJGYWN0b3JpYWwiLCJwMiIsInAzIiwidjAiLCJ2MSIsInQyIiwidDMiLCJsYXN0VGltZSIsInZlbmRvcnMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImVsZW1lbnQiLCJjdXJyVGltZSIsInRpbWVUb0NhbGwiLCJzZXRUaW1lb3V0IiwiX3Rhc2tMaXN0IiwiX3JlcXVlc3RBaWQiLCJlbmFibGVkQW5pbWF0aW9uRnJhbWUiLCJjdXJyVGFza0xpc3QiLCJzaGlmdCIsInRhc2siLCJyZWdpc3RGcmFtZSIsIiRmcmFtZSIsImRlc3Ryb3lGcmFtZSIsImRfcmVzdWx0IiwibCIsInJlZ2lzdFR3ZWVuIiwidGlkIiwiZnJvbSIsImFuaW1hdGUiLCJfaXNDb21wbGV0ZWVkIiwiX2lzU3RvcGVkIiwiZGVzYyIsImRlc3Ryb3lUd2VlbiIsIm1zZyIsInVud2F0Y2hPbmUiLCJPYnNlcnZlIiwic2NvcGUiLCJtb2RlbCIsIndhdGNoTW9yZSIsInN0b3BSZXBlYXRBc3NpZ24iLCJza2lwQXJyYXkiLCIkc2tpcEFycmF5IiwiVkJQdWJsaWNzIiwibG9vcCIsInZhbCIsInZhbHVlVHlwZSIsImFjY2Vzc29yIiwibmVvIiwicHJlVmFsdWUiLCJjb21wbGV4VmFsdWUiLCJuZW9UeXBlIiwiYWRkQ29sb3JTdG9wIiwiJG1vZGVsIiwiJGZpcmUiLCJwbW9kZWwiLCJoYXNXYXRjaE1vZGVsIiwiJHdhdGNoIiwiJHBhcmVudCIsImRlZmluZVByb3BlcnRpZXMiLCJhY2Nlc3NvcmVzIiwiJGFjY2Vzc29yIiwiZGVmaW5lUHJvcGVydHkiLCJwcm9wIiwiX19kZWZpbmVHZXR0ZXJfXyIsImdldCIsIl9fZGVmaW5lU2V0dGVyX18iLCJzZXQiLCJkZXNjcyIsIlZCQXJyYXkiLCJWQk1lZGlhdG9yIiwiZGVzY3JpcHRpb24iLCJleGVjU2NyaXB0Iiwiam9pbiIsInB1YmxpY3MiLCJvd25lciIsImJ1ZmZlciIsInBhcnNlVkIiLCJSRU5ERVJFUl9UWVBFIiwiRFJBV19NT0RFUyIsIlNIQVBFUyIsIlNDQUxFX01PREVTIiwiQ09OVEVYVF9ERUZBVUxUIiwiU0hBUEVfQ09OVEVYVF9ERUZBVUxUIiwiRGlzcGxheU9iamVjdCIsImNoZWNrT3B0Iiwic3RhZ2UiLCJ4eVRvSW50IiwiX2NyZWF0ZUNvbnRleHQiLCJjcmVhdGVJZCIsImluaXQiLCJfdXBkYXRlVHJhbnNmb3JtIiwiX2NvbnRleHRBVFRSUyIsIiRvd25lciIsInRyYW5zRm9ybVByb3BzIiwibXlzZWxmIiwiY29uZiIsIm5ld09iaiIsInRleHQiLCJjb250YWluZXIiLCJjbSIsImludmVydCIsImxvY2FsVG9HbG9iYWwiLCJvIiwiYm9vbCIsIm51bSIsImZyb21JbmRleCIsImdldEluZGV4IiwidG9JbmRleCIsInBjbCIsIm9yaWdpbiIsInNjYWxlT3JpZ2luIiwidHJhbnNsYXRlIiwic2NhbGUiLCJyb3RhdGVPcmlnaW4iLCJyb3RhdGUiLCJwYXJzZUludCIsImxpbmVXaWR0aCIsInN0cm9rZVN0eWxlIiwicmVzdWx0IiwiaW52ZXJzZU1hdHJpeCIsIm9yaWdpblBvcyIsIm11bFZlY3RvciIsImdyYXBoaWNzIiwiY29udGFpbnNQb2ludCIsInRvQ29udGVudCIsInVwRnVuIiwiY29tcEZ1biIsIkFuaW1hdGlvbkZyYW1lIiwiY3R4IiwidmlzaWJsZSIsInNhdmUiLCJ0cmFuc0Zvcm0iLCJ0cmFuc2Zvcm0iLCJ0b0FycmF5IiwicmVuZGVyIiwicmVzdG9yZSIsInJlbW92ZUNoaWxkIiwiRGlzcGxheU9iamVjdENvbnRhaW5lciIsIm1vdXNlQ2hpbGRyZW4iLCJnZXRDaGlsZEluZGV4IiwiX2FmdGVyQWRkQ2hpbGQiLCJyZW1vdmVDaGlsZEF0IiwiX2FmdGVyRGVsQ2hpbGQiLCJsZW4iLCJnZXRDaGlsZEF0IiwiYm9vbGVuIiwib2xkSW5kZXgiLCJnZXROdW1DaGlsZHJlbiIsIm9ianMiLCJTdGFnZSIsInN0YWdlUmVuZGluZyIsIl9pc1JlYWR5IiwiX2RldmljZVBpeGVsUmF0aW8iLCJTeXN0ZW1SZW5kZXJlciIsIlVOS05PV04iLCJhcHAiLCJSRU5ERVJfT1BUSU9OUyIsInJlcXVlc3RBaWQiLCJfaGVhcnRCZWF0IiwiX3ByZVJlbmRlclRpbWUiLCJlbnRlckZyYW1lIiwiY29udmVydFR5cGUiLCJzaGFwZSIsIl9jb252ZXJ0Q2FudmF4IiwiY29udmVydFN0YWdlcyIsImNvbnZlcnRTaGFwZXMiLCJzdGFydEVudGVyIiwiQ2FudmFzR3JhcGhpY3NSZW5kZXJlciIsInJlbmRlcmVyIiwiZGlzcGxheU9iamVjdCIsImdyYXBoaWNzRGF0YSIsImRhdGEiLCJmaWxsU3R5bGUiLCJQT0xZIiwiYmVnaW5QYXRoIiwicmVuZGVyUG9seWdvbiIsInBvaW50cyIsImNsb3NlZCIsImhhc0ZpbGwiLCJmaWxsQWxwaGEiLCJmaWxsIiwiaGFzTGluZSIsImxpbmVBbHBoYSIsInN0cm9rZSIsIlJFQ1QiLCJmaWxsUmVjdCIsInN0cm9rZVJlY3QiLCJDSVJDIiwiYXJjIiwicmFkaXVzIiwiY2xvc2VQYXRoIiwiRUxJUCIsInciLCJoIiwia2FwcGEiLCJveCIsIm95IiwieGUiLCJ5ZSIsInhtIiwieW0iLCJtb3ZlVG8iLCJiZXppZXJDdXJ2ZVRvIiwiY2xvc2UiLCJqIiwibGluZVRvIiwiQ2FudmFzUmVuZGVyZXIiLCJDQU5WQVMiLCJDR1IiLCJjb252ZXJ0U3RhZ2UiLCJyZW5kZXJTdGFnZSIsIl9jbGVhciIsIl9yZW5kZXIiLCJjbGVhclJlY3QiLCJTZXR0aW5ncyIsInBvcyIsIm5ld1BvcyIsImExIiwiYzEiLCJ0eDEiLCJtYXRyaXgiLCJiMSIsImQxIiwicGl2b3RYIiwicGl2b3RZIiwic2tld1giLCJza2V3WSIsInNyIiwiY3IiLCJjeSIsIm5zeCIsImN4IiwiYXRhbjIiLCJkZWx0YSIsInNrZXciLCJ1eCIsInV5IiwidngiLCJ2eSIsInRlbXBNYXRyaWNlcyIsIm11bCIsInNpZ251bSIsInJvdyIsIl91eCIsIl91eSIsIl92eCIsIl92eSIsIm1hdCIsImFyY1RvU2VnbWVudHNDYWNoZSIsInNlZ21lbnRUb0JlemllckNhY2hlIiwiYm91bmRzT2ZDdXJ2ZUNhY2hlIiwiX2pvaW4iLCJhcmNUb1NlZ21lbnRzIiwidG9YIiwidG9ZIiwicngiLCJyeSIsImxhcmdlIiwic3dlZXAiLCJyb3RhdGVYIiwiYXJnc1N0cmluZyIsInRoIiwic2luVGgiLCJjb3NUaCIsImZyb21YIiwiZnJvbVkiLCJweSIsInJ4MiIsInJ5MiIsInB5MiIsInB4MiIsInBsIiwiY3gxIiwiY3kxIiwibVRoZXRhIiwiY2FsY1ZlY3RvckFuZ2xlIiwiZHRoZXRhIiwic2VnbWVudHMiLCJjZWlsIiwibURlbHRhIiwibVQiLCJ0aDMiLCJzZWdtZW50VG9CZXppZXIiLCJ0aDIiLCJhcmdzU3RyaW5nMiIsImNvc3RoMiIsInNpbnRoMiIsImNvc3RoMyIsInNpbnRoMyIsImNwMVgiLCJjcDFZIiwiY3AyWCIsImNwMlkiLCJ0YSIsInRiIiwiZHJhd0FyYyIsImZ4IiwiZnkiLCJjb29yZHMiLCJyb3QiLCJzZWdzIiwic2Vnc05vcm0iLCJnZXRCb3VuZHNPZkFyYyIsImJvdW5kcyIsImdldEJvdW5kc09mQ3VydmUiLCJ4MCIsInkwIiwieDEiLCJ5MSIsIngyIiwieTIiLCJ4MyIsInkzIiwibWluIiwidHZhbHVlcyIsInQxIiwiYjJhYyIsInNxcnRiMmFjIiwiamxlbiIsIm10IiwiUmVjdGFuZ2xlIiwicmVjdGFuZ2xlIiwicGFkZGluZ1giLCJwYWRkaW5nWSIsIkNpcmNsZSIsIkVsbGlwc2UiLCJub3JteCIsIm5vcm15IiwiUG9seWdvbiIsImlsIiwiX2lzSW5zaWRlUG9seWdvbl9XaW5kaW5nTnVtYmVyIiwid24iLCJzaGlmdFAiLCJUZXh0dXJlIiwibWFwU2l6ZSIsImRlZmF1bHRWYWx1ZSIsInNldFByZWNpc2lvbiIsImNvbXBpbGVQcm9ncmFtIiwiZXh0cmFjdEF0dHJpYnV0ZXMiLCJleHRyYWN0VW5pZm9ybXMiLCJnZW5lcmF0ZVVuaWZvcm1BY2Nlc3NPYmplY3QiLCJzZXRWZXJ0ZXhBdHRyaWJBcnJheXMiLCJyZXF1aXJlJCQwIiwicmVxdWlyZSQkMSIsInJlcXVpcmUkJDIiLCJyZXF1aXJlJCQzIiwicmVxdWlyZSQkNCIsInJlcXVpcmUkJDUiLCJyZXF1aXJlJCQ2IiwicmVxdWlyZSQkNyIsIkdMRnJhbWVidWZmZXIiLCJnbENvcmUiLCJSZW5kZXJUYXJnZXQiLCJzY2FsZU1vZGUiLCJyZXNvbHV0aW9uIiwiZnJhbWVCdWZmZXIiLCJjbGVhckNvbG9yIiwic2l6ZSIsInByb2plY3Rpb25NYXRyaXgiLCJmcmFtZSIsImRlZmF1bHRGcmFtZSIsImRlc3RpbmF0aW9uRnJhbWUiLCJzb3VyY2VGcmFtZSIsInN0ZW5jaWxCdWZmZXIiLCJzdGVuY2lsTWFza1N0YWNrIiwiZmlsdGVyRGF0YSIsIlNDQUxFX01PREUiLCJjcmVhdGVSR0JBIiwiTkVBUkVTVCIsInRleHR1cmUiLCJlbmFibGVOZWFyZXN0U2NhbGluZyIsImVuYWJsZUxpbmVhclNjYWxpbmciLCJmcmFtZWJ1ZmZlciIsInNldEZyYW1lIiwicmVzaXplIiwiY2MiLCJjbGVhciIsImVuYWJsZVN0ZW5jaWwiLCJjYWxjdWxhdGVQcm9qZWN0aW9uIiwiYXBwZW5kIiwiZW5hYmxlIiwiU0NJU1NPUl9URVNUIiwic2Npc3NvciIsImRpc2FibGUiLCJ2aWV3cG9ydCIsInBtIiwicHJvamVjdGlvbkZyYW1lIiwiV2ViR0xNYW5hZ2VyIiwib2ZmIiwib25Db250ZXh0Q2hhbmdlIiwiT2JqZWN0UmVuZGVyZXIiLCJmbHVzaCIsIkRFUFRIX1RFU1QiLCJGUk9OVF9GQUNFIiwiQ1VMTF9GQUNFIiwiV2ViR0xTdGF0ZSIsImFjdGl2ZVN0YXRlIiwiVWludDhBcnJheSIsImRlZmF1bHRTdGF0ZSIsInN0YWNrSW5kZXgiLCJzdGFjayIsIm1heEF0dHJpYnMiLCJnZXRQYXJhbWV0ZXIiLCJNQVhfVkVSVEVYX0FUVFJJQlMiLCJhdHRyaWJTdGF0ZSIsIm5hdGl2ZVZhb0V4dGVuc2lvbiIsImdldEV4dGVuc2lvbiIsInN0YXRlIiwic2V0U3RhdGUiLCJzZXREZXB0aFRlc3QiLCJzZXRGcm9udEZhY2UiLCJzZXRDdWxsRmFjZSIsImZyb250RmFjZSIsInRlbXBBdHRyaWJTdGF0ZSIsImRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSIsImJpbmRWZXJ0ZXhBcnJheU9FUyIsInJlc2V0QXR0cmlidXRlcyIsInBpeGVsU3RvcmVpIiwiVU5QQUNLX0ZMSVBfWV9XRUJHTCIsImhleDJyZ2IiLCJoZXgiLCJXZWJHTEdyYXBoaWNzRGF0YSIsInNoYWRlciIsImF0dHJpYnNTdGF0ZSIsImNvbG9yIiwiaW5kaWNlcyIsIkdMQnVmZmVyIiwiY3JlYXRlVmVydGV4QnVmZmVyIiwiaW5kZXhCdWZmZXIiLCJjcmVhdGVJbmRleEJ1ZmZlciIsImRpcnR5IiwiZ2xQb2ludHMiLCJnbEluZGljZXMiLCJ2YW8iLCJWZXJ0ZXhBcnJheU9iamVjdCIsImFkZEluZGV4IiwiYWRkQXR0cmlidXRlIiwiYXR0cmlidXRlcyIsImFWZXJ0ZXhQb3NpdGlvbiIsIkZMT0FUIiwiYUNvbG9yIiwidXBsb2FkIiwiVWludDE2QXJyYXkiLCJQUkVDSVNJT04iLCJHTFNoYWRlciIsImNoZWNrUHJlY2lzaW9uIiwic3Vic3RyaW5nIiwidW5zaGlmdCIsIlNoYWRlciIsInZlcnRleFNyYyIsImZyYWdtZW50U3JjIiwiUHJpbWl0aXZlU2hhZGVyIiwiYnVpbGRMaW5lIiwid2ViR0xEYXRhIiwiZmlyc3RQb2ludCIsImxhc3RQb2ludCIsInBvcCIsIm1pZFBvaW50WCIsIm1pZFBvaW50WSIsInZlcnRzIiwiaW5kZXhDb3VudCIsImluZGV4U3RhcnQiLCJhbHBoYSIsImciLCJwMXgiLCJwMXkiLCJwMngiLCJwMnkiLCJwM3giLCJwM3kiLCJwZXJweCIsInBlcnB5IiwicGVycDJ4IiwicGVycDJ5IiwicGVycDN4IiwicGVycDN5IiwiZGlzdCIsImEyIiwiYjIiLCJjMiIsImRlbm9tIiwicGRpc3QiLCJidWlsZFBvbHkiLCJob2xlQXJyYXkiLCJob2xlcyIsImhvbGUiLCJ0cmlhbmdsZXMiLCJlYXJjdXQiLCJ2ZXJ0UG9zIiwiYnVpbGRSZWN0YW5nbGUiLCJyZWN0RGF0YSIsInRlbXBQb2ludHMiLCJidWlsZFJvdW5kZWRSZWN0YW5nbGUiLCJycmVjdERhdGEiLCJyZWNQb2ludHMiLCJ2ZWNQb3MiLCJxdWFkcmF0aWNCZXppZXJDdXJ2ZSIsImNwWCIsImNwWSIsInhhIiwieWEiLCJ4YiIsInliIiwiZ2V0UHQiLCJuMSIsIm4yIiwicGVyYyIsImRpZmYiLCJidWlsZENpcmNsZSIsImNpcmNsZURhdGEiLCJ0b3RhbFNlZ3MiLCJzZWciLCJHcmFwaGljc1JlbmRlcmVyIiwiZ3JhcGhpY3NEYXRhUG9vbCIsInByaW1pdGl2ZVNoYWRlciIsIkNPTlRFWFRfVUlEIiwid2ViR0wiLCJfd2ViR0wiLCJ1cGRhdGVHcmFwaGljcyIsImJpbmRTaGFkZXIiLCJzaGFkZXJUZW1wIiwiZ2xvYmFsTWF0cml4IiwidW5pZm9ybXMiLCJ0cmFuc2xhdGlvbk1hdHJpeCIsInRpbnQiLCJ3b3JsZEFscGhhIiwiYmluZFZhbyIsImRyYXciLCJUUklBTkdMRV9TVFJJUCIsImxhc3RJbmRleCIsImNsZWFyRGlydHkiLCJnZXRXZWJHTERhdGEiLCJSUkVDIiwicmVzZXQiLCJtYXBXZWJHTERyYXdNb2Rlc1RvUGl4aSIsIlBPSU5UUyIsIkxJTkVTIiwiTElORV9MT09QIiwiTElORV9TVFJJUCIsIlRSSUFOR0xFUyIsIlRSSUFOR0xFX0ZBTiIsIldlYkdMU3RhZ2VSZW5kZXJlciIsIldFQkdMIiwiaGFuZGxlQ29udGV4dExvc3QiLCJoYW5kbGVDb250ZXh0UmVzdG9yZWQiLCJhZGRFdmVudExpc3RlbmVyIiwiX2JhY2tncm91bmRDb2xvciIsIl9iYWNrZ3JvdW5kQ29sb3JSZ2JhIiwiX2JhY2tncm91bmRDb2xvclN0cmluZyIsImJhY2tncm91bmRDb2xvciIsIl9jb250ZXh0T3B0aW9ucyIsInRyYW5zcGFyZW50IiwiYW50aWFsaWFzIiwicHJlc2VydmVEcmF3aW5nQnVmZmVyIiwiZW1wdHlSZW5kZXJlciIsImN1cnJlbnRSZW5kZXJlciIsImNyZWF0ZUNvbnRleHQiLCJyZW5kZXJpbmdUb1NjcmVlbiIsIl9hY3RpdmVTaGFkZXIiLCJfYWN0aXZlVmFvIiwiX2FjdGl2ZVJlbmRlclRhcmdldCIsImRyYXdNb2RlcyIsIndlYmdsR1IiLCJfaW5pdENvbnRleHQiLCJpc0NvbnRleHRMb3N0IiwicmVzdG9yZUNvbnRleHQiLCJyZXNldFRvRGVmYXVsdCIsInJvb3RSZW5kZXJUYXJnZXQiLCJiaW5kUmVuZGVyVGFyZ2V0Iiwib2JqZWN0UmVuZGVyZXIiLCJzZXRPYmplY3RSZW5kZXJlciIsImFjdGl2YXRlIiwicmVuZGVyVGFyZ2V0IiwidW5iaW5kIiwidGV4dHVyZU1hbmFnZXIiLCJyZW1vdmVBbGwiLCJyZW1vdmVWaWV3IiwiZGVzdHJveVBsdWdpbnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidWlkIiwidXNlUHJvZ3JhbSIsImxvc2VDb250ZXh0IiwiV2ViR0xSZW5kZXJlciIsIndlYkdMU3RhZ2VSZW5kZXJlciIsImF1dG9SZW5kZXJlciIsIm5vV2ViR0wiLCJ1dGlscyIsImlzV2ViR0xTdXBwb3J0ZWQiLCJBcHBsaWNhdGlvbiIsIl9jaWQiLCJyYW5kb20iLCJxdWVyeSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0Iiwidmlld09iaiIsImNyZWF0ZVZpZXciLCJpbm5lckhUTUwiLCJvZmZzZXQiLCJsYXN0R2V0Uk8iLCJfY3JlYXRIb3ZlclN0YWdlIiwiX2NyZWF0ZVBpeGVsQ29udGV4dCIsInJlU2l6ZUNhbnZhcyIsImFkZENoaWxkIiwiX3BpeGVsQ2FudmFzIiwiY3JlYXRlQ2FudmFzIiwiY2FudmFzU3VwcG9ydCIsImRpc3BsYXkiLCJ6SW5kZXgiLCJ2aXNpYmlsaXR5IiwiX3BpeGVsQ3R4IiwiaW5zZXJ0QmVmb3JlIiwiaW5pdFN0YWdlIiwiU3ByaXRlIiwiR3JhcGhpY3NEYXRhIiwibGluZSIsImNwWDIiLCJjcFkyIiwicGF0aCIsImR0IiwiZHQyIiwiZHQzIiwiX2lzSW5zaWRlTGluZSIsIl9sIiwiX2EiLCJfYiIsIl9zIiwiaW5zaWRlTGluZSIsImluc2lkZUNhdGNoIiwiR3JhcGhpY3MiLCJjdXJyZW50UGF0aCIsInN5bnNTdHlsZSIsInNjdHgiLCJkcmF3U2hhcGUiLCJtbSIsImRkIiwidHQiLCJrMSIsImsyIiwiajEiLCJqMiIsInF4IiwicXkiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJhbnRpY2xvY2t3aXNlIiwic3RhcnRYIiwic3RhcnRZIiwidGhldGEiLCJ0aGV0YTIiLCJjVGhldGEiLCJzVGhldGEiLCJzZWdNaW51cyIsInJlbWFpbmRlciIsInJlYWwiLCJpbnNpZGUiLCJJbnNpZGVMaW5lIiwibWluWCIsIkluZmluaXR5IiwibWF4WCIsIm1pblkiLCJtYXhZIiwicnciLCJyaCIsIkJvdW5kIiwiX3dlYmdsIiwiU2hhcGUiLCJfY29udGV4dCIsIl9ob3ZlcmFibGUiLCJfY2xpY2thYmxlIiwiaW5pdENvbXBQcm9wZXJ0eSIsIl9yZWN0IiwiZGFzaExlbmd0aCIsImRlbHRhWCIsImRlbHRhWSIsIm51bURhc2hlcyIsIk51bWJlciIsIk1BWF9WQUxVRSIsIk1JTl9WQUxVRSIsImNwbCIsInBvaW50TGlzdCIsInJvdW5kIiwiVGV4dCIsIl9yZU5ld2xpbmUiLCJmb250UHJvcGVydHMiLCJmb250IiwiX2dldEZvbnREZWNsYXJhdGlvbiIsImdldFRleHRXaWR0aCIsImdldFRleHRIZWlnaHQiLCJfcmVuZGVyVGV4dCIsIl9nZXRUZXh0TGluZXMiLCJfZ2V0VGV4dFdpZHRoIiwiX2dldFRleHRIZWlnaHQiLCJ0ZXh0TGluZXMiLCJfcmVuZGVyVGV4dFN0cm9rZSIsIl9yZW5kZXJUZXh0RmlsbCIsImZvbnRBcnIiLCJmb250UCIsIl9ib3VuZGFyaWVzIiwibGluZUhlaWdodHMiLCJoZWlnaHRPZkxpbmUiLCJfZ2V0SGVpZ2h0T2ZMaW5lIiwiX3JlbmRlclRleHRMaW5lIiwiX2dldFRvcE9mZnNldCIsInN0cm9rZURhc2hBcnJheSIsInNldExpbmVEYXNoIiwibWV0aG9kIiwibGluZUluZGV4IiwidGV4dEFsaWduIiwiX3JlbmRlckNoYXJzIiwibWVhc3VyZVRleHQiLCJ0b3RhbFdpZHRoIiwid29yZHMiLCJ3b3Jkc1dpZHRoIiwicmVwbGFjZSIsIndpZHRoRGlmZiIsIm51bVNwYWNlcyIsInNwYWNlV2lkdGgiLCJsZWZ0T2Zmc2V0IiwiY2hhcnMiLCJmb250U2l6ZSIsImxpbmVIZWlnaHQiLCJtYXhXaWR0aCIsImN1cnJlbnRMaW5lV2lkdGgiLCJ0ZXh0QmFzZWxpbmUiLCJWZWN0b3IiLCJfYXhlcyIsImludGVycG9sYXRlIiwiaXNMb29wIiwic21vb3RoRmlsdGVyIiwicmV0IiwiZGlzdGFuY2UiLCJwcmVWZXJ0b3IiLCJpVnRvciIsImlkeCIsIncyIiwidzMiLCJfY2FjaGUiLCJfcmFkaWFucyIsImlzRGVncmVlcyIsInRvRml4ZWQiLCJkZWdyZWVUb1JhZGlhbiIsInJhZGlhblRvRGVncmVlIiwiZGVncmVlVG8zNjAiLCJyZUFuZyIsImdldElzZ29uUG9pbnRMaXN0IiwiZFN0ZXAiLCJiZWdpbkRlZyIsImRlZyIsImdldFNtb290aFBvaW50TGlzdCIsInBMaXN0IiwiY3VyckwiLCJTbW9vdGhTcGxpbmUiLCJCcm9rZW5MaW5lIiwiYXR5cGUiLCJzbW9vdGgiLCJfTWF0aCIsInNldEdyYXBoaWNzIiwibGluZVR5cGUiLCJzaSIsInNsIiwiZGFzaGVkTGluZVRvIiwiZHJhd0NpcmNsZSIsIlBhdGgiLCJkcmF3VHlwZU9ubHkiLCJfX3BhcnNlUGF0aERhdGEiLCJwYXRocyIsInBhdGhTdHIiLCJfcGFyc2VDaGlsZFBhdGhEYXRhIiwiY3MiLCJSZWdFeHAiLCJhcnIiLCJjYSIsImNweCIsImNweSIsInN0ciIsImNtZCIsImN0bFB0eCIsImN0bFB0eSIsInByZXZDbWQiLCJwc2kiLCJmYSIsImZzIiwiY29tbWFuZCIsInBhdGhBcnJheSIsIl9wYXJzZVBhdGhEYXRhIiwicXVhZHJhdGljQ3VydmVUbyIsIkRyb3BsZXQiLCJteSIsIl9jcmVhdGVQYXRoIiwicHMiLCJociIsInZyIiwiZHJhd0VsbGlwc2UiLCJfZHJhd1R5cGVPbmx5IiwiSXNvZ29uIiwiTGluZSIsIlJlY3QiLCJnZXRDc3NPcmRlckFyciIsIkciLCJkcmF3UmVjdCIsIl9idWlsZFJhZGl1c1BhdGgiLCJTZWN0b3IiLCJyZWdBbmdsZSIsImlzUmluZyIsInIwIiwibXlNYXRoIiwiY2xvY2t3aXNlIiwicmVnSW4iLCJnZXRSZWdBbmdsZSIsInA0RGlyZWN0aW9uIiwiaW5BbmdsZVJlZyIsImdldFJlY3RGb3JtUG9pbnRMaXN0IiwiQ2FudmF4IiwiRGlzcGxheSIsIlNoYXBlcyIsIkV2ZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxNQUFJLEVBQVI7QUFDQSxJ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VyxFQUFFLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQzs7O0lBRzVFLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUcsR0FBRyxFQUFFO1FBQ3hCLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDOztRQUV0QixLQUFLLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsUUFBUSxFQUFFLENBQUMsSUFBSSxHQUFHLEVBQUU7WUFDdEMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNaLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLElBQUksQ0FBQyxHQUFHLElBQUksRUFBRSxJQUFJLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxHQUFHLElBQUksRUFBRSxJQUFJLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxHQUFHLElBQUksRUFBRSxJQUFJLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxHQUFHLElBQUksRUFBRSxJQUFJLEdBQUcsQ0FBQyxDQUFDO1NBQzFCOzs7UUFHRCxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxFQUFFLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQztLQUM3Qzs7SUFFRCxZQUFZLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQzs7SUFFMUQsT0FBTyxTQUFTLENBQUM7Q0FDcEI7OztBQUdELFNBQVMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUU7SUFDbEQsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDOztJQUVaLElBQUksU0FBUyxNQUFNLFVBQVUsQ0FBQyxJQUFJ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LENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7O0lBRzFFLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO1FBQzdDLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDOzs7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QyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ2YsSUFBSSxHQUFHLENBQUMsQ0FBQzthQUNaOztZQUVELENBQUMsR0FBRyxDQUFDLENBQUM7U0FDVDs7UUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixNQUFNLElBQUksQ0FBQyxDQUFDOztLQUVmLFFBQVEsU0FBUyxHQUFHLENBQUMsRUFBRTs7SUFFeEIsT0FBTyxJQUFJLENBQUM7Q0FDZjs7O0FBR0QsU0FBUyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTs7SUFFcEMsQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQzlCLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQzs7SUFFOUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxVQUFVLENBQUM7SUFDaEMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxVQUFVLENBQUM7SUFDaEMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxVQUFVLENBQUM7SUFDaEMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxVQUFVLENBQUM7O0lBRWhDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDO0lBQ2hDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDO0lBQ2hDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDO0lBQ2hDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDOztJQUVoQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Q0FDdkI7OztBQUdELFNBQVMsV0FBVyxDQUFDLEtBQUssRUFBRTtJQUN4QixJQUFJLENBQUMsR0FBRyxLQUFLO1FBQ1QsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUNyQixHQUFHO1FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLEVBQUUsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNuQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztLQUNkLFFBQVEsQ0FBQyxLQUFLLEtBQUssRUFBRTs7SUFFdEIsT0FBTyxRQUFRLENBQUM7Q0FDbkI7OztBQUdELFNBQVMsZUFBZSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7SUFDckQsT0FBTyxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztXQUNsRCxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztXQUNsRCxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQzdEOzs7QUFHRCxTQUFTLGVBQWUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQzNCLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztXQUNoRSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUMzRTs7O0FBR0QsU0FBUyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7SUFDbkIsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNoRTs7O0FBR0QsU0FBUyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRTtJQUNwQixPQUFPLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDekM7OztBQUdELFNBQVMsVUFBVSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtJQUNoQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztTQUNoQyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxPQUFPLElBQUksQ0FBQztJQUNwRCxPQUFPLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO1dBQzdDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDeEQ7OztBQUdELFNBQVMsaUJBQWlCLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtJQUM3QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixHQUFHO1FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQzlELFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsT0FBTyxJQUFJLENBQUM7UUFDakQsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7S0FDZCxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7O0lBRWxCLE9BQU8sS0FBSyxDQUFDO0NBQ2hCOzs7QUFHRCxTQUFTLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQ3pCLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQzlCLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDbEQsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3hEOzs7QUFHRCxTQUFTLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQ3hCLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDTCxNQUFNLEdBQUcsS0FBSztRQUNkLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3BCLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsR0FBRztRQUNDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqRyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDckIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7S0FDZCxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7O0lBRWxCLE9BQU8sTUFBTSxDQUFDO0NBQ2pCOzs7O0FBSUQsU0FBUyxZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtJQUN4QixJQUFJLEVBQUUsR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QixFQUFFLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJO1FBQ1gsRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7O0lBRWhCLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7O0lBRVgsRUFBRSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7SUFDYixFQUFFLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQzs7SUFFYixFQUFFLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNiLEVBQUUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDOztJQUViLEVBQUUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ2IsRUFBRSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7O0lBRWIsT0FBTyxFQUFFLENBQUM7Q0FDYjs7O0FBR0QsU0FBUyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFO0lBQy9CLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7O0lBRTFCLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDUCxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztRQUNYLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDOztLQUVkLE1BQU07UUFDSCxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDbkIsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7S0FDakI7SUFDRCxPQUFPLENBQUMsQ0FBQztDQUNaOztBQUVELFNBQVMsVUFBVSxDQUFDLENBQUMsRUFBRTtJQUNuQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3JCLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7O0lBRXJCLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3JDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO0NBQ3hDOztBQUVELFNBQVMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFOztJQUVuQixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzs7O0lBR1gsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzs7O0lBR1gsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7OztJQUdqQixJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQzs7O0lBR2QsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDbEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7OztJQUdsQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztDQUN4Qjs7OztBQUlELE1BQU0sQ0FBQyxTQUFTLEdBQUcsVUFBVSxJQUFJLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUU7SUFDNUQsSUFBSSxRQUFRLEdBQUcsV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUM7SUFDakQsSUFBSSxRQUFRLEdBQUcsUUFBUSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQzs7SUFFN0QsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMvRCxJQUFJLFFBQVEsRUFBRTtRQUNWLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDcEQsSUFBSSxLQUFLLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNqQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQy9ELFdBQVcsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzlEO0tBQ0o7O0lBRUQsSUFBSSxhQUFhLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3RDLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDM0IsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDL0IsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDL0IsYUFBYSxJQUFJLElBQUksQ0FBQyxHQUFHO1lBQ3JCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDakQsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDMUQ7O0lBRUQsT0FBTyxXQUFXLEtBQUssQ0FBQyxJQUFJLGFBQWEsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUMvQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsYUFBYSxHQUFHLFdBQVcsSUFBSSxXQUFXLENBQUMsQ0FBQztDQUM3RCxDQUFDOztBQUVGLFNBQVMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRTtJQUN2QyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDWixLQUFLLElBQUksQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxHQUFHLEVBQUU7UUFDbEQsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6RCxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ1Q7SUFDRCxPQUFPLEdBQUcsQ0FBQztDQUNkOzs7QUFHRCxNQUFNLENBQUMsT0FBTyxHQUFHLFVBQVUsSUFBSSxFQUFFO0lBQzdCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNO1FBQ3ZCLE1BQU0sR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsR0FBRyxDQUFDO1FBQ25ELFNBQVMsR0FBRyxDQUFDLENBQUM7O0lBRWxCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2xDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3JDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDckU7UUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDUCxTQUFTLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDaEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDaEM7S0FDSjtJQUNELE9BQU8sTUFBTSxDQUFDO0NBQ2pCLENBQUM7O0FDL25CRjs7Ozs7Ozs7OztBQVVBLEFBQWUsU0FBU3FCLFNBQVQsQ0FBbUJ4VCxZQUFuQixFQUFpQzJSLFNBQWpDLEVBQ2Y7aUJBQ2lCclIsTUFBYixHQUFzQk4sYUFBYVIsS0FBYixDQUFtQmMsTUFBbkIsQ0FBMEJ4ZixLQUExQixFQUF0Qjs7UUFFSXdmLFNBQVNOLGFBQWFNLE1BQTFCOztRQUVJTixhQUFhVSxJQUFiLElBQXFCSixPQUFPNWlCLE1BQVAsSUFBaUIsQ0FBMUMsRUFDQTtZQUNVKzFCLFlBQVksRUFBbEI7O1lBRU1DLFFBQVExVCxhQUFhMFQsS0FBM0I7O2FBRUssSUFBSS8xQixJQUFJLENBQWIsRUFBZ0JBLElBQUkrMUIsTUFBTWgyQixNQUExQixFQUFrQ0MsR0FBbEMsRUFDQTtnQkFDVWcyQixPQUFPRCxNQUFNLzFCLENBQU4sQ0FBYjs7c0JBRVVJLElBQVYsQ0FBZXVpQixPQUFPNWlCLE1BQVAsR0FBZ0IsQ0FBL0I7O3FCQUVTNGlCLE9BQU96UixNQUFQLENBQWM4a0IsS0FBS3JULE1BQW5CLENBQVQ7Ozs7WUFJRTJSLFFBQVFOLFVBQVVyUixNQUF4QjtZQUNNeVAsVUFBVTRCLFVBQVU1QixPQUExQjs7WUFFTXJ5QixTQUFTNGlCLE9BQU81aUIsTUFBUCxHQUFnQixDQUEvQjs7O1lBR01veUIsUUFBUUwsUUFBUXpQLGFBQWFFLFNBQXJCLENBQWQ7WUFDTWtTLFFBQVFwUyxhQUFhUyxTQUEzQjtZQUNNNWUsSUFBSWl1QixNQUFNLENBQU4sSUFBV3NDLEtBQXJCO1lBQ01DLElBQUl2QyxNQUFNLENBQU4sSUFBV3NDLEtBQXJCO1lBQ01ua0IsSUFBSTZoQixNQUFNLENBQU4sSUFBV3NDLEtBQXJCOztZQUVNd0IsWUFBWUMsU0FBT3ZULE1BQVAsRUFBZW1ULFNBQWYsRUFBMEIsQ0FBMUIsQ0FBbEI7O1lBRUksQ0FBQ0csU0FBTCxFQUNBOzs7O1lBSU1FLFVBQVU3QixNQUFNdjBCLE1BQU4sR0FBZSxDQUEvQjs7YUFFSyxJQUFJQyxLQUFJLENBQWIsRUFBZ0JBLEtBQUlpMkIsVUFBVWwyQixNQUE5QixFQUFzQ0MsTUFBSyxDQUEzQyxFQUNBO29CQUNZSSxJQUFSLENBQWE2MUIsVUFBVWoyQixFQUFWLElBQWVtMkIsT0FBNUI7b0JBQ1EvMUIsSUFBUixDQUFhNjFCLFVBQVVqMkIsRUFBVixJQUFlbTJCLE9BQTVCO29CQUNRLzFCLElBQVIsQ0FBYTYxQixVQUFVajJCLEtBQUksQ0FBZCxJQUFtQm0yQixPQUFoQztvQkFDUS8xQixJQUFSLENBQWE2MUIsVUFBVWoyQixLQUFJLENBQWQsSUFBbUJtMkIsT0FBaEM7b0JBQ1EvMUIsSUFBUixDQUFhNjFCLFVBQVVqMkIsS0FBSSxDQUFkLElBQW1CbTJCLE9BQWhDOzs7YUFHQyxJQUFJbjJCLE1BQUksQ0FBYixFQUFnQkEsTUFBSUQsTUFBcEIsRUFBNEJDLEtBQTVCLEVBQ0E7a0JBQ1VJLElBQU4sQ0FBV3VpQixPQUFPM2lCLE1BQUksQ0FBWCxDQUFYLEVBQTBCMmlCLE9BQVEzaUIsTUFBSSxDQUFMLEdBQVUsQ0FBakIsQ0FBMUIsRUFDSWtFLENBREosRUFDT3d3QixDQURQLEVBQ1Vwa0IsQ0FEVixFQUNhbWtCLEtBRGI7Ozs7UUFLSnBTLGFBQWF0RCxTQUFiLEdBQXlCLENBQTdCLEVBQ0E7a0JBQ2NzRCxZQUFWLEVBQXdCMlIsU0FBeEI7Ozs7QUN4RVI7Ozs7Ozs7Ozs7QUFVQSxBQUFlLFNBQVNvQyxjQUFULENBQXdCL1QsWUFBeEIsRUFBc0MyUixTQUF0QyxFQUNmOzs7O1FBSVVxQyxXQUFXaFUsYUFBYVIsS0FBOUI7UUFDTXRjLElBQUk4d0IsU0FBUzl3QixDQUFuQjtRQUNNQyxJQUFJNndCLFNBQVM3d0IsQ0FBbkI7UUFDTWlELFFBQVE0dEIsU0FBUzV0QixLQUF2QjtRQUNNQyxTQUFTMnRCLFNBQVMzdEIsTUFBeEI7O1FBRUkyWixhQUFhVSxJQUFqQixFQUNBO1lBQ1VvUCxRQUFRTCxRQUFRelAsYUFBYUUsU0FBckIsQ0FBZDtZQUNNa1MsUUFBUXBTLGFBQWFTLFNBQTNCOztZQUVNNWUsSUFBSWl1QixNQUFNLENBQU4sSUFBV3NDLEtBQXJCO1lBQ01DLElBQUl2QyxNQUFNLENBQU4sSUFBV3NDLEtBQXJCO1lBQ01ua0IsSUFBSTZoQixNQUFNLENBQU4sSUFBV3NDLEtBQXJCOztZQUVNSCxRQUFRTixVQUFVclIsTUFBeEI7WUFDTXlQLFVBQVU0QixVQUFVNUIsT0FBMUI7O1lBRU0rRCxVQUFVN0IsTUFBTXYwQixNQUFOLEdBQWUsQ0FBL0I7OztjQUdNSyxJQUFOLENBQVdtRixDQUFYLEVBQWNDLENBQWQ7Y0FDTXBGLElBQU4sQ0FBVzhELENBQVgsRUFBY3d3QixDQUFkLEVBQWlCcGtCLENBQWpCLEVBQW9CbWtCLEtBQXBCOztjQUVNcjBCLElBQU4sQ0FBV21GLElBQUlrRCxLQUFmLEVBQXNCakQsQ0FBdEI7Y0FDTXBGLElBQU4sQ0FBVzhELENBQVgsRUFBY3d3QixDQUFkLEVBQWlCcGtCLENBQWpCLEVBQW9CbWtCLEtBQXBCOztjQUVNcjBCLElBQU4sQ0FBV21GLENBQVgsRUFBY0MsSUFBSWtELE1BQWxCO2NBQ010SSxJQUFOLENBQVc4RCxDQUFYLEVBQWN3d0IsQ0FBZCxFQUFpQnBrQixDQUFqQixFQUFvQm1rQixLQUFwQjs7Y0FFTXIwQixJQUFOLENBQVdtRixJQUFJa0QsS0FBZixFQUFzQmpELElBQUlrRCxNQUExQjtjQUNNdEksSUFBTixDQUFXOEQsQ0FBWCxFQUFjd3dCLENBQWQsRUFBaUJwa0IsQ0FBakIsRUFBb0Jta0IsS0FBcEI7OztnQkFHUXIwQixJQUFSLENBQWErMUIsT0FBYixFQUFzQkEsT0FBdEIsRUFBK0JBLFVBQVUsQ0FBekMsRUFBNENBLFVBQVUsQ0FBdEQsRUFBeURBLFVBQVUsQ0FBbkUsRUFBc0VBLFVBQVUsQ0FBaEY7OztRQUdBOVQsYUFBYXRELFNBQWpCLEVBQ0E7WUFDVXVYLGFBQWFqVSxhQUFhTSxNQUFoQzs7cUJBRWFBLE1BQWIsR0FBc0IsQ0FBQ3BkLENBQUQsRUFBSUMsQ0FBSixFQUNsQkQsSUFBSWtELEtBRGMsRUFDUGpELENBRE8sRUFFbEJELElBQUlrRCxLQUZjLEVBRVBqRCxJQUFJa0QsTUFGRyxFQUdsQm5ELENBSGtCLEVBR2ZDLElBQUlrRCxNQUhXLEVBSWxCbkQsQ0FKa0IsRUFJZkMsQ0FKZSxDQUF0Qjs7a0JBTVU2YyxZQUFWLEVBQXdCMlIsU0FBeEI7O3FCQUVhclIsTUFBYixHQUFzQjJULFVBQXRCOzs7O0FDL0RSOzs7Ozs7Ozs7O0FBVUEsQUFBZSxTQUFTQyxxQkFBVCxDQUErQmxVLFlBQS9CLEVBQTZDMlIsU0FBN0MsRUFDZjtRQUNVd0MsWUFBWW5VLGFBQWFSLEtBQS9CO1FBQ010YyxJQUFJaXhCLFVBQVVqeEIsQ0FBcEI7UUFDTUMsSUFBSWd4QixVQUFVaHhCLENBQXBCO1FBQ01pRCxRQUFRK3RCLFVBQVUvdEIsS0FBeEI7UUFDTUMsU0FBUzh0QixVQUFVOXRCLE1BQXpCOztRQUVNOGEsU0FBU2dULFVBQVVoVCxNQUF6Qjs7UUFFTWlULFlBQVksRUFBbEI7O2NBRVVyMkIsSUFBVixDQUFlbUYsQ0FBZixFQUFrQkMsSUFBSWdlLE1BQXRCO3lCQUNxQmplLENBQXJCLEVBQXdCQyxJQUFJa0QsTUFBSixHQUFhOGEsTUFBckMsRUFBNkNqZSxDQUE3QyxFQUFnREMsSUFBSWtELE1BQXBELEVBQTREbkQsSUFBSWllLE1BQWhFLEVBQXdFaGUsSUFBSWtELE1BQTVFLEVBQW9GK3RCLFNBQXBGO3lCQUNxQmx4QixJQUFJa0QsS0FBSixHQUFZK2EsTUFBakMsRUFBeUNoZSxJQUFJa0QsTUFBN0MsRUFBcURuRCxJQUFJa0QsS0FBekQsRUFBZ0VqRCxJQUFJa0QsTUFBcEUsRUFBNEVuRCxJQUFJa0QsS0FBaEYsRUFBdUZqRCxJQUFJa0QsTUFBSixHQUFhOGEsTUFBcEcsRUFBNEdpVCxTQUE1Rzt5QkFDcUJseEIsSUFBSWtELEtBQXpCLEVBQWdDakQsSUFBSWdlLE1BQXBDLEVBQTRDamUsSUFBSWtELEtBQWhELEVBQXVEakQsQ0FBdkQsRUFBMERELElBQUlrRCxLQUFKLEdBQVkrYSxNQUF0RSxFQUE4RWhlLENBQTlFLEVBQWlGaXhCLFNBQWpGO3lCQUNxQmx4QixJQUFJaWUsTUFBekIsRUFBaUNoZSxDQUFqQyxFQUFvQ0QsQ0FBcEMsRUFBdUNDLENBQXZDLEVBQTBDRCxDQUExQyxFQUE2Q0MsSUFBSWdlLE1BQUosR0FBYSxZQUExRCxFQUF3RWlULFNBQXhFOzs7OztRQUtJcFUsYUFBYVUsSUFBakIsRUFDQTtZQUNVb1AsUUFBUUwsUUFBUXpQLGFBQWFFLFNBQXJCLENBQWQ7WUFDTWtTLFFBQVFwUyxhQUFhUyxTQUEzQjs7WUFFTTVlLElBQUlpdUIsTUFBTSxDQUFOLElBQVdzQyxLQUFyQjtZQUNNQyxJQUFJdkMsTUFBTSxDQUFOLElBQVdzQyxLQUFyQjtZQUNNbmtCLElBQUk2aEIsTUFBTSxDQUFOLElBQVdzQyxLQUFyQjs7WUFFTUgsUUFBUU4sVUFBVXJSLE1BQXhCO1lBQ015UCxVQUFVNEIsVUFBVTVCLE9BQTFCOztZQUVNc0UsU0FBU3BDLE1BQU12MEIsTUFBTixHQUFlLENBQTlCOztZQUVNazJCLFlBQVlDLFNBQU9PLFNBQVAsRUFBa0IsSUFBbEIsRUFBd0IsQ0FBeEIsQ0FBbEI7O2FBRUssSUFBSXoyQixJQUFJLENBQVIsRUFBV3VrQixJQUFJMFIsVUFBVWwyQixNQUE5QixFQUFzQ0MsSUFBSXVrQixDQUExQyxFQUE2Q3ZrQixLQUFLLENBQWxELEVBQ0E7b0JBQ1lJLElBQVIsQ0FBYTYxQixVQUFVajJCLENBQVYsSUFBZTAyQixNQUE1QjtvQkFDUXQyQixJQUFSLENBQWE2MUIsVUFBVWoyQixDQUFWLElBQWUwMkIsTUFBNUI7b0JBQ1F0MkIsSUFBUixDQUFhNjFCLFVBQVVqMkIsSUFBSSxDQUFkLElBQW1CMDJCLE1BQWhDO29CQUNRdDJCLElBQVIsQ0FBYTYxQixVQUFVajJCLElBQUksQ0FBZCxJQUFtQjAyQixNQUFoQztvQkFDUXQyQixJQUFSLENBQWE2MUIsVUFBVWoyQixJQUFJLENBQWQsSUFBbUIwMkIsTUFBaEM7OzthQUdDLElBQUkxMkIsS0FBSSxDQUFSLEVBQVd1a0IsS0FBSWtTLFVBQVUxMkIsTUFBOUIsRUFBc0NDLEtBQUl1a0IsRUFBMUMsRUFBNkN2a0IsSUFBN0MsRUFDQTtrQkFDVUksSUFBTixDQUFXcTJCLFVBQVV6MkIsRUFBVixDQUFYLEVBQXlCeTJCLFVBQVUsRUFBRXoyQixFQUFaLENBQXpCLEVBQXlDa0UsQ0FBekMsRUFBNEN3d0IsQ0FBNUMsRUFBK0Nwa0IsQ0FBL0MsRUFBa0Rta0IsS0FBbEQ7Ozs7UUFJSnBTLGFBQWF0RCxTQUFqQixFQUNBO1lBQ1V1WCxhQUFhalUsYUFBYU0sTUFBaEM7O3FCQUVhQSxNQUFiLEdBQXNCOFQsU0FBdEI7O2tCQUVVcFUsWUFBVixFQUF3QjJSLFNBQXhCOztxQkFFYXJSLE1BQWIsR0FBc0IyVCxVQUF0Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUJSLFNBQVNLLG9CQUFULENBQThCeE8sS0FBOUIsRUFBcUNDLEtBQXJDLEVBQTRDd08sR0FBNUMsRUFBaURDLEdBQWpELEVBQXNEclAsR0FBdEQsRUFBMkRDLEdBQTNELEVBQ0E7UUFEZ0U3VixHQUNoRSx1RUFEc0UsRUFDdEU7O1FBQ1VxRixJQUFJLEVBQVY7UUFDTTBMLFNBQVMvUSxHQUFmOztRQUVJa2xCLEtBQUssQ0FBVDtRQUNJQyxLQUFLLENBQVQ7UUFDSUMsS0FBSyxDQUFUO1FBQ0lDLEtBQUssQ0FBVDtRQUNJMXhCLElBQUksQ0FBUjtRQUNJQyxJQUFJLENBQVI7O2FBRVMweEIsS0FBVCxDQUFlQyxFQUFmLEVBQW1CQyxFQUFuQixFQUF1QkMsSUFBdkIsRUFDQTtZQUNVQyxPQUFPRixLQUFLRCxFQUFsQjs7ZUFFT0EsS0FBTUcsT0FBT0QsSUFBcEI7OztTQUdDLElBQUlyM0IsSUFBSSxDQUFSLEVBQVd1a0IsSUFBSSxDQUFwQixFQUF1QnZrQixLQUFLaVgsQ0FBNUIsRUFBK0IsRUFBRWpYLENBQWpDLEVBQ0E7WUFDUUEsSUFBSWlYLENBQVI7OzthQUdLaWdCLE1BQU0vTyxLQUFOLEVBQWF5TyxHQUFiLEVBQWtCclMsQ0FBbEIsQ0FBTDthQUNLMlMsTUFBTTlPLEtBQU4sRUFBYXlPLEdBQWIsRUFBa0J0UyxDQUFsQixDQUFMO2FBQ0syUyxNQUFNTixHQUFOLEVBQVdwUCxHQUFYLEVBQWdCakQsQ0FBaEIsQ0FBTDthQUNLMlMsTUFBTUwsR0FBTixFQUFXcFAsR0FBWCxFQUFnQmxELENBQWhCLENBQUw7OztZQUdJMlMsTUFBTUosRUFBTixFQUFVRSxFQUFWLEVBQWN6UyxDQUFkLENBQUo7WUFDSTJTLE1BQU1ILEVBQU4sRUFBVUUsRUFBVixFQUFjMVMsQ0FBZCxDQUFKOztlQUVPbmtCLElBQVAsQ0FBWW1GLENBQVosRUFBZUMsQ0FBZjs7O1dBR0dtZCxNQUFQOzs7QUMvSEo7Ozs7Ozs7Ozs7QUFVQSxBQUFlLFNBQVM0VSxXQUFULENBQXFCbFYsWUFBckIsRUFBbUMyUixTQUFuQyxFQUNmOzs7UUFHVXdELGFBQWFuVixhQUFhUixLQUFoQztRQUNNdGMsSUFBSWl5QixXQUFXanlCLENBQXJCO1FBQ01DLElBQUlneUIsV0FBV2h5QixDQUFyQjtRQUNJaUQsY0FBSjtRQUNJQyxlQUFKOzs7UUFHSTJaLGFBQWFyYyxJQUFiLEtBQXNCMFcsT0FBTzRHLElBQWpDLEVBQ0E7Z0JBQ1lrVSxXQUFXaFUsTUFBbkI7aUJBQ1NnVSxXQUFXaFUsTUFBcEI7S0FISixNQU1BO2dCQUNZZ1UsV0FBVy91QixLQUFuQjtpQkFDUyt1QixXQUFXOXVCLE1BQXBCOzs7UUFHRSt1QixZQUFZejFCLEtBQUtnVixLQUFMLENBQVcsS0FBS2hWLEtBQUswVSxJQUFMLENBQVU4Z0IsV0FBV2hVLE1BQXJCLENBQWhCLEtBQ1h4aEIsS0FBS2dWLEtBQUwsQ0FBVyxLQUFLaFYsS0FBSzBVLElBQUwsQ0FBVThnQixXQUFXL3VCLEtBQVgsR0FBbUIrdUIsV0FBVzl1QixNQUF4QyxDQUFoQixDQURQOztRQUdNZ3ZCLE1BQU8xMUIsS0FBS2lQLEVBQUwsR0FBVSxDQUFYLEdBQWdCd21CLFNBQTVCOztRQUVJcFYsYUFBYVUsSUFBakIsRUFDQTtZQUNVb1AsUUFBUUwsUUFBUXpQLGFBQWFFLFNBQXJCLENBQWQ7WUFDTWtTLFFBQVFwUyxhQUFhUyxTQUEzQjs7WUFFTTVlLElBQUlpdUIsTUFBTSxDQUFOLElBQVdzQyxLQUFyQjtZQUNNQyxJQUFJdkMsTUFBTSxDQUFOLElBQVdzQyxLQUFyQjtZQUNNbmtCLElBQUk2aEIsTUFBTSxDQUFOLElBQVdzQyxLQUFyQjs7WUFFTUgsUUFBUU4sVUFBVXJSLE1BQXhCO1lBQ015UCxVQUFVNEIsVUFBVTVCLE9BQTFCOztZQUVJc0UsU0FBU3BDLE1BQU12MEIsTUFBTixHQUFlLENBQTVCOztnQkFFUUssSUFBUixDQUFhczJCLE1BQWI7O2FBRUssSUFBSTEyQixJQUFJLENBQWIsRUFBZ0JBLElBQUl5M0IsWUFBWSxDQUFoQyxFQUFtQ3ozQixHQUFuQyxFQUNBO2tCQUNVSSxJQUFOLENBQVdtRixDQUFYLEVBQWNDLENBQWQsRUFBaUJ0QixDQUFqQixFQUFvQnd3QixDQUFwQixFQUF1QnBrQixDQUF2QixFQUEwQm1rQixLQUExQjs7a0JBRU1yMEIsSUFBTixDQUNJbUYsSUFBS3ZELEtBQUtnUCxHQUFMLENBQVMwbUIsTUFBTTEzQixDQUFmLElBQW9CeUksS0FEN0IsRUFFSWpELElBQUt4RCxLQUFLK08sR0FBTCxDQUFTMm1CLE1BQU0xM0IsQ0FBZixJQUFvQjBJLE1BRjdCLEVBR0l4RSxDQUhKLEVBR093d0IsQ0FIUCxFQUdVcGtCLENBSFYsRUFHYW1rQixLQUhiOztvQkFNUXIwQixJQUFSLENBQWFzMkIsUUFBYixFQUF1QkEsUUFBdkI7OztnQkFHSXQyQixJQUFSLENBQWFzMkIsU0FBUyxDQUF0Qjs7O1FBR0FyVSxhQUFhdEQsU0FBakIsRUFDQTtZQUNVdVgsYUFBYWpVLGFBQWFNLE1BQWhDOztxQkFFYUEsTUFBYixHQUFzQixFQUF0Qjs7YUFFSyxJQUFJM2lCLEtBQUksQ0FBYixFQUFnQkEsS0FBSXkzQixZQUFZLENBQWhDLEVBQW1DejNCLElBQW5DLEVBQ0E7eUJBQ2lCMmlCLE1BQWIsQ0FBb0J2aUIsSUFBcEIsQ0FDSW1GLElBQUt2RCxLQUFLZ1AsR0FBTCxDQUFTMG1CLE1BQU0xM0IsRUFBZixJQUFvQnlJLEtBRDdCLEVBRUlqRCxJQUFLeEQsS0FBSytPLEdBQUwsQ0FBUzJtQixNQUFNMTNCLEVBQWYsSUFBb0IwSSxNQUY3Qjs7O2tCQU1NMlosWUFBVixFQUF3QjJSLFNBQXhCOztxQkFFYXJSLE1BQWIsR0FBc0IyVCxVQUF0Qjs7OztJQzVFYXFCOzs7Ozs7OEJBS0x4VixRQUFaLEVBQ0E7Ozt1SUFDVUEsUUFEVjs7Y0FHU3lWLGdCQUFMLEdBQXdCLEVBQXhCOztjQUVLQyxlQUFMLEdBQXVCLElBQXZCOztjQUVLenlCLEVBQUwsR0FBVStjLFNBQVMvYyxFQUFuQjs7O2NBR0sweUIsV0FBTCxHQUFtQixDQUFuQjs7Ozs7Ozs7Ozs7Ozs7MENBVUo7aUJBQ1MxeUIsRUFBTCxHQUFVLEtBQUsrYyxRQUFMLENBQWMvYyxFQUF4QjtpQkFDSzB5QixXQUFMLEdBQW1CLEtBQUszVixRQUFMLENBQWMyVixXQUFqQztpQkFDS0QsZUFBTCxHQUF1QixJQUFJL0QsZUFBSixDQUFvQixLQUFLMXVCLEVBQXpCLENBQXZCOzs7Ozs7Ozs7O2tDQVFKOzJCQUNtQnRHLFNBQWYsQ0FBeUJtUCxPQUF6QixDQUFpQzVOLElBQWpDLENBQXNDLElBQXRDOztpQkFFSyxJQUFJTCxJQUFJLENBQWIsRUFBZ0JBLElBQUksS0FBSzQzQixnQkFBTCxDQUFzQjczQixNQUExQyxFQUFrRCxFQUFFQyxDQUFwRCxFQUNBO3FCQUNTNDNCLGdCQUFMLENBQXNCNTNCLENBQXRCLEVBQXlCaU8sT0FBekI7OztpQkFHQzJwQixnQkFBTCxHQUF3QixJQUF4Qjs7Ozs7Ozs7Ozs7K0JBUUl4VixlQUNSO2dCQUNVL0MsV0FBVytDLGNBQWMvQyxRQUEvQjtnQkFDTThDLFdBQVcsS0FBS0EsUUFBdEI7Z0JBQ00vYyxLQUFLK2MsU0FBUy9jLEVBQXBCOztnQkFFSTR1QixrQkFBSjtnQkFDSStELFFBQVExWSxTQUFTMlksTUFBVCxDQUFnQixLQUFLRixXQUFyQixDQUFaOztnQkFFSSxDQUFDQyxLQUFELElBQVUxWSxTQUFTb1QsS0FBVCxLQUFtQnNGLE1BQU10RixLQUF2QyxFQUNBO3FCQUNTd0YsY0FBTCxDQUFvQjVZLFFBQXBCOzt3QkFFUUEsU0FBUzJZLE1BQVQsQ0FBZ0IsS0FBS0YsV0FBckIsQ0FBUjs7OztnQkFJRTdGLFNBQVMsS0FBSzRGLGVBQXBCOztxQkFFU0ssVUFBVCxDQUFvQmpHLE1BQXBCOztpQkFFSyxJQUFJanlCLElBQUksQ0FBUixFQUFXaVgsSUFBSThnQixNQUFNelYsSUFBTixDQUFXdmlCLE1BQS9CLEVBQXVDQyxJQUFJaVgsQ0FBM0MsRUFBOENqWCxHQUE5QyxFQUNBOzRCQUNnQiszQixNQUFNelYsSUFBTixDQUFXdGlCLENBQVgsQ0FBWjtvQkFDTW00QixhQUFhbkUsVUFBVS9CLE1BQTdCOzt5QkFFU2lHLFVBQVQsQ0FBb0JDLFVBQXBCOztvQkFFSUMsZUFBZWhXLGNBQWMzVSxxQkFBZCxHQUFzQ3VTLE9BQXRDLENBQThDLElBQTlDLENBQW5COzJCQUNXcVksUUFBWCxDQUFvQkMsaUJBQXBCLEdBQXdDRixZQUF4QzsyQkFDV0MsUUFBWCxDQUFvQkUsSUFBcEIsR0FBMkJ6RyxRQUFRelMsU0FBU2taLElBQWpCLENBQTNCOzJCQUNXRixRQUFYLENBQW9CNUQsS0FBcEIsR0FBNEJwVixTQUFTbVosVUFBckM7O3lCQUVTQyxPQUFULENBQWlCekUsVUFBVXBCLEdBQTNCOzBCQUNVQSxHQUFWLENBQWM4RixJQUFkLENBQW1CdHpCLEdBQUd1ekIsY0FBdEIsRUFBc0MzRSxVQUFVNUIsT0FBVixDQUFrQnJ5QixNQUF4RDs7Ozs7Ozs7Ozs7Ozt1Q0FVT3NmLFVBQ2Y7Z0JBQ1VqYSxLQUFLLEtBQUsrYyxRQUFMLENBQWMvYyxFQUF6Qjs7O2dCQUdJMnlCLFFBQVExWSxTQUFTMlksTUFBVCxDQUFnQixLQUFLRixXQUFyQixDQUFaOzs7Z0JBR0ksQ0FBQ0MsS0FBTCxFQUNBO3dCQUNZMVksU0FBUzJZLE1BQVQsQ0FBZ0IsS0FBS0YsV0FBckIsSUFBb0MsRUFBRWMsV0FBVyxDQUFiLEVBQWdCdFcsTUFBTSxFQUF0QixFQUEwQmxkLE1BQTFCLEVBQThCeXpCLFlBQVksQ0FBQyxDQUEzQyxFQUE4Q3BHLE9BQU8sQ0FBQyxDQUF0RCxFQUE1Qzs7OztrQkFJRUEsS0FBTixHQUFjcFQsU0FBU29ULEtBQXZCOzs7Z0JBR0lwVCxTQUFTd1osVUFBVCxLQUF3QmQsTUFBTWMsVUFBbEMsRUFDQTtzQkFDVUEsVUFBTixHQUFtQnhaLFNBQVN3WixVQUE1Qjs7O3FCQUdLLElBQUk3NEIsSUFBSSxDQUFiLEVBQWdCQSxJQUFJKzNCLE1BQU16VixJQUFOLENBQVd2aUIsTUFBL0IsRUFBdUNDLEdBQXZDLEVBQ0E7eUJBQ1M0M0IsZ0JBQUwsQ0FBc0J4M0IsSUFBdEIsQ0FBMkIyM0IsTUFBTXpWLElBQU4sQ0FBV3RpQixDQUFYLENBQTNCOzs7O3NCQUlFc2lCLElBQU4sQ0FBV3ZpQixNQUFYLEdBQW9CLENBQXBCO3NCQUNNNjRCLFNBQU4sR0FBa0IsQ0FBbEI7OztnQkFHQTVFLGtCQUFKOzs7OztpQkFLSyxJQUFJaDBCLEtBQUkrM0IsTUFBTWEsU0FBbkIsRUFBOEI1NEIsS0FBSXFmLFNBQVNnRCxZQUFULENBQXNCdGlCLE1BQXhELEVBQWdFQyxJQUFoRSxFQUNBO29CQUNVc2lCLE9BQU9qRCxTQUFTZ0QsWUFBVCxDQUFzQnJpQixFQUF0QixDQUFiOzs7NEJBR1ksS0FBSzg0QixZQUFMLENBQWtCZixLQUFsQixFQUF5QixDQUF6QixDQUFaOztvQkFFSXpWLEtBQUt0YyxJQUFMLEtBQWMwVyxPQUFPOEYsSUFBekIsRUFDQTs4QkFDY0YsSUFBVixFQUFnQjBSLFNBQWhCOztvQkFFQTFSLEtBQUt0YyxJQUFMLEtBQWMwVyxPQUFPeUcsSUFBekIsRUFDQTttQ0FDbUJiLElBQWYsRUFBcUIwUixTQUFyQjtpQkFGSixNQUlLLElBQUkxUixLQUFLdGMsSUFBTCxLQUFjMFcsT0FBTzRHLElBQXJCLElBQTZCaEIsS0FBS3RjLElBQUwsS0FBYzBXLE9BQU9nSCxJQUF0RCxFQUNMO2dDQUNnQnBCLElBQVosRUFBa0IwUixTQUFsQjtpQkFGQyxNQUlBLElBQUkxUixLQUFLdGMsSUFBTCxLQUFjMFcsT0FBT3FjLElBQXpCLEVBQ0w7MENBQzBCelcsSUFBdEIsRUFBNEIwUixTQUE1Qjs7O3NCQUdFNEUsU0FBTjs7O2lCQUdDelcsUUFBTCxDQUFjc1csT0FBZCxDQUFzQixJQUF0Qjs7O2lCQUdLLElBQUl6NEIsTUFBSSxDQUFiLEVBQWdCQSxNQUFJKzNCLE1BQU16VixJQUFOLENBQVd2aUIsTUFBL0IsRUFBdUNDLEtBQXZDLEVBQ0E7NEJBQ2dCKzNCLE1BQU16VixJQUFOLENBQVd0aUIsR0FBWCxDQUFaOztvQkFFSWcwQixVQUFVdkIsS0FBZCxFQUNBOzhCQUNjVyxNQUFWOzs7Ozs7Ozs7Ozs7Ozs7cUNBWUNodUIsSUFBSVksTUFDakI7Z0JBQ1FndUIsWUFBWTV1QixHQUFHa2QsSUFBSCxDQUFRbGQsR0FBR2tkLElBQUgsQ0FBUXZpQixNQUFSLEdBQWlCLENBQXpCLENBQWhCOztnQkFFSSxDQUFDaTBCLFNBQUQsSUFBY0EsVUFBVXJSLE1BQVYsQ0FBaUI1aUIsTUFBakIsR0FBMEIsTUFBNUMsRUFDQTs0QkFDZ0IsS0FBSzYzQixnQkFBTCxDQUFzQnpELEdBQXRCLE1BQ0wsSUFBSW5DLGlCQUFKLENBQXNCLEtBQUs3UCxRQUFMLENBQWMvYyxFQUFwQyxFQUF3QyxLQUFLeXlCLGVBQTdDLEVBQThELEtBQUsxVixRQUFMLENBQWMrTyxLQUFkLENBQW9CZ0IsWUFBbEYsQ0FEUDs7MEJBR1U4RyxLQUFWLENBQWdCaHpCLElBQWhCO21CQUNHc2MsSUFBSCxDQUFRbGlCLElBQVIsQ0FBYTR6QixTQUFiOzs7c0JBR012QixLQUFWLEdBQWtCLElBQWxCOzttQkFFT3VCLFNBQVA7Ozs7RUFyTXNDL0Q7O0FDWDlDOzs7Ozs7Ozs7O0FBVUEsQUFBZSxTQUFTZ0osdUJBQVQsQ0FBaUM3ekIsRUFBakMsRUFDZjtNQURvRGlPLE1BQ3BELHVFQUQ2RCxFQUM3RDs7U0FDV29KLFdBQVd5YyxNQUFsQixJQUE0Qjl6QixHQUFHOHpCLE1BQS9CO1NBQ096YyxXQUFXMGMsS0FBbEIsSUFBMkIvekIsR0FBRyt6QixLQUE5QjtTQUNPMWMsV0FBVzJjLFNBQWxCLElBQStCaDBCLEdBQUdnMEIsU0FBbEM7U0FDTzNjLFdBQVc0YyxVQUFsQixJQUFnQ2owQixHQUFHaTBCLFVBQW5DO1NBQ081YyxXQUFXNmMsU0FBbEIsSUFBK0JsMEIsR0FBR2swQixTQUFsQztTQUNPN2MsV0FBV2tjLGNBQWxCLElBQW9DdnpCLEdBQUd1ekIsY0FBdkM7U0FDT2xjLFdBQVc4YyxZQUFsQixJQUFrQ24wQixHQUFHbTBCLFlBQXJDOztTQUVPbG1CLE1BQVA7OztBQ2JKLElBQUl5a0IsY0FBYyxDQUFsQjs7SUFHcUIwQjtnQ0FHSnhjLEtBQWIsRUFBcUJzRSxHQUFyQixFQUNBO1lBRDJCM2UsT0FDM0IsdUVBRHFDLEVBQ3JDOzs7YUFDU3FELElBQUwsR0FBWXdXLGNBQWNpZCxLQUExQjthQUNLaHhCLEtBQUwsR0FBYTZZLElBQUk3WSxLQUFqQjthQUNLQyxNQUFMLEdBQWM0WSxJQUFJNVksTUFBbEI7YUFDS2pFLE1BQUwsR0FBY3VZLE1BQU12WSxNQUFwQjs7Ozs7Ozs7Ozs7YUFXS2kxQixpQkFBTCxHQUF5QixLQUFLQSxpQkFBTCxDQUF1QnptQixJQUF2QixDQUE0QixJQUE1QixDQUF6QjthQUNLMG1CLHFCQUFMLEdBQTZCLEtBQUtBLHFCQUFMLENBQTJCMW1CLElBQTNCLENBQWdDLElBQWhDLENBQTdCO2FBQ0t4TyxNQUFMLENBQVltMUIsZ0JBQVosQ0FBNkIsa0JBQTdCLEVBQWlELEtBQUtGLGlCQUF0RCxFQUF5RSxLQUF6RTthQUNLajFCLE1BQUwsQ0FBWW0xQixnQkFBWixDQUE2QixzQkFBN0IsRUFBcUQsS0FBS0QscUJBQTFELEVBQWlGLEtBQWpGOzthQUdLRSxnQkFBTCxHQUF3QixRQUF4QjthQUNLQyxvQkFBTCxHQUE0QixDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsQ0FBNUI7YUFDS0Msc0JBQUwsR0FBOEIsU0FBOUI7YUFDS0MsZUFBTCxHQUF1QnIzQixRQUFRcTNCLGVBQVIsSUFBMkIsS0FBS0gsZ0JBQXZEOzthQUVLSSxlQUFMLEdBQXVCO21CQUNadDNCLFFBQVF1M0IsV0FESTt1QkFFUnYzQixRQUFRdzNCLFNBRkE7Z0NBR0N4M0IsUUFBUXUzQixXQUFSLElBQXVCdjNCLFFBQVF1M0IsV0FBUixLQUF3QixlQUhoRDtxQkFJVixJQUpVO21DQUtJdjNCLFFBQVF5M0I7U0FMbkM7O2FBUUtDLGFBQUwsR0FBcUIsSUFBSXBLLGNBQUosQ0FBbUIsSUFBbkIsQ0FBckI7O2FBRUtxSyxlQUFMLEdBQXVCLEtBQUtELGFBQTVCOzthQUVLajFCLEVBQUwsR0FBVXpDLFFBQVFuQyxPQUFSLElBQW1Ca3RCLE1BQU82TSxhQUFQLENBQXNCLEtBQUs5MUIsTUFBM0IsRUFBb0MsS0FBS3cxQixlQUF6QyxDQUE3Qjs7YUFFS25DLFdBQUwsR0FBbUJBLGFBQW5COzthQUVLNUcsS0FBTCxHQUFhLElBQUlaLFVBQUosQ0FBZSxLQUFLbHJCLEVBQXBCLENBQWI7O2FBRUtvMUIsaUJBQUwsR0FBeUIsSUFBekI7Ozs7Ozs7YUFPS0MsYUFBTCxHQUFxQixJQUFyQjs7YUFFS0MsVUFBTCxHQUFrQixJQUFsQjs7Ozs7OzthQU9LQyxtQkFBTCxHQUEyQixJQUEzQjs7O2FBS0tDLFNBQUwsR0FBaUIzQix3QkFBd0IsS0FBSzd6QixFQUE3QixDQUFqQjs7YUFFS3kxQixPQUFMLEdBQWUsSUFBSWxELGdCQUFKLENBQXFCLElBQXJCLENBQWY7O2FBRUttRCxZQUFMOzs7Ozs7Ozs7Ozs7dUNBVUo7Z0JBQ1UxMUIsS0FBSyxLQUFLQSxFQUFoQjs7O2dCQUdJQSxHQUFHMjFCLGFBQUgsTUFBc0IzMUIsR0FBRzZyQixZQUFILENBQWdCLG9CQUFoQixDQUExQixFQUNBO21CQUNPQSxZQUFILENBQWdCLG9CQUFoQixFQUFzQytKLGNBQXRDOzs7aUJBR0M5SixLQUFMLENBQVcrSixjQUFYOztpQkFFS0MsZ0JBQUwsR0FBd0IsSUFBSXZOLFlBQUosQ0FBaUJ2b0IsRUFBakIsRUFBcUIsS0FBS3FELEtBQTFCLEVBQWlDLEtBQUtDLE1BQXRDLEVBQThDLElBQTlDLEVBQW9ERSxTQUFTQyxVQUE3RCxFQUF5RSxJQUF6RSxDQUF4QjtpQkFDS3F5QixnQkFBTCxDQUFzQm5OLFVBQXRCLEdBQW1DLEtBQUsrTCxvQkFBeEM7O2lCQUVLcUIsZ0JBQUwsQ0FBc0IsS0FBS0QsZ0JBQTNCOztpQkFFS0wsT0FBTCxDQUFhN0ssZUFBYjs7OzsrQkFJRzVOLGVBQ1A7O2lCQUVTb1ksaUJBQUwsR0FBeUIsSUFBekI7O2dCQUVJLENBQUMsS0FBS3AxQixFQUFOLElBQVksS0FBS0EsRUFBTCxDQUFRMjFCLGFBQVIsRUFBaEIsRUFDQTs7OztpQkFJS1QsZUFBTCxDQUFxQjV0QixLQUFyQjs7aUJBRUtpdUIsbUJBQUwsQ0FBeUJ4TCxLQUF6Qjs7aUJBRUswTCxPQUFMLENBQWE1YSxNQUFiLENBQXFCbUMsYUFBckI7Ozs7aUJBSUtrWSxlQUFMLENBQXFCcEssS0FBckI7Ozs7Ozs7Ozs7OzBDQVFja0wsZ0JBQ2xCO2dCQUNRLEtBQUtkLGVBQUwsS0FBeUJjLGNBQTdCLEVBQ0E7Ozs7aUJBSUtkLGVBQUwsQ0FBcUJubEIsSUFBckI7aUJBQ0ttbEIsZUFBTCxHQUF1QmMsY0FBdkI7aUJBQ0tkLGVBQUwsQ0FBcUI1dEIsS0FBckI7Ozs7Ozs7Ozs7O2dDQVNKO2lCQUNTMnVCLGlCQUFMLENBQXVCLEtBQUtoQixhQUE1Qjs7Ozs7Ozs7Ozs7OytCQVNHNXhCLE9BQU9DLFFBQ2Q7OztpQkFHU3d5QixnQkFBTCxDQUFzQmpNLE1BQXRCLENBQTZCeG1CLEtBQTdCLEVBQW9DQyxNQUFwQzs7Z0JBRUksS0FBS2l5QixtQkFBTCxLQUE2QixLQUFLTyxnQkFBdEMsRUFDQTtxQkFDU0EsZ0JBQUwsQ0FBc0JJLFFBQXRCOztvQkFFSSxLQUFLYixhQUFULEVBQ0E7eUJBQ1NBLGFBQUwsQ0FBbUJwQyxRQUFuQixDQUE0QnBLLGdCQUE1QixHQUErQyxLQUFLaU4sZ0JBQUwsQ0FBc0JqTixnQkFBdEIsQ0FBdUNqTyxPQUF2QyxDQUErQyxJQUEvQyxDQUEvQzs7Ozs7Ozs7Ozs7Ozs4QkFXTitOLFlBQ047aUJBQ1M0TSxtQkFBTCxDQUF5QnhMLEtBQXpCLENBQStCcEIsVUFBL0I7Ozs7Ozs7Ozs7O3FDQVFTeEksUUFDYjtpQkFDU29WLG1CQUFMLENBQXlCNWEsU0FBekIsR0FBcUN3RixNQUFyQzs7Ozs7Ozs7Ozs7O3lDQVNhZ1csY0FDakI7Z0JBQ1FBLGlCQUFpQixLQUFLWixtQkFBMUIsRUFDQTtxQkFDU0EsbUJBQUwsR0FBMkJZLFlBQTNCOzZCQUNhRCxRQUFiOztvQkFFSSxLQUFLYixhQUFULEVBQ0E7eUJBQ1NBLGFBQUwsQ0FBbUJwQyxRQUFuQixDQUE0QnBLLGdCQUE1QixHQUErQ3NOLGFBQWF0TixnQkFBYixDQUE4QmpPLE9BQTlCLENBQXNDLElBQXRDLENBQS9DOzs7bUJBR0QsSUFBUDs7Ozs7Ozs7Ozs7O21DQVNPaVMsUUFDWDs7Z0JBRVEsS0FBS3dJLGFBQUwsS0FBdUJ4SSxNQUEzQixFQUNBO3FCQUNTd0ksYUFBTCxHQUFxQnhJLE1BQXJCO3VCQUNPaGYsSUFBUDs7O3VCQUdPb2xCLFFBQVAsQ0FBZ0JwSyxnQkFBaEIsR0FBbUMsS0FBSzBNLG1CQUFMLENBQXlCMU0sZ0JBQXpCLENBQTBDak8sT0FBMUMsQ0FBa0QsSUFBbEQsQ0FBbkM7OzttQkFHRyxJQUFQOzs7Ozs7Ozs7OztvQ0FTSjttQkFDVyxJQUFJME4sTUFBT21GLGlCQUFYLENBQTZCLEtBQUt6dEIsRUFBbEMsRUFBc0MsS0FBSzhyQixLQUFMLENBQVdILFdBQWpELENBQVA7Ozs7Ozs7Ozs7OztnQ0FTSTZCLEtBQ1I7Z0JBQ1EsS0FBSzhILFVBQUwsS0FBb0I5SCxHQUF4QixFQUNBO3VCQUNXLElBQVA7OztnQkFHQUEsR0FBSixFQUNBO29CQUNRM2YsSUFBSjthQUZKLE1BSUssSUFBSSxLQUFLeW5CLFVBQVQsRUFDTDs7cUJBRVNBLFVBQUwsQ0FBZ0JjLE1BQWhCOzs7aUJBR0NkLFVBQUwsR0FBa0I5SCxHQUFsQjs7bUJBRU8sSUFBUDs7Ozs7Ozs7Ozs7Z0NBU0o7aUJBQ1N5SSxpQkFBTCxDQUF1QixLQUFLaEIsYUFBNUI7O2lCQUVLSSxhQUFMLEdBQXFCLElBQXJCO2lCQUNLRSxtQkFBTCxHQUEyQixLQUFLTyxnQkFBaEM7OztpQkFHS0EsZ0JBQUwsQ0FBc0JJLFFBQXRCOztpQkFFS3BLLEtBQUwsQ0FBVytKLGNBQVg7O21CQUVPLElBQVA7Ozs7Ozs7Ozs7OzswQ0FTY3QwQixPQUNsQjtrQkFDVWlGLGNBQU47Ozs7Ozs7Ozs7O2dEQVNKO2lCQUNTa3ZCLFlBQUw7aUJBQ0tXLGNBQUwsQ0FBb0JDLFNBQXBCOzs7Ozs7Ozs7Ozs7Z0NBU0lDLFlBQ1I7aUJBQ1NDLGNBQUw7OztpQkFHSzl5QixJQUFMLENBQVUreUIsbUJBQVYsQ0FBOEIsa0JBQTlCLEVBQWtELEtBQUtuQyxpQkFBdkQ7aUJBQ0s1d0IsSUFBTCxDQUFVK3lCLG1CQUFWLENBQThCLHNCQUE5QixFQUFzRCxLQUFLbEMscUJBQTNEOzs7MklBR2NnQyxVQUFkOztpQkFFS0csR0FBTCxHQUFXLENBQVg7O2lCQUVLeEIsZUFBTCxHQUF1QixJQUF2Qjs7aUJBRUtaLGlCQUFMLEdBQXlCLElBQXpCO2lCQUNLQyxxQkFBTCxHQUE2QixJQUE3Qjs7aUJBRUtNLGVBQUwsR0FBdUIsSUFBdkI7aUJBQ0s3MEIsRUFBTCxDQUFRMjJCLFVBQVIsQ0FBbUIsSUFBbkI7O2dCQUVJLEtBQUszMkIsRUFBTCxDQUFRNnJCLFlBQVIsQ0FBcUIsb0JBQXJCLENBQUosRUFDQTtxQkFDUzdyQixFQUFMLENBQVE2ckIsWUFBUixDQUFxQixvQkFBckIsRUFBMkMrSyxXQUEzQzs7O2lCQUdDNTJCLEVBQUwsR0FBVSxJQUFWOzs7Ozs7SUNuV2E2MkI7OzsyQkFFTDNhLEdBQVosRUFDQTtZQURrQjNlLE9BQ2xCLHVFQUQ0QixFQUM1Qjs7NEhBQ1U2WixjQUFja0ksTUFEeEIsRUFDZ0NwRCxHQURoQyxFQUNxQzNlLE9BRHJDOzs7OzsrQkFJUTJlLEtBQ1I7Z0JBRGMzZSxPQUNkLHVFQUR3QixFQUN4Qjs7Z0JBQ1F3SCxLQUFLLElBQVQ7O2VBRUdtWCxHQUFILEdBQVNBLEdBQVQ7Z0JBQ0U1ZSxNQUFGLENBQVUsS0FBS0MsT0FBZixFQUF5QkEsT0FBekI7O2dCQUVFckMsSUFBRixDQUFPNUIsSUFBRW1CLE1BQUYsQ0FBVXloQixJQUFJUyxhQUFkLENBQVAsRUFBdUMsVUFBUzZDLFlBQVQsRUFBc0I7bUJBQ3REQyxXQUFILENBQWdCRCxhQUFhNUgsS0FBN0I7YUFESjs7Z0JBSUkrRSxhQUFKLEdBQW9CLEVBQXBCOzs7O29DQUdTL0UsT0FDYjtnQkFDTyxDQUFDQSxNQUFNa2Ysa0JBQVYsRUFBNkI7c0JBQ25CQSxrQkFBTixHQUEyQixJQUFJMUMsa0JBQUosQ0FBd0J4YyxLQUF4QixFQUFnQ3NFLEdBQWhDLEVBQXNDLEtBQUszZSxPQUEzQyxDQUEzQjs7a0JBRUVzZSxZQUFOLEdBQXFCLElBQXJCO2lCQUNLNkQsTUFBTCxDQUFhOUgsS0FBYjtpQkFDSytILE9BQUwsQ0FBYy9ILEtBQWQ7a0JBQ01pRSxZQUFOLEdBQXFCLEtBQXJCOzs7O2dDQUdLakUsT0FBUW9GLGVBQ2pCO2dCQUNRLENBQUNBLGFBQUwsRUFBb0I7Z0NBQ0FwRixLQUFoQjs7O2dCQUdBLENBQUNvRixjQUFjNWhCLE9BQWQsQ0FBc0JvZixPQUF2QixJQUFrQ3dDLGNBQWM1aEIsT0FBZCxDQUFzQjZLLFdBQXRCLElBQXFDLENBQTNFLEVBQThFOzs7Ozs7O2dCQU8xRStXLGNBQWMvQyxRQUFsQixFQUE0QjtzQkFDbEI2YyxrQkFBTixDQUF5QmpjLE1BQXpCLENBQWlDbUMsYUFBakM7OztnQkFHQUEsY0FBYzlTLFFBQWxCLEVBQTRCO3FCQUNwQixJQUFJdFAsSUFBSSxDQUFSLEVBQVcwZ0IsTUFBTTBCLGNBQWM5UyxRQUFkLENBQXVCdlAsTUFBNUMsRUFBb0RDLElBQUkwZ0IsR0FBeEQsRUFBNkQxZ0IsR0FBN0QsRUFBa0U7eUJBQ3pEK2tCLE9BQUwsQ0FBYy9ILEtBQWQsRUFBc0JvRixjQUFjOVMsUUFBZCxDQUF1QnRQLENBQXZCLENBQXRCOzs7Ozs7K0JBS0pnZCxPQUNSOztrQkFFVWtmLGtCQUFOLENBQXlCL00sS0FBekI7Ozs7RUEzRG1DL047O0FDRjVCLFNBQVMrYSxZQUFULENBQXVCN2EsR0FBdkIsRUFBNkIzZSxPQUE3QixFQUNmO1FBQ1EsQ0FBQzJlLElBQUk4YSxPQUFMLElBQWdCQyxNQUFNQyxnQkFBTixFQUFwQixFQUNBO2VBQ1csSUFBSUwsYUFBSixDQUFtQjNhLEdBQW5CLEVBQXlCM2UsT0FBekIsQ0FBUDs7O1dBR0csSUFBSThoQixjQUFKLENBQW9CbkQsR0FBcEIsRUFBMEIzZSxPQUExQixDQUFQOzs7QUNYSjs7Ozs7Ozs7Ozs7OztBQWFBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFHQTtBQUNBLEFBQ0EsQUFHQSxJQUFJNDVCLGNBQWMsU0FBZEEsV0FBYyxDQUFVMzNCLEdBQVYsRUFBNkI7UUFBYmpDLE9BQWEsdUVBQUgsRUFBRzs7U0FDdENxRCxJQUFMLEdBQVksUUFBWjtTQUNLdzJCLElBQUwsR0FBWSxJQUFJdHBCLElBQUosR0FBV0MsT0FBWCxLQUF1QixHQUF2QixHQUE2Qm5SLEtBQUtnVixLQUFMLENBQVdoVixLQUFLeTZCLE1BQUwsS0FBYyxHQUF6QixDQUF6Qzs7U0FFS2oyQixFQUFMLEdBQVVrRSxFQUFFZ3lCLEtBQUYsQ0FBUTkzQixJQUFJNEIsRUFBWixDQUFWOztTQUVLaUMsS0FBTCxHQUFhcVcsU0FBUyxXQUFZbGEsR0FBWixJQUFtQixLQUFLNEIsRUFBTCxDQUFRbTJCLFdBQXBDLEVBQW1ELEVBQW5ELENBQWI7U0FDS2owQixNQUFMLEdBQWNvVyxTQUFTLFlBQVlsYSxHQUFaLElBQW1CLEtBQUs0QixFQUFMLENBQVFvMkIsWUFBcEMsRUFBbUQsRUFBbkQsQ0FBZDs7UUFFSUMsVUFBVW55QixFQUFFb3lCLFVBQUYsQ0FBYSxLQUFLcjBCLEtBQWxCLEVBQTBCLEtBQUtDLE1BQS9CLEVBQXVDLEtBQUs4ekIsSUFBNUMsQ0FBZDtTQUNLMXpCLElBQUwsR0FBWSt6QixRQUFRL3pCLElBQXBCO1NBQ0tHLE9BQUwsR0FBZTR6QixRQUFRNXpCLE9BQXZCO1NBQ0tDLEtBQUwsR0FBYTJ6QixRQUFRM3pCLEtBQXJCOztTQUVLMUMsRUFBTCxDQUFRdTJCLFNBQVIsR0FBb0IsRUFBcEI7U0FDS3YyQixFQUFMLENBQVEyQyxXQUFSLENBQXFCLEtBQUtMLElBQTFCOztTQUVLNkIsVUFBTCxHQUFrQkQsRUFBRXN5QixNQUFGLENBQVMsS0FBS2wwQixJQUFkLENBQWxCO1NBQ0ttMEIsU0FBTCxHQUFpQixDQUFqQixDQWxCMkM7O1NBb0J0Q2IsT0FBTCxHQUFnQngzQixJQUFJdzNCLE9BQXBCO1NBQ0tqYSxRQUFMLEdBQWdCZ2EsYUFBYSxJQUFiLEVBQW9CeDVCLE9BQXBCLENBQWhCOztTQUVLZ0UsS0FBTCxHQUFhLElBQWI7O1NBRUsyRyxZQUFMLEdBQW9CLElBQXBCOzs7U0FHSzFCLGNBQUwsR0FBc0IsSUFBdEI7UUFDSWhILElBQUlnSCxjQUFKLEtBQXVCLEtBQTNCLEVBQWtDO2FBQ3pCQSxjQUFMLEdBQXNCLEtBQXRCOzs7O1NBSUNtVyxhQUFMLEdBQXFCLEVBQXJCOztnQkFFWXZkLFVBQVosQ0FBdUJsQyxXQUF2QixDQUFtQzROLEtBQW5DLENBQXlDLElBQXpDLEVBQStDak4sU0FBL0M7Q0FwQ0o7O0FBdUNBRyxNQUFNMkwsVUFBTixDQUFpQnd0QixXQUFqQixFQUErQm5jLHNCQUEvQixFQUF3RDtVQUM3QyxnQkFBVTthQUNSNWYsT0FBTCxDQUFhaUksS0FBYixHQUFzQixLQUFLQSxLQUEzQjthQUNLakksT0FBTCxDQUFha0ksTUFBYixHQUFzQixLQUFLQSxNQUEzQjs7O2FBR0t3MEIsZ0JBQUw7OzthQUdLQyxtQkFBTDtLQVRnRDtpQkFZdEMscUJBQVN2NEIsR0FBVCxFQUFhOzthQUVsQitCLEtBQUwsR0FBYSxJQUFJMkMsWUFBSixDQUFrQixJQUFsQixFQUF5QjFFLEdBQXpCLENBQWIsQ0FBMkM7YUFDdEMrQixLQUFMLENBQVd5VyxJQUFYO2VBQ08sS0FBS3pXLEtBQVo7S0FoQmdEO1lBa0IzQyxnQkFBVS9CLEdBQVYsRUFBZTs7YUFFZjZELEtBQUwsR0FBa0JxVyxTQUFVbGEsT0FBTyxXQUFXQSxHQUFuQixJQUEyQixLQUFLNEIsRUFBTCxDQUFRbTJCLFdBQTVDLEVBQTJELEVBQTNELENBQWxCO2FBQ0tqMEIsTUFBTCxHQUFrQm9XLFNBQVVsYSxPQUFPLFlBQVlBLEdBQXBCLElBQTRCLEtBQUs0QixFQUFMLENBQVFvMkIsWUFBN0MsRUFBNEQsRUFBNUQsQ0FBbEI7O2FBRUs5ekIsSUFBTCxDQUFVUCxLQUFWLENBQWdCRSxLQUFoQixHQUF5QixLQUFLQSxLQUFMLEdBQVksSUFBckM7YUFDS0ssSUFBTCxDQUFVUCxLQUFWLENBQWdCRyxNQUFoQixHQUF5QixLQUFLQSxNQUFMLEdBQVksSUFBckM7O2FBRUtpQyxVQUFMLEdBQXNCRCxFQUFFc3lCLE1BQUYsQ0FBUyxLQUFLbDBCLElBQWQsQ0FBdEI7YUFDSytFLFNBQUwsR0FBc0IsSUFBdEI7YUFDS3JOLE9BQUwsQ0FBYWlJLEtBQWIsR0FBc0IsS0FBS0EsS0FBM0I7YUFDS2pJLE9BQUwsQ0FBYWtJLE1BQWIsR0FBc0IsS0FBS0EsTUFBM0I7YUFDS21GLFNBQUwsR0FBc0IsS0FBdEI7O1lBRUkxRCxLQUFLLElBQVQ7WUFDSWl6QixlQUFrQixTQUFsQkEsWUFBa0IsQ0FBU3pkLEdBQVQsRUFBYTtnQkFDM0JsYixTQUFTa2IsSUFBSWxiLE1BQWpCO21CQUNPOEQsS0FBUCxDQUFhRSxLQUFiLEdBQXFCMEIsR0FBRzFCLEtBQUgsR0FBVyxJQUFoQzttQkFDT0YsS0FBUCxDQUFhRyxNQUFiLEdBQXFCeUIsR0FBR3pCLE1BQUgsR0FBVyxJQUFoQzttQkFDT0MsWUFBUCxDQUFvQixPQUFwQixFQUErQndCLEdBQUcxQixLQUFILEdBQVdyRixNQUFNK2QsaUJBQWhEO21CQUNPeFksWUFBUCxDQUFvQixRQUFwQixFQUErQndCLEdBQUd6QixNQUFILEdBQVd0RixNQUFNK2QsaUJBQWhEOzs7Z0JBR0l4QixJQUFJc1AsTUFBUixFQUFnQjtvQkFDUkEsTUFBSixDQUFXOWtCLEdBQUcxQixLQUFkLEVBQXNCMEIsR0FBR3pCLE1BQXpCOztTQVRSO1lBWUVwSSxJQUFGLENBQU8sS0FBS2dQLFFBQVosRUFBdUIsVUFBU25MLENBQVQsRUFBYW5FLENBQWIsRUFBZTtjQUNoQzZOLFNBQUYsR0FBa0IsSUFBbEI7Y0FDRXJOLE9BQUYsQ0FBVWlJLEtBQVYsR0FBa0IwQixHQUFHMUIsS0FBckI7Y0FDRWpJLE9BQUYsQ0FBVWtJLE1BQVYsR0FBa0J5QixHQUFHekIsTUFBckI7eUJBQ2F2RSxFQUFFTSxNQUFmO2NBQ0VvSixTQUFGLEdBQWtCLEtBQWxCO1NBTEo7O2FBUUszRSxLQUFMLENBQVdYLEtBQVgsQ0FBaUJFLEtBQWpCLEdBQTBCLEtBQUtBLEtBQUwsR0FBYyxJQUF4QzthQUNLUyxLQUFMLENBQVdYLEtBQVgsQ0FBaUJHLE1BQWpCLEdBQTBCLEtBQUtBLE1BQUwsR0FBYyxJQUF4Qzs7YUFFS3NGLFNBQUw7S0F4RGdEO21CQTJEcEMseUJBQVU7ZUFDZixLQUFLVixZQUFaO0tBNURnRDtzQkE4RGpDLDRCQUFVOzthQUVwQkEsWUFBTCxHQUFvQixJQUFJMFQsS0FBSixDQUFXO2dCQUN0QixnQkFBZSxJQUFJOU4sSUFBSixFQUFELENBQWFDLE9BQWIsRUFEUTtxQkFFakI7dUJBQ0UsS0FBSzNTLE9BQUwsQ0FBYWlJLEtBRGY7d0JBRUUsS0FBS2pJLE9BQUwsQ0FBYWtJOztTQUpULENBQXBCOzthQVFLNEUsWUFBTCxDQUFrQm1CLGFBQWxCLEdBQWtDLEtBQWxDO2FBQ0s0dUIsUUFBTCxDQUFlLEtBQUsvdkIsWUFBcEI7S0F6RWdEOzs7Ozt5QkErRTlCLCtCQUFXO1lBQ3pCZ3dCLGVBQWU1eUIsRUFBRWd5QixLQUFGLENBQVEsY0FBUixDQUFuQjtZQUNHLENBQUNZLFlBQUosRUFBaUI7MkJBQ0U1eUIsRUFBRTZ5QixZQUFGLENBQWUsQ0FBZixFQUFrQixDQUFsQixFQUFxQixjQUFyQixDQUFmO1NBREosTUFFTzs7OztpQkFJRXQyQixJQUFULENBQWNrQyxXQUFkLENBQTJCbTBCLFlBQTNCO2NBQ00zNEIsV0FBTixDQUFtQjI0QixZQUFuQjtZQUNJbDZCLE1BQU1vNkIsYUFBTixFQUFKLEVBQTJCOzt5QkFFVmoxQixLQUFiLENBQW1CazFCLE9BQW5CLEdBQWdDLE1BQWhDO1NBRkosTUFHTzs7eUJBRVVsMUIsS0FBYixDQUFtQm0xQixNQUFuQixHQUFnQyxDQUFDLENBQWpDO3lCQUNhbjFCLEtBQWIsQ0FBbUJDLFFBQW5CLEdBQWdDLFVBQWhDO3lCQUNhRCxLQUFiLENBQW1CZixJQUFuQixHQUFnQyxDQUFDLEtBQUtoSCxPQUFMLENBQWFpSSxLQUFkLEdBQXVCLElBQXZEO3lCQUNhRixLQUFiLENBQW1CWixHQUFuQixHQUFnQyxDQUFDLEtBQUtuSCxPQUFMLENBQWFrSSxNQUFkLEdBQXVCLElBQXZEO3lCQUNhSCxLQUFiLENBQW1CbzFCLFVBQW5CLEdBQWdDLFFBQWhDOztjQUVFQyxTQUFOLEdBQWtCTixhQUFhMTVCLFVBQWIsQ0FBd0IsSUFBeEIsQ0FBbEI7S0FwR2dEOztzQkF1R2pDLDRCQUFVO1lBQ3JCOE8sTUFBTSxJQUFJUSxJQUFKLEdBQVdDLE9BQVgsRUFBVjtZQUNJVCxNQUFNLEtBQUt1cUIsU0FBWCxHQUF1QixJQUEzQixFQUFpQztpQkFDeEJ0eUIsVUFBTCxHQUF1QkQsRUFBRXN5QixNQUFGLENBQVMsS0FBS2wwQixJQUFkLENBQXZCO2lCQUNLbTBCLFNBQUwsR0FBdUJ2cUIsR0FBdkI7O0tBM0c0Qzs7b0JBK0duQyx3QkFBVXNLLEtBQVYsRUFBa0JqYyxLQUFsQixFQUF5QjtZQUNsQzBELE1BQUo7O1lBRUcsQ0FBQ3VZLE1BQU12WSxNQUFWLEVBQWlCO3FCQUNKaUcsRUFBRTZ5QixZQUFGLENBQWdCLEtBQUsvOEIsT0FBTCxDQUFhaUksS0FBN0IsRUFBcUMsS0FBS2pJLE9BQUwsQ0FBYWtJLE1BQWxELEVBQTBEc1UsTUFBTTFVLEVBQWhFLENBQVQ7U0FESixNQUVPO3FCQUNNMFUsTUFBTXZZLE1BQWY7OztZQUdELEtBQUs2SyxRQUFMLENBQWN2UCxNQUFkLElBQXdCLENBQTNCLEVBQTZCO2lCQUNwQmtKLE9BQUwsQ0FBYUUsV0FBYixDQUEwQjFFLE1BQTFCO1NBREosTUFFTyxJQUFHLEtBQUs2SyxRQUFMLENBQWN2UCxNQUFkLEdBQXFCLENBQXhCLEVBQTJCO2dCQUMxQmdCLFNBQVMwQixTQUFiLEVBQXlCOztxQkFFaEJ3RyxPQUFMLENBQWE0MEIsWUFBYixDQUEyQnA1QixNQUEzQixFQUFvQyxLQUFLNkksWUFBTCxDQUFrQjdJLE1BQXREO2FBRkosTUFHTzs7b0JBRUMxRCxTQUFTLEtBQUt1TyxRQUFMLENBQWN2UCxNQUFkLEdBQXFCLENBQWxDLEVBQXFDO3lCQUM3QmtKLE9BQUwsQ0FBYUUsV0FBYixDQUEwQjFFLE1BQTFCO2lCQURILE1BRU87eUJBQ0N3RSxPQUFMLENBQWE0MEIsWUFBYixDQUEyQnA1QixNQUEzQixFQUFvQyxLQUFLNkssUUFBTCxDQUFldk8sS0FBZixFQUF1QjBELE1BQTNEOzs7OztjQUtMRSxXQUFOLENBQW1CRixNQUFuQjtjQUNNcTVCLFNBQU4sQ0FBaUJyNUIsTUFBakIsRUFBMEIsS0FBS2pFLE9BQUwsQ0FBYWlJLEtBQXZDLEVBQStDLEtBQUtqSSxPQUFMLENBQWFrSSxNQUE1RDtLQXpJZ0Q7b0JBMkluQyx3QkFBU3NVLEtBQVQsRUFBZTthQUN2Qi9ULE9BQUwsQ0FBYWtYLFdBQWIsQ0FBMEJuRCxNQUFNdlksTUFBaEM7S0E1SWdEOztlQStJeEMsbUJBQVNHLEdBQVQsRUFBYTthQUNoQnVkLFFBQUwsQ0FBY25VLFNBQWQsQ0FBd0JwSixHQUF4Qjs7Q0FoSlIsRUFvSkE7O0FDcE5BOzs7Ozs7O0FBT0EsQUFDQSxBQUVBLElBQUltNUIsU0FBUyxTQUFUQSxNQUFTLEdBQVU7U0FDZC8zQixJQUFMLEdBQVksUUFBWjtXQUNPeEIsVUFBUCxDQUFrQmxDLFdBQWxCLENBQThCNE4sS0FBOUIsQ0FBb0MsSUFBcEMsRUFBMENqTixTQUExQztDQUZKOztBQUtBRyxNQUFNMkwsVUFBTixDQUFpQmd2QixNQUFqQixFQUEwQjNkLHNCQUExQixFQUFtRDtVQUN4QyxnQkFBVTtDQURyQixFQU1BOztJQ3JCcUI0ZDswQkFFTGpmLFNBQVosRUFBdUJDLFdBQXZCLEVBQW9DaUUsU0FBcEMsRUFBK0NWLFNBQS9DLEVBQTBETyxTQUExRCxFQUFxRWpCLEtBQXJFLEVBQ0E7OzthQUNTOUMsU0FBTCxHQUFpQkEsU0FBakI7YUFDS0MsV0FBTCxHQUFtQkEsV0FBbkI7YUFDS2lFLFNBQUwsR0FBaUJBLFNBQWpCOzthQUVLVixTQUFMLEdBQWlCQSxTQUFqQjthQUNLTyxTQUFMLEdBQWlCQSxTQUFqQjs7YUFFS2pCLEtBQUwsR0FBYUEsS0FBYjthQUNLN2IsSUFBTCxHQUFZNmIsTUFBTTdiLElBQWxCOzthQUVLK3ZCLEtBQUwsR0FBYSxFQUFiOzs7O2FBSUtoVCxJQUFMLEdBQVksSUFBWjthQUNLa2IsSUFBTCxHQUFZLElBQVo7Ozs7O2dDQUtKO21CQUNXLElBQUlELFlBQUosQ0FDSCxLQUFLamYsU0FERixFQUVILEtBQUtDLFdBRkYsRUFHSCxLQUFLaUUsU0FIRixFQUlILEtBQUtWLFNBSkYsRUFLSCxLQUFLTyxTQUxGLEVBTUgsS0FBS2pCLEtBTkYsQ0FBUDs7OztnQ0FVSUEsT0FDUjtpQkFDU2tVLEtBQUwsQ0FBVzMxQixJQUFYLENBQWdCeWhCLEtBQWhCOzs7Ozs7O2tDQUlPeEMsVUFDWDs7aUJBRVNOLFNBQUwsR0FBaUJNLFNBQVNOLFNBQTFCO2lCQUNLQyxXQUFMLEdBQW1CSyxTQUFTTCxXQUE1QjtpQkFDS2lFLFNBQUwsR0FBaUI1RCxTQUFTNEQsU0FBMUI7O2lCQUVLVixTQUFMLEdBQWlCbEQsU0FBU2tELFNBQTFCO2lCQUNLTyxTQUFMLEdBQWlCekQsU0FBU3lELFNBQTFCOzs7O2tDQUtKO21CQUNXLEtBQUtQLFNBQUwsSUFDQSxLQUFLUSxJQURMLElBRUUsS0FBS2xCLEtBQUwsQ0FBV2UsTUFBWCxLQUFzQm5nQixTQUF0QixJQUFtQyxLQUFLb2YsS0FBTCxDQUFXZSxNQUZoRCxJQUdBLEtBQUtFLFNBSFo7Ozs7a0NBT0o7bUJBQ1csS0FBSzlELFdBQUwsSUFBb0IsS0FBS0QsU0FBekIsSUFBc0MsS0FBS2tFLFNBQTNDLElBQXdELEtBQUtnYixJQUFwRTs7OztrQ0FJSjtpQkFDU3BjLEtBQUwsR0FBYSxJQUFiO2lCQUNLa1UsS0FBTCxHQUFhLElBQWI7Ozs7OztBQ3JFUjs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsQUFBZSxTQUFTMVIsYUFBVCxDQUF1QjhELEtBQXZCLEVBQThCQyxLQUE5QixFQUFxQ3dPLEdBQXJDLEVBQTBDQyxHQUExQyxFQUErQ3FILElBQS9DLEVBQXFEQyxJQUFyRCxFQUEyRDNXLEdBQTNELEVBQWdFQyxHQUFoRSxFQUNmO1FBRG9GMlcsSUFDcEYsdUVBRDJGLEVBQzNGOztRQUNVbm5CLElBQUksRUFBVjtRQUNJb25CLEtBQUssQ0FBVDtRQUNJQyxNQUFNLENBQVY7UUFDSUMsTUFBTSxDQUFWO1FBQ0l4bUIsS0FBSyxDQUFUO1FBQ0lDLEtBQUssQ0FBVDs7U0FFSzVYLElBQUwsQ0FBVStuQixLQUFWLEVBQWlCQyxLQUFqQjs7U0FFSyxJQUFJcG9CLElBQUksQ0FBUixFQUFXdWtCLElBQUksQ0FBcEIsRUFBdUJ2a0IsS0FBS2lYLENBQTVCLEVBQStCLEVBQUVqWCxDQUFqQyxFQUNBO1lBQ1FBLElBQUlpWCxDQUFSOzthQUVNLElBQUlzTixDQUFWO2NBQ004WixLQUFLQSxFQUFYO2NBQ01DLE1BQU1ELEVBQVo7O2FBRUs5WixJQUFJQSxDQUFUO2FBQ0t4TSxLQUFLd00sQ0FBVjs7YUFFS25rQixJQUFMLENBQ0ttK0IsTUFBTXBXLEtBQVAsR0FBaUIsSUFBSW1XLEdBQUosR0FBVS9aLENBQVYsR0FBY3FTLEdBQS9CLEdBQXVDLElBQUl5SCxFQUFKLEdBQVN0bUIsRUFBVCxHQUFjbW1CLElBQXJELEdBQThEbG1CLEtBQUt3UCxHQUR2RSxFQUVLK1csTUFBTW5XLEtBQVAsR0FBaUIsSUFBSWtXLEdBQUosR0FBVS9aLENBQVYsR0FBY3NTLEdBQS9CLEdBQXVDLElBQUl3SCxFQUFKLEdBQVN0bUIsRUFBVCxHQUFjb21CLElBQXJELEdBQThEbm1CLEtBQUt5UCxHQUZ2RTs7O1dBTUcyVyxJQUFQOzs7QUMzQ0o7Ozs7QUFJQSxJQUFJSSxnQkFBZ0IsU0FBaEJBLGFBQWdCLENBQVU3YixNQUFWLEVBQWtCcGQsQ0FBbEIsRUFBcUJDLENBQXJCLEVBQXdCdVosU0FBeEIsRUFDcEI7UUFDUTZMLEtBQUtqSSxPQUFPLENBQVAsQ0FBVDtRQUNJa0ksS0FBS2xJLE9BQU8sQ0FBUCxDQUFUO1FBQ0ltSSxLQUFLbkksT0FBTyxDQUFQLENBQVQ7UUFDSW9JLEtBQUtwSSxPQUFPLENBQVAsQ0FBVDtRQUNJOGIsS0FBS3o4QixLQUFLQyxHQUFMLENBQVM4YyxTQUFULEVBQXFCLENBQXJCLENBQVQ7UUFDSTJmLEtBQUssQ0FBVDtRQUNJQyxLQUFLL1QsRUFBVDs7UUFHS3BsQixJQUFJcWxCLEtBQUs0VCxFQUFULElBQWVqNUIsSUFBSXVsQixLQUFLMFQsRUFBekIsSUFDSWo1QixJQUFJcWxCLEtBQUs0VCxFQUFULElBQWVqNUIsSUFBSXVsQixLQUFLMFQsRUFENUIsSUFFSWw1QixJQUFJcWxCLEtBQUs2VCxFQUFULElBQWVsNUIsSUFBSXVsQixLQUFLMlQsRUFGNUIsSUFHSWw1QixJQUFJcWxCLEtBQUs2VCxFQUFULElBQWVsNUIsSUFBSXVsQixLQUFLMlQsRUFKaEMsRUFLQztlQUNVLEtBQVA7OztRQUdBN1QsT0FBT0UsRUFBWCxFQUFlO2FBQ04sQ0FBQ0QsS0FBS0UsRUFBTixLQUFhSCxLQUFLRSxFQUFsQixDQUFMO2FBQ0ssQ0FBQ0YsS0FBS0csRUFBTCxHQUFVRCxLQUFLRCxFQUFoQixLQUF1QkQsS0FBS0UsRUFBNUIsQ0FBTDtLQUZKLE1BR087ZUFDSTlvQixLQUFLcVAsR0FBTCxDQUFTOUwsSUFBSXFsQixFQUFiLEtBQW9CNlQsS0FBSyxDQUFoQzs7O1FBR0FHLEtBQUssQ0FBQ0YsS0FBS241QixDQUFMLEdBQVNDLENBQVQsR0FBYW01QixFQUFkLEtBQXFCRCxLQUFLbjVCLENBQUwsR0FBU0MsQ0FBVCxHQUFhbTVCLEVBQWxDLEtBQXlDRCxLQUFLQSxFQUFMLEdBQVUsQ0FBbkQsQ0FBVDtXQUNPRSxNQUFNSCxLQUFLLENBQUwsR0FBU0EsRUFBVCxHQUFjLENBQTNCO0NBM0JKOztBQThCQSxBQUFlLFNBQVNJLFVBQVQsQ0FBb0J2YyxJQUFwQixFQUEwQi9jLENBQTFCLEVBQTZCQyxDQUE3QixFQUFnQ3k0QixJQUFoQyxFQUNmO1FBQ1F0YixTQUFTTCxLQUFLVCxLQUFMLENBQVdjLE1BQXhCO1FBQ0k1RCxZQUFZdUQsS0FBS3ZELFNBQXJCO1FBQ0krZixjQUFjLEtBQWxCO1NBQ0ksSUFBSTkrQixJQUFJLENBQVosRUFBZUEsSUFBSTJpQixPQUFPNWlCLE1BQTFCLEVBQWtDLEVBQUVDLENBQXBDLEVBQXNDO3NCQUNwQncrQixjQUFlN2IsT0FBT3hmLEtBQVAsQ0FBYW5ELENBQWIsRUFBaUJBLElBQUUsQ0FBbkIsQ0FBZixFQUF1Q3VGLENBQXZDLEVBQTJDQyxDQUEzQyxFQUErQ3VaLFNBQS9DLENBQWQ7WUFDSStmLFdBQUosRUFBaUI7OzthQUdaLENBQUw7O1dBRUdBLFdBQVA7OztBQ2hESjs7Ozs7O0FBTUEsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLElBRXFCQztzQkFFSmxkLEtBQWIsRUFDQTs7O2FBQ1NBLEtBQUwsR0FBYUEsS0FBYjs7YUFFSzlDLFNBQUwsR0FBaUIsQ0FBakI7YUFDS0MsV0FBTCxHQUFtQixJQUFuQjthQUNLaUUsU0FBTCxHQUFpQixDQUFqQjthQUNLVixTQUFMLEdBQWlCLElBQWpCO2FBQ0tPLFNBQUwsR0FBaUIsQ0FBakI7O2FBRUtULFlBQUwsR0FBb0IsRUFBcEI7YUFDSzJjLFdBQUwsR0FBbUIsSUFBbkI7O2FBRUtDLFNBQUw7O2FBRUt4TSxLQUFMLEdBQWEsQ0FBYixDQWRKO2FBZVN1RixNQUFMLEdBQWMsRUFBZDthQUNLUSxVQUFMLEdBQWtCLENBQWxCO2FBQ0tELElBQUwsR0FBWSxRQUFaLENBakJKOzs7OztvQ0FxQkE7O2dCQUVRMkcsT0FBTyxLQUFLcmQsS0FBTCxDQUFXcmhCLE9BQXRCO2lCQUNLdWUsU0FBTCxHQUFpQm1nQixLQUFLbmdCLFNBQXRCO2lCQUNLQyxXQUFMLEdBQW1Ca2dCLEtBQUtsZ0IsV0FBeEI7aUJBQ0tpRSxTQUFMLEdBQWlCaWMsS0FBS2pjLFNBQUwsR0FBaUJpYyxLQUFLN3pCLFdBQXZDOztpQkFFS2tYLFNBQUwsR0FBaUIyYyxLQUFLM2MsU0FBdEI7aUJBQ0tPLFNBQUwsR0FBaUJvYyxLQUFLcGMsU0FBTCxHQUFpQm9jLEtBQUs3ekIsV0FBdkM7Ozs7aUJBT0ssSUFBSXJMLElBQUksQ0FBYixFQUFnQkEsSUFBSSxLQUFLcWlCLFlBQUwsQ0FBa0J0aUIsTUFBdEMsRUFBOEMsRUFBRUMsQ0FBaEQsRUFDQTtxQkFDU3FpQixZQUFMLENBQWtCcmlCLENBQWxCLEVBQXFCaS9CLFNBQXJCLENBQStCLElBQS9COzs7OztnQ0FLUjtnQkFDVWw4QixRQUFRLElBQUlnOEIsUUFBSixFQUFkOztrQkFFTXRNLEtBQU4sR0FBYyxDQUFkOzs7aUJBR0ssSUFBSXp5QixJQUFJLENBQWIsRUFBZ0JBLElBQUksS0FBS3FpQixZQUFMLENBQWtCdGlCLE1BQXRDLEVBQThDLEVBQUVDLENBQWhELEVBQ0E7c0JBQ1VxaUIsWUFBTixDQUFtQmppQixJQUFuQixDQUF3QixLQUFLaWlCLFlBQUwsQ0FBa0JyaUIsQ0FBbEIsRUFBcUIrQyxLQUFyQixFQUF4Qjs7O2tCQUdFaThCLFdBQU4sR0FBb0JqOEIsTUFBTXNmLFlBQU4sQ0FBbUJ0ZixNQUFNc2YsWUFBTixDQUFtQnRpQixNQUFuQixHQUE0QixDQUEvQyxDQUFwQjttQkFDT2dELEtBQVA7Ozs7K0JBSUd3QyxHQUFHQyxHQUNWO2dCQUNVcWMsUUFBUSxJQUFJc0ssT0FBSixDQUFZLENBQUM1bUIsQ0FBRCxFQUFJQyxDQUFKLENBQVosQ0FBZDs7a0JBRU1vZCxNQUFOLEdBQWUsS0FBZjtpQkFDS3VjLFNBQUwsQ0FBZXRkLEtBQWY7O21CQUVPLElBQVA7Ozs7K0JBR0d0YyxHQUFHQyxHQUNWO2dCQUNRLEtBQUt3NUIsV0FBVCxFQUFzQjtxQkFDYkEsV0FBTCxDQUFpQm5kLEtBQWpCLENBQXVCYyxNQUF2QixDQUE4QnZpQixJQUE5QixDQUFtQ21GLENBQW5DLEVBQXNDQyxDQUF0QztxQkFDS2l0QixLQUFMO2FBRkosTUFHTztxQkFDRXJPLE1BQUwsQ0FBWSxDQUFaLEVBQWMsQ0FBZDs7bUJBRUcsSUFBUDs7Ozt5Q0FHYXdTLEtBQUtDLEtBQUtyUCxLQUFLQyxLQUNoQztnQkFDUSxLQUFLdVgsV0FBVCxFQUNBO29CQUNRLEtBQUtBLFdBQUwsQ0FBaUJuZCxLQUFqQixDQUF1QmMsTUFBdkIsQ0FBOEI1aUIsTUFBOUIsS0FBeUMsQ0FBN0MsRUFDQTt5QkFDU2kvQixXQUFMLENBQWlCbmQsS0FBakIsQ0FBdUJjLE1BQXZCLEdBQWdDLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBaEM7O2FBSlIsTUFRQTtxQkFDU3lCLE1BQUwsQ0FBWSxDQUFaLEVBQWUsQ0FBZjs7O2dCQUdFbk4sSUFBSSxFQUFWO2dCQUNNMEwsU0FBUyxLQUFLcWMsV0FBTCxDQUFpQm5kLEtBQWpCLENBQXVCYyxNQUF0QztnQkFDSW1VLEtBQUssQ0FBVDtnQkFDSUMsS0FBSyxDQUFUOztnQkFFSXBVLE9BQU81aUIsTUFBUCxLQUFrQixDQUF0QixFQUNBO3FCQUNTcWtCLE1BQUwsQ0FBWSxDQUFaLEVBQWUsQ0FBZjs7O2dCQUdFK0QsUUFBUXhGLE9BQU9BLE9BQU81aUIsTUFBUCxHQUFnQixDQUF2QixDQUFkO2dCQUNNcW9CLFFBQVF6RixPQUFPQSxPQUFPNWlCLE1BQVAsR0FBZ0IsQ0FBdkIsQ0FBZDs7aUJBRUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxLQUFLaVgsQ0FBckIsRUFBd0IsRUFBRWpYLENBQTFCLEVBQ0E7b0JBQ1V1a0IsSUFBSXZrQixJQUFJaVgsQ0FBZDs7cUJBRUtrUixRQUFTLENBQUN5TyxNQUFNek8sS0FBUCxJQUFnQjVELENBQTlCO3FCQUNLNkQsUUFBUyxDQUFDeU8sTUFBTXpPLEtBQVAsSUFBZ0I3RCxDQUE5Qjs7dUJBRU9ua0IsSUFBUCxDQUFZMDJCLEtBQU0sQ0FBRUYsTUFBTyxDQUFDcFAsTUFBTW9QLEdBQVAsSUFBY3JTLENBQXRCLEdBQTRCdVMsRUFBN0IsSUFBbUN2UyxDQUFyRCxFQUNJd1MsS0FBTSxDQUFFRixNQUFPLENBQUNwUCxNQUFNb1AsR0FBUCxJQUFjdFMsQ0FBdEIsR0FBNEJ3UyxFQUE3QixJQUFtQ3hTLENBRDdDOzs7aUJBSUNrTyxLQUFMOzttQkFFTyxJQUFQOzs7O3lDQUdVbUUsS0FBS0MsS0FBS3FILE1BQU1DLE1BQU0zVyxLQUFLQyxLQUN6QztnQkFDUSxLQUFLdVgsV0FBVCxFQUNBO29CQUNRLEtBQUtBLFdBQUwsQ0FBaUJuZCxLQUFqQixDQUF1QmMsTUFBdkIsQ0FBOEI1aUIsTUFBOUIsS0FBeUMsQ0FBN0MsRUFDQTt5QkFDU2kvQixXQUFMLENBQWlCbmQsS0FBakIsQ0FBdUJjLE1BQXZCLEdBQWdDLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBaEM7O2FBSlIsTUFRQTtxQkFDU3lCLE1BQUwsQ0FBWSxDQUFaLEVBQWUsQ0FBZjs7O2dCQUdFekIsU0FBUyxLQUFLcWMsV0FBTCxDQUFpQm5kLEtBQWpCLENBQXVCYyxNQUF0Qzs7Z0JBRU13RixRQUFReEYsT0FBT0EsT0FBTzVpQixNQUFQLEdBQWdCLENBQXZCLENBQWQ7Z0JBQ01xb0IsUUFBUXpGLE9BQU9BLE9BQU81aUIsTUFBUCxHQUFnQixDQUF2QixDQUFkOzttQkFFT0EsTUFBUCxJQUFpQixDQUFqQjs7MEJBRWNvb0IsS0FBZCxFQUFxQkMsS0FBckIsRUFBNEJ3TyxHQUE1QixFQUFpQ0MsR0FBakMsRUFBc0NxSCxJQUF0QyxFQUE0Q0MsSUFBNUMsRUFBa0QzVyxHQUFsRCxFQUF1REMsR0FBdkQsRUFBNEQ5RSxNQUE1RDs7aUJBRUs4UCxLQUFMOzttQkFFTyxJQUFQOzs7OzhCQUdFM0gsSUFBSUMsSUFBSUMsSUFBSUMsSUFBSXpILFFBQ3RCO2dCQUNRLEtBQUt3YixXQUFULEVBQ0E7b0JBQ1EsS0FBS0EsV0FBTCxDQUFpQm5kLEtBQWpCLENBQXVCYyxNQUF2QixDQUE4QjVpQixNQUE5QixLQUF5QyxDQUE3QyxFQUNBO3lCQUNTaS9CLFdBQUwsQ0FBaUJuZCxLQUFqQixDQUF1QmMsTUFBdkIsQ0FBOEJ2aUIsSUFBOUIsQ0FBbUMwcUIsRUFBbkMsRUFBdUNDLEVBQXZDOzthQUpSLE1BUUE7cUJBQ1MzRyxNQUFMLENBQVkwRyxFQUFaLEVBQWdCQyxFQUFoQjs7O2dCQUdFcEksU0FBUyxLQUFLcWMsV0FBTCxDQUFpQm5kLEtBQWpCLENBQXVCYyxNQUF0QztnQkFDTXdGLFFBQVF4RixPQUFPQSxPQUFPNWlCLE1BQVAsR0FBZ0IsQ0FBdkIsQ0FBZDtnQkFDTXFvQixRQUFRekYsT0FBT0EsT0FBTzVpQixNQUFQLEdBQWdCLENBQXZCLENBQWQ7Z0JBQ01xbEIsS0FBS2dELFFBQVEyQyxFQUFuQjtnQkFDTXZGLEtBQUsyQyxRQUFRMkMsRUFBbkI7Z0JBQ00wSyxLQUFLdkssS0FBS0YsRUFBaEI7Z0JBQ00wSyxLQUFLekssS0FBS0YsRUFBaEI7Z0JBQ01zVSxLQUFLcDlCLEtBQUtxUCxHQUFMLENBQVUrVCxLQUFLcVEsRUFBTixHQUFhalEsS0FBS2dRLEVBQTNCLENBQVg7O2dCQUVJNEosS0FBSyxNQUFMLElBQWU1YixXQUFXLENBQTlCLEVBQ0E7b0JBQ1FiLE9BQU9BLE9BQU81aUIsTUFBUCxHQUFnQixDQUF2QixNQUE4QitxQixFQUE5QixJQUFvQ25JLE9BQU9BLE9BQU81aUIsTUFBUCxHQUFnQixDQUF2QixNQUE4QmdyQixFQUF0RSxFQUNBOzJCQUNXM3FCLElBQVAsQ0FBWTBxQixFQUFaLEVBQWdCQyxFQUFoQjs7YUFKUixNQVFBO29CQUNVc1UsS0FBTWphLEtBQUtBLEVBQU4sR0FBYUksS0FBS0EsRUFBN0I7b0JBQ00wSixLQUFNc0csS0FBS0EsRUFBTixHQUFhQyxLQUFLQSxFQUE3QjtvQkFDTTZKLEtBQU1sYSxLQUFLb1EsRUFBTixHQUFhaFEsS0FBS2lRLEVBQTdCO29CQUNNOEosS0FBSy9iLFNBQVN4aEIsS0FBSzBVLElBQUwsQ0FBVTJvQixFQUFWLENBQVQsR0FBeUJELEVBQXBDO29CQUNNSSxLQUFLaGMsU0FBU3hoQixLQUFLMFUsSUFBTCxDQUFVd1ksRUFBVixDQUFULEdBQXlCa1EsRUFBcEM7b0JBQ01LLEtBQUtGLEtBQUtELEVBQUwsR0FBVUQsRUFBckI7b0JBQ01LLEtBQUtGLEtBQUtGLEVBQUwsR0FBVXBRLEVBQXJCO29CQUNNaEosS0FBTXFaLEtBQUs5SixFQUFOLEdBQWErSixLQUFLaGEsRUFBN0I7b0JBQ01RLEtBQU11WixLQUFLL0osRUFBTixHQUFhZ0ssS0FBS3BhLEVBQTdCO29CQUNNaGhCLEtBQUtvaEIsTUFBTWdhLEtBQUtDLEVBQVgsQ0FBWDtvQkFDTXBYLEtBQUtqRCxNQUFNb2EsS0FBS0MsRUFBWCxDQUFYO29CQUNNRSxLQUFLbEssTUFBTThKLEtBQUtHLEVBQVgsQ0FBWDtvQkFDTUUsS0FBS3BLLE1BQU0rSixLQUFLRyxFQUFYLENBQVg7b0JBQ01HLGFBQWE3OUIsS0FBS21rQixLQUFMLENBQVdrQyxLQUFLckMsRUFBaEIsRUFBb0I1aEIsS0FBSzhoQixFQUF6QixDQUFuQjtvQkFDTTRaLFdBQVc5OUIsS0FBS21rQixLQUFMLENBQVd5WixLQUFLNVosRUFBaEIsRUFBb0IyWixLQUFLelosRUFBekIsQ0FBakI7O3FCQUVLM0MsR0FBTCxDQUFTMkMsS0FBSzRFLEVBQWQsRUFBa0I5RSxLQUFLK0UsRUFBdkIsRUFBMkJ2SCxNQUEzQixFQUFtQ3FjLFVBQW5DLEVBQStDQyxRQUEvQyxFQUF5RHRhLEtBQUtnUSxFQUFMLEdBQVVDLEtBQUtyUSxFQUF4RTs7O2lCQUdDcU4sS0FBTDs7bUJBRU8sSUFBUDs7Ozs0QkFHQXZNLElBQUlGLElBQUl4QyxRQUFRcWMsWUFBWUMsVUFDaEM7Z0JBRDBDQyxhQUMxQyx1RUFEMEQsS0FDMUQ7O2dCQUNRRixlQUFlQyxRQUFuQixFQUNBO3VCQUNXLElBQVA7OztnQkFHQSxDQUFDQyxhQUFELElBQWtCRCxZQUFZRCxVQUFsQyxFQUNBOzRCQUNnQjc5QixLQUFLaVAsRUFBTCxHQUFVLENBQXRCO2FBRkosTUFJSyxJQUFJOHVCLGlCQUFpQkYsY0FBY0MsUUFBbkMsRUFDTDs4QkFDa0I5OUIsS0FBS2lQLEVBQUwsR0FBVSxDQUF4Qjs7O2dCQUdFNFcsUUFBUWlZLFdBQVdELFVBQXpCO2dCQUNNdFYsT0FBT3ZvQixLQUFLaW5CLElBQUwsQ0FBVWpuQixLQUFLcVAsR0FBTCxDQUFTd1csS0FBVCxLQUFtQjdsQixLQUFLaVAsRUFBTCxHQUFVLENBQTdCLENBQVYsSUFBNkMsRUFBMUQ7O2dCQUVJNFcsVUFBVSxDQUFkLEVBQ0E7dUJBQ1csSUFBUDs7O2dCQUdFbVksU0FBUzlaLEtBQU1sa0IsS0FBSytPLEdBQUwsQ0FBUzh1QixVQUFULElBQXVCcmMsTUFBNUM7Z0JBQ015YyxTQUFTamEsS0FBTWhrQixLQUFLZ1AsR0FBTCxDQUFTNnVCLFVBQVQsSUFBdUJyYyxNQUE1Qzs7O2dCQUdJYixTQUFTLEtBQUtxYyxXQUFMLEdBQW1CLEtBQUtBLFdBQUwsQ0FBaUJuZCxLQUFqQixDQUF1QmMsTUFBMUMsR0FBbUQsSUFBaEU7O2dCQUVJQSxNQUFKLEVBQ0E7b0JBQ1FBLE9BQU9BLE9BQU81aUIsTUFBUCxHQUFnQixDQUF2QixNQUE4QmlnQyxNQUE5QixJQUF3Q3JkLE9BQU9BLE9BQU81aUIsTUFBUCxHQUFnQixDQUF2QixNQUE4QmtnQyxNQUExRSxFQUNBOzJCQUNXNy9CLElBQVAsQ0FBWTQvQixNQUFaLEVBQW9CQyxNQUFwQjs7YUFKUixNQVFBO3FCQUNTN2IsTUFBTCxDQUFZNGIsTUFBWixFQUFvQkMsTUFBcEI7eUJBQ1MsS0FBS2pCLFdBQUwsQ0FBaUJuZCxLQUFqQixDQUF1QmMsTUFBaEM7OztnQkFHRXVkLFFBQVFyWSxTQUFTMEMsT0FBTyxDQUFoQixDQUFkO2dCQUNNNFYsU0FBU0QsUUFBUSxDQUF2Qjs7Z0JBRU1FLFNBQVNwK0IsS0FBSytPLEdBQUwsQ0FBU212QixLQUFULENBQWY7Z0JBQ01HLFNBQVNyK0IsS0FBS2dQLEdBQUwsQ0FBU2t2QixLQUFULENBQWY7O2dCQUVNSSxXQUFXL1YsT0FBTyxDQUF4Qjs7Z0JBRU1nVyxZQUFhRCxXQUFXLENBQVosR0FBaUJBLFFBQW5DOztpQkFFSyxJQUFJdGdDLElBQUksQ0FBYixFQUFnQkEsS0FBS3NnQyxRQUFyQixFQUErQixFQUFFdGdDLENBQWpDLEVBQ0E7b0JBQ1V3Z0MsT0FBT3hnQyxJQUFLdWdDLFlBQVl2Z0MsQ0FBOUI7O29CQUVNbVIsUUFBVSt1QixLQUFELEdBQVVMLFVBQVYsR0FBd0JNLFNBQVNLLElBQWhEOztvQkFFTWp3QixJQUFJdk8sS0FBSytPLEdBQUwsQ0FBU0ksS0FBVCxDQUFWO29CQUNNaE4sSUFBSSxDQUFDbkMsS0FBS2dQLEdBQUwsQ0FBU0csS0FBVCxDQUFYOzt1QkFFTy9RLElBQVAsQ0FDSyxDQUFFZ2dDLFNBQVM3dkIsQ0FBVixHQUFnQjh2QixTQUFTbDhCLENBQTFCLElBQWdDcWYsTUFBakMsR0FBMkMwQyxFQUQvQyxFQUVLLENBQUVrYSxTQUFTLENBQUNqOEIsQ0FBWCxHQUFpQms4QixTQUFTOXZCLENBQTNCLElBQWlDaVQsTUFBbEMsR0FBNEN3QyxFQUZoRDs7O2lCQU1DeU0sS0FBTDs7bUJBRU8sSUFBUDs7OztpQ0FHS2x0QixHQUFHQyxHQUFHaUQsT0FBT0MsUUFDdEI7aUJBQ1N5MkIsU0FBTCxDQUFlLElBQUl4VCxTQUFKLENBQWNwbUIsQ0FBZCxFQUFpQkMsQ0FBakIsRUFBb0JpRCxLQUFwQixFQUEyQkMsTUFBM0IsQ0FBZjttQkFDTyxJQUFQOzs7O21DQUdPbkQsR0FBR0MsR0FBR2dlLFFBQ2pCO2lCQUNTMmIsU0FBTCxDQUFlLElBQUlwVCxNQUFKLENBQVd4bUIsQ0FBWCxFQUFjQyxDQUFkLEVBQWlCZ2UsTUFBakIsQ0FBZjs7bUJBRU8sSUFBUDs7OztvQ0FHUWplLEdBQUdDLEdBQUdpRCxPQUFPQyxRQUN6QjtpQkFDU3kyQixTQUFMLENBQWUsSUFBSW5ULE9BQUosQ0FBWXptQixDQUFaLEVBQWVDLENBQWYsRUFBa0JpRCxLQUFsQixFQUF5QkMsTUFBekIsQ0FBZjs7bUJBRU8sSUFBUDs7OztvQ0FHUTAxQixNQUNaOzs7Z0JBR1F6YixTQUFTeWIsSUFBYjs7Z0JBRUl4YixTQUFTLElBQWI7O2dCQUVJRCxrQkFBa0J3SixPQUF0QixFQUNBO3lCQUNheEosT0FBT0MsTUFBaEI7eUJBQ1NELE9BQU9BLE1BQWhCOzs7Z0JBR0EsQ0FBQzlqQixNQUFNYSxPQUFOLENBQWNpakIsTUFBZCxDQUFMLEVBQ0E7Ozt5QkFHYSxJQUFJOWpCLEtBQUosQ0FBVW9FLFVBQVVsRCxNQUFwQixDQUFUOztxQkFFSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUkyaUIsT0FBTzVpQixNQUEzQixFQUFtQyxFQUFFQyxDQUFyQyxFQUNBOzJCQUNXQSxDQUFQLElBQVlpRCxVQUFVakQsQ0FBVixDQUFaLENBREo7Ozs7Z0JBS0U2aEIsUUFBUSxJQUFJc0ssT0FBSixDQUFZeEosTUFBWixDQUFkOztrQkFFTUMsTUFBTixHQUFlQSxNQUFmOztpQkFFS3VjLFNBQUwsQ0FBZXRkLEtBQWY7O21CQUVPLElBQVA7Ozs7Z0NBSUo7Z0JBQ1EsS0FBS1EsWUFBTCxDQUFrQnRpQixNQUFsQixHQUEyQixDQUEvQixFQUNBO3FCQUNTMHlCLEtBQUw7cUJBQ0twUSxZQUFMLENBQWtCdGlCLE1BQWxCLEdBQTJCLENBQTNCOzs7aUJBR0NpL0IsV0FBTCxHQUFtQixJQUFuQjs7bUJBRU8sSUFBUDs7OztrQ0FHTW5kLE9BQ1Y7Z0JBQ1EsS0FBS21kLFdBQVQsRUFDQTtvQkFDUSxLQUFLQSxXQUFMLENBQWlCbmQsS0FBakIsQ0FBdUJjLE1BQXZCLENBQThCNWlCLE1BQTlCLElBQXdDLENBQTVDLEVBQ0E7eUJBQ1NzaUIsWUFBTCxDQUFrQjhSLEdBQWxCOzs7O2lCQUlINkssV0FBTCxHQUFtQixJQUFuQjs7Z0JBRU0xYyxPQUFPLElBQUkwYixZQUFKLENBQ1QsS0FBS2pmLFNBREksRUFFVCxLQUFLQyxXQUZJLEVBR1QsS0FBS2lFLFNBSEksRUFJVCxLQUFLVixTQUpJLEVBS1QsS0FBS08sU0FMSSxFQU1UakIsS0FOUyxDQUFiOztpQkFTS1EsWUFBTCxDQUFrQmppQixJQUFsQixDQUF1QmtpQixJQUF2Qjs7Z0JBRUlBLEtBQUt0YyxJQUFMLEtBQWMwVyxPQUFPOEYsSUFBekIsRUFDQTtxQkFDU1gsS0FBTCxDQUFXZSxNQUFYLEdBQW9CTixLQUFLVCxLQUFMLENBQVdlLE1BQS9CO3FCQUNLb2MsV0FBTCxHQUFtQjFjLElBQW5COzs7aUJBR0NtUSxLQUFMOzttQkFFT25RLElBQVA7Ozs7b0NBS0o7Z0JBQ1UwYyxjQUFjLEtBQUtBLFdBQXpCOztnQkFFSUEsZUFBZUEsWUFBWW5kLEtBQS9CLEVBQ0E7NEJBQ2dCQSxLQUFaLENBQWtCeUMsS0FBbEI7OzttQkFHRyxJQUFQOzs7Ozs7Ozs7Ozs7c0NBU1VwZSxPQUNkO2dCQUNVbWMsZUFBZSxLQUFLQSxZQUExQjtnQkFDSW9lLFNBQVMsS0FBYjtpQkFDSyxJQUFJemdDLElBQUksQ0FBYixFQUFnQkEsSUFBSXFpQixhQUFhdGlCLE1BQWpDLEVBQXlDLEVBQUVDLENBQTNDLEVBQ0E7b0JBQ1VzaUIsT0FBT0QsYUFBYXJpQixDQUFiLENBQWI7b0JBQ0lzaUIsS0FBS1QsS0FBVCxFQUNBOzs7d0JBR1NTLEtBQUtPLE9BQUwsTUFBa0JQLEtBQUtULEtBQUwsQ0FBVzlYLFFBQVgsQ0FBb0I3RCxNQUFNWCxDQUExQixFQUE2QlcsTUFBTVYsQ0FBbkMsQ0FBdkIsRUFDQTtpQ0FDYSxJQUFUOzRCQUNJaTdCLE1BQUosRUFBWTs7Ozs7O3dCQU1abmUsS0FBS1UsT0FBTCxNQUFrQlYsS0FBS1QsS0FBTCxDQUFXYyxNQUFqQyxFQUNBOztpQ0FFYStkLFdBQVlwZSxJQUFaLEVBQW1CcGMsTUFBTVgsQ0FBekIsRUFBNkJXLE1BQU1WLENBQW5DLENBQVQ7NEJBQ0lpN0IsTUFBSixFQUFZOzs7Ozs7O21CQVFqQkEsTUFBUDs7Ozs7Ozs7Ozs0Q0FVSjtnQkFDUUUsT0FBT0MsUUFBWDtnQkFDSUMsT0FBTyxDQUFDRCxRQUFaOztnQkFFSUUsT0FBT0YsUUFBWDtnQkFDSUcsT0FBTyxDQUFDSCxRQUFaOztnQkFFSSxLQUFLdmUsWUFBTCxDQUFrQnRpQixNQUF0QixFQUNBO29CQUNROGhCLFFBQVEsQ0FBWjtvQkFDSXRjLElBQUksQ0FBUjtvQkFDSUMsSUFBSSxDQUFSO29CQUNJbWUsSUFBSSxDQUFSO29CQUNJQyxJQUFJLENBQVI7O3FCQUVLLElBQUk1akIsSUFBSSxDQUFiLEVBQWdCQSxJQUFJLEtBQUtxaUIsWUFBTCxDQUFrQnRpQixNQUF0QyxFQUE4Q0MsR0FBOUMsRUFDQTt3QkFDVXNpQixPQUFPLEtBQUtELFlBQUwsQ0FBa0JyaUIsQ0FBbEIsQ0FBYjt3QkFDTWdHLE9BQU9zYyxLQUFLdGMsSUFBbEI7d0JBQ00rWSxZQUFZdUQsS0FBS3ZELFNBQXZCOzs0QkFFUXVELEtBQUtULEtBQWI7O3dCQUVJN2IsU0FBUzBXLE9BQU95RyxJQUFoQixJQUF3Qm5kLFNBQVMwVyxPQUFPcWMsSUFBNUMsRUFDQTs0QkFDUWxYLE1BQU10YyxDQUFOLEdBQVd3WixZQUFZLENBQTNCOzRCQUNJOEMsTUFBTXJjLENBQU4sR0FBV3VaLFlBQVksQ0FBM0I7NEJBQ0k4QyxNQUFNcFosS0FBTixHQUFjc1csU0FBbEI7NEJBQ0k4QyxNQUFNblosTUFBTixHQUFlcVcsU0FBbkI7OytCQUVPeFosSUFBSW83QixJQUFKLEdBQVdwN0IsQ0FBWCxHQUFlbzdCLElBQXRCOytCQUNPcDdCLElBQUlvZSxDQUFKLEdBQVFrZCxJQUFSLEdBQWV0N0IsSUFBSW9lLENBQW5CLEdBQXVCa2QsSUFBOUI7OytCQUVPcjdCLElBQUlzN0IsSUFBSixHQUFXdDdCLENBQVgsR0FBZXM3QixJQUF0QjsrQkFDT3Q3QixJQUFJb2UsQ0FBSixHQUFRbWQsSUFBUixHQUFldjdCLElBQUlvZSxDQUFuQixHQUF1Qm1kLElBQTlCO3FCQVhKLE1BYUssSUFBSS82QixTQUFTMFcsT0FBTzRHLElBQXBCLEVBQ0w7NEJBQ1F6QixNQUFNdGMsQ0FBVjs0QkFDSXNjLE1BQU1yYyxDQUFWOzRCQUNJcWMsTUFBTTJCLE1BQU4sR0FBZ0J6RSxZQUFZLENBQWhDOzRCQUNJOEMsTUFBTTJCLE1BQU4sR0FBZ0J6RSxZQUFZLENBQWhDOzsrQkFFT3haLElBQUlvZSxDQUFKLEdBQVFnZCxJQUFSLEdBQWVwN0IsSUFBSW9lLENBQW5CLEdBQXVCZ2QsSUFBOUI7K0JBQ09wN0IsSUFBSW9lLENBQUosR0FBUWtkLElBQVIsR0FBZXQ3QixJQUFJb2UsQ0FBbkIsR0FBdUJrZCxJQUE5Qjs7K0JBRU9yN0IsSUFBSW9lLENBQUosR0FBUWtkLElBQVIsR0FBZXQ3QixJQUFJb2UsQ0FBbkIsR0FBdUJrZCxJQUE5QjsrQkFDT3Q3QixJQUFJb2UsQ0FBSixHQUFRbWQsSUFBUixHQUFldjdCLElBQUlvZSxDQUFuQixHQUF1Qm1kLElBQTlCO3FCQVhDLE1BYUEsSUFBSS82QixTQUFTMFcsT0FBT2dILElBQXBCLEVBQ0w7NEJBQ1E3QixNQUFNdGMsQ0FBVjs0QkFDSXNjLE1BQU1yYyxDQUFWOzRCQUNJcWMsTUFBTXBaLEtBQU4sR0FBZXNXLFlBQVksQ0FBL0I7NEJBQ0k4QyxNQUFNblosTUFBTixHQUFnQnFXLFlBQVksQ0FBaEM7OytCQUVPeFosSUFBSW9lLENBQUosR0FBUWdkLElBQVIsR0FBZXA3QixJQUFJb2UsQ0FBbkIsR0FBdUJnZCxJQUE5QjsrQkFDT3A3QixJQUFJb2UsQ0FBSixHQUFRa2QsSUFBUixHQUFldDdCLElBQUlvZSxDQUFuQixHQUF1QmtkLElBQTlCOzsrQkFFT3I3QixJQUFJb2UsQ0FBSixHQUFRa2QsSUFBUixHQUFldDdCLElBQUlvZSxDQUFuQixHQUF1QmtkLElBQTlCOytCQUNPdDdCLElBQUlvZSxDQUFKLEdBQVFtZCxJQUFSLEdBQWV2N0IsSUFBSW9lLENBQW5CLEdBQXVCbWQsSUFBOUI7cUJBWEMsTUFjTDs7NEJBRVVwZSxTQUFTZCxNQUFNYyxNQUFyQjs0QkFDSXFJLEtBQUssQ0FBVDs0QkFDSUMsS0FBSyxDQUFUOzRCQUNJeFosS0FBSyxDQUFUOzRCQUNJQyxLQUFLLENBQVQ7NEJBQ0lzdkIsS0FBSyxDQUFUOzRCQUNJQyxLQUFLLENBQVQ7NEJBQ0kvYSxLQUFLLENBQVQ7NEJBQ0lGLEtBQUssQ0FBVDs7NkJBRUssSUFBSXpCLElBQUksQ0FBYixFQUFnQkEsSUFBSSxDQUFKLEdBQVE1QixPQUFPNWlCLE1BQS9CLEVBQXVDd2tCLEtBQUssQ0FBNUMsRUFDQTtnQ0FDUTVCLE9BQU80QixDQUFQLENBQUo7Z0NBQ0k1QixPQUFPNEIsSUFBSSxDQUFYLENBQUo7aUNBQ0s1QixPQUFPNEIsSUFBSSxDQUFYLENBQUw7aUNBQ0s1QixPQUFPNEIsSUFBSSxDQUFYLENBQUw7aUNBQ0t2aUIsS0FBS3FQLEdBQUwsQ0FBUzJaLEtBQUt6bEIsQ0FBZCxDQUFMO2lDQUNLdkQsS0FBS3FQLEdBQUwsQ0FBUzRaLEtBQUt6bEIsQ0FBZCxDQUFMO2dDQUNJdVosU0FBSjtnQ0FDSS9jLEtBQUswVSxJQUFMLENBQVdqRixLQUFLQSxFQUFOLEdBQWFDLEtBQUtBLEVBQTVCLENBQUo7O2dDQUVJaVMsSUFBSSxJQUFSLEVBQ0E7Ozs7aUNBSUssQ0FBRUMsSUFBSUQsQ0FBSixHQUFRalMsRUFBVCxHQUFlRCxFQUFoQixJQUFzQixDQUEzQjtpQ0FDSyxDQUFFbVMsSUFBSUQsQ0FBSixHQUFRbFMsRUFBVCxHQUFlQyxFQUFoQixJQUFzQixDQUEzQjtpQ0FDSyxDQUFDc1osS0FBS3psQixDQUFOLElBQVcsQ0FBaEI7aUNBQ0ssQ0FBQzBsQixLQUFLemxCLENBQU4sSUFBVyxDQUFoQjs7bUNBRU8wZ0IsS0FBSzhhLEVBQUwsR0FBVUwsSUFBVixHQUFpQnphLEtBQUs4YSxFQUF0QixHQUEyQkwsSUFBbEM7bUNBQ096YSxLQUFLOGEsRUFBTCxHQUFVSCxJQUFWLEdBQWlCM2EsS0FBSzhhLEVBQXRCLEdBQTJCSCxJQUFsQzs7bUNBRU83YSxLQUFLaWIsRUFBTCxHQUFVSCxJQUFWLEdBQWlCOWEsS0FBS2liLEVBQXRCLEdBQTJCSCxJQUFsQzttQ0FDTzlhLEtBQUtpYixFQUFMLEdBQVVGLElBQVYsR0FBaUIvYSxLQUFLaWIsRUFBdEIsR0FBMkJGLElBQWxDOzs7O2FBN0ZoQixNQW1HQTt1QkFDVyxDQUFQO3VCQUNPLENBQVA7dUJBQ08sQ0FBUDt1QkFDTyxDQUFQOzs7aUJBSUNHLEtBQUwsQ0FBV1AsSUFBWCxHQUFrQkEsSUFBbEI7aUJBQ0tPLEtBQUwsQ0FBV0wsSUFBWCxHQUFrQkEsSUFBbEI7O2lCQUVLSyxLQUFMLENBQVdKLElBQVgsR0FBa0JBLElBQWxCO2lCQUNLSSxLQUFMLENBQVdILElBQVgsR0FBa0JBLElBQWxCOzs7O2dDQUdJcCtCLFNBQ1I7dUhBQ2tCQSxPQUFkOztpQkFFSyxJQUFJM0MsSUFBSSxDQUFiLEVBQWdCQSxJQUFJLEtBQUtxaUIsWUFBTCxDQUFrQnRpQixNQUF0QyxFQUE4QyxFQUFFQyxDQUFoRCxFQUNBO3FCQUNTcWlCLFlBQUwsQ0FBa0JyaUIsQ0FBbEIsRUFBcUJpTyxPQUFyQjs7aUJBRUMsSUFBTTNGLEVBQVgsSUFBaUIsS0FBSzY0QixNQUF0QixFQUNBO3FCQUNTLElBQUk1YyxJQUFJLENBQWIsRUFBZ0JBLElBQUksS0FBSzRjLE1BQUwsQ0FBWTc0QixFQUFaLEVBQWdCZ2EsSUFBaEIsQ0FBcUJ2aUIsTUFBekMsRUFBaUQsRUFBRXdrQixDQUFuRCxFQUNBO3lCQUNTNGMsTUFBTCxDQUFZNzRCLEVBQVosRUFBZ0JnYSxJQUFoQixDQUFxQmlDLENBQXJCLEVBQXdCdFcsT0FBeEI7Ozs7aUJBSUhvVSxZQUFMLEdBQW9CLElBQXBCO2lCQUNLMmMsV0FBTCxHQUFtQixJQUFuQjtpQkFDS21DLE1BQUwsR0FBYyxJQUFkOzs7Ozs7QUN0bEJSOzs7Ozs7O0FBT0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxJQUVxQkM7OzttQkFFTHg4QixHQUFaLEVBQWdCOzs7O2NBRU54QixNQUFNMlosUUFBTixDQUFlblksR0FBZixDQUFOO1lBQ0l5OEIsV0FBVzNpQyxJQUFFZ0UsTUFBRixDQUFVaEUsSUFBRXFFLEtBQUYsQ0FBUThaLHFCQUFSLENBQVYsRUFBMkNqWSxJQUFJcEUsT0FBL0MsQ0FBZjtZQUNJQSxPQUFKLEdBQWM2Z0MsUUFBZDs7aUhBRU96OEIsR0FOSzs7Y0FRUHlhLFFBQUwsR0FBZ0IsSUFBSTBmLFFBQUosT0FBaEI7OztjQUdLdUMsVUFBTCxHQUFtQixLQUFuQjtjQUNLQyxVQUFMLEdBQW1CLEtBQW5COzs7Y0FHS3gxQixXQUFMLEdBQW1CLEtBQW5CO2NBQ0syRCxVQUFMLEdBQW1CLElBQW5CLENBaEJZO2NBaUJQMUQsZ0JBQUwsR0FBd0IsSUFBeEIsQ0FqQlk7OztjQW9CUHFCLGNBQUwsR0FBc0IsSUFBdEI7Ozs7O2NBS0tySCxJQUFMLEdBQVksTUFBS0EsSUFBTCxJQUFhLE9BQXpCO1lBQ0kweUIsSUFBSixLQUFhLE1BQUtBLElBQUwsR0FBVTl6QixJQUFJOHpCLElBQTNCOzs7Y0FHSzhJLGdCQUFMLENBQXNCNThCLEdBQXRCOztjQUVLNjhCLEtBQUwsR0FBYSxJQUFiOzs7Ozs7K0JBSUo7OzsrQkFHQTs7O3lDQUVpQjc4QixLQUNqQjtpQkFDUyxJQUFJNUUsQ0FBVCxJQUFjNEUsR0FBZCxFQUFtQjtvQkFDWjVFLEtBQUssSUFBTCxJQUFhQSxLQUFLLFNBQXRCLEVBQWdDO3lCQUN2QkEsQ0FBTCxJQUFVNEUsSUFBSTVFLENBQUosQ0FBVjs7Ozs7Ozs7Ozs7cUNBUUU4cUIsSUFBSUMsSUFBSUMsSUFBSUMsSUFBSXlXLFlBQzlCO3lCQUNtQixPQUFPQSxVQUFQLElBQXFCLFdBQXJCLEdBQ0UsQ0FERixHQUNNQSxVQURuQjt5QkFFYTEvQixLQUFLQyxHQUFMLENBQVV5L0IsVUFBVixFQUF1QixLQUFLbGhDLE9BQUwsQ0FBYXVlLFNBQXBDLENBQWI7Z0JBQ0k0aUIsU0FBUzNXLEtBQUtGLEVBQWxCO2dCQUNJOFcsU0FBUzNXLEtBQUtGLEVBQWxCO2dCQUNJOFcsWUFBWTcvQixLQUFLZ1YsS0FBTCxDQUNaaFYsS0FBSzBVLElBQUwsQ0FBVWlyQixTQUFTQSxNQUFULEdBQWtCQyxTQUFTQSxNQUFyQyxJQUErQ0YsVUFEbkMsQ0FBaEI7aUJBR0ssSUFBSTFoQyxJQUFJLENBQWIsRUFBZ0JBLElBQUk2aEMsU0FBcEIsRUFBK0IsRUFBRTdoQyxDQUFqQyxFQUFvQztvQkFDNUJ1RixJQUFJdVosU0FBU2dNLEtBQU02VyxTQUFTRSxTQUFWLEdBQXVCN2hDLENBQXJDLENBQVI7b0JBQ0l3RixJQUFJc1osU0FBU2lNLEtBQU02VyxTQUFTQyxTQUFWLEdBQXVCN2hDLENBQXJDLENBQVI7cUJBQ0txZixRQUFMLENBQWNyZixJQUFJLENBQUosS0FBVSxDQUFWLEdBQWMsUUFBZCxHQUF5QixRQUF2QyxFQUFrRHVGLENBQWxELEVBQXNEQyxDQUF0RDtvQkFDSXhGLEtBQU02aEMsWUFBVSxDQUFoQixJQUFzQjdoQyxJQUFFLENBQUYsS0FBUSxDQUFsQyxFQUFvQzt5QkFDM0JxZixRQUFMLENBQWNtRixNQUFkLENBQXNCd0csRUFBdEIsRUFBMkJDLEVBQTNCOzs7Ozs7Ozs7Ozs7OzZDQVVRenFCLFNBQ3RCO2dCQUNRbWdDLE9BQVFtQixPQUFPQyxTQUFuQjtnQkFDSWxCLE9BQVFpQixPQUFPRSxTQUFuQjtnQkFDSWxCLE9BQVFnQixPQUFPQyxTQUFuQjtnQkFDSWhCLE9BQVFlLE9BQU9FLFNBQW5COztnQkFFSUMsTUFBTXpoQyxRQUFRMGhDLFNBQWxCLENBTko7aUJBT1EsSUFBSWxpQyxJQUFJLENBQVIsRUFBV21aLElBQUk4b0IsSUFBSWxpQyxNQUF2QixFQUErQkMsSUFBSW1aLENBQW5DLEVBQXNDblosR0FBdEMsRUFBMkM7b0JBQ25DaWlDLElBQUlqaUMsQ0FBSixFQUFPLENBQVAsSUFBWTJnQyxJQUFoQixFQUFzQjsyQkFDWHNCLElBQUlqaUMsQ0FBSixFQUFPLENBQVAsQ0FBUDs7b0JBRUFpaUMsSUFBSWppQyxDQUFKLEVBQU8sQ0FBUCxJQUFZNmdDLElBQWhCLEVBQXNCOzJCQUNYb0IsSUFBSWppQyxDQUFKLEVBQU8sQ0FBUCxDQUFQOztvQkFFQWlpQyxJQUFJamlDLENBQUosRUFBTyxDQUFQLElBQVk4Z0MsSUFBaEIsRUFBc0I7MkJBQ1htQixJQUFJamlDLENBQUosRUFBTyxDQUFQLENBQVA7O29CQUVBaWlDLElBQUlqaUMsQ0FBSixFQUFPLENBQVAsSUFBWStnQyxJQUFoQixFQUFzQjsyQkFDWGtCLElBQUlqaUMsQ0FBSixFQUFPLENBQVAsQ0FBUDs7OztnQkFJSitlLFNBQUo7Z0JBQ0l2ZSxRQUFRd2UsV0FBUixJQUF1QnhlLFFBQVEraEIsU0FBbkMsRUFBZ0Q7NEJBQ2hDL2hCLFFBQVF1ZSxTQUFSLElBQXFCLENBQWpDO2FBREosTUFFTzs0QkFDUyxDQUFaOzttQkFFRzttQkFDTS9jLEtBQUttZ0MsS0FBTCxDQUFXeEIsT0FBTzVoQixZQUFZLENBQTlCLENBRE47bUJBRU0vYyxLQUFLbWdDLEtBQUwsQ0FBV3JCLE9BQU8vaEIsWUFBWSxDQUE5QixDQUZOO3VCQUdNOGhCLE9BQU9GLElBQVAsR0FBYzVoQixTQUhwQjt3QkFJTWdpQixPQUFPRCxJQUFQLEdBQWMvaEI7YUFKM0I7Ozs7RUE1RzRCakM7O0FDYm5DOzs7Ozs7O0FBT0EsQUFDQSxBQUNBLEFBRUEsSUFBSXNsQixPQUFPLFNBQVBBLElBQU8sQ0FBU3hrQixJQUFULEVBQWVoWixHQUFmLEVBQW9CO1FBQ3ZCMEosT0FBTyxJQUFYO1NBQ0t0SSxJQUFMLEdBQVksTUFBWjtTQUNLcThCLFVBQUwsR0FBa0IsT0FBbEI7U0FDS0MsWUFBTCxHQUFvQixDQUFDLFdBQUQsRUFBYyxhQUFkLEVBQTZCLFlBQTdCLEVBQTJDLFVBQTNDLEVBQXVELFlBQXZELENBQXBCOzs7VUFHTWwvQixNQUFNMlosUUFBTixDQUFlblksR0FBZixDQUFOOztTQUVLeThCLFFBQUwsR0FBZ0IzaUMsSUFBRWdFLE1BQUYsQ0FBUztrQkFDWCxFQURXO29CQUVULFFBRlM7b0JBR1QsaUJBSFM7d0JBSUwsSUFKSzttQkFLVixPQUxVO3FCQU1SLElBTlE7bUJBT1YsQ0FQVTtvQkFRVCxHQVJTO3lCQVNKLElBVEk7NkJBVUE7S0FWVCxFQVdia0MsSUFBSXBFLE9BWFMsQ0FBaEI7O1NBYUs2Z0MsUUFBTCxDQUFja0IsSUFBZCxHQUFxQmowQixLQUFLazBCLG1CQUFMLEVBQXJCOztTQUVLNWtCLElBQUwsR0FBWUEsS0FBSzNlLFFBQUwsRUFBWjs7U0FFS3VGLFVBQUwsQ0FBZ0JsQyxXQUFoQixDQUE0QjROLEtBQTVCLENBQWtDLElBQWxDLEVBQXdDLENBQUN0TCxHQUFELENBQXhDO0NBMUJKOztBQTZCQXhCLE1BQU0yTCxVQUFOLENBQWlCcXpCLElBQWpCLEVBQXVCdGxCLGFBQXZCLEVBQXNDO1lBQzFCLGdCQUFTN2IsSUFBVCxFQUFlSCxLQUFmLEVBQXNCNlosUUFBdEIsRUFBZ0M7O1lBRWhDamMsSUFBRWMsT0FBRixDQUFVLEtBQUs4aUMsWUFBZixFQUE2QnJoQyxJQUE3QixLQUFzQyxDQUExQyxFQUE2QztpQkFDcENvZ0MsUUFBTCxDQUFjcGdDLElBQWQsSUFBc0JILEtBQXRCOzs7aUJBR0srTSxTQUFMLEdBQWlCLEtBQWpCO2lCQUNLck4sT0FBTCxDQUFhK2hDLElBQWIsR0FBb0IsS0FBS0MsbUJBQUwsRUFBcEI7aUJBQ0toaUMsT0FBTCxDQUFhaUksS0FBYixHQUFxQixLQUFLZzZCLFlBQUwsRUFBckI7aUJBQ0tqaUMsT0FBTCxDQUFha0ksTUFBYixHQUFzQixLQUFLZzZCLGFBQUwsRUFBdEI7O0tBVjBCO1VBYTVCLGNBQVM5a0IsSUFBVCxFQUFlaFosR0FBZixFQUFvQjtZQUNsQjBKLE9BQU8sSUFBWDtZQUNJaUMsSUFBSSxLQUFLL1AsT0FBYjtVQUNFaUksS0FBRixHQUFVLEtBQUtnNkIsWUFBTCxFQUFWO1VBQ0UvNUIsTUFBRixHQUFXLEtBQUtnNkIsYUFBTCxFQUFYO0tBakI4QjtZQW1CMUIsZ0JBQVMvaUIsR0FBVCxFQUFjO2FBQ2IsSUFBSWhhLENBQVQsSUFBYyxLQUFLbkYsT0FBTCxDQUFhdWEsTUFBM0IsRUFBbUM7Z0JBQzNCcFYsS0FBS2dhLEdBQVQsRUFBYztvQkFDTmhhLEtBQUssY0FBTCxJQUF1QixLQUFLbkYsT0FBTCxDQUFhdWEsTUFBYixDQUFvQnBWLENBQXBCLENBQTNCLEVBQW1EO3dCQUMzQ0EsQ0FBSixJQUFTLEtBQUtuRixPQUFMLENBQWF1YSxNQUFiLENBQW9CcFYsQ0FBcEIsQ0FBVDs7OzthQUlQZzlCLFdBQUwsQ0FBaUJoakIsR0FBakIsRUFBc0IsS0FBS2lqQixhQUFMLEVBQXRCO0tBM0I4QjtlQTZCdkIsbUJBQVNobEIsSUFBVCxFQUFlO2FBQ2pCQSxJQUFMLEdBQVlBLEtBQUszZSxRQUFMLEVBQVo7YUFDSytPLFNBQUw7S0EvQjhCO2tCQWlDcEIsd0JBQVc7WUFDakJ2RixRQUFRLENBQVo7Y0FDTW0xQixTQUFOLENBQWdCL2QsSUFBaEI7Y0FDTStkLFNBQU4sQ0FBZ0IyRSxJQUFoQixHQUF1QixLQUFLL2hDLE9BQUwsQ0FBYStoQyxJQUFwQztnQkFDUSxLQUFLTSxhQUFMLENBQW1Cei9CLE1BQU13NkIsU0FBekIsRUFBb0MsS0FBS2dGLGFBQUwsRUFBcEMsQ0FBUjtjQUNNaEYsU0FBTixDQUFnQjFkLE9BQWhCO2VBQ096WCxLQUFQO0tBdkM4QjttQkF5Q25CLHlCQUFXO2VBQ2YsS0FBS3E2QixjQUFMLENBQW9CMS9CLE1BQU13NkIsU0FBMUIsRUFBcUMsS0FBS2dGLGFBQUwsRUFBckMsQ0FBUDtLQTFDOEI7bUJBNENuQix5QkFBVztlQUNmLEtBQUtobEIsSUFBTCxDQUFVclAsS0FBVixDQUFnQixLQUFLOHpCLFVBQXJCLENBQVA7S0E3QzhCO2lCQStDckIscUJBQVMxaUIsR0FBVCxFQUFjb2pCLFNBQWQsRUFBeUI7WUFDOUJsakIsSUFBSjthQUNLbWpCLGlCQUFMLENBQXVCcmpCLEdBQXZCLEVBQTRCb2pCLFNBQTVCO2FBQ0tFLGVBQUwsQ0FBcUJ0akIsR0FBckIsRUFBMEJvakIsU0FBMUI7WUFDSTdpQixPQUFKO0tBbkQ4Qjt5QkFxRGIsK0JBQVc7WUFDeEI1UixPQUFPLElBQVg7WUFDSTQwQixVQUFVLEVBQWQ7O1lBRUU1aUMsSUFBRixDQUFPLEtBQUtnaUMsWUFBWixFQUEwQixVQUFTMzhCLENBQVQsRUFBWTtnQkFDOUJ3OUIsUUFBUTcwQixLQUFLK3lCLFFBQUwsQ0FBYzE3QixDQUFkLENBQVo7Z0JBQ0lBLEtBQUssVUFBVCxFQUFxQjt3QkFDVHRFLFdBQVc4aEMsS0FBWCxJQUFvQixJQUE1Qjs7cUJBRUtELFFBQVE5aUMsSUFBUixDQUFhK2lDLEtBQWIsQ0FBVDtTQUxKOztlQVFPRCxRQUFRL21CLElBQVIsQ0FBYSxHQUFiLENBQVA7S0FqRThCO3FCQW9FakIseUJBQVN3RCxHQUFULEVBQWNvakIsU0FBZCxFQUF5QjtZQUNsQyxDQUFDLEtBQUt2aUMsT0FBTCxDQUFhK2hCLFNBQWxCLEVBQTZCOzthQUV4QjZnQixXQUFMLEdBQW1CLEVBQW5CO1lBQ0lDLGNBQWMsQ0FBbEI7O2FBRUssSUFBSXJqQyxJQUFJLENBQVIsRUFBVzBnQixNQUFNcWlCLFVBQVVoakMsTUFBaEMsRUFBd0NDLElBQUkwZ0IsR0FBNUMsRUFBaUQxZ0IsR0FBakQsRUFBc0Q7Z0JBQzlDc2pDLGVBQWUsS0FBS0MsZ0JBQUwsQ0FBc0I1akIsR0FBdEIsRUFBMkIzZixDQUEzQixFQUE4QitpQyxTQUE5QixDQUFuQjsyQkFDZU8sWUFBZjs7aUJBRUtFLGVBQUwsQ0FDSSxVQURKLEVBRUk3akIsR0FGSixFQUdJb2pCLFVBQVUvaUMsQ0FBVixDQUhKLEVBSUksQ0FKSjtpQkFLU3lqQyxhQUFMLEtBQXVCSixXQUwzQixFQU1JcmpDLENBTko7O0tBOUUwQjt1QkF3RmYsMkJBQVMyZixHQUFULEVBQWNvakIsU0FBZCxFQUF5QjtZQUNwQyxDQUFDLEtBQUt2aUMsT0FBTCxDQUFhd2UsV0FBZCxJQUE2QixDQUFDLEtBQUt4ZSxPQUFMLENBQWF1ZSxTQUEvQyxFQUEwRDs7WUFFdERza0IsY0FBYyxDQUFsQjs7WUFFSXhqQixJQUFKO1lBQ0ksS0FBSzZqQixlQUFULEVBQTBCO2dCQUNsQixJQUFJLEtBQUtBLGVBQUwsQ0FBcUIzakMsTUFBN0IsRUFBcUM7cUJBQzVCMmpDLGVBQUwsQ0FBcUJ0akMsSUFBckIsQ0FBMEI4UCxLQUExQixDQUFnQyxLQUFLd3pCLGVBQXJDLEVBQXNELEtBQUtBLGVBQTNEOztnQ0FFZ0IvakIsSUFBSWdrQixXQUFKLENBQWdCLEtBQUtELGVBQXJCLENBQXBCOzs7WUFHQWpoQixTQUFKO2FBQ0ssSUFBSXppQixJQUFJLENBQVIsRUFBVzBnQixNQUFNcWlCLFVBQVVoakMsTUFBaEMsRUFBd0NDLElBQUkwZ0IsR0FBNUMsRUFBaUQxZ0IsR0FBakQsRUFBc0Q7Z0JBQzlDc2pDLGVBQWUsS0FBS0MsZ0JBQUwsQ0FBc0I1akIsR0FBdEIsRUFBMkIzZixDQUEzQixFQUE4QitpQyxTQUE5QixDQUFuQjsyQkFDZU8sWUFBZjs7aUJBRUtFLGVBQUwsQ0FDSSxZQURKLEVBRUk3akIsR0FGSixFQUdJb2pCLFVBQVUvaUMsQ0FBVixDQUhKLEVBSUksQ0FKSjtpQkFLU3lqQyxhQUFMLEtBQXVCSixXQUwzQixFQU1JcmpDLENBTko7O1lBU0F5akIsU0FBSjtZQUNJdkQsT0FBSjtLQXBIOEI7cUJBc0hqQix5QkFBUzBqQixNQUFULEVBQWlCamtCLEdBQWpCLEVBQXNCc2UsSUFBdEIsRUFBNEJ6MkIsSUFBNUIsRUFBa0NHLEdBQWxDLEVBQXVDazhCLFNBQXZDLEVBQWtEO2VBQ3hELEtBQUtOLGdCQUFMLEtBQTBCLENBQWpDO1lBQ0ksS0FBSy9pQyxPQUFMLENBQWFzakMsU0FBYixLQUEyQixTQUEvQixFQUEwQztpQkFDakNDLFlBQUwsQ0FBa0JILE1BQWxCLEVBQTBCamtCLEdBQTFCLEVBQStCc2UsSUFBL0IsRUFBcUN6MkIsSUFBckMsRUFBMkNHLEdBQTNDLEVBQWdEazhCLFNBQWhEOzs7WUFHQTlrQixZQUFZWSxJQUFJcWtCLFdBQUosQ0FBZ0IvRixJQUFoQixFQUFzQngxQixLQUF0QztZQUNJdzdCLGFBQWEsS0FBS3pqQyxPQUFMLENBQWFpSSxLQUE5Qjs7WUFFSXc3QixhQUFhbGxCLFNBQWpCLEVBQTRCO2dCQUNwQm1sQixRQUFRakcsS0FBSzF2QixLQUFMLENBQVcsS0FBWCxDQUFaO2dCQUNJNDFCLGFBQWF4a0IsSUFBSXFrQixXQUFKLENBQWdCL0YsS0FBS21HLE9BQUwsQ0FBYSxNQUFiLEVBQXFCLEVBQXJCLENBQWhCLEVBQTBDMzdCLEtBQTNEO2dCQUNJNDdCLFlBQVlKLGFBQWFFLFVBQTdCO2dCQUNJRyxZQUFZSixNQUFNbmtDLE1BQU4sR0FBZSxDQUEvQjtnQkFDSXdrQyxhQUFhRixZQUFZQyxTQUE3Qjs7Z0JBRUlFLGFBQWEsQ0FBakI7aUJBQ0ssSUFBSXhrQyxJQUFJLENBQVIsRUFBVzBnQixNQUFNd2pCLE1BQU1ua0MsTUFBNUIsRUFBb0NDLElBQUkwZ0IsR0FBeEMsRUFBNkMxZ0IsR0FBN0MsRUFBa0Q7cUJBQ3pDK2pDLFlBQUwsQ0FBa0JILE1BQWxCLEVBQTBCamtCLEdBQTFCLEVBQStCdWtCLE1BQU1sa0MsQ0FBTixDQUEvQixFQUF5Q3dILE9BQU9nOUIsVUFBaEQsRUFBNEQ3OEIsR0FBNUQsRUFBaUVrOEIsU0FBakU7OEJBQ2Nsa0IsSUFBSXFrQixXQUFKLENBQWdCRSxNQUFNbGtDLENBQU4sQ0FBaEIsRUFBMEJ5SSxLQUExQixHQUFrQzg3QixVQUFoRDs7U0FWUixNQVlPO2lCQUNFUixZQUFMLENBQWtCSCxNQUFsQixFQUEwQmprQixHQUExQixFQUErQnNlLElBQS9CLEVBQXFDejJCLElBQXJDLEVBQTJDRyxHQUEzQyxFQUFnRGs4QixTQUFoRDs7S0E1STBCO2tCQStJcEIsc0JBQVNELE1BQVQsRUFBaUJqa0IsR0FBakIsRUFBc0I4a0IsS0FBdEIsRUFBNkJqOUIsSUFBN0IsRUFBbUNHLEdBQW5DLEVBQXdDO1lBQzlDaThCLE1BQUosRUFBWWEsS0FBWixFQUFtQixDQUFuQixFQUFzQjk4QixHQUF0QjtLQWhKOEI7c0JBa0poQiw0QkFBVztlQUNsQixLQUFLbkgsT0FBTCxDQUFha2tDLFFBQWIsR0FBd0IsS0FBS2xrQyxPQUFMLENBQWFta0MsVUFBNUM7S0FuSjhCO21CQXFKbkIsdUJBQVNobEIsR0FBVCxFQUFjb2pCLFNBQWQsRUFBeUI7WUFDaEM2QixXQUFXamxCLElBQUlxa0IsV0FBSixDQUFnQmpCLFVBQVUsQ0FBVixLQUFnQixHQUFoQyxFQUFxQ3Q2QixLQUFwRDthQUNLLElBQUl6SSxJQUFJLENBQVIsRUFBVzBnQixNQUFNcWlCLFVBQVVoakMsTUFBaEMsRUFBd0NDLElBQUkwZ0IsR0FBNUMsRUFBaUQxZ0IsR0FBakQsRUFBc0Q7Z0JBQzlDNmtDLG1CQUFtQmxsQixJQUFJcWtCLFdBQUosQ0FBZ0JqQixVQUFVL2lDLENBQVYsQ0FBaEIsRUFBOEJ5SSxLQUFyRDtnQkFDSW84QixtQkFBbUJELFFBQXZCLEVBQWlDOzJCQUNsQkMsZ0JBQVg7OztlQUdERCxRQUFQO0tBN0o4QjtvQkErSmxCLHdCQUFTamxCLEdBQVQsRUFBY29qQixTQUFkLEVBQXlCO2VBQzlCLEtBQUt2aUMsT0FBTCxDQUFha2tDLFFBQWIsR0FBd0IzQixVQUFVaGpDLE1BQWxDLEdBQTJDLEtBQUtTLE9BQUwsQ0FBYW1rQyxVQUEvRDtLQWhLOEI7Ozs7OzttQkF1S25CLHlCQUFXO1lBQ2xCbnRCLElBQUksQ0FBUjtnQkFDUSxLQUFLaFgsT0FBTCxDQUFhc2tDLFlBQXJCO2lCQUNTLEtBQUw7b0JBQ1EsQ0FBSjs7aUJBRUMsUUFBTDtvQkFDUSxDQUFDLEtBQUt0a0MsT0FBTCxDQUFha0ksTUFBZCxHQUF1QixDQUEzQjs7aUJBRUMsUUFBTDtvQkFDUSxDQUFDLEtBQUtsSSxPQUFMLENBQWFrSSxNQUFsQjs7O2VBR0Q4TyxDQUFQO0tBcEw4QjthQXNMekIsbUJBQVc7WUFDWmpILElBQUksS0FBSy9QLE9BQWI7WUFDSStFLElBQUksQ0FBUjtZQUNJQyxJQUFJLENBQVI7O1lBRUkrSyxFQUFFdXpCLFNBQUYsSUFBZSxRQUFuQixFQUE2QjtnQkFDckIsQ0FBQ3Z6QixFQUFFOUgsS0FBSCxHQUFXLENBQWY7O1lBRUE4SCxFQUFFdXpCLFNBQUYsSUFBZSxPQUFuQixFQUE0QjtnQkFDcEIsQ0FBQ3Z6QixFQUFFOUgsS0FBUDs7WUFFQThILEVBQUV1MEIsWUFBRixJQUFrQixRQUF0QixFQUFnQztnQkFDeEIsQ0FBQ3YwQixFQUFFN0gsTUFBSCxHQUFZLENBQWhCOztZQUVBNkgsRUFBRXUwQixZQUFGLElBQWtCLFFBQXRCLEVBQWdDO2dCQUN4QixDQUFDdjBCLEVBQUU3SCxNQUFQOzs7ZUFHRztlQUNBbkQsQ0FEQTtlQUVBQyxDQUZBO21CQUdJK0ssRUFBRTlILEtBSE47b0JBSUs4SCxFQUFFN0g7U0FKZDs7Q0F4TVIsRUFnTkE7O0FDdlBBOzs7Ozs7O0FBT0EsQUFFQSxTQUFTcThCLE1BQVQsQ0FBZ0J4L0IsQ0FBaEIsRUFBbUJDLENBQW5CLEVBQXNCO1FBQ2RnaEIsS0FBSyxDQUFUO1FBQVdDLEtBQUssQ0FBaEI7UUFDS3hqQixVQUFVbEQsTUFBVixJQUFvQixDQUFwQixJQUF5QnJCLElBQUVtRCxRQUFGLENBQVkwRCxDQUFaLENBQTlCLEVBQStDO1lBQ3ZDRyxNQUFNekMsVUFBVSxDQUFWLENBQVY7WUFDSXZFLElBQUVnQixPQUFGLENBQVdnRyxHQUFYLENBQUosRUFBc0I7aUJBQ2RBLElBQUksQ0FBSixDQUFMO2lCQUNLQSxJQUFJLENBQUosQ0FBTDtTQUZILE1BR08sSUFBSUEsSUFBSXhHLGNBQUosQ0FBbUIsR0FBbkIsS0FBMkJ3RyxJQUFJeEcsY0FBSixDQUFtQixHQUFuQixDQUEvQixFQUF5RDtpQkFDeER3RyxJQUFJSCxDQUFUO2lCQUNLRyxJQUFJRixDQUFUOzs7U0FHRncvQixLQUFMLEdBQWEsQ0FBQ3hlLEVBQUQsRUFBS0MsRUFBTCxDQUFiOztBQUVKc2UsT0FBT2ptQyxTQUFQLEdBQW1CO2NBQ0wsa0JBQVVnVCxDQUFWLEVBQWE7WUFDZnZNLElBQUksS0FBS3kvQixLQUFMLENBQVcsQ0FBWCxJQUFnQmx6QixFQUFFa3pCLEtBQUYsQ0FBUSxDQUFSLENBQXhCO1lBQ0l4L0IsSUFBSSxLQUFLdy9CLEtBQUwsQ0FBVyxDQUFYLElBQWdCbHpCLEVBQUVrekIsS0FBRixDQUFRLENBQVIsQ0FBeEI7O2VBRU9oakMsS0FBSzBVLElBQUwsQ0FBV25SLElBQUlBLENBQUwsR0FBV0MsSUFBSUEsQ0FBekIsQ0FBUDs7Q0FMUixDQVFBOztBQ2hDQTs7Ozs7OztBQU9BLEFBQ0EsQUFFQTs7O0FBR0EsU0FBU3kvQixXQUFULENBQXFCM3RCLEVBQXJCLEVBQXlCQyxFQUF6QixFQUE2QkksRUFBN0IsRUFBaUNDLEVBQWpDLEVBQXFDSixDQUFyQyxFQUF3Q08sRUFBeEMsRUFBNENDLEVBQTVDLEVBQWdEO1FBQ3hDSCxLQUFLLENBQUNGLEtBQUtMLEVBQU4sSUFBWSxJQUFyQjtRQUNJUSxLQUFLLENBQUNGLEtBQUtMLEVBQU4sSUFBWSxJQUFyQjtXQUNPLENBQUMsS0FBS0EsS0FBS0ksRUFBVixJQUFnQkUsRUFBaEIsR0FBcUJDLEVBQXRCLElBQTRCRSxFQUE1QixHQUNFLENBQUMsQ0FBRSxDQUFGLElBQU9ULEtBQUtJLEVBQVosSUFBa0IsSUFBSUUsRUFBdEIsR0FBMkJDLEVBQTVCLElBQWtDQyxFQURwQyxHQUVFRixLQUFLTCxDQUZQLEdBRVdELEVBRmxCOzs7Ozs7QUFRSixtQkFBZSxVQUFXM1MsR0FBWCxFQUFpQjtRQUN4QitkLFNBQVMvZCxJQUFJK2QsTUFBakI7UUFDSXVpQixTQUFTdGdDLElBQUlzZ0MsTUFBakI7UUFDSUMsZUFBZXZnQyxJQUFJdWdDLFlBQXZCOztRQUVJemtCLE1BQU1pQyxPQUFPNWlCLE1BQWpCO1FBQ0kyZ0IsT0FBTyxDQUFYLEVBQWM7ZUFDSGlDLE1BQVA7O1FBRUF5aUIsTUFBTSxFQUFWO1FBQ0lDLFdBQVksQ0FBaEI7UUFDSUMsWUFBWSxJQUFJUCxNQUFKLENBQVlwaUIsT0FBTyxDQUFQLENBQVosQ0FBaEI7UUFDSTRpQixRQUFZLElBQWhCO1NBQ0ssSUFBSXZsQyxJQUFJLENBQWIsRUFBZ0JBLElBQUkwZ0IsR0FBcEIsRUFBeUIxZ0IsR0FBekIsRUFBOEI7Z0JBQ2xCLElBQUkra0MsTUFBSixDQUFXcGlCLE9BQU8zaUIsQ0FBUCxDQUFYLENBQVI7b0JBQ1lzbEMsVUFBVUQsUUFBVixDQUFvQkUsS0FBcEIsQ0FBWjtvQkFDWUEsS0FBWjs7O2dCQUdRLElBQVo7WUFDWSxJQUFaOzs7UUFJSWhiLE9BQU84YSxXQUFXLENBQXRCOztXQUVPOWEsT0FBTzdKLEdBQVAsR0FBYUEsR0FBYixHQUFtQjZKLElBQTFCO1NBQ0ssSUFBSXZxQixJQUFJLENBQWIsRUFBZ0JBLElBQUl1cUIsSUFBcEIsRUFBMEJ2cUIsR0FBMUIsRUFBK0I7WUFDdkJrbEIsTUFBTWxsQixLQUFLdXFCLE9BQUssQ0FBVixLQUFnQjJhLFNBQVN4a0IsR0FBVCxHQUFlQSxNQUFNLENBQXJDLENBQVY7WUFDSThrQixNQUFNeGpDLEtBQUtnVixLQUFMLENBQVdrTyxHQUFYLENBQVY7O1lBRUl2QixJQUFJdUIsTUFBTXNnQixHQUFkOztZQUVJbHVCLEVBQUo7WUFDSUMsS0FBS29MLE9BQU82aUIsTUFBTTlrQixHQUFiLENBQVQ7WUFDSS9JLEVBQUo7WUFDSUMsRUFBSjtZQUNJLENBQUNzdEIsTUFBTCxFQUFhO2lCQUNKdmlCLE9BQU82aUIsUUFBUSxDQUFSLEdBQVlBLEdBQVosR0FBa0JBLE1BQU0sQ0FBL0IsQ0FBTDtpQkFDSzdpQixPQUFPNmlCLE1BQU05a0IsTUFBTSxDQUFaLEdBQWdCQSxNQUFNLENBQXRCLEdBQTBCOGtCLE1BQU0sQ0FBdkMsQ0FBTDtpQkFDSzdpQixPQUFPNmlCLE1BQU05a0IsTUFBTSxDQUFaLEdBQWdCQSxNQUFNLENBQXRCLEdBQTBCOGtCLE1BQU0sQ0FBdkMsQ0FBTDtTQUhKLE1BSU87aUJBQ0U3aUIsT0FBTyxDQUFDNmlCLE1BQUssQ0FBTCxHQUFTOWtCLEdBQVYsSUFBaUJBLEdBQXhCLENBQUw7aUJBQ0tpQyxPQUFPLENBQUM2aUIsTUFBTSxDQUFQLElBQVk5a0IsR0FBbkIsQ0FBTDtpQkFDS2lDLE9BQU8sQ0FBQzZpQixNQUFNLENBQVAsSUFBWTlrQixHQUFuQixDQUFMOzs7WUFHQStrQixLQUFLOWhCLElBQUlBLENBQWI7WUFDSStoQixLQUFLL2hCLElBQUk4aEIsRUFBYjs7WUFFSW5oQyxLQUFLLENBQ0QyZ0MsWUFBWTN0QixHQUFHLENBQUgsQ0FBWixFQUFtQkMsR0FBRyxDQUFILENBQW5CLEVBQTBCSSxHQUFHLENBQUgsQ0FBMUIsRUFBaUNDLEdBQUcsQ0FBSCxDQUFqQyxFQUF3QytMLENBQXhDLEVBQTJDOGhCLEVBQTNDLEVBQStDQyxFQUEvQyxDQURDLEVBRURULFlBQVkzdEIsR0FBRyxDQUFILENBQVosRUFBbUJDLEdBQUcsQ0FBSCxDQUFuQixFQUEwQkksR0FBRyxDQUFILENBQTFCLEVBQWlDQyxHQUFHLENBQUgsQ0FBakMsRUFBd0MrTCxDQUF4QyxFQUEyQzhoQixFQUEzQyxFQUErQ0MsRUFBL0MsQ0FGQyxDQUFUOztZQUtFeGtDLFVBQUYsQ0FBYWlrQyxZQUFiLEtBQThCQSxhQUFjN2dDLEVBQWQsQ0FBOUI7O1lBRUlsRSxJQUFKLENBQVVrRSxFQUFWOztXQUVHOGdDLEdBQVA7OztBQ25GSjs7Ozs7Ozs7O0FBU0EsQUFHQSxJQUFJTyxTQUFTO1NBQ0gsRUFERztTQUVILEVBRkc7Q0FBYjtBQUlBLElBQUlDLFdBQVc1akMsS0FBS2lQLEVBQUwsR0FBVSxHQUF6Qjs7Ozs7O0FBTUEsU0FBU0QsR0FBVCxDQUFhRyxLQUFiLEVBQW9CMDBCLFNBQXBCLEVBQStCO1lBQ25CLENBQUNBLFlBQVkxMEIsUUFBUXkwQixRQUFwQixHQUErQnowQixLQUFoQyxFQUF1QzIwQixPQUF2QyxDQUErQyxDQUEvQyxDQUFSO1FBQ0csT0FBT0gsT0FBTzMwQixHQUFQLENBQVdHLEtBQVgsQ0FBUCxJQUE0QixXQUEvQixFQUE0QztlQUNqQ0gsR0FBUCxDQUFXRyxLQUFYLElBQW9CblAsS0FBS2dQLEdBQUwsQ0FBU0csS0FBVCxDQUFwQjs7V0FFR3cwQixPQUFPMzBCLEdBQVAsQ0FBV0csS0FBWCxDQUFQOzs7Ozs7QUFNSixTQUFTSixHQUFULENBQWFJLEtBQWIsRUFBb0IwMEIsU0FBcEIsRUFBK0I7WUFDbkIsQ0FBQ0EsWUFBWTEwQixRQUFReTBCLFFBQXBCLEdBQStCejBCLEtBQWhDLEVBQXVDMjBCLE9BQXZDLENBQStDLENBQS9DLENBQVI7UUFDRyxPQUFPSCxPQUFPNTBCLEdBQVAsQ0FBV0ksS0FBWCxDQUFQLElBQTRCLFdBQS9CLEVBQTRDO2VBQ2pDSixHQUFQLENBQVdJLEtBQVgsSUFBb0JuUCxLQUFLK08sR0FBTCxDQUFTSSxLQUFULENBQXBCOztXQUVHdzBCLE9BQU81MEIsR0FBUCxDQUFXSSxLQUFYLENBQVA7Ozs7Ozs7QUFPSixTQUFTNDBCLGNBQVQsQ0FBd0I1MEIsS0FBeEIsRUFBK0I7V0FDcEJBLFFBQVF5MEIsUUFBZjs7Ozs7OztBQU9KLFNBQVNJLGNBQVQsQ0FBd0I3MEIsS0FBeEIsRUFBK0I7V0FDcEJBLFFBQVF5MEIsUUFBZjs7Ozs7OztBQU9KLFNBQVNLLFdBQVQsQ0FBc0I5MEIsS0FBdEIsRUFBOEI7UUFDdEIrMEIsUUFBUSxDQUFDLE1BQU8vMEIsUUFBUyxHQUFqQixJQUF3QixHQUFwQyxDQUQwQjtRQUV0QiswQixTQUFTLENBQVQsSUFBYy8wQixVQUFVLENBQTVCLEVBQStCO2dCQUNuQixHQUFSOztXQUVHKzBCLEtBQVA7OztBQUdKLFNBQVNDLGlCQUFULENBQTRCbHZCLENBQTVCLEVBQWdDL1MsQ0FBaEMsRUFBbUM7UUFDM0JnK0IsWUFBWSxFQUFoQjtRQUNJa0UsUUFBUSxJQUFJcGtDLEtBQUtpUCxFQUFULEdBQWNnRyxDQUExQjtRQUNJb3ZCLFdBQVcsQ0FBQ3JrQyxLQUFLaVAsRUFBTixHQUFXLENBQTFCO1FBQ0lxMUIsTUFBTUQsUUFBVjtTQUNLLElBQUlybUMsSUFBSSxDQUFSLEVBQVc0TSxNQUFNcUssQ0FBdEIsRUFBeUJqWCxJQUFJNE0sR0FBN0IsRUFBa0M1TSxHQUFsQyxFQUF1QztrQkFDekJJLElBQVYsQ0FBZSxDQUFDOEQsSUFBSWxDLEtBQUsrTyxHQUFMLENBQVN1MUIsR0FBVCxDQUFMLEVBQW9CcGlDLElBQUlsQyxLQUFLZ1AsR0FBTCxDQUFTczFCLEdBQVQsQ0FBeEIsQ0FBZjtlQUNPRixLQUFQOztXQUVHbEUsU0FBUDs7O0FBR0osU0FBU3FFLGtCQUFULENBQTZCQyxLQUE3QixFQUFvQ3JCLFlBQXBDLEVBQWtEOzs7UUFHMUNybEMsTUFBTTtnQkFDRTBtQztLQURaO1FBR0k5bkMsRUFBRXdDLFVBQUYsQ0FBYWlrQyxZQUFiLENBQUosRUFBZ0M7WUFDeEJBLFlBQUosR0FBbUJBLFlBQW5COzs7UUFHQXNCLFFBQVFDLGFBQWE1bUMsR0FBYixDQUFaO1FBQ0kwbUMsU0FBU0EsTUFBTXptQyxNQUFOLEdBQWEsQ0FBMUIsRUFBNkI7Y0FDbkJLLElBQU4sQ0FBWW9tQyxNQUFNQSxNQUFNem1DLE1BQU4sR0FBZSxDQUFyQixDQUFaOzs7V0FHRzBtQyxLQUFQOzs7QUFHSixhQUFlO1FBQ0x6a0MsS0FBS2lQLEVBREE7U0FFTEQsR0FGSztTQUdMRCxHQUhLO29CQUlNZzFCLGNBSk47b0JBS01DLGNBTE47aUJBTU1DLFdBTk47dUJBT1NFLGlCQVBUO3dCQVFTSTtDQVJ4Qjs7QUNuR0E7Ozs7Ozs7Ozs7QUFVQSxBQUNBLEFBQ0EsQUFDQSxJQUVxQkk7Ozt3QkFFTC9oQyxHQUFaLEVBQWtCZ2lDLEtBQWxCLEVBQXdCOzs7Y0FDZHhqQyxNQUFNMlosUUFBTixDQUFlblksR0FBZixDQUFOO1lBQ0l5OEIsV0FBVzNpQyxJQUFFZ0UsTUFBRixDQUFTO3NCQUNWLElBRFU7b0JBRVosS0FGWTt1QkFHVCxFQUhTOzBCQUlOVSxNQUFNYTtTQUpULEVBS1pXLElBQUlwRSxPQUxRLENBQWY7O1lBT0lvbUMsVUFBVSxPQUFWLElBQXFCdkYsU0FBU3dGLE1BQWxDLEVBQTBDO3FCQUM3QjNFLFNBQVQsR0FBcUI0RSxPQUFNUCxrQkFBTixDQUEwQmxGLFNBQVNhLFNBQW5DLENBQXJCOzs7WUFHQTFoQyxPQUFKLEdBQWM2Z0MsUUFBZDs7MkhBRU16OEIsR0FmYzs7Y0FpQmZvQixJQUFMLEdBQVksWUFBWjtjQUNLc0MsRUFBTCxHQUFVbEYsTUFBTStaLFFBQU4sQ0FBZSxNQUFLblgsSUFBcEIsQ0FBVjs7Y0FFSytnQyxXQUFMOzs7Ozs7K0JBR0c5bEMsTUFBTUgsT0FBTzZaLFVBQ3BCO2dCQUNRMVosUUFBUSxXQUFSLElBQXVCQSxRQUFRLFFBQS9CLElBQTJDQSxRQUFRLFVBQXZELEVBQW1FO3FCQUMxRDhsQyxXQUFMOzs7OztzQ0FNUjtpQkFDUzFuQixRQUFMLENBQWM4UCxLQUFkOztnQkFFTTN1QixVQUFVLEtBQUtBLE9BQXJCO2dCQUNNMGhDLFlBQVkxaEMsUUFBUTBoQyxTQUExQjtnQkFDSUEsVUFBVW5pQyxNQUFWLEdBQW1CLENBQXZCLEVBQTBCOzt1QkFFZixJQUFQOztnQkFFQSxDQUFDUyxRQUFRd21DLFFBQVQsSUFBcUJ4bUMsUUFBUXdtQyxRQUFSLElBQW9CLE9BQTdDLEVBQXNEOzs7cUJBRzdDM25CLFFBQUwsQ0FBYytFLE1BQWQsQ0FBcUI4ZCxVQUFVLENBQVYsRUFBYSxDQUFiLENBQXJCLEVBQXNDQSxVQUFVLENBQVYsRUFBYSxDQUFiLENBQXRDO3FCQUNLLElBQUlsaUMsSUFBSSxDQUFSLEVBQVdtWixJQUFJK29CLFVBQVVuaUMsTUFBOUIsRUFBc0NDLElBQUltWixDQUExQyxFQUE2Q25aLEdBQTdDLEVBQWtEO3lCQUN6Q3FmLFFBQUwsQ0FBY21GLE1BQWQsQ0FBcUIwZCxVQUFVbGlDLENBQVYsRUFBYSxDQUFiLENBQXJCLEVBQXNDa2lDLFVBQVVsaUMsQ0FBVixFQUFhLENBQWIsQ0FBdEM7O2FBTFIsTUFPTyxJQUFJUSxRQUFRd21DLFFBQVIsSUFBb0IsUUFBcEIsSUFBZ0N4bUMsUUFBUXdtQyxRQUFSLElBQW9CLFFBQXhELEVBQWtFO29CQUNqRXhtQyxRQUFRcW1DLE1BQVosRUFBb0I7eUJBQ1gsSUFBSUksS0FBSyxDQUFULEVBQVlDLEtBQUtoRixVQUFVbmlDLE1BQWhDLEVBQXdDa25DLEtBQUtDLEVBQTdDLEVBQWlERCxJQUFqRCxFQUF1RDs0QkFDL0NBLE1BQU1DLEtBQUcsQ0FBYixFQUFnQjs7OzZCQUdYN25CLFFBQUwsQ0FBYytFLE1BQWQsQ0FBc0I4ZCxVQUFVK0UsRUFBVixFQUFjLENBQWQsQ0FBdEIsRUFBeUMvRSxVQUFVK0UsRUFBVixFQUFjLENBQWQsQ0FBekM7NkJBQ0s1bkIsUUFBTCxDQUFjbUYsTUFBZCxDQUFzQjBkLFVBQVUrRSxLQUFHLENBQWIsRUFBZ0IsQ0FBaEIsQ0FBdEIsRUFBMkMvRSxVQUFVK0UsS0FBRyxDQUFiLEVBQWdCLENBQWhCLENBQTNDOzhCQUNJLENBQUo7O2lCQVBSLE1BU087O3lCQUVFNW5CLFFBQUwsQ0FBYytFLE1BQWQsQ0FBcUI4ZCxVQUFVLENBQVYsRUFBYSxDQUFiLENBQXJCLEVBQXNDQSxVQUFVLENBQVYsRUFBYSxDQUFiLENBQXRDO3lCQUNLLElBQUlsaUMsSUFBSSxDQUFSLEVBQVdtWixJQUFJK29CLFVBQVVuaUMsTUFBOUIsRUFBc0NDLElBQUltWixDQUExQyxFQUE2Q25aLEdBQTdDLEVBQWtEOzRCQUMxQ21vQixRQUFRK1osVUFBVWxpQyxJQUFJLENBQWQsRUFBaUIsQ0FBakIsQ0FBWjs0QkFDSXduQixNQUFNMGEsVUFBVWxpQyxDQUFWLEVBQWEsQ0FBYixDQUFWOzRCQUNJb29CLFFBQVE4WixVQUFVbGlDLElBQUksQ0FBZCxFQUFpQixDQUFqQixDQUFaOzRCQUNJeW5CLE1BQU15YSxVQUFVbGlDLENBQVYsRUFBYSxDQUFiLENBQVY7NkJBQ0ttbkMsWUFBTCxDQUFrQmhmLEtBQWxCLEVBQXlCQyxLQUF6QixFQUFnQ1osR0FBaEMsRUFBcUNDLEdBQXJDLEVBQTBDLENBQTFDOzs7O21CQUlMLElBQVA7Ozs7RUF4RWdDMlo7O0FDZnhDOzs7Ozs7Ozs7Ozs7QUFZQSxBQUNBLEFBQ0EsSUFFcUJyVjs7O29CQUVKbm5CLEdBQWIsRUFDQTs7O2NBQ1V4QixNQUFNMlosUUFBTixDQUFnQm5ZLEdBQWhCLENBQU47O3FCQUVlQSxHQUFmLEtBQTBCQSxJQUFJcVksT0FBSixHQUFjLEtBQXhDO1lBQ0lva0IsV0FBVzNpQyxJQUFFZ0UsTUFBRixDQUFTO2VBQ2hCLENBRGdCO1NBQVQsRUFFWGtDLElBQUlwRSxPQUZPLENBQWY7O1lBSUlBLE9BQUosR0FBYzZnQyxRQUFkOzttSEFFT3o4QixHQVZYOztjQVlTb0IsSUFBTCxHQUFZLFFBQVo7Y0FDS3NDLEVBQUwsR0FBVWxGLE1BQU0rWixRQUFOLENBQWUsTUFBS25YLElBQXBCLENBQVY7O2NBRUsrZ0MsV0FBTDs7Ozs7OytCQUdHOWxDLE1BQU1ILE9BQU82WixVQUNwQjtnQkFDUzFaLFFBQVEsR0FBYixFQUFtQjtxQkFDVjhsQyxXQUFMOzs7OztzQ0FLUjtpQkFDUzFuQixRQUFMLENBQWM4UCxLQUFkOztpQkFFSzlQLFFBQUwsQ0FBYytuQixVQUFkLENBQXlCLENBQXpCLEVBQTRCLENBQTVCLEVBQStCLEtBQUs1bUMsT0FBTCxDQUFhMEQsQ0FBNUM7Ozs7RUFoQzRCazlCOztBQ2hCcEM7Ozs7Ozs7Ozs7QUFVQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsSUFFcUJpRzs7O2tCQUVMemlDLEdBQVosRUFBZ0I7Ozs7Y0FFTnhCLE1BQU0yWixRQUFOLENBQWVuWSxHQUFmLENBQU47WUFDSXk4QixXQUFXM2lDLElBQUVnRSxNQUFGLENBQVM7dUJBQ1QsRUFEUztrQkFFZCxFQUZjOzs7Ozs7Ozs7O1NBQVQsRUFZWGtDLElBQUlwRSxPQVpPLENBQWY7WUFhSUEsT0FBSixHQUFjNmdDLFFBQWQ7OytHQUVPejhCLEdBbEJLOztZQXFCUixrQkFBa0JBLEdBQXRCLEVBQTJCO2tCQUNsQjBpQyxZQUFMLEdBQW9CMWlDLElBQUkwaUMsWUFBeEI7OztjQUdDQyxlQUFMLEdBQXVCLElBQXZCOztjQUdLdmhDLElBQUwsR0FBWSxNQUFaO2NBQ0tzQyxFQUFMLEdBQVVsRixNQUFNK1osUUFBTixDQUFlLE1BQUtuWCxJQUFwQixDQUFWOztjQUVLK2dDLFdBQUw7Ozs7Ozs7K0JBSUc5bEMsTUFBTUgsT0FBTzZaLFVBQ3BCO2dCQUNRMVosUUFBUSxNQUFaLEVBQW9COztxQkFDWDhsQyxXQUFMOzs7Ozt1Q0FHT3prQixNQUNmO2dCQUNRLEtBQUtpbEIsZUFBVCxFQUEwQjt1QkFDZixLQUFLQSxlQUFaOztnQkFFQSxDQUFDamxCLElBQUwsRUFBVzt1QkFDQSxFQUFQOzs7aUJBR0NpbEIsZUFBTCxHQUF1QixFQUF2QjtnQkFDSUMsUUFBUTlvQyxJQUFFK0IsT0FBRixDQUFVNmhCLEtBQUs4aEIsT0FBTCxDQUFhLE9BQWIsRUFBc0IsT0FBdEIsRUFBK0I3MUIsS0FBL0IsQ0FBcUMsS0FBckMsQ0FBVixDQUFaO2dCQUNJcEUsS0FBSyxJQUFUO2dCQUNFN0osSUFBRixDQUFPa25DLEtBQVAsRUFBYyxVQUFTQyxPQUFULEVBQWtCO21CQUN6QkYsZUFBSCxDQUFtQm5uQyxJQUFuQixDQUF3QitKLEdBQUd1OUIsbUJBQUgsQ0FBdUJELE9BQXZCLENBQXhCO2FBREo7bUJBR08sS0FBS0YsZUFBWjs7Ozs0Q0FHZ0JqbEIsTUFDcEI7O2dCQUVRcWxCLEtBQUtybEIsSUFBVDs7Z0JBRUk0TSxLQUFLLENBQ0wsR0FESyxFQUNBLEdBREEsRUFDSyxHQURMLEVBQ1UsR0FEVixFQUNlLEdBRGYsRUFDb0IsR0FEcEIsRUFDeUIsR0FEekIsRUFDOEIsR0FEOUIsRUFDbUMsR0FEbkMsRUFDd0MsR0FEeEMsRUFFTCxHQUZLLEVBRUEsR0FGQSxFQUVLLEdBRkwsRUFFVSxHQUZWLEVBRWUsR0FGZixFQUVvQixHQUZwQixFQUV5QixHQUZ6QixFQUU4QixHQUY5QixFQUVtQyxHQUZuQyxFQUV3QyxHQUZ4QyxDQUFUO2lCQUlLeVksR0FBR3ZELE9BQUgsQ0FBVyxLQUFYLEVBQWtCLEdBQWxCLENBQUw7aUJBQ0t1RCxHQUFHdkQsT0FBSCxDQUFXLElBQVgsRUFBaUIsR0FBakIsQ0FBTDs7aUJBRUt1RCxHQUFHdkQsT0FBSCxDQUFXLFFBQVgsRUFBcUIsTUFBckIsQ0FBTDtpQkFDS3VELEdBQUd2RCxPQUFILENBQVcsS0FBWCxFQUFrQixHQUFsQixDQUFMO2dCQUNJbnRCLENBQUo7O2lCQUVLQSxJQUFJLENBQVQsRUFBWUEsSUFBSWlZLEdBQUdudkIsTUFBbkIsRUFBMkJrWCxHQUEzQixFQUFnQztxQkFDdkIwd0IsR0FBR3ZELE9BQUgsQ0FBVyxJQUFJd0QsTUFBSixDQUFXMVksR0FBR2pZLENBQUgsQ0FBWCxFQUFrQixHQUFsQixDQUFYLEVBQW1DLE1BQU1pWSxHQUFHalksQ0FBSCxDQUF6QyxDQUFMOzs7Z0JBR0E0d0IsTUFBTUYsR0FBR3A1QixLQUFILENBQVMsR0FBVCxDQUFWO2dCQUNJdTVCLEtBQUssRUFBVDs7Z0JBRUlDLE1BQU0sQ0FBVjtnQkFDSUMsTUFBTSxDQUFWO2lCQUNLL3dCLElBQUksQ0FBVCxFQUFZQSxJQUFJNHdCLElBQUk5bkMsTUFBcEIsRUFBNEJrWCxHQUE1QixFQUFpQztvQkFDekJneEIsTUFBTUosSUFBSTV3QixDQUFKLENBQVY7b0JBQ0kxRyxJQUFJMDNCLElBQUkzeEIsTUFBSixDQUFXLENBQVgsQ0FBUjtzQkFDTTJ4QixJQUFJOWtDLEtBQUosQ0FBVSxDQUFWLENBQU47c0JBQ004a0MsSUFBSTdELE9BQUosQ0FBWSxJQUFJd0QsTUFBSixDQUFXLEtBQVgsRUFBa0IsR0FBbEIsQ0FBWixFQUFvQyxJQUFwQyxDQUFOOzs7OztvQkFLSWppQyxJQUFJc2lDLElBQUkxNUIsS0FBSixDQUFVLEdBQVYsQ0FBUjs7b0JBRUk1SSxFQUFFNUYsTUFBRixHQUFXLENBQVgsSUFBZ0I0RixFQUFFLENBQUYsTUFBUyxFQUE3QixFQUFpQztzQkFDM0JrVCxLQUFGOzs7cUJBR0MsSUFBSTdZLElBQUksQ0FBYixFQUFnQkEsSUFBSTJGLEVBQUU1RixNQUF0QixFQUE4QkMsR0FBOUIsRUFBbUM7c0JBQzdCQSxDQUFGLElBQU9xQixXQUFXc0UsRUFBRTNGLENBQUYsQ0FBWCxDQUFQOzt1QkFFRzJGLEVBQUU1RixNQUFGLEdBQVcsQ0FBbEIsRUFBcUI7d0JBQ2JxQixNQUFNdUUsRUFBRSxDQUFGLENBQU4sQ0FBSixFQUFpQjs7O3dCQUdidWlDLE1BQU0sSUFBVjt3QkFDSXZsQixTQUFTLEVBQWI7O3dCQUVJd2xCLE1BQUo7d0JBQ0lDLE1BQUo7d0JBQ0lDLE9BQUo7O3dCQUVJM2dCLEVBQUo7d0JBQ0lDLEVBQUo7d0JBQ0kyZ0IsR0FBSjt3QkFDSUMsRUFBSjt3QkFDSUMsRUFBSjs7d0JBRUkxZCxLQUFLaWQsR0FBVDt3QkFDSWhkLEtBQUtpZCxHQUFUOzs7NEJBR1F6M0IsQ0FBUjs2QkFDUyxHQUFMO21DQUNXNUssRUFBRWtULEtBQUYsRUFBUDttQ0FDT2xULEVBQUVrVCxLQUFGLEVBQVA7a0NBQ00sR0FBTjttQ0FDT3pZLElBQVAsQ0FBWTJuQyxHQUFaLEVBQWlCQyxHQUFqQjs7NkJBRUMsR0FBTDtrQ0FDVXJpQyxFQUFFa1QsS0FBRixFQUFOO2tDQUNNbFQsRUFBRWtULEtBQUYsRUFBTjttQ0FDT3pZLElBQVAsQ0FBWTJuQyxHQUFaLEVBQWlCQyxHQUFqQjs7NkJBRUMsR0FBTDttQ0FDV3JpQyxFQUFFa1QsS0FBRixFQUFQO21DQUNPbFQsRUFBRWtULEtBQUYsRUFBUDtrQ0FDTSxHQUFOO21DQUNPelksSUFBUCxDQUFZMm5DLEdBQVosRUFBaUJDLEdBQWpCO2dDQUNJLEdBQUo7OzZCQUVDLEdBQUw7a0NBQ1VyaUMsRUFBRWtULEtBQUYsRUFBTjtrQ0FDTWxULEVBQUVrVCxLQUFGLEVBQU47a0NBQ00sR0FBTjttQ0FDT3pZLElBQVAsQ0FBWTJuQyxHQUFaLEVBQWlCQyxHQUFqQjtnQ0FDSSxHQUFKOzs7NkJBR0MsR0FBTDttQ0FDV3JpQyxFQUFFa1QsS0FBRixFQUFQO2tDQUNNLEdBQU47bUNBQ096WSxJQUFQLENBQVkybkMsR0FBWixFQUFpQkMsR0FBakI7OzZCQUVDLEdBQUw7a0NBQ1VyaUMsRUFBRWtULEtBQUYsRUFBTjtrQ0FDTSxHQUFOO21DQUNPelksSUFBUCxDQUFZMm5DLEdBQVosRUFBaUJDLEdBQWpCOzs2QkFFQyxHQUFMO21DQUNXcmlDLEVBQUVrVCxLQUFGLEVBQVA7a0NBQ00sR0FBTjttQ0FDT3pZLElBQVAsQ0FBWTJuQyxHQUFaLEVBQWlCQyxHQUFqQjs7NkJBRUMsR0FBTDtrQ0FDVXJpQyxFQUFFa1QsS0FBRixFQUFOO2tDQUNNLEdBQU47bUNBQ096WSxJQUFQLENBQVkybkMsR0FBWixFQUFpQkMsR0FBakI7OzZCQUVDLEdBQUw7bUNBQ1c1bkMsSUFBUCxDQUFZdUYsRUFBRWtULEtBQUYsRUFBWixFQUF1QmxULEVBQUVrVCxLQUFGLEVBQXZCLEVBQWtDbFQsRUFBRWtULEtBQUYsRUFBbEMsRUFBNkNsVCxFQUFFa1QsS0FBRixFQUE3QztrQ0FDTWxULEVBQUVrVCxLQUFGLEVBQU47a0NBQ01sVCxFQUFFa1QsS0FBRixFQUFOO21DQUNPelksSUFBUCxDQUFZMm5DLEdBQVosRUFBaUJDLEdBQWpCOzs2QkFFQyxHQUFMO21DQUNXNW5DLElBQVAsQ0FDSTJuQyxNQUFNcGlDLEVBQUVrVCxLQUFGLEVBRFYsRUFDcUJtdkIsTUFBTXJpQyxFQUFFa1QsS0FBRixFQUQzQixFQUVJa3ZCLE1BQU1waUMsRUFBRWtULEtBQUYsRUFGVixFQUVxQm12QixNQUFNcmlDLEVBQUVrVCxLQUFGLEVBRjNCO21DQUlPbFQsRUFBRWtULEtBQUYsRUFBUDttQ0FDT2xULEVBQUVrVCxLQUFGLEVBQVA7a0NBQ00sR0FBTjttQ0FDT3pZLElBQVAsQ0FBWTJuQyxHQUFaLEVBQWlCQyxHQUFqQjs7NkJBRUMsR0FBTDtxQ0FDYUQsR0FBVDtxQ0FDU0MsR0FBVDtzQ0FDVUYsR0FBR0EsR0FBRy9uQyxNQUFILEdBQVksQ0FBZixDQUFWO2dDQUNJc29DLFFBQVFJLE9BQVIsS0FBb0IsR0FBeEIsRUFBNkI7eUNBQ2hCVixPQUFPQSxNQUFNTSxRQUFRMWxCLE1BQVIsQ0FBZSxDQUFmLENBQWIsQ0FBVDt5Q0FDU3FsQixPQUFPQSxNQUFNSyxRQUFRMWxCLE1BQVIsQ0FBZSxDQUFmLENBQWIsQ0FBVDs7bUNBRUd2aUIsSUFBUCxDQUFZK25DLE1BQVosRUFBb0JDLE1BQXBCLEVBQTRCemlDLEVBQUVrVCxLQUFGLEVBQTVCLEVBQXVDbFQsRUFBRWtULEtBQUYsRUFBdkM7a0NBQ01sVCxFQUFFa1QsS0FBRixFQUFOO2tDQUNNbFQsRUFBRWtULEtBQUYsRUFBTjtrQ0FDTSxHQUFOO21DQUNPelksSUFBUCxDQUFZMm5DLEdBQVosRUFBaUJDLEdBQWpCOzs2QkFFQyxHQUFMO3FDQUNhRCxHQUFULEVBQWNLLFNBQVNKLEdBQXZCO3NDQUNVRixHQUFHQSxHQUFHL25DLE1BQUgsR0FBWSxDQUFmLENBQVY7Z0NBQ0lzb0MsUUFBUUksT0FBUixLQUFvQixHQUF4QixFQUE2Qjt5Q0FDaEJWLE9BQU9BLE1BQU1NLFFBQVExbEIsTUFBUixDQUFlLENBQWYsQ0FBYixDQUFUO3lDQUNTcWxCLE9BQU9BLE1BQU1LLFFBQVExbEIsTUFBUixDQUFlLENBQWYsQ0FBYixDQUFUOzttQ0FFR3ZpQixJQUFQLENBQ0krbkMsTUFESixFQUNZQyxNQURaLEVBRUlMLE1BQU1waUMsRUFBRWtULEtBQUYsRUFGVixFQUVxQm12QixNQUFNcmlDLEVBQUVrVCxLQUFGLEVBRjNCO21DQUlPbFQsRUFBRWtULEtBQUYsRUFBUDttQ0FDT2xULEVBQUVrVCxLQUFGLEVBQVA7a0NBQ00sR0FBTjttQ0FDT3pZLElBQVAsQ0FBWTJuQyxHQUFaLEVBQWlCQyxHQUFqQjs7NkJBRUMsR0FBTDttQ0FDVzVuQyxJQUFQLENBQVl1RixFQUFFa1QsS0FBRixFQUFaLEVBQXVCbFQsRUFBRWtULEtBQUYsRUFBdkI7a0NBQ01sVCxFQUFFa1QsS0FBRixFQUFOO2tDQUNNbFQsRUFBRWtULEtBQUYsRUFBTjttQ0FDT3pZLElBQVAsQ0FBWTJuQyxHQUFaLEVBQWlCQyxHQUFqQjs7NkJBRUMsR0FBTDttQ0FDVzVuQyxJQUFQLENBQVkybkMsTUFBTXBpQyxFQUFFa1QsS0FBRixFQUFsQixFQUE2Qm12QixNQUFNcmlDLEVBQUVrVCxLQUFGLEVBQW5DO21DQUNPbFQsRUFBRWtULEtBQUYsRUFBUDttQ0FDT2xULEVBQUVrVCxLQUFGLEVBQVA7a0NBQ00sR0FBTjttQ0FDT3pZLElBQVAsQ0FBWTJuQyxHQUFaLEVBQWlCQyxHQUFqQjs7NkJBRUMsR0FBTDtxQ0FDYUQsR0FBVCxFQUFjSyxTQUFTSixHQUF2QjtzQ0FDVUYsR0FBR0EsR0FBRy9uQyxNQUFILEdBQVksQ0FBZixDQUFWO2dDQUNJc29DLFFBQVFJLE9BQVIsS0FBb0IsR0FBeEIsRUFBNkI7eUNBQ2hCVixPQUFPQSxNQUFNTSxRQUFRMWxCLE1BQVIsQ0FBZSxDQUFmLENBQWIsQ0FBVDt5Q0FDU3FsQixPQUFPQSxNQUFNSyxRQUFRMWxCLE1BQVIsQ0FBZSxDQUFmLENBQWIsQ0FBVDs7a0NBRUVoZCxFQUFFa1QsS0FBRixFQUFOO2tDQUNNbFQsRUFBRWtULEtBQUYsRUFBTjtrQ0FDTSxHQUFOO21DQUNPelksSUFBUCxDQUFZK25DLE1BQVosRUFBb0JDLE1BQXBCLEVBQTRCTCxHQUE1QixFQUFpQ0MsR0FBakM7OzZCQUVDLEdBQUw7cUNBQ2FELEdBQVQsRUFBY0ssU0FBU0osR0FBdkI7c0NBQ1VGLEdBQUdBLEdBQUcvbkMsTUFBSCxHQUFZLENBQWYsQ0FBVjtnQ0FDSXNvQyxRQUFRSSxPQUFSLEtBQW9CLEdBQXhCLEVBQTZCO3lDQUNoQlYsT0FBT0EsTUFBTU0sUUFBUTFsQixNQUFSLENBQWUsQ0FBZixDQUFiLENBQVQ7eUNBQ1NxbEIsT0FBT0EsTUFBTUssUUFBUTFsQixNQUFSLENBQWUsQ0FBZixDQUFiLENBQVQ7O21DQUVHaGQsRUFBRWtULEtBQUYsRUFBUDttQ0FDT2xULEVBQUVrVCxLQUFGLEVBQVA7a0NBQ00sR0FBTjttQ0FDT3pZLElBQVAsQ0FBWStuQyxNQUFaLEVBQW9CQyxNQUFwQixFQUE0QkwsR0FBNUIsRUFBaUNDLEdBQWpDOzs2QkFFQyxHQUFMO2lDQUNTcmlDLEVBQUVrVCxLQUFGLEVBQUwsQ0FESjtpQ0FFU2xULEVBQUVrVCxLQUFGLEVBQUwsQ0FGSjtrQ0FHVWxULEVBQUVrVCxLQUFGLEVBQU4sQ0FISjtpQ0FJU2xULEVBQUVrVCxLQUFGLEVBQUwsQ0FKSjtpQ0FLU2xULEVBQUVrVCxLQUFGLEVBQUwsQ0FMSjs7aUNBT1NrdkIsR0FBTCxFQUFVaGQsS0FBS2lkLEdBQWY7a0NBQ01yaUMsRUFBRWtULEtBQUYsRUFBTixFQUFpQm12QixNQUFNcmlDLEVBQUVrVCxLQUFGLEVBQXZCO2tDQUNNLEdBQU47cUNBQ1MsQ0FBRTZPLEVBQUYsRUFBT0MsRUFBUCxFQUFXMmdCLEdBQVgsRUFBaUJDLEVBQWpCLEVBQXFCQyxFQUFyQixFQUF5QlQsR0FBekIsRUFBK0JDLEdBQS9CLEVBQXFDbGQsRUFBckMsRUFBMENDLEVBQTFDLENBQVQ7OzZCQUVDLEdBQUw7aUNBQ1NwbEIsRUFBRWtULEtBQUYsRUFBTDtpQ0FDS2xULEVBQUVrVCxLQUFGLEVBQUw7a0NBQ01sVCxFQUFFa1QsS0FBRixFQUFOO2lDQUNLbFQsRUFBRWtULEtBQUYsRUFBTDtpQ0FDS2xULEVBQUVrVCxLQUFGLEVBQUw7O2lDQUVLa3ZCLEdBQUwsRUFBVWhkLEtBQUtpZCxHQUFmO21DQUNPcmlDLEVBQUVrVCxLQUFGLEVBQVA7bUNBQ09sVCxFQUFFa1QsS0FBRixFQUFQO2tDQUNNLEdBQU47cUNBQ1MsQ0FBRTZPLEVBQUYsRUFBT0MsRUFBUCxFQUFXMmdCLEdBQVgsRUFBaUJDLEVBQWpCLEVBQXFCQyxFQUFyQixFQUF5QlQsR0FBekIsRUFBK0JDLEdBQS9CLEVBQXFDbGQsRUFBckMsRUFBMENDLEVBQTFDLENBQVQ7Ozs7O3VCQUtMM3FCLElBQUgsQ0FBUTtpQ0FDSzhuQyxPQUFPMzNCLENBRFo7Z0NBRUlvUztxQkFGWjs7O29CQU1BcFMsTUFBTSxHQUFOLElBQWFBLE1BQU0sR0FBdkIsRUFBNEI7dUJBQ3JCblEsSUFBSCxDQUFRO2lDQUNLLEdBREw7Z0NBRUk7cUJBRlo7OzttQkFNRDBuQyxFQUFQOzs7Ozs7O3NDQUtKOztpQkFFU3pvQixRQUFMLENBQWM4UCxLQUFkO2lCQUNLb1ksZUFBTCxHQUF1QixJQUF2QjtpQkFDSy9tQyxPQUFMLENBQWEwaEMsU0FBYixHQUF5QixFQUF6Qjs7Z0JBRUl3RyxZQUFZLEtBQUtDLGNBQUwsQ0FBb0IsS0FBS25vQyxPQUFMLENBQWE0OUIsSUFBakMsQ0FBaEI7O2lCQUVLLElBQUkxSixJQUFJLENBQVIsRUFBV3R2QixLQUFLc2pDLFVBQVUzb0MsTUFBL0IsRUFBdUMyMEIsSUFBSXR2QixFQUEzQyxFQUErQ3N2QixHQUEvQyxFQUFvRDtxQkFDM0MsSUFBSTEwQixJQUFJLENBQVIsRUFBV21aLElBQUl1dkIsVUFBVWhVLENBQVYsRUFBYTMwQixNQUFqQyxFQUF5Q0MsSUFBSW1aLENBQTdDLEVBQWdEblosR0FBaEQsRUFBcUQ7d0JBQzdDdVEsSUFBSW00QixVQUFVaFUsQ0FBVixFQUFhMTBCLENBQWIsRUFBZ0J5b0MsT0FBeEI7d0JBQWlDOWlDLElBQUkraUMsVUFBVWhVLENBQVYsRUFBYTEwQixDQUFiLEVBQWdCMmlCLE1BQXJEOzRCQUNRcFMsQ0FBUjs2QkFDUyxHQUFMO2lDQUNTOE8sUUFBTCxDQUFjbUYsTUFBZCxDQUFxQjdlLEVBQUUsQ0FBRixDQUFyQixFQUEyQkEsRUFBRSxDQUFGLENBQTNCOzs2QkFFQyxHQUFMO2lDQUNTMFosUUFBTCxDQUFjK0UsTUFBZCxDQUFxQnplLEVBQUUsQ0FBRixDQUFyQixFQUEyQkEsRUFBRSxDQUFGLENBQTNCOzs2QkFFQyxHQUFMO2lDQUNTMFosUUFBTCxDQUFjZ0YsYUFBZCxDQUE0QjFlLEVBQUUsQ0FBRixDQUE1QixFQUFrQ0EsRUFBRSxDQUFGLENBQWxDLEVBQXdDQSxFQUFFLENBQUYsQ0FBeEMsRUFBOENBLEVBQUUsQ0FBRixDQUE5QyxFQUFvREEsRUFBRSxDQUFGLENBQXBELEVBQTBEQSxFQUFFLENBQUYsQ0FBMUQ7OzZCQUVDLEdBQUw7aUNBQ1MwWixRQUFMLENBQWN1cEIsZ0JBQWQsQ0FBK0JqakMsRUFBRSxDQUFGLENBQS9CLEVBQXFDQSxFQUFFLENBQUYsQ0FBckMsRUFBMkNBLEVBQUUsQ0FBRixDQUEzQyxFQUFpREEsRUFBRSxDQUFGLENBQWpEOzs2QkFFQyxHQUFMOztnQ0FFUXVrQixPQUFKLENBQWEsS0FBSzdLLFFBQWxCLEVBQTZCMVosRUFBRSxDQUFGLENBQTdCLEVBQW9DQSxFQUFFLENBQUYsQ0FBcEMsRUFBMkNBLENBQTNDOzs2QkFFQyxHQUFMO2lDQUNTMFosUUFBTCxDQUFjb0UsU0FBZDs7Ozs7bUJBS1QsSUFBUDs7OztFQS9VMEIyZDs7QUNqQmxDOzs7Ozs7Ozs7OztBQVdBLEFBQ0EsQUFDQSxJQUVxQnlIOzs7cUJBRUxqa0MsR0FBWixFQUNBOzs7OztjQUNVeEIsTUFBTTJaLFFBQU4sQ0FBZ0JuWSxHQUFoQixDQUFOO1lBQ0l5OEIsV0FBVzNpQyxJQUFFZ0UsTUFBRixDQUFTO2dCQUNmLENBRGU7Z0JBRWYsQ0FGZTtTQUFULEVBR1hrQyxJQUFJcEUsT0FITyxDQUFmOztZQUtJQSxPQUFKLEdBQWM2Z0MsUUFBZDs7WUFFSXlILCtHQUFXbGtDLEdBQVgsVUFBSjs7Y0FFS29CLElBQUwsR0FBWSxTQUFaO2NBQ0tzQyxFQUFMLEdBQVVsRixNQUFNK1osUUFBTixDQUFlLE1BQUtuWCxJQUFwQixDQUFWOztjQUVLeEYsT0FBTCxDQUFhNDlCLElBQWIsR0FBb0IsTUFBSzJLLFdBQUwsRUFBcEI7Ozs7OzsrQkFHRzluQyxNQUFNSCxPQUFPNlosVUFDcEI7Z0JBQ1MxWixRQUFRLElBQVIsSUFBZ0JBLFFBQVEsSUFBN0IsRUFBb0M7cUJBQzNCVCxPQUFMLENBQWE0OUIsSUFBYixHQUFvQixLQUFLMkssV0FBTCxFQUFwQjs7O2dCQUdBOW5DLFFBQVEsTUFBWixFQUFvQjtxQkFDWDhsQyxXQUFMOzs7OztzQ0FLUjtnQkFDT3ZtQyxVQUFVLEtBQUtBLE9BQW5CO2dCQUNJd29DLEtBQUssU0FBT3hvQyxRQUFReW9DLEVBQWYsR0FBa0IsS0FBbEIsR0FBd0J6b0MsUUFBUXlvQyxFQUFoQyxHQUFtQyxHQUFuQyxHQUF1Q3pvQyxRQUFReW9DLEVBQS9DLEdBQWtELEdBQWxELEdBQXdEem9DLFFBQVF5b0MsRUFBUixHQUFXLENBQVgsR0FBYSxDQUFyRSxHQUEwRSxHQUExRSxHQUErRSxDQUFDem9DLFFBQVF5b0MsRUFBVCxHQUFZLENBQTNGLEdBQThGLEtBQTlGLEdBQXFHLENBQUN6b0MsUUFBUTBvQyxFQUF2SDtrQkFDTSxRQUFPLENBQUMxb0MsUUFBUXlvQyxFQUFULEdBQWMsQ0FBZCxHQUFpQixDQUF4QixHQUEyQixHQUEzQixHQUFnQyxDQUFDem9DLFFBQVF5b0MsRUFBVCxHQUFjLENBQTlDLEdBQWlELEdBQWpELEdBQXNELENBQUN6b0MsUUFBUXlvQyxFQUEvRCxHQUFtRSxHQUFuRSxHQUF1RXpvQyxRQUFReW9DLEVBQS9FLEdBQWtGLEtBQWxGLEdBQXlGem9DLFFBQVF5b0MsRUFBakcsR0FBcUcsR0FBM0c7bUJBQ09ELEVBQVA7Ozs7RUFwQzhCM0I7O0FDZHJDOzs7Ozs7Ozs7Ozs7QUFZQSxBQUNBLEFBQ0EsSUFFcUJyYjs7O3FCQUVMcG5CLEdBQVosRUFDQTs7O2NBQ1V4QixNQUFNMlosUUFBTixDQUFnQm5ZLEdBQWhCLENBQU47WUFDSXk4QixXQUFXM2lDLElBQUVnRSxNQUFGLENBQVM7OztnQkFHZixDQUhlO2dCQUlmLENBSmU7U0FBVCxFQUtYa0MsSUFBSXBFLE9BTE8sQ0FBZjs7WUFPSUEsT0FBSixHQUFjNmdDLFFBQWQ7O3FIQUVPejhCLEdBWFg7O2NBYVNvQixJQUFMLEdBQVksU0FBWjtjQUNLc0MsRUFBTCxHQUFVbEYsTUFBTStaLFFBQU4sQ0FBZSxNQUFLblgsSUFBcEIsQ0FBVjs7Y0FFSytnQyxXQUFMOzs7Ozs7K0JBR0c5bEMsTUFBTUgsT0FBTzZaLFVBQ3BCO2dCQUNTMVosUUFBUSxJQUFSLElBQWdCQSxRQUFRLElBQTdCLEVBQW9DO3FCQUMzQjhsQyxXQUFMOzs7OztzQ0FLUjtpQkFDUzFuQixRQUFMLENBQWM4UCxLQUFkO2lCQUNLOVAsUUFBTCxDQUFjOHBCLFdBQWQsQ0FBMEIsQ0FBMUIsRUFBNEIsQ0FBNUIsRUFBK0IsS0FBSzNvQyxPQUFMLENBQWF5b0MsRUFBYixHQUFnQixDQUEvQyxFQUFtRCxLQUFLem9DLE9BQUwsQ0FBYTBvQyxFQUFiLEdBQWdCLENBQW5FOzs7O0VBaEM2QjlILE9Ba0NwQzs7QUNuREQ7Ozs7Ozs7Ozs7QUFVQSxBQUNBLEFBQ0EsQUFDQSxJQUVxQmpWOzs7cUJBRUx2bkIsR0FBWixFQUFpQmdpQyxLQUFqQixFQUNBOzs7Y0FDVXhqQyxNQUFNMlosUUFBTixDQUFlblksR0FBZixDQUFOO1lBQ0l5OEIsV0FBVzNpQyxJQUFFZ0UsTUFBRixDQUFTO3NCQUNWLElBRFU7b0JBRVosS0FGWTt1QkFHVCxFQUhTOzBCQUlOVSxNQUFNYTtTQUpULEVBS1pXLElBQUlwRSxPQUxRLENBQWY7O1lBT0dvbUMsVUFBVSxPQUFiLEVBQXFCO2dCQUNibDZCLFFBQVEyMEIsU0FBU2EsU0FBVCxDQUFtQixDQUFuQixDQUFaO2dCQUNJdDFCLE1BQVF5MEIsU0FBU2EsU0FBVCxDQUFtQi8rQixLQUFuQixDQUEwQixDQUFFLENBQTVCLEVBQWdDLENBQWhDLENBQVo7Z0JBQ0lrK0IsU0FBU3dGLE1BQWIsRUFBcUI7eUJBQ1IzRSxTQUFULENBQW1CeE8sT0FBbkIsQ0FBNEI5bUIsR0FBNUI7eUJBQ1NzMUIsU0FBVCxHQUFxQjRFLE9BQU1QLGtCQUFOLENBQTBCbEYsU0FBU2EsU0FBbkMsQ0FBckI7Ozs7Ozs7WUFPSjFoQyxPQUFKLEdBQWM2Z0MsUUFBZDs7cUhBRU16OEIsR0F2QlYsRUF1QmVnaUMsS0F2QmY7O2NBeUJTd0MsYUFBTCxHQUFxQixJQUFyQjtjQUNLcGpDLElBQUwsR0FBWSxTQUFaO2NBQ0tzQyxFQUFMLEdBQVVsRixNQUFNK1osUUFBTixDQUFlLE1BQUtuWCxJQUFwQixDQUFWOztjQUVLK2dDLFdBQUw7Ozs7OzsrQkFHRzlsQyxNQUFNSCxPQUFPNlosVUFDcEI7O2dCQUVRMVosUUFBUSxXQUFSLElBQXVCQSxRQUFRLFFBQS9CLElBQTJDQSxRQUFRLFVBQXZELEVBQW1FO3FCQUMxRDhsQyxXQUFMOzs7OztzQ0FLUjtpQkFDUzFuQixRQUFMLENBQWM4UCxLQUFkOztnQkFFTTN1QixVQUFVLEtBQUtBLE9BQXJCO2dCQUNNMGhDLFlBQVkxaEMsUUFBUTBoQyxTQUExQjtnQkFDSUEsVUFBVW5pQyxNQUFWLEdBQW1CLENBQXZCLEVBQTBCOzs7OztpQkFLckJzZixRQUFMLENBQWMrRSxNQUFkLENBQXFCOGQsVUFBVSxDQUFWLEVBQWEsQ0FBYixDQUFyQixFQUFzQ0EsVUFBVSxDQUFWLEVBQWEsQ0FBYixDQUF0QztpQkFDSyxJQUFJbGlDLElBQUksQ0FBUixFQUFXbVosSUFBSStvQixVQUFVbmlDLE1BQTlCLEVBQXNDQyxJQUFJbVosQ0FBMUMsRUFBNkNuWixHQUE3QyxFQUFrRDtxQkFDekNxZixRQUFMLENBQWNtRixNQUFkLENBQXFCMGQsVUFBVWxpQyxDQUFWLEVBQWEsQ0FBYixDQUFyQixFQUFzQ2tpQyxVQUFVbGlDLENBQVYsRUFBYSxDQUFiLENBQXRDOztpQkFFQ3FmLFFBQUwsQ0FBY29FLFNBQWQ7OztnQkFHSWpqQixRQUFRd21DLFFBQVIsSUFBb0IsUUFBcEIsSUFBZ0N4bUMsUUFBUXdtQyxRQUFSLElBQW9CLFFBQXhELEVBQWtFOzs7cUJBR3pEM25CLFFBQUwsQ0FBYzJmLFdBQWQsQ0FBMEJmLElBQTFCLEdBQWlDLEtBQWpDOztvQkFFSXo5QixRQUFRcW1DLE1BQVosRUFBb0I7O3lCQUVYLElBQUlJLEtBQUssQ0FBVCxFQUFZQyxLQUFLaEYsVUFBVW5pQyxNQUFoQyxFQUF3Q2tuQyxLQUFLQyxFQUE3QyxFQUFpREQsSUFBakQsRUFBdUQ7NEJBQy9DQSxNQUFNQyxLQUFHLENBQWIsRUFBZ0I7Ozs2QkFHWDduQixRQUFMLENBQWMrRSxNQUFkLENBQXNCOGQsVUFBVStFLEVBQVYsRUFBYyxDQUFkLENBQXRCLEVBQXlDL0UsVUFBVStFLEVBQVYsRUFBYyxDQUFkLENBQXpDOzZCQUNLNW5CLFFBQUwsQ0FBY21GLE1BQWQsQ0FBc0IwZCxVQUFVK0UsS0FBRyxDQUFiLEVBQWdCLENBQWhCLENBQXRCLEVBQTJDL0UsVUFBVStFLEtBQUcsQ0FBYixFQUFnQixDQUFoQixDQUEzQzs4QkFDSSxDQUFKOztpQkFSUixNQVVPOzt5QkFFRTVuQixRQUFMLENBQWMrRSxNQUFkLENBQXFCOGQsVUFBVSxDQUFWLEVBQWEsQ0FBYixDQUFyQixFQUFzQ0EsVUFBVSxDQUFWLEVBQWEsQ0FBYixDQUF0Qzt5QkFDSyxJQUFJbGlDLElBQUksQ0FBUixFQUFXbVosSUFBSStvQixVQUFVbmlDLE1BQTlCLEVBQXNDQyxJQUFJbVosQ0FBMUMsRUFBNkNuWixHQUE3QyxFQUFrRDs0QkFDMUNtb0IsUUFBUStaLFVBQVVsaUMsSUFBSSxDQUFkLEVBQWlCLENBQWpCLENBQVo7NEJBQ0l3bkIsTUFBTTBhLFVBQVVsaUMsQ0FBVixFQUFhLENBQWIsQ0FBVjs0QkFDSW9vQixRQUFROFosVUFBVWxpQyxJQUFJLENBQWQsRUFBaUIsQ0FBakIsQ0FBWjs0QkFDSXluQixNQUFNeWEsVUFBVWxpQyxDQUFWLEVBQWEsQ0FBYixDQUFWOzZCQUNLbW5DLFlBQUwsQ0FBa0JoZixLQUFsQixFQUF5QkMsS0FBekIsRUFBZ0NaLEdBQWhDLEVBQXFDQyxHQUFyQyxFQUEwQyxDQUExQzs7Ozs7Ozs7RUFwRmlCMlosT0E2RnBDOztBQzVHRDs7Ozs7Ozs7Ozs7Ozs7QUFjQSxBQUNBLEFBQ0EsQUFDQSxJQUVxQmlJOzs7b0JBRUx6a0MsR0FBWixFQUNBOzs7Y0FDVXhCLE1BQU0yWixRQUFOLENBQWVuWSxHQUFmLENBQU47WUFDSXk4QixXQUFXM2lDLElBQUVnRSxNQUFGLENBQVM7dUJBQ1QsRUFEUztlQUVqQixDQUZpQjtlQUdqQixDQUhpQjtTQUFULEVBSVhrQyxJQUFJcEUsT0FKTyxDQUFmO2lCQUtTMGhDLFNBQVQsR0FBcUI0RSxPQUFNWCxpQkFBTixDQUF5QjlFLFNBQVNwcUIsQ0FBbEMsRUFBc0NvcUIsU0FBU245QixDQUEvQyxDQUFyQjs7WUFFSTFELE9BQUosR0FBYzZnQyxRQUFkOzttSEFFT3o4QixHQVhYOztjQWFTb0IsSUFBTCxHQUFZLFFBQVo7Y0FDS3NDLEVBQUwsR0FBVWxGLE1BQU0rWixRQUFOLENBQWUsTUFBS25YLElBQXBCLENBQVY7Ozs7OzsrQkFHRy9FLE1BQU1ILE9BQU82WixVQUNwQjtnQkFDUTFaLFFBQVEsR0FBUixJQUFlQSxRQUFRLEdBQTNCLEVBQStCOztxQkFDdEJULE9BQUwsQ0FBYTBoQyxTQUFiLEdBQXlCNEUsT0FBTVgsaUJBQU4sQ0FBeUI1OUIsTUFBTTBPLENBQS9CLEVBQW1DMU8sTUFBTXJFLENBQXpDLENBQXpCOzs7Z0JBR0FqRCxRQUFRLFdBQVIsSUFBdUJBLFFBQVEsUUFBL0IsSUFBMkNBLFFBQVEsVUFBdkQsRUFBbUU7cUJBQzFEOGxDLFdBQUw7cUJBQ0sxbkIsUUFBTCxDQUFjb0UsU0FBZDs7Ozs7RUE1QndCMEksV0ErQm5DOztBQ2xERDs7Ozs7Ozs7Ozs7Ozs7O0FBZUEsQUFDQSxBQUNBLElBRXFCbWQ7OztrQkFFTDFrQyxHQUFaLEVBQ0E7OztjQUNVeEIsTUFBTTJaLFFBQU4sQ0FBZW5ZLEdBQWYsQ0FBTjtZQUNJeThCLFdBQVczaUMsSUFBRWdFLE1BQUYsQ0FBUztzQkFDVixJQURVO21CQUViO21CQUNDLENBREQ7bUJBRUMsQ0FGRDthQUZhO2lCQU1mO21CQUNHLENBREg7bUJBRUcsQ0FGSDthQU5lO3dCQVVSLENBVlE7U0FBVCxFQVdYa0MsSUFBSXBFLE9BWE8sQ0FBZjtZQVlJQSxPQUFKLEdBQWM2Z0MsUUFBZDs7K0dBRU96OEIsR0FoQlg7O2NBa0JTbWlDLFdBQUw7O2NBRUsvZ0MsSUFBTCxHQUFZLE1BQVo7Y0FDS3NDLEVBQUwsR0FBVWxGLE1BQU0rWixRQUFOLENBQWUsTUFBS25YLElBQXBCLENBQVY7Ozs7OzsrQkFHRy9FLE1BQU1ILE9BQU82WixVQUNwQjs7Z0JBRVExWixRQUFRLEdBQVIsSUFBZUEsUUFBUSxHQUEzQixFQUErQjtxQkFDdEI4bEMsV0FBTDs7Ozs7c0NBS1I7aUJBQ1MxbkIsUUFBTCxDQUFjOFAsS0FBZDtnQkFDTTN1QixVQUFVLEtBQUtBLE9BQXJCO2dCQUNJLENBQUNBLFFBQVF3bUMsUUFBVCxJQUFxQnhtQyxRQUFRd21DLFFBQVIsSUFBb0IsT0FBN0MsRUFBc0Q7cUJBQzdDM25CLFFBQUwsQ0FBYytFLE1BQWQsQ0FBc0I1akIsUUFBUWtNLEtBQVIsQ0FBY25ILENBQXBDLEVBQXdDL0UsUUFBUWtNLEtBQVIsQ0FBY2xILENBQXREO3FCQUNLNlosUUFBTCxDQUFjbUYsTUFBZCxDQUFzQmhrQixRQUFRb00sR0FBUixDQUFZckgsQ0FBbEMsRUFBd0MvRSxRQUFRb00sR0FBUixDQUFZcEgsQ0FBcEQ7YUFGSixNQUdPLElBQUloRixRQUFRd21DLFFBQVIsSUFBb0IsUUFBcEIsSUFBZ0N4bUMsUUFBUXdtQyxRQUFSLElBQW9CLFFBQXhELEVBQWtFO3FCQUNoRUcsWUFBTCxDQUNJM21DLFFBQVFrTSxLQUFSLENBQWNuSCxDQURsQixFQUNxQi9FLFFBQVFrTSxLQUFSLENBQWNsSCxDQURuQyxFQUVJaEYsUUFBUW9NLEdBQVIsQ0FBWXJILENBRmhCLEVBRXFCL0UsUUFBUW9NLEdBQVIsQ0FBWXBILENBRmpDLEVBR0ksS0FBS2hGLE9BQUwsQ0FBYWtoQyxVQUhqQjs7bUJBTUcsSUFBUDs7OztFQWpEMEJOLE9BcURqQzs7QUN4RUQ7Ozs7Ozs7Ozs7Ozs7QUFhQSxBQUNBLEFBQ0EsSUFFcUJtSTs7O2tCQUVMM2tDLEdBQVosRUFDQTs7O2NBQ1V4QixNQUFNMlosUUFBTixDQUFnQm5ZLEdBQWhCLENBQU47WUFDSXk4QixXQUFXM2lDLElBQUVnRSxNQUFGLENBQVM7bUJBQ1osQ0FEWTtvQkFFWixDQUZZO29CQUdaO1NBSEcsRUFJWGtDLElBQUlwRSxPQUpPLENBQWY7WUFLSUEsT0FBSixHQUFjNmdDLFFBQWQ7OytHQUVPejhCLEdBVFg7O2NBV1NvQixJQUFMLEdBQVksTUFBWjtjQUNLc0MsRUFBTCxHQUFVbEYsTUFBTStaLFFBQU4sQ0FBZSxNQUFLblgsSUFBcEIsQ0FBVjs7Y0FFSytnQyxXQUFMOzs7Ozs7K0JBR0c5bEMsTUFBTUgsT0FBTzZaLFVBQ3BCO2dCQUNTMVosUUFBUSxPQUFSLElBQW1CQSxRQUFRLFFBQTNCLElBQXVDQSxRQUFRLFFBQXBELEVBQStEO3FCQUN0RDhsQyxXQUFMOzs7Ozs7Ozs7OzJDQVFSO2dCQUNRdm1DLFVBQVUsS0FBS0EsT0FBbkI7Ozs7OztnQkFNSStFLElBQUksQ0FBUjtnQkFDSUMsSUFBSSxDQUFSO2dCQUNJaUQsUUFBUSxLQUFLakksT0FBTCxDQUFhaUksS0FBekI7Z0JBQ0lDLFNBQVMsS0FBS2xJLE9BQUwsQ0FBYWtJLE1BQTFCOztnQkFFSXhFLElBQUlkLE1BQU1vbUMsY0FBTixDQUFxQmhwQyxRQUFRZ2pCLE1BQTdCLENBQVI7Z0JBQ0lpbUIsSUFBSSxLQUFLcHFCLFFBQWI7O2NBRUUrRSxNQUFGLENBQVV0RixTQUFTdlosSUFBSXJCLEVBQUUsQ0FBRixDQUFiLENBQVYsRUFBOEI0YSxTQUFTdFosQ0FBVCxDQUE5QjtjQUNFZ2YsTUFBRixDQUFVMUYsU0FBU3ZaLElBQUlrRCxLQUFKLEdBQVl2RSxFQUFFLENBQUYsQ0FBckIsQ0FBVixFQUFzQzRhLFNBQVN0WixDQUFULENBQXRDO2NBQ0UsQ0FBRixNQUFTLENBQVQsSUFBY2lrQyxFQUFFYixnQkFBRixDQUNOcmpDLElBQUlrRCxLQURFLEVBQ0tqRCxDQURMLEVBQ1FELElBQUlrRCxLQURaLEVBQ21CakQsSUFBSXRCLEVBQUUsQ0FBRixDQUR2QixDQUFkO2NBR0VzZ0IsTUFBRixDQUFVMUYsU0FBU3ZaLElBQUlrRCxLQUFiLENBQVYsRUFBK0JxVyxTQUFTdFosSUFBSWtELE1BQUosR0FBYXhFLEVBQUUsQ0FBRixDQUF0QixDQUEvQjtjQUNFLENBQUYsTUFBUyxDQUFULElBQWN1bEMsRUFBRWIsZ0JBQUYsQ0FDTnJqQyxJQUFJa0QsS0FERSxFQUNLakQsSUFBSWtELE1BRFQsRUFDaUJuRCxJQUFJa0QsS0FBSixHQUFZdkUsRUFBRSxDQUFGLENBRDdCLEVBQ21Dc0IsSUFBSWtELE1BRHZDLENBQWQ7Y0FHRThiLE1BQUYsQ0FBVTFGLFNBQVN2WixJQUFJckIsRUFBRSxDQUFGLENBQWIsQ0FBVixFQUE4QjRhLFNBQVN0WixJQUFJa0QsTUFBYixDQUE5QjtjQUNFLENBQUYsTUFBUyxDQUFULElBQWMrZ0MsRUFBRWIsZ0JBQUYsQ0FDTnJqQyxDQURNLEVBQ0hDLElBQUlrRCxNQURELEVBQ1NuRCxDQURULEVBQ1lDLElBQUlrRCxNQUFKLEdBQWF4RSxFQUFFLENBQUYsQ0FEekIsQ0FBZDtjQUdFc2dCLE1BQUYsQ0FBVTFGLFNBQVN2WixDQUFULENBQVYsRUFBdUJ1WixTQUFTdFosSUFBSXRCLEVBQUUsQ0FBRixDQUFiLENBQXZCO2NBQ0UsQ0FBRixNQUFTLENBQVQsSUFBY3VsQyxFQUFFYixnQkFBRixDQUFtQnJqQyxDQUFuQixFQUFzQkMsQ0FBdEIsRUFBeUJELElBQUlyQixFQUFFLENBQUYsQ0FBN0IsRUFBbUNzQixDQUFuQyxDQUFkOzs7Ozs7Ozs7O3NDQVFKO2lCQUNTNlosUUFBTCxDQUFjOFAsS0FBZDtnQkFDRyxDQUFDLEtBQUszdUIsT0FBTCxDQUFhZ2pCLE1BQWIsQ0FBb0J6akIsTUFBeEIsRUFBZ0M7cUJBQ3ZCc2YsUUFBTCxDQUFjcXFCLFFBQWQsQ0FBdUIsQ0FBdkIsRUFBeUIsQ0FBekIsRUFBMkIsS0FBS2xwQyxPQUFMLENBQWFpSSxLQUF4QyxFQUFnRCxLQUFLakksT0FBTCxDQUFha0ksTUFBN0Q7YUFESixNQUVPO3FCQUNFaWhDLGdCQUFMOztpQkFFQ3RxQixRQUFMLENBQWNvRSxTQUFkOzs7OztFQTNFMEIyZDs7QUNqQmxDOzs7Ozs7Ozs7Ozs7Ozs7QUFlQSxBQUNBLEFBQ0EsQUFDQSxJQUVxQndJOzs7b0JBRUxobEMsR0FBWixFQUNBOzs7Y0FDVXhCLE1BQU0yWixRQUFOLENBQWdCblksR0FBaEIsQ0FBTjtZQUNJeThCLFdBQVczaUMsSUFBRWdFLE1BQUYsQ0FBUzt1QkFDUCxFQURPO2dCQUVQLENBRk87ZUFHUCxDQUhPO3dCQUlQLENBSk87c0JBS1AsQ0FMTzt1QkFNUCxLQU5PO1NBQVQsRUFPWGtDLElBQUlwRSxPQVBPLENBQWY7O1lBU0lBLE9BQUosR0FBYzZnQyxRQUFkOzttSEFFTXo4QixHQWJWOztjQWdCU2lsQyxRQUFMLEdBQWlCLEVBQWpCO2NBQ0tDLE1BQUwsR0FBaUIsS0FBakIsQ0FqQko7Y0FrQlM5akMsSUFBTCxHQUFZLFFBQVo7Y0FDS3NDLEVBQUwsR0FBVWxGLE1BQU0rWixRQUFOLENBQWUsTUFBS25YLElBQXBCLENBQVY7O2NBRUsrZ0MsV0FBTDs7Ozs7OytCQUdHOWxDLE1BQU1ILE9BQU82WixVQUNwQjtnQkFDUzFaLFFBQVEsSUFBUixJQUFnQkEsUUFBUSxHQUF4QixJQUErQkEsUUFBUSxZQUF2QyxJQUF1REEsUUFBTyxVQUE5RCxJQUE0RUEsUUFBTyxXQUF4RixFQUFzRztxQkFDN0Y4bEMsV0FBTDs7Ozs7c0NBS1I7Z0JBQ1F2bUMsVUFBVSxLQUFLQSxPQUFuQjs7Z0JBRUl1cEMsS0FBSyxPQUFPdnBDLFFBQVF1cEMsRUFBZixJQUFxQixXQUFyQixHQUFtQyxDQUFuQyxHQUF1Q3ZwQyxRQUFRdXBDLEVBQXhEO2dCQUNJN2xDLElBQUsxRCxRQUFRMEQsQ0FBakIsQ0FKSjtnQkFLUTI3QixhQUFhbUssT0FBTy9ELFdBQVAsQ0FBbUJ6bEMsUUFBUXEvQixVQUEzQixDQUFqQixDQUxKO2dCQU1RQyxXQUFha0ssT0FBTy9ELFdBQVAsQ0FBbUJ6bEMsUUFBUXMvQixRQUEzQixDQUFqQixDQU5KOzs7OztnQkFXUUQsY0FBY0MsUUFBZCxJQUEwQnQvQixRQUFRcS9CLFVBQVIsSUFBc0JyL0IsUUFBUXMvQixRQUE1RCxFQUF1RTs7cUJBRTlEZ0ssTUFBTCxHQUFrQixJQUFsQjs2QkFDYSxDQUFiOzJCQUNhLEdBQWI7Ozt5QkFHU0UsT0FBT2pFLGNBQVAsQ0FBc0JsRyxVQUF0QixDQUFiO3VCQUNhbUssT0FBT2pFLGNBQVAsQ0FBc0JqRyxRQUF0QixDQUFiOzs7Z0JBR0lBLFdBQVdELFVBQVgsR0FBd0IsS0FBNUIsRUFBbUM7OEJBQ2pCLEtBQWQ7OztnQkFHQTRKLElBQUksS0FBS3BxQixRQUFiOztjQUVFa0UsR0FBRixDQUFPLENBQVAsRUFBVyxDQUFYLEVBQWVyZixDQUFmLEVBQWtCMjdCLFVBQWxCLEVBQThCQyxRQUE5QixFQUF3QyxLQUFLdC9CLE9BQUwsQ0FBYXlwQyxTQUFyRDtnQkFDSUYsT0FBTyxDQUFYLEVBQWM7b0JBQ04sS0FBS0QsTUFBVCxFQUFpQjs7O3NCQUdYMWxCLE1BQUYsQ0FBVTJsQixFQUFWLEVBQWUsQ0FBZjtzQkFDRXhtQixHQUFGLENBQU8sQ0FBUCxFQUFXLENBQVgsRUFBZXdtQixFQUFmLEVBQW9CbEssVUFBcEIsRUFBaUNDLFFBQWpDLEVBQTRDLENBQUMsS0FBS3QvQixPQUFMLENBQWF5cEMsU0FBMUQ7aUJBSkosTUFLTztzQkFDRDFtQixHQUFGLENBQU8sQ0FBUCxFQUFXLENBQVgsRUFBZXdtQixFQUFmLEVBQW9CakssUUFBcEIsRUFBK0JELFVBQS9CLEVBQTRDLENBQUMsS0FBS3IvQixPQUFMLENBQWF5cEMsU0FBMUQ7O2FBUFIsTUFTTzs7O2tCQUdEemxCLE1BQUYsQ0FBUyxDQUFULEVBQVcsQ0FBWDs7O2NBR0ZmLFNBQUY7Ozs7c0NBSUg7aUJBQ1N5bUIsS0FBTCxHQUFrQixJQUFsQixDQURKO2dCQUVRMzVCLElBQWMsS0FBSy9QLE9BQXZCO2dCQUNJcS9CLGFBQWFtSyxPQUFPL0QsV0FBUCxDQUFtQjExQixFQUFFc3ZCLFVBQXJCLENBQWpCLENBSEo7Z0JBSVFDLFdBQWFrSyxPQUFPL0QsV0FBUCxDQUFtQjExQixFQUFFdXZCLFFBQXJCLENBQWpCLENBSko7O2dCQU1XRCxhQUFhQyxRQUFiLElBQXlCLENBQUN2dkIsRUFBRTA1QixTQUE5QixJQUErQ3BLLGFBQWFDLFFBQWIsSUFBeUJ2dkIsRUFBRTA1QixTQUEvRSxFQUE2RjtxQkFDcEZDLEtBQUwsR0FBYyxLQUFkLENBRHlGOzs7aUJBSXhGTCxRQUFMLEdBQWtCLENBQ2Q3bkMsS0FBS29wQixHQUFMLENBQVV5VSxVQUFWLEVBQXVCQyxRQUF2QixDQURjLEVBRWQ5OUIsS0FBS0MsR0FBTCxDQUFVNDlCLFVBQVYsRUFBdUJDLFFBQXZCLENBRmMsQ0FBbEI7Ozs7Z0NBTUl0L0IsU0FDUjtnQkFDUUEsVUFBVUEsVUFBVUEsT0FBVixHQUFvQixLQUFLQSxPQUF2QztnQkFDSXVwQyxLQUFLLE9BQU92cEMsUUFBUXVwQyxFQUFmLElBQXFCLFdBQXJCO2NBQ0gsQ0FERyxHQUNDdnBDLFFBQVF1cEMsRUFEbEI7Z0JBRUk3bEMsSUFBSTFELFFBQVEwRCxDQUFoQixDQUpKOztpQkFNU2ltQyxXQUFMOztnQkFFSXRLLGFBQWFtSyxPQUFPL0QsV0FBUCxDQUFtQnpsQyxRQUFRcS9CLFVBQTNCLENBQWpCLENBUko7Z0JBU1FDLFdBQWFrSyxPQUFPL0QsV0FBUCxDQUFtQnpsQyxRQUFRcy9CLFFBQTNCLENBQWpCLENBVEo7O2dCQVdRb0MsWUFBYSxFQUFqQjs7Z0JBRUlrSSxjQUFhO3NCQUNOLENBQUUsQ0FBRixFQUFNbG1DLENBQU4sQ0FETTt1QkFFTixDQUFFLENBQUNBLENBQUgsRUFBTSxDQUFOLENBRk07dUJBR04sQ0FBRSxDQUFGLEVBQU0sQ0FBQ0EsQ0FBUCxDQUhNO3VCQUlOLENBQUVBLENBQUYsRUFBTSxDQUFOO2FBSlg7O2lCQU9NLElBQUlzTSxDQUFWLElBQWU0NUIsV0FBZixFQUE0QjtvQkFDcEJDLGFBQWF2ckIsU0FBU3RPLENBQVQsSUFBYyxLQUFLcTVCLFFBQUwsQ0FBYyxDQUFkLENBQWQsSUFBa0MvcUIsU0FBU3RPLENBQVQsSUFBYyxLQUFLcTVCLFFBQUwsQ0FBYyxDQUFkLENBQWpFO29CQUNJLEtBQUtDLE1BQUwsSUFBZ0JPLGNBQWMsS0FBS0gsS0FBbkMsSUFBOEMsQ0FBQ0csVUFBRCxJQUFlLENBQUMsS0FBS0gsS0FBdkUsRUFBK0U7OEJBQ2pFOXBDLElBQVYsQ0FBZ0JncUMsWUFBYTU1QixDQUFiLENBQWhCOzs7O2dCQUlKLENBQUMsS0FBS3M1QixNQUFWLEVBQW1COzZCQUNGRSxPQUFPakUsY0FBUCxDQUF1QmxHLFVBQXZCLENBQWI7MkJBQ2FtSyxPQUFPakUsY0FBUCxDQUF1QmpHLFFBQXZCLENBQWI7OzBCQUVVMS9CLElBQVYsQ0FBZSxDQUNQNHBDLE9BQU9qNUIsR0FBUCxDQUFXOHVCLFVBQVgsSUFBeUJrSyxFQURsQixFQUN1QkMsT0FBT2g1QixHQUFQLENBQVc2dUIsVUFBWCxJQUF5QmtLLEVBRGhELENBQWY7OzBCQUlVM3BDLElBQVYsQ0FBZSxDQUNQNHBDLE9BQU9qNUIsR0FBUCxDQUFXOHVCLFVBQVgsSUFBeUIzN0IsQ0FEbEIsRUFDdUI4bEMsT0FBT2g1QixHQUFQLENBQVc2dUIsVUFBWCxJQUF5QjM3QixDQURoRCxDQUFmOzswQkFJVTlELElBQVYsQ0FBZSxDQUNQNHBDLE9BQU9qNUIsR0FBUCxDQUFXK3VCLFFBQVgsSUFBeUI1N0IsQ0FEbEIsRUFDd0I4bEMsT0FBT2g1QixHQUFQLENBQVc4dUIsUUFBWCxJQUF3QjU3QixDQURoRCxDQUFmOzswQkFJVTlELElBQVYsQ0FBZSxDQUNQNHBDLE9BQU9qNUIsR0FBUCxDQUFXK3VCLFFBQVgsSUFBeUJpSyxFQURsQixFQUN3QkMsT0FBT2g1QixHQUFQLENBQVc4dUIsUUFBWCxJQUF3QmlLLEVBRGhELENBQWY7OztvQkFLSTdILFNBQVIsR0FBb0JBLFNBQXBCO21CQUNPLEtBQUtvSSxvQkFBTCxDQUEyQjlwQyxPQUEzQixDQUFQOzs7O0VBckoyQjRnQzs7QUNScEM7QUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUVBLElBQUltSixTQUFTO1NBQ0poTztDQURUOztBQUlBZ08sT0FBT0MsT0FBUCxHQUFpQjttQkFDRzF0QixhQURIOzRCQUVZc0Qsc0JBRlo7V0FHSlksS0FISTtZQUlKK2MsTUFKSTtXQUtKcUQsS0FMSTtXQU1KOTdCLEtBTkk7VUFPSjg4QjtDQVBiOztBQVVBbUksT0FBT0UsTUFBUCxHQUFnQjtnQkFDQzlELFVBREQ7WUFFSDVhLFFBRkc7YUFHRjhjLE9BSEU7YUFJRjdjLFNBSkU7WUFLSHFkLE1BTEc7VUFNTEMsSUFOSztVQU9MakMsSUFQSzthQVFGbGIsU0FSRTtVQVNMb2QsSUFUSztZQVVISztDQVZiOztBQWFBVyxPQUFPRyxLQUFQLEdBQWU7cUJBQ081N0IsZUFEUDtrQkFFT1o7Q0FGdEIsQ0FLQTs7OzsifQ==
